name: HumanEval_20_find_closest_elements
language: julia
results:
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp41sm3t5d.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp41sm3t5d.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp41sm3t5d.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp41sm3t5d.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                    min_diff = abs(numbers[i] - numbers[j])\n               \
    \     min_pair = (numbers[i], numbers[j])\n                end\n            end\n\
    \        end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl3dfs4xj.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3dfs4xj.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3dfs4xj.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl3dfs4xj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_index = 1\n    for i in\
    \ 1:n-1\n        if abs(numbers[i] - numbers[i+1]) < min_diff\n            min_diff\
    \ = abs(numbers[i] - numbers[i+1])\n            min_index = i\n        end\n \
    \   end\n    return (numbers[min_index], numbers[min_index+1])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqergp_oy.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqergp_oy.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqergp_oy.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqergp_oy.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqergp_oy.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqergp_oy.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqergp_oy.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqergp_oy.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqergp_oy.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqergp_oy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    closest = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < abs(closest[1] - closest[2])\n      \
    \          closest = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return closest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2m4qmmyt.jl:26\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2m4qmmyt.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2m4qmmyt.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2m4qmmyt.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfnblt7vj.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnblt7vj.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnblt7vj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfnblt7vj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # TODO: Implement this function\n    # Hint: You'll need to use\
    \ a for loop and keep track of the closest pair of numbers you've seen so far\n\
    \    # Hint: You'll need to use the abs function to get the absolute value of\
    \ a number\n    # Hint: You'll need to use the sort function to sort a list of\
    \ numbers\n    # Hint: You'll need to use the tuple function to create a tuple\
    \ of two numbers\n    # Hint: You'll need to use the push! function to add an\
    \ element to the end of a list\n    # Hint: You'll need to use the popfirst! function\
    \ to remove the first element from a list\n    # Hint: You'll need to use the\
    \ append! function to add an element to the end of a list\n    # Hint: You'll\
    \ need to use the first function to get the first element of a list\n    # Hint:\
    \ You'll need to use the last function to get the last element of a list\n   \
    \ # Hint: You'll need to use the length function to get the length of a list\n\
    \    # Hint: You'll need to use the typeof function to get the type of a variable\n\
    \    # Hint: You'll need to use the isa function to check if a variable is of\
    \ a certain type\n    # Hint: You'll need to use the isequal function to check\
    \ if two variables are equal\n    # Hint: You'll need to use the isless function\
    \ to check if one variable is less than another\n    # Hint: You'll need to use\
    \ the isless function to check if one variable is greater than another\n    #\
    \ Hint: You'll need to use the isless function to check if one variable is less\
    \ than or equal to another\n    # Hint: You'll need to use the isless function\
    \ to check if one variable is greater than or equal to another\n    # Hint: You'll\
    \ need to use the isless function to check if one variable is not equal to another\n\
    \    # Hint: You'll need to use the isless function to check if one variable is\
    \ not less than another\n    # Hint: You'll need to use the isless function to\
    \ check if one variable is not greater than another\n    # Hint: You'll need to\
    \ use the isless function to check if one variable is not less than or equal to\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9rw015h_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9rw015h_.jl:1\n\
    in expression starting at /tmp/tmp9rw015h_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    diff = abs(numbers[1] - numbers[2])\n    num1 = numbers[1]\n    num2 = numbers[2]\n\
    \    for i in 1:n-1\n        if abs(numbers[i] - numbers[i+1]) < diff\n      \
    \      diff = abs(numbers[i] - numbers[i+1])\n            num1 = numbers[i]\n\
    \            num2 = numbers[i+1]\n        end\n    end\n    return (num1, num2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplsdhj6s1.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmplsdhj6s1.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsdhj6s1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplsdhj6s1.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplsdhj6s1.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsdhj6s1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplsdhj6s1.jl:32\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplsdhj6s1.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsdhj6s1.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplsdhj6s1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbu3fbw81.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbu3fbw81.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbu3fbw81.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbu3fbw81.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #print(numbers)\n    #print(numbers[2]-numbers[1])\n  \
    \  #print(numbers[3]-numbers[2])\n    #print(numbers[4]-numbers[3])\n    #print(numbers[5]-numbers[4])\n\
    \    #print(numbers[6]-numbers[5])\n    #print(numbers[6]-numbers[1])\n    #print(numbers[5]-numbers[1])\n\
    \    #print(numbers[4]-numbers[1])\n    #print(numbers[3]-numbers[1])\n    #print(numbers[2]-numbers[1])\n\
    \    #print(numbers[1]-numbers[1])\n    #print(numbers[1]-numbers[2])\n    #print(numbers[1]-numbers[3])\n\
    \    #print(numbers[1]-numbers[4])\n    #print(numbers[1]-numbers[5])\n    #print(numbers[1]-numbers[6])\n\
    \    #print(numbers[2]-numbers[6])\n    #print(numbers[3]-numbers[6])\n    #print(numbers[4]-numbers[6])\n\
    \    #print(numbers[5]-numbers[6])\n    #print(numbers[6]-numbers[6])\n    #print(numbers[6]-numbers[5])\n\
    \    #print(numbers[6]-numbers[4])\n    #print(numbers[6]-numbers[3])\n    #print(numbers[6]-numbers[2])\n\
    \    #print(numbers[6]-numbers[1])\n    #print(numbers[5]-numbers[1])\n    #print(numbers[4]-numbers[1])\n\
    \    #print(numbers[3]-numbers[1])\n    #print(numbers[2]-numbers[1])\n    #print(numbers[1]-numbers[1])\n\
    \    #print(numbers[1]-numbers\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavggl9b2.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavggl9b2.jl:1\n\
    in expression starting at /tmp/tmpavggl9b2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # TODO: implement this function\n    return (0.0, 0.0)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvw7cpsho.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvw7cpsho.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvw7cpsho.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvw7cpsho.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvw7cpsho.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvw7cpsho.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvw7cpsho.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvw7cpsho.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvw7cpsho.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvw7cpsho.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvw7cpsho.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvw7cpsho.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvw7cpsho.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvw7cpsho.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvw7cpsho.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvw7cpsho.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7f8e08f4.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7f8e08f4.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7f8e08f4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7f8e08f4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    a = sort(numbers)\n\
    \    b = a[2:end]\n    c = a[1:end-1]\n    d = b .- c\n    e = findmin(d)\n  \
    \  f = findall(d .== e)\n    g = c[f]\n    h = b[f]\n    return (g,h)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptn2p3sn5.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\\n  DimensionMismatch(\"arrays could not be broadcast to a common size;\
    \ got a dimension with lengths 5 and 2\")\\n  Stacktrace:\\n    [1] _bcs1\\n \
    \     @ ./broadcast.jl:501 [inlined]\\n    [2] _bcs\\n      @ ./broadcast.jl:495\
    \ [inlined]\\n    [3] broadcast_shape\\n      @ ./broadcast.jl:489 [inlined]\\\
    n    [4] combine_axes\\n      @ ./broadcast.jl:484 [inlined]\\n    [5] instantiate\\\
    n      @ ./broadcast.jl:266 [inlined]\\n    [6] materialize\\n      @ ./broadcast.jl:883\
    \ [inlined]\\n    [7] find_closest_elements(numbers::Vector{Float64})\\n     \
    \ @ Main /tmp/tmptn2p3sn5.jl:16\\n    [8] macro expansion\\n      @ /tmp/tmptn2p3sn5.jl:26\
    \ [inlined]\\n    [9] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmptn2p3sn5.jl:25\\ntest\
    \ set: Error During Test at /tmp/tmptn2p3sn5.jl:27\\n  Test threw exception\\\
    n  Expression: candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 4\
    \ and 2\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:489 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:883 [inlined]\\n    [7] find_closest_elements(numbers::Vector{Float64})\\\
    n      @ Main /tmp/tmptn2p3sn5.jl:16\\n    [8] macro expansion\\n      @ /tmp/tmptn2p3sn5.jl:27\
    \ [inlined]\\n    [9] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmptn2p3sn5.jl:25\\ntest\
    \ set: Error During Test at /tmp/tmptn2p3sn5.jl:28\\n  Test threw exception\\\
    n  Expression: candidate("
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Your code here\n    # You may find the abs() function useful\n\
    \    # You may find the sort() function useful\n    # You may find the length()\
    \ function useful\n    # You may find the tuple() function useful\n    # You may\
    \ find the zip() function useful\n    # You may find the enumerate() function\
    \ useful\n    # You may find the minimum() function useful\n    # You may find\
    \ the maximum() function useful\n    # You may find the range() function useful\n\
    \    # You may find the sum() function useful\n    # You may find the map() function\
    \ useful\n    # You may find the filter() function useful\n    # You may find\
    \ the reduce() function useful\n    # You may find the zip() function useful\n\
    \    # You may find the enumerate() function useful\n    # You may find the minimum()\
    \ function useful\n    # You may find the maximum() function useful\n    # You\
    \ may find the range() function useful\n    # You may find the sum() function\
    \ useful\n    # You may find the map() function useful\n    # You may find the\
    \ filter() function useful\n    # You may find the reduce() function useful\n\
    \    # You may find the zip() function useful\n    # You may find the enumerate()\
    \ function useful\n    # You may find the minimum() function useful\n    # You\
    \ may find the maximum() function useful\n    # You may find the range() function\
    \ useful\n    # You may find the sum() function useful\n    # You may find the\
    \ map() function useful\n    # You may find the filter() function useful\n   \
    \ # You may find the reduce() function useful\n    # You may find the zip() function\
    \ useful\n    # You may find the enumerate() function useful\n    # You may find\
    \ the minimum() function useful\n    # You may find the maximum() function useful\n\
    \    # You may find the range() function useful\n    # You may find the sum()\
    \ function useful\n    # You may find the map() function useful\n    # You may\
    \ find the filter() function useful\n    # You may find the reduce() function\
    \ useful\n    # You may find the zip() function useful\n    # You may find the\
    \ enumerate() function useful\n    # You may find the minimum() function useful\n\
    \    # You may find the maximum() function useful\n    # You may find the range()\
    \ function useful\n    # You may find\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprsw338zy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprsw338zy.jl:1\n\
    in expression starting at /tmp/tmprsw338zy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Find the minimum distance between any two numbers\n    min_distance\
    \ = abs(numbers[1] - numbers[2])\n    min_numbers = (numbers[1], numbers[2])\n\
    \    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_distance\n                min_distance\
    \ = abs(numbers[i] - numbers[j])\n                min_numbers = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7w58r76.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpx7w58r76.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx7w58r76.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7w58r76.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #return (numbers[1], numbers[2])\n    #return (numbers[end-1],\
    \ numbers[end])\n    #return (numbers[1], numbers[end])\n    #return (numbers[end-1],\
    \ numbers[1])\n    #return (numbers[1], numbers[end-1])\n    #return (numbers[end],\
    \ numbers[1])\n    #return (numbers[end], numbers[end-1])\n    #return (numbers[end-1],\
    \ numbers[end])\n    #return (numbers[end], numbers[end])\n    #return (numbers[end-1],\
    \ numbers[end-1])\n    #return (numbers[1], numbers[1])\n    #return (numbers[2],\
    \ numbers[2])\n    #return (numbers[3], numbers[3])\n    #return (numbers[4],\
    \ numbers[4])\n    #return (numbers[5], numbers[5])\n    #return (numbers[6],\
    \ numbers[6])\n    #return (numbers[7], numbers[7])\n    #return (numbers[8],\
    \ numbers[8])\n    #return (numbers[9], numbers[9])\n    #return (numbers[10],\
    \ numbers[10])\n    #return (numbers[11], numbers[11])\n    #return (numbers[12],\
    \ numbers[12])\n    #return (numbers[13], numbers[13])\n    #return (numbers[14],\
    \ numbers[14])\n    #return (numbers[15], numbers[15])\n    #return (numbers[16],\
    \ numbers[16])\n    #return (numbers[17], numbers[17])\n    #return (numbers[18],\
    \ numbers[18])\n    #return (numbers[19], numbers[19])\n    #return (numbers[20],\
    \ numbers[20])\n    #return (numbers[21], numbers[21])\n    #return (numbers[22],\
    \ numbers[22])\n    #return (numbers[23], numbers[23])\n    #return (numbers[24\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp30ossf8z.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp30ossf8z.jl:1\n\
    in expression starting at /tmp/tmp30ossf8z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnaw0fnub.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpnaw0fnub.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnaw0fnub.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnaw0fnub.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2u701qec.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2u701qec.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2u701qec.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2u701qec.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # TODO: implement this function\n    # Hint: you can use the\
    \ function abs(x) to get the absolute value of x\n    # Hint: you can use the\
    \ function sort(x) to sort the elements of x in ascending order\n    # Hint: you\
    \ can use the function sortperm(x) to get the permutation that would sort x\n\
    \    # Hint: you can use the function sortperm(x)[1] to get the index of the smallest\
    \ element of x\n    # Hint: you can use the function sortperm(x)[end] to get the\
    \ index of the largest element of x\n    # Hint: you can use the function sortperm(x)[end-1]\
    \ to get the index of the second largest element of x\n    # Hint: you can use\
    \ the function sortperm(x)[2] to get the index of the second smallest element\
    \ of x\n    # Hint: you can use the function sortperm(x)[1:2] to get the indices\
    \ of the two smallest elements of x\n    # Hint: you can use the function sortperm(x)[end-1:end]\
    \ to get the indices of the two largest elements of x\n    # Hint: you can use\
    \ the function sortperm(x)[end-1:end] to get the indices of the two largest elements\
    \ of x\n    # Hint: you can use the function sortperm(x)[end-1:end] to get the\
    \ indices of the two largest elements of x\n    # Hint: you can use the function\
    \ sortperm(x)[end-1:end] to get the indices of the two largest elements of x\n\
    \    # Hint: you can use the function sortperm(x)[end-1:end] to get the indices\
    \ of the two largest elements of x\n    # Hint: you can use the function sortperm(x)[end-1:end]\
    \ to get the indices of the two largest elements of x\n    # Hint: you can use\
    \ the function sortperm(x)[end-1:end] to get the indices of the two largest elements\
    \ of x\n    # Hint: you can use the function sortperm(x)[end-1:end] to get the\
    \ indices of the two largest elements of x\n    # Hint: you can use the function\
    \ sortperm(x)[end-1:end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp70bb7tn9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp70bb7tn9.jl:1\n\
    in expression starting at /tmp/tmp70bb7tn9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3bq1366i.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3bq1366i.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3bq1366i.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3bq1366i.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3bq1366i.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3bq1366i.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3bq1366i.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3bq1366i.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3bq1366i.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3bq1366i.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3bq1366i.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3bq1366i.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3bq1366i.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3bq1366i.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3bq1366i.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3bq1366i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The list of numbers must\
    \ be at least two numbers long\")\n    end\n    min_diff = Inf\n    min_pair =\
    \ (0.0, 0.0)\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdee38oha.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpdee38oha.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdee38oha.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdee38oha.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"numbers must have at\
    \ least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_diff_indices = (1, 2)\n    for i in 1:length(numbers)\n        for j\
    \ in i+1:length(numbers)\n            diff = abs(numbers[i] - numbers[j])\n  \
    \          if diff < min_diff\n                min_diff = diff\n             \
    \   min_diff_indices = (i, j)\n            end\n        end\n    end\n    if numbers[min_diff_indices[1]]\
    \ < numbers[min_diff_indices[2]]\n        return (numbers[min_diff_indices[1]],\
    \ numbers[min_diff_indices[2]])\n    else\n        return (numbers[min_diff_indices[2]],\
    \ numbers[min_diff_indices[1]])\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbn7u6okn.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbn7u6okn.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbn7u6okn.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbn7u6okn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg9r6kxv4.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpg9r6kxv4.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg9r6kxv4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg9r6kxv4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprql1h8ba.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmprql1h8ba.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmprql1h8ba.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprql1h8ba.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprql1h8ba.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprql1h8ba.jl:10\n   [3] macro expansion\n     @ /tmp/tmprql1h8ba.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprql1h8ba.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprql1h8ba.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprql1h8ba.jl:10\n   [3] macro expansion\n     @ /tmp/tmprql1h8ba.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprql1h8ba.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprql1h8ba.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprql1h8ba.jl:10\n   [3] macro expansion\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprql1h8ba.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qlgu40y.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qlgu40y.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qlgu40y.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp9qlgu40y.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9qlgu40y.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qlgu40y.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp9qlgu40y.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9qlgu40y.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qlgu40y.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp9qlgu40y.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9qlgu40y.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qlgu40y.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp9qlgu40y.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9qlgu40y.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qlgu40y.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qlgu40y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   closest = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n     \
    \   for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < diff\n                diff = abs(numbers[i] - numbers[j])\n              \
    \  closest = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return closest\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsjvsgju0.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsjvsgju0.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsjvsgju0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjvsgju0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    a = sort(numbers)\n    b = a[2] - a[1]\n\
    \    for i in 1:length(a)-1\n        if a[i+1] - a[i] < b\n            b = a[i+1]\
    \ - a[i]\n            c = a[i]\n            d = a[i+1]\n        end\n    end\n\
    \    return (c,d)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv9d55w4f.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\\n  UndefVarError: c not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpv9d55w4f.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpv9d55w4f.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv9d55w4f.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpv9d55w4f.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\\n  UndefVarError: c not\
    \ defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpv9d55w4f.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpv9d55w4f.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv9d55w4f.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpv9d55w4f.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\\n  UndefVarError: c\
    \ not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpv9d55w4f.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpv9d55w4f.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv9d55w4f.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpv9d55w4f.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\\n  UndefVarError: c\
    \ not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpv9d55w4f.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpv9d55w4f.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmnofpwp6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmnofpwp6.jl:1\n\
    in expression starting at /tmp/tmpmnofpwp6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    num = sort(numbers)\n    diff = num[2]\
    \ - num[1]\n    for i in 2:length(num)-1\n        if num[i+1] - num[i] < diff\n\
    \            diff = num[i+1] - num[i]\n            num1 = num[i]\n           \
    \ num2 = num[i+1]\n        end\n    end\n    return num1, num2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2ray3sx3.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\\n  UndefVarError: num1 not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp2ray3sx3.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp2ray3sx3.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2ray3sx3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp2ray3sx3.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\\n  UndefVarError: num1 not\
    \ defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp2ray3sx3.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp2ray3sx3.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2ray3sx3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp2ray3sx3.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\\n  UndefVarError: num1\
    \ not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp2ray3sx3.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp2ray3sx3.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2ray3sx3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp2ray3sx3.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\\n  UndefVarError: num1\
    \ not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp2ray3sx3.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp2ray3sx3.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/packa"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwis4h6ou.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwis4h6ou.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwis4h6ou.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwis4h6ou.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppkymrsbc.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppkymrsbc.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkymrsbc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppkymrsbc.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppkymrsbc.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkymrsbc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppkymrsbc.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppkymrsbc.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkymrsbc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppkymrsbc.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppkymrsbc.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkymrsbc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmppkymrsbc.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppkymrsbc.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkymrsbc.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppkymrsbc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvjml3ery.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjml3ery.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjml3ery.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjml3ery.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpllwp5w0u.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpllwp5w0u.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpllwp5w0u.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpllwp5w0u.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        throw(ArgumentError(\"numbers must have at least two elements\"\
    ))\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n    min_diff_index =\
    \ 1\n    for i in 2:n-1\n        if abs(numbers[i] - numbers[i+1]) < min_diff\n\
    \            min_diff = abs(numbers[i] - numbers[i+1])\n            min_diff_index\
    \ = i\n        end\n    end\n    return (numbers[min_diff_index], numbers[min_diff_index+1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1mli__lj.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1mli__lj.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1mli__lj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1mli__lj.jl:32\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1mli__lj.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1mli__lj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1mli__lj.jl:33\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1mli__lj.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1mli__lj.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1mli__lj.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i = 1:n-1\n\
    \        for j = i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0ypvik7u.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0ypvik7u.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ypvik7u.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ypvik7u.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpc5g0ci3d.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc5g0ci3d.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc5g0ci3d.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5g0ci3d.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb93z7h2w.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpb93z7h2w.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb93z7h2w.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb93z7h2w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzz7635yq.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmpzz7635yq.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmpzz7635yq.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz7635yq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzz7635yq.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpzz7635yq.jl:10\n   [3] macro expansion\n     @ /tmp/tmpzz7635yq.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz7635yq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzz7635yq.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpzz7635yq.jl:10\n   [3] macro expansion\n     @ /tmp/tmpzz7635yq.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz7635yq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzz7635yq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpzz7635yq.jl:10\n   [3] macro expansion\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzz7635yq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = Inf\n    min_pair = (0.0, 0.0)\n\
    \    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppancezyy.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppancezyy.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppancezyy.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppancezyy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n == 2\n        return (numbers[1], numbers[2])\n    end\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp62xjouw0.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp62xjouw0.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62xjouw0.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp62xjouw0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5tyccjic.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5tyccjic.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tyccjic.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tyccjic.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpez817wpp.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpez817wpp.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpez817wpp.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpez817wpp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0m2yopjv.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0m2yopjv.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0m2yopjv.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0m2yopjv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaejomwkt.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpaejomwkt.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaejomwkt.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaejomwkt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp0hjukg5.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpp0hjukg5.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp0hjukg5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp0hjukg5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6egy9e2j.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6egy9e2j.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6egy9e2j.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6egy9e2j.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphbcbbisf.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphbcbbisf.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbcbbisf.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbcbbisf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 2:length(numbers)-1\n \
    \       if abs(numbers[i] - numbers[i+1]) < min_diff\n            min_diff = abs(numbers[i]\
    \ - numbers[i+1])\n            min_pair = (numbers[i], numbers[i+1])\n       \
    \ end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqefbtn7g.jl:26\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqefbtn7g.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqefbtn7g.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqefbtn7g.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqefbtn7g.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqefbtn7g.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqefbtn7g.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqefbtn7g.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqefbtn7g.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqefbtn7g.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpucbfjfxe.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpucbfjfxe.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpucbfjfxe.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpucbfjfxe.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxpz6frzd.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxpz6frzd.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxpz6frzd.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxpz6frzd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    a = sort(numbers)\n    b = a[2] - a[1]\n\
    \    c = (a[1], a[2])\n    for i in 1:length(a)-1\n        if a[i+1] - a[i] <\
    \ b\n            b = a[i+1] - a[i]\n            c = (a[i], a[i+1])\n        end\n\
    \    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7w7lgjw0.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmp7w7lgjw0.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmp7w7lgjw0.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w7lgjw0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp7w7lgjw0.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp7w7lgjw0.jl:10\n   [3] macro expansion\n     @ /tmp/tmp7w7lgjw0.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w7lgjw0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp7w7lgjw0.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp7w7lgjw0.jl:10\n   [3] macro expansion\n     @ /tmp/tmp7w7lgjw0.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w7lgjw0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp7w7lgjw0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp7w7lgjw0.jl:10\n   [3] macro expansion\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7w7lgjw0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvqtdrvit.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvqtdrvit.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqtdrvit.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvqtdrvit.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwlbu3qvw.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwlbu3qvw.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwlbu3qvw.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwlbu3qvw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = Inf\n    min_pair = (0.0, 0.0)\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp80m91za6.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp80m91za6.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp80m91za6.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp80m91za6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8hzri670.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmp8hzri670.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmp8hzri670.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8hzri670.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp8hzri670.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp8hzri670.jl:10\n   [3] macro expansion\n     @ /tmp/tmp8hzri670.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8hzri670.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp8hzri670.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp8hzri670.jl:10\n   [3] macro expansion\n     @ /tmp/tmp8hzri670.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8hzri670.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp8hzri670.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp8hzri670.jl:10\n   [3] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hzri670.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzx7kekmp.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzx7kekmp.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzx7kekmp.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzx7kekmp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   closest = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n     \
    \   for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < diff\n                    diff = abs(numbers[i] - numbers[j])\n\
    \                    closest = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return closest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp76lcmbjt.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp76lcmbjt.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp76lcmbjt.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp76lcmbjt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphienl6ph.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphienl6ph.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphienl6ph.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphienl6ph.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphienl6ph.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphienl6ph.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphienl6ph.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphienl6ph.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphienl6ph.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphienl6ph.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphienl6ph.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphienl6ph.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphienl6ph.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphienl6ph.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphienl6ph.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphienl6ph.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphgvjy2zg.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphgvjy2zg.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphgvjy2zg.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgvjy2zg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpasp17kaq.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpasp17kaq.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpasp17kaq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpasp17kaq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqlkjn5q3.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqlkjn5q3.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqlkjn5q3.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqlkjn5q3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplwj3on5l.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmplwj3on5l.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplwj3on5l.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwj3on5l.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #return (numbers[1], numbers[2])\n    #return (numbers[end-1],\
    \ numbers[end])\n    #return (numbers[1], numbers[end])\n    #return (numbers[end-1],\
    \ numbers[1])\n    #return (numbers[1], numbers[1])\n    #return (numbers[end],\
    \ numbers[end])\n    #return (numbers[1], numbers[end])\n    #return (numbers[end-1],\
    \ numbers[1])\n    #return (numbers[1], numbers[end-1])\n    #return (numbers[end],\
    \ numbers[1])\n    #return (numbers[end-1], numbers[end])\n    #return (numbers[end],\
    \ numbers[end-1])\n    #return (numbers[end-1], numbers[end])\n    #return (numbers[end],\
    \ numbers[end-1])\n    #return (numbers[1], numbers[end])\n    #return (numbers[end],\
    \ numbers[1])\n    #return (numbers[end-1], numbers[1])\n    #return (numbers[1],\
    \ numbers[end-1])\n    #return (numbers[end], numbers[1])\n    #return (numbers[1],\
    \ numbers[end])\n    #return (numbers[end-1], numbers[end])\n    #return (numbers[end],\
    \ numbers[end-1])\n    #return (numbers[end-1], numbers[end])\n    #return (numbers[end],\
    \ numbers[end-1])\n    #return (numbers[end-1], numbers[end])\n    #return (numbers[end],\
    \ numbers[end-1])\n    #return (numbers[end-1], numbers[end])\n    #return (numbers[end],\
    \ numbers[end-1])\n    #return (numbers[end-1], numbers[end])\n    #return (numbers[end],\
    \ numbers[end-1])\n    #return (numbers[end-1], numbers[end])\n    #return (numbers[end\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6iri0i9h.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6iri0i9h.jl:1\n\
    in expression starting at /tmp/tmp6iri0i9h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0,\
    \ 2.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiv51koqj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiv51koqj.jl:1\n\
    in expression starting at /tmp/tmpiv51koqj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkh4e5c5p.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkh4e5c5p.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkh4e5c5p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkh4e5c5p.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpkh4e5c5p.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkh4e5c5p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkh4e5c5p.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkh4e5c5p.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkh4e5c5p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkh4e5c5p.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkh4e5c5p.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkh4e5c5p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkh4e5c5p.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpkh4e5c5p.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkh4e5c5p.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkh4e5c5p.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    closest_elements = (numbers[1], numbers[2])\n\
    \    closest_distance = abs(numbers[1] - numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < closest_distance\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = abs(numbers[i] - numbers[j])\n           \
    \ end\n        end\n    end\n    return closest_elements\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4qcoy2v.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpw4qcoy2v.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw4qcoy2v.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4qcoy2v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #println(numbers)\n\
    \    #println(length(numbers))\n    #println(numbers[1])\n    #println(numbers[2])\n\
    \    #println(numbers[3])\n    #println(numbers[4])\n    #println(numbers[5])\n\
    \    #println(numbers[6])\n    #println(numbers[7])\n    #println(numbers[8])\n\
    \    #println(numbers[9])\n    #println(numbers[10])\n    #println(numbers[11])\n\
    \    #println(numbers[12])\n    #println(numbers[13])\n    #println(numbers[14])\n\
    \    #println(numbers[15])\n    #println(numbers[16])\n    #println(numbers[17])\n\
    \    #println(numbers[18])\n    #println(numbers[19])\n    #println(numbers[20])\n\
    \    #println(numbers[21])\n    #println(numbers[22])\n    #println(numbers[23])\n\
    \    #println(numbers[24])\n    #println(numbers[25])\n    #println(numbers[26])\n\
    \    #println(numbers[27])\n    #println(numbers[28])\n    #println(numbers[29])\n\
    \    #println(numbers[30])\n    #println(numbers[31])\n    #println(numbers[32])\n\
    \    #println(numbers[33])\n    #println(numbers[34])\n    #println(numbers[35])\n\
    \    #println(numbers[36])\n    #println(numbers[37])\n    #println(numbers[38])\n\
    \    #println(numbers[39])\n    #println(numbers[40])\n    #println(numbers[41])\n\
    \    #println(numbers[42])\n    #println(numbers[43])\n    #println(numbers[44])\n\
    \    #println(numbers[45])\n    #println(numbers[46])\n    #println(numbers[47])\n\
    \    #println(numbers[\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpojux1jeo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpojux1jeo.jl:1\n\
    in expression starting at /tmp/tmpojux1jeo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd032i338.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpd032i338.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd032i338.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd032i338.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpep0reakc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpep0reakc.jl:1\n\
    in expression starting at /tmp/tmpep0reakc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    diff\
    \ = abs(numbers[1] - numbers[2])\n    for i in 1:length(numbers)-1\n        if\
    \ abs(numbers[i] - numbers[i+1]) < diff\n            diff = abs(numbers[i] - numbers[i+1])\n\
    \            num1 = numbers[i]\n            num2 = numbers[i+1]\n        end\n\
    \    end\n    return (num1, num2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnyvz4b92.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\\n  UndefVarError: num1 not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpnyvz4b92.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpnyvz4b92.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnyvz4b92.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnyvz4b92.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\\n  UndefVarError: num1 not\
    \ defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpnyvz4b92.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpnyvz4b92.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnyvz4b92.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnyvz4b92.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\\n  UndefVarError: num1\
    \ not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpnyvz4b92.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpnyvz4b92.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnyvz4b92.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnyvz4b92.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\\n  UndefVarError: num1\
    \ not defined\\n  Stacktrace:\\n   [1] find_closest_elements(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpnyvz4b92.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpnyvz4b92.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/packa"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #print(numbers)\n\
    \    #print(length(numbers))\n    #print(numbers[1])\n    #print(numbers[2])\n\
    \    #print(numbers[3])\n    #print(numbers[4])\n    #print(numbers[5])\n    #print(numbers[6])\n\
    \    #print(numbers[7])\n    #print(numbers[8])\n    #print(numbers[9])\n    #print(numbers[10])\n\
    \    #print(numbers[11])\n    #print(numbers[12])\n    #print(numbers[13])\n \
    \   #print(numbers[14])\n    #print(numbers[15])\n    #print(numbers[16])\n  \
    \  #print(numbers[17])\n    #print(numbers[18])\n    #print(numbers[19])\n   \
    \ #print(numbers[20])\n    #print(numbers[21])\n    #print(numbers[22])\n    #print(numbers[23])\n\
    \    #print(numbers[24])\n    #print(numbers[25])\n    #print(numbers[26])\n \
    \   #print(numbers[27])\n    #print(numbers[28])\n    #print(numbers[29])\n  \
    \  #print(numbers[30])\n    #print(numbers[31])\n    #print(numbers[32])\n   \
    \ #print(numbers[33])\n    #print(numbers[34])\n    #print(numbers[35])\n    #print(numbers[36])\n\
    \    #print(numbers[37])\n    #print(numbers[38])\n    #print(numbers[39])\n \
    \   #print(numbers[40])\n    #print(numbers[41])\n    #print(numbers[42])\n  \
    \  #print(numbers[43])\n    #print(numbers[44])\n    #print(numbers[45])\n   \
    \ #print(numbers[46])\n    #print(numbers[47])\n    #print(numbers[\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggsd9aq8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggsd9aq8.jl:1\n\
    in expression starting at /tmp/tmpggsd9aq8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw1tqaiui.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1tqaiui.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1tqaiui.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1tqaiui.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp48_dvd0w.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp48_dvd0w.jl:1\n\
    in expression starting at /tmp/tmp48_dvd0w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1vvai1o_.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1vvai1o_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1vvai1o_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1vvai1o_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The list must have at\
    \ least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i = 1:length(numbers) - 1\n\
    \        for j = i + 1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg3p1nq4g.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpg3p1nq4g.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg3p1nq4g.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg3p1nq4g.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv19sec88.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpv19sec88.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv19sec88.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv19sec88.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk41e37fu.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpk41e37fu.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk41e37fu.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk41e37fu.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   num1 = numbers[1]\n    num2 = numbers[2]\n    for i in 1:length(numbers)-1\n\
    \        if abs(numbers[i] - numbers[i+1]) < diff\n            diff = abs(numbers[i]\
    \ - numbers[i+1])\n            num1 = numbers[i]\n            num2 = numbers[i+1]\n\
    \        end\n    end\n    return (num1, num2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1nlorcm3.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1nlorcm3.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nlorcm3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1nlorcm3.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1nlorcm3.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nlorcm3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1nlorcm3.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1nlorcm3.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nlorcm3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nlorcm3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_index = (1, 2)\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_index = (i, j)\n       \
    \     end\n        end\n    end\n    return (numbers[min_index[1]], numbers[min_index[2]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvlm5z2ql.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvlm5z2ql.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvlm5z2ql.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvlm5z2ql.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = Inf\n    min_pair = (0.0, 0.0)\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmo6outde.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpmo6outde.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmo6outde.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmo6outde.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #numbers = sort(numbers, rev=true)\n    #numbers = sort(numbers,\
    \ by=abs)\n    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers,\
    \ by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers\
    \ = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n\
    \    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers,\
    \ by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers\
    \ = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n\
    \    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers,\
    \ by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers\
    \ = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n\
    \    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers,\
    \ by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers\
    \ = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n\
    \    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers = sort(numbers,\
    \ by=abs, rev=true)\n    #numbers = sort(numbers, by=abs, rev=true)\n    #numbers\
    \ = sort(numbers, by=abs, rev=true\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfma08ezj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfma08ezj.jl:1\n\
    in expression starting at /tmp/tmpfma08ezj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    diff = zeros(n-1)\n    for i in 1:n-1\n        diff[i] = abs(numbers[i+1]\
    \ - numbers[i])\n    end\n    min_diff = findmin(diff)\n    min_index = findall(diff\
    \ .== min_diff)\n    if numbers[min_index[1]] < numbers[min_index[1]+1]\n    \
    \    return (numbers[min_index[1]], numbers[min_index[1]+1])\n    else\n     \
    \   return (numbers[min_index[1]+1], numbers[min_index[1]])\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6tw2xegl.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 5\
    \ and 2\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:501 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:495 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:489 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:484\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:266 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:883 [inlined]\n    [7] find_closest_elements(numbers::Vector{Float64})\n\
    \      @ Main /tmp/tmp6tw2xegl.jl:17\n    [8] macro expansion\n      @ /tmp/tmp6tw2xegl.jl:29\
    \ [inlined]\n    [9] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp6tw2xegl.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6tw2xegl.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 4 and\
    \ 2\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:501 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:495 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:489 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:484\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:266 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:883 [inlined]\n    [7] find_closest_elements(numbers::Vector{Float64})\n\
    \      @ Main /tmp/tmp6tw2xegl.jl:17\n    [8] macro expansion\n      @ /tmp/tmp6tw2xegl.jl:30\
    \ [inlined]\n    [9] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp6tw2xegl.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6tw2xegl.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Dimens"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tw2xegl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8hspu2om.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hspu2om.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hspu2om.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8hspu2om.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8hspu2om.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hspu2om.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8hspu2om.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8hspu2om.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hspu2om.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8hspu2om.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8hspu2om.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hspu2om.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8hspu2om.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8hspu2om.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hspu2om.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hspu2om.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp03lyctsc.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmp03lyctsc.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmp03lyctsc.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp03lyctsc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp03lyctsc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp03lyctsc.jl:10\n   [3] macro expansion\n     @ /tmp/tmp03lyctsc.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp03lyctsc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp03lyctsc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp03lyctsc.jl:10\n   [3] macro expansion\n     @ /tmp/tmp03lyctsc.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp03lyctsc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp03lyctsc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp03lyctsc.jl:10\n   [3] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp03lyctsc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgvc8fhvb.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgvc8fhvb.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgvc8fhvb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgvc8fhvb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxi72xh70.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxi72xh70.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxi72xh70.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxi72xh70.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"numbers must have at\
    \ least two elements\")\n    end\n    closest_pair = (numbers[1], numbers[2])\n\
    \    closest_distance = abs(numbers[1] - numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in 1:length(numbers)\n            if i != j\n                distance\
    \ = abs(numbers[i] - numbers[j])\n                if distance < closest_distance\n\
    \                    closest_pair = (numbers[i], numbers[j])\n               \
    \     closest_distance = distance\n                end\n            end\n    \
    \    end\n    end\n    return closest_pair\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoiie77ya.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpoiie77ya.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoiie77ya.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoiie77ya.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxzq3kbqw.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmpxzq3kbqw.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmpxzq3kbqw.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxzq3kbqw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpxzq3kbqw.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxzq3kbqw.jl:10\n   [3] macro expansion\n     @ /tmp/tmpxzq3kbqw.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxzq3kbqw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpxzq3kbqw.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxzq3kbqw.jl:10\n   [3] macro expansion\n     @ /tmp/tmpxzq3kbqw.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxzq3kbqw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpxzq3kbqw.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpxzq3kbqw.jl:10\n   [3] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzq3kbqw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu36ht4fc.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpu36ht4fc.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu36ht4fc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu36ht4fc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7j3rdqqg.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7j3rdqqg.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7j3rdqqg.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7j3rdqqg.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd953i7gg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd953i7gg.jl:1\n\
    in expression starting at /tmp/tmpd953i7gg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_tuple = (numbers[1], numbers[2])\n \
    \   for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n     \
    \       if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_tuple = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_tuple\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_wxttd4g.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_wxttd4g.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_wxttd4g.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_wxttd4g.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize variables\n    min_diff = Inf\n    min_pair = (0.0,\
    \ 0.0)\n    # Loop through all pairs of numbers\n    for i in 1:length(numbers)-1\n\
    \        for j in i+1:length(numbers)\n            # If the difference between\
    \ the two numbers is smaller than the current minimum, update the minimum\n  \
    \          if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9a3vmfrh.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9a3vmfrh.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9a3vmfrh.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9a3vmfrh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpavcebmln.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpavcebmln.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavcebmln.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavcebmln.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgd27wque.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgd27wque.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgd27wque.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgd27wque.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The input list must have\
    \ at least two elements\")\n    end\n    # Sort the list\n    sorted_numbers =\
    \ sort(numbers)\n    # Find the minimum difference between adjacent elements\n\
    \    min_diff = Inf\n    min_diff_index = 0\n    for i in 1:length(sorted_numbers)-1\n\
    \        if sorted_numbers[i+1] - sorted_numbers[i] < min_diff\n            min_diff\
    \ = sorted_numbers[i+1] - sorted_numbers[i]\n            min_diff_index = i\n\
    \        end\n    end\n    # Return the two elements\n    return (sorted_numbers[min_diff_index],\
    \ sorted_numbers[min_diff_index+1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_elements = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff\n                    min_diff = diff\n   \
    \                 min_elements = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_elements\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkhg4cbyn.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkhg4cbyn.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkhg4cbyn.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkhg4cbyn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzd0q2_5a.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzd0q2_5a.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzd0q2_5a.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzd0q2_5a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1387ns0d.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1387ns0d.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1387ns0d.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1387ns0d.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcil90gh0.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpcil90gh0.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcil90gh0.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcil90gh0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ypt8du5.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ypt8du5.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ypt8du5.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ypt8du5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = Inf\n    min_pair = (0.0, 0.0)\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo4mop6ck.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpo4mop6ck.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo4mop6ck.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo4mop6ck.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    # raise NotImplementedError()\n    diff\
    \ = abs(numbers[1] - numbers[2])\n    closest_numbers = (numbers[1], numbers[2])\n\
    \    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n        \
    \    if i != j\n                if abs(numbers[i] - numbers[j]) < diff\n     \
    \               diff = abs(numbers[i] - numbers[j])\n                    closest_numbers\
    \ = (numbers[i], numbers[j])\n                end\n            end\n        end\n\
    \    end\n    return closest_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4yfi95es.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4yfi95es.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4yfi95es.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4yfi95es.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The list must have at\
    \ least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsuevfhhz.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsuevfhhz.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuevfhhz.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsuevfhhz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   result = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n      \
    \  for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) <\
    \ diff\n                diff = abs(numbers[i] - numbers[j])\n                result\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpymkoecxa.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpymkoecxa.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymkoecxa.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpymkoecxa.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp15u4bjiq.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp15u4bjiq.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15u4bjiq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp15u4bjiq.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp15u4bjiq.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15u4bjiq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp15u4bjiq.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp15u4bjiq.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15u4bjiq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp15u4bjiq.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp15u4bjiq.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15u4bjiq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp15u4bjiq.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp15u4bjiq.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15u4bjiq.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15u4bjiq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff\n                min_diff = diff\n           \
    \     min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpobgpny2i.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpobgpny2i.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobgpny2i.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobgpny2i.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6hw02whm.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6hw02whm.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6hw02whm.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6hw02whm.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    diff = abs(numbers[1] - numbers[2])\n    closest = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < diff\n                diff = abs(numbers[i] - numbers[j])\n              \
    \  closest = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return closest\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpswog1rxg.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpswog1rxg.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswog1rxg.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpswog1rxg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    closest_diff = abs(numbers[1] - numbers[2])\n\
    \    closest_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < closest_diff\n                closest_diff = abs(numbers[i] - numbers[j])\n\
    \                closest_pair = (numbers[i], numbers[j])\n            end\n  \
    \      end\n    end\n    return closest_pair\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphb44pe54.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphb44pe54.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphb44pe54.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphb44pe54.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqdwnl8w.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkqdwnl8w.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqdwnl8w.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqdwnl8w.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsy16_9tb.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsy16_9tb.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsy16_9tb.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsy16_9tb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0fm0er72.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0fm0er72.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0fm0er72.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0fm0er72.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff\n                    min_diff = diff\n   \
    \                 min_pair = (numbers[i], numbers[j])\n                end\n \
    \           end\n        end\n    end\n    return min_pair\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv_xcn9ae.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpv_xcn9ae.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv_xcn9ae.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv_xcn9ae.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n < 2\n        error(\"numbers must be at least two\")\n    end\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:n-1\n        for j in i+1:n\n            diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < min_diff\n                min_diff = diff\n\
    \                min_pair = (numbers[i], numbers[j])\n            end\n      \
    \  end\n    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_91_m4ug.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_91_m4ug.jl:34 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_91_m4ug.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_91_m4ug.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff\n                    min_diff = diff\n   \
    \                 min_pair = (numbers[i], numbers[j])\n                end\n \
    \           end\n        end\n    end\n    return min_pair\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpicikqvl5.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpicikqvl5.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpicikqvl5.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpicikqvl5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i = 1:n-1\n\
    \        for j = i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzyuj7xae.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzyuj7xae.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzyuj7xae.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzyuj7xae.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3m1xmp1_.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3m1xmp1_.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3m1xmp1_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3m1xmp1_.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3m1xmp1_.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3m1xmp1_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3m1xmp1_.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3m1xmp1_.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3m1xmp1_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3m1xmp1_.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3m1xmp1_.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3m1xmp1_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3m1xmp1_.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3m1xmp1_.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3m1xmp1_.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3m1xmp1_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.1]\n    #numbers = [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0, 2.1, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0,\
    \ 2.1, 2.2, 2.3]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.1, 2.2, 2.3,\
    \ 2.4]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7,\
    \ 2.8]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.1, 2.2, 2.3\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxeyb3q1r.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxeyb3q1r.jl:1\n\
    in expression starting at /tmp/tmpxeyb3q1r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    if n == 2\n  \
    \      return (numbers[1], numbers[2])\n    end\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7yr73wl0.jl:32\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7yr73wl0.jl:32 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7yr73wl0.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7yr73wl0.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gy4ydu7.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gy4ydu7.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gy4ydu7.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gy4ydu7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            diff = abs(numbers[i] - numbers[j])\n   \
    \         if diff < min_diff\n                min_diff = diff\n              \
    \  min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyjv4ozy9.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpyjv4ozy9.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjv4ozy9.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjv4ozy9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff\n                    min_diff = diff\n   \
    \                 min_pair = (numbers[i], numbers[j])\n                end\n \
    \           end\n        end\n    end\n    return min_pair\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvi2i2z9u.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvi2i2z9u.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvi2i2z9u.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvi2i2z9u.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize the minimum distance to be the distance between\
    \ the first two elements\n    min_distance = abs(numbers[1] - numbers[2])\n  \
    \  # Initialize the two closest elements to be the first two elements\n    closest_elements\
    \ = (numbers[1], numbers[2])\n    # Loop over all pairs of elements in the list\n\
    \    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n        \
    \    # If the distance between the two elements is less than the current minimum\
    \ distance\n            if abs(numbers[i] - numbers[j]) < min_distance\n     \
    \           # Update the minimum distance to be the distance between the two elements\n\
    \                min_distance = abs(numbers[i] - numbers[j])\n               \
    \ # Update the two closest elements to be the two elements\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    # Return\
    \ the two closest elements\n    return closest_elements\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0fgv2atw.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 1.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0fgv2atw.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0fgv2atw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0fgv2atw.jl:34\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 1.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp0fgv2atw.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0fgv2atw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0fgv2atw.jl:35\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 1.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0fgv2atw.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0fgv2atw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0fgv2atw.jl:36\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 1.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0fgv2atw.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0fgv2atw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0fgv2atw.jl:37\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (1.1, 1.1) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp0fgv2atw.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0fgv2atw.jl:32\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0fgv2atw.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = Inf\n    min_pair = (0, 0)\n\
    \    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphcitv4_m.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphcitv4_m.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphcitv4_m.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphcitv4_m.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6x0u0qgr.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6x0u0qgr.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x0u0qgr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp6x0u0qgr.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6x0u0qgr.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x0u0qgr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp6x0u0qgr.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6x0u0qgr.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x0u0qgr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp6x0u0qgr.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6x0u0qgr.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x0u0qgr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp6x0u0qgr.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6x0u0qgr.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x0u0qgr.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6x0u0qgr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3b5pcl0.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmph3b5pcl0.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3b5pcl0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3b5pcl0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf9hzrq4l.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpf9hzrq4l.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf9hzrq4l.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf9hzrq4l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The list of numbers must\
    \ be at least two numbers long.\")\n    end\n    min_distance = abs(numbers[1]\
    \ - numbers[2])\n    min_distance_index = 1\n    for i in 2:length(numbers)-1\n\
    \        if abs(numbers[i] - numbers[i+1]) < min_distance\n            min_distance\
    \ = abs(numbers[i] - numbers[i+1])\n            min_distance_index = i\n     \
    \   end\n    end\n    return (numbers[min_distance_index], numbers[min_distance_index+1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxdcomcyx.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdcomcyx.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdcomcyx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxdcomcyx.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxdcomcyx.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdcomcyx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxdcomcyx.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxdcomcyx.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdcomcyx.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdcomcyx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplpc4pqmd.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmplpc4pqmd.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplpc4pqmd.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplpc4pqmd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbqa1xb_3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbqa1xb_3.jl:1\n\
    in expression starting at /tmp/tmpbqa1xb_3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpkbs0nyrq.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkbs0nyrq.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbs0nyrq.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkbs0nyrq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmps84ilj3a.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps84ilj3a.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps84ilj3a.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps84ilj3a.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3b5q69q7.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3b5q69q7.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3b5q69q7.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3b5q69q7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   closest = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n     \
    \   for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < diff\n                    diff = abs(numbers[i] - numbers[j])\n\
    \                    closest = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return closest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpihx5335f.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpihx5335f.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpihx5335f.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpihx5335f.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n    #numbers = sort(numbers)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzah0o994.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzah0o994.jl:1\n\
    in expression starting at /tmp/tmpzah0o994.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n\
    \    for i in 1:n-1\n        for j in i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyew_lkcz.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpyew_lkcz.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyew_lkcz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyew_lkcz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    closest_pair = (numbers[1], numbers[2])\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    for i in 1:length(numbers)\n\
    \        for j in 1:length(numbers)\n            if i != j\n                if\
    \ abs(numbers[i] - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i]\
    \ - numbers[j])\n                    closest_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return closest_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphmdu7nli.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphmdu7nli.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphmdu7nli.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphmdu7nli.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n\
    \            if i != j\n                diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff\n                    min_diff = diff\n   \
    \                 min_pair = (numbers[i], numbers[j])\n                end\n \
    \           end\n        end\n    end\n    return min_pair\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphnznea45.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphnznea45.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphnznea45.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnznea45.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_nums = (numbers[1], numbers[2])\n    for i in 1:length(numbers)-1\n \
    \       if abs(numbers[i] - numbers[i+1]) < min_diff\n            min_diff = abs(numbers[i]\
    \ - numbers[i+1])\n            min_nums = (numbers[i], numbers[i+1])\n       \
    \ end\n    end\n    return min_nums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdixn6nl9.jl:26\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpdixn6nl9.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdixn6nl9.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpdixn6nl9.jl:27\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdixn6nl9.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdixn6nl9.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpdixn6nl9.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdixn6nl9.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdixn6nl9.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdixn6nl9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0t93ezbg.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0t93ezbg.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0t93ezbg.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0t93ezbg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The list must contain\
    \ at least two elements\")\n    end\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx336wgxj.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpx336wgxj.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx336wgxj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx336wgxj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = Inf\n    min_pair = (0, 0)\n\
    \    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n        \
    \    if i != j\n                diff = abs(numbers[i] - numbers[j])\n        \
    \        if diff < min_diff\n                    min_diff = diff\n           \
    \         min_pair = (numbers[i], numbers[j])\n                end\n         \
    \   end\n        end\n    end\n    return min_pair\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2f4yn4w6.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2f4yn4w6.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2f4yn4w6.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2f4yn4w6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg4hrlpch.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpg4hrlpch.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg4hrlpch.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4hrlpch.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu29cwblw.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpu29cwblw.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu29cwblw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu29cwblw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpql3mx3do.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpql3mx3do.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpql3mx3do.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpql3mx3do.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1myjr7sr.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1myjr7sr.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1myjr7sr.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1myjr7sr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0,\
    \ 2.0, 2.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 2.0, 2.0\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp21rdvzy2.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp21rdvzy2.jl:1\n\
    in expression starting at /tmp/tmp21rdvzy2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = Inf\n    min_pair = (0, 0)\n\
    \    for i in 1:length(numbers)\n        for j in 1:length(numbers)\n        \
    \    if i != j\n                diff = abs(numbers[i] - numbers[j])\n        \
    \        if diff < min_diff\n                    min_diff = diff\n           \
    \         min_pair = (numbers[i], numbers[j])\n                end\n         \
    \   end\n        end\n    end\n    return min_pair\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0hxz7f69.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hxz7f69.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hxz7f69.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hxz7f69.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyz5us3dk.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpyz5us3dk.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyz5us3dk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyz5us3dk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #print(numbers)\n\
    \    #print(numbers[1])\n    #print(numbers[2])\n    #print(numbers[3])\n    #print(numbers[4])\n\
    \    #print(numbers[5])\n    #print(numbers[6])\n    #print(numbers[7])\n    #print(numbers[8])\n\
    \    #print(numbers[9])\n    #print(numbers[10])\n    #print(numbers[11])\n  \
    \  #print(numbers[12])\n    #print(numbers[13])\n    #print(numbers[14])\n   \
    \ #print(numbers[15])\n    #print(numbers[16])\n    #print(numbers[17])\n    #print(numbers[18])\n\
    \    #print(numbers[19])\n    #print(numbers[20])\n    #print(numbers[21])\n \
    \   #print(numbers[22])\n    #print(numbers[23])\n    #print(numbers[24])\n  \
    \  #print(numbers[25])\n    #print(numbers[26])\n    #print(numbers[27])\n   \
    \ #print(numbers[28])\n    #print(numbers[29])\n    #print(numbers[30])\n    #print(numbers[31])\n\
    \    #print(numbers[32])\n    #print(numbers[33])\n    #print(numbers[34])\n \
    \   #print(numbers[35])\n    #print(numbers[36])\n    #print(numbers[37])\n  \
    \  #print(numbers[38])\n    #print(numbers[39])\n    #print(numbers[40])\n   \
    \ #print(numbers[41])\n    #print(numbers[42])\n    #print(numbers[43])\n    #print(numbers[44])\n\
    \    #print(numbers[45])\n    #print(numbers[46])\n    #print(numbers[47])\n \
    \   #print(numbers[48])\n    #print(numbers[\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnziiy0hk.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnziiy0hk.jl:1\n\
    in expression starting at /tmp/tmpnziiy0hk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsvs0pmuv.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsvs0pmuv.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvs0pmuv.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsvs0pmuv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbkg033gy.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbkg033gy.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbkg033gy.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbkg033gy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp96yeflmz.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp96yeflmz.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp96yeflmz.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96yeflmz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   closest = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n     \
    \   for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < diff\n                diff = abs(numbers[i] - numbers[j])\n              \
    \  closest = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return closest\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0fj2_a5h.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0fj2_a5h.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0fj2_a5h.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0fj2_a5h.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    if length(numbers) < 2\n        error(\"The list must have at\
    \ least two elements\")\n    end\n    # Initialize the minimum distance to the\
    \ distance between the first two elements\n    min_distance = abs(numbers[1] -\
    \ numbers[2])\n    # Initialize the two closest elements to the first two elements\n\
    \    closest_elements = (numbers[1], numbers[2])\n    # Loop over all pairs of\
    \ elements and check if they are closer than the current closest pair\n    for\
    \ i in 1:length(numbers)\n        for j in 1:length(numbers)\n            if i\
    \ != j\n                distance = abs(numbers[i] - numbers[j])\n            \
    \    if distance < min_distance\n                    min_distance = distance\n\
    \                    closest_elements = (numbers[i], numbers[j])\n           \
    \     end\n            end\n        end\n    end\n    return closest_elements\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp03k22flw.jl:36\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp03k22flw.jl:36 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp03k22flw.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp03k22flw.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpltcbxtc6.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpltcbxtc6.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpltcbxtc6.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltcbxtc6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    a = sort(numbers)\n\
    \    b = a[2:end]\n    c = a[1:end-1]\n    d = b .- c\n    e = findmin(d)\n  \
    \  f = findall(d .== e)\n    g = c[f]\n    h = b[f]\n    return (g,h)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoo42a9xv.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 5\
    \ and 2\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:501 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:495 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:489 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:484\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:266 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:883 [inlined]\n    [7] find_closest_elements(numbers::Vector{Float64})\n\
    \      @ Main /tmp/tmpoo42a9xv.jl:16\n    [8] macro expansion\n      @ /tmp/tmpoo42a9xv.jl:26\
    \ [inlined]\n    [9] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpoo42a9xv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpoo42a9xv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 4 and\
    \ 2\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:501 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:495 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:489 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:484\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:266 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:883 [inlined]\n    [7] find_closest_elements(numbers::Vector{Float64})\n\
    \      @ Main /tmp/tmpoo42a9xv.jl:16\n    [8] macro expansion\n      @ /tmp/tmpoo42a9xv.jl:27\
    \ [inlined]\n    [9] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpoo42a9xv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpoo42a9xv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Dimens"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoo42a9xv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplyc9jgoa.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmplyc9jgoa.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyc9jgoa.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyc9jgoa.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7cppktl.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpz7cppktl.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz7cppktl.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7cppktl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpasb0uk6z.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpasb0uk6z.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpasb0uk6z.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpasb0uk6z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #println(numbers)\n\
    \    #println(length(numbers))\n    #println(numbers[1])\n    #println(numbers[2])\n\
    \    #println(numbers[3])\n    #println(numbers[4])\n    #println(numbers[5])\n\
    \    #println(numbers[6])\n    #println(numbers[7])\n    #println(numbers[8])\n\
    \    #println(numbers[9])\n    #println(numbers[10])\n    #println(numbers[11])\n\
    \    #println(numbers[12])\n    #println(numbers[13])\n    #println(numbers[14])\n\
    \    #println(numbers[15])\n    #println(numbers[16])\n    #println(numbers[17])\n\
    \    #println(numbers[18])\n    #println(numbers[19])\n    #println(numbers[20])\n\
    \    #println(numbers[21])\n    #println(numbers[22])\n    #println(numbers[23])\n\
    \    #println(numbers[24])\n    #println(numbers[25])\n    #println(numbers[26])\n\
    \    #println(numbers[27])\n    #println(numbers[28])\n    #println(numbers[29])\n\
    \    #println(numbers[30])\n    #println(numbers[31])\n    #println(numbers[32])\n\
    \    #println(numbers[33])\n    #println(numbers[34])\n    #println(numbers[35])\n\
    \    #println(numbers[36])\n    #println(numbers[37])\n    #println(numbers[38])\n\
    \    #println(numbers[39])\n    #println(numbers[40])\n    #println(numbers[41])\n\
    \    #println(numbers[42])\n    #println(numbers[43])\n    #println(numbers[44])\n\
    \    #println(numbers[45])\n    #println(numbers[46])\n    #println(numbers[47])\n\
    \    #println(numbers[\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyamvre18.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyamvre18.jl:1\n\
    in expression starting at /tmp/tmpyamvre18.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    diff\
    \ = abs(numbers[1] - numbers[2])\n    num1 = numbers[1]\n    num2 = numbers[2]\n\
    \    for i in 1:length(numbers)-1\n        if abs(numbers[i] - numbers[i+1]) <\
    \ diff\n            diff = abs(numbers[i] - numbers[i+1])\n            num1 =\
    \ numbers[i]\n            num2 = numbers[i+1]\n        end\n    end\n    return\
    \ (num1, num2)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjza2nh_n.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjza2nh_n.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjza2nh_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjza2nh_n.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjza2nh_n.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjza2nh_n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjza2nh_n.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjza2nh_n.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjza2nh_n.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjza2nh_n.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphmij73qq.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphmij73qq.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphmij73qq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphmij73qq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphsg43hgx.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphsg43hgx.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphsg43hgx.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphsg43hgx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    n = length(numbers)\n\
    \    if n == 2\n        return (numbers[1], numbers[2])\n    end\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i = 1:n-1\n        for j = i+1:n\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcl9_j2pb.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpcl9_j2pb.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcl9_j2pb.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcl9_j2pb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   closest = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n     \
    \   for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < diff\n                diff = abs(numbers[i] - numbers[j])\n              \
    \  closest = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return closest\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0qogaabx.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0qogaabx.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0qogaabx.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0qogaabx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp91y17dwo.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp91y17dwo.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91y17dwo.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp91y17dwo.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp91y17dwo.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91y17dwo.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp91y17dwo.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp91y17dwo.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91y17dwo.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp91y17dwo.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp91y17dwo.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91y17dwo.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp91y17dwo.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp91y17dwo.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91y17dwo.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91y17dwo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpekcdigsz.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpekcdigsz.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpekcdigsz.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpekcdigsz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    return (0.0, 0.0)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsuydmjc0.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (0.0, 0.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsuydmjc0.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuydmjc0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsuydmjc0.jl:18\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (0.0, 0.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpsuydmjc0.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuydmjc0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsuydmjc0.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (0.0, 0.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsuydmjc0.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuydmjc0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsuydmjc0.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (0.0, 0.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsuydmjc0.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuydmjc0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsuydmjc0.jl:21\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (0.0, 0.0) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpsuydmjc0.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuydmjc0.jl:16\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsuydmjc0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpumz26u97.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpumz26u97.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpumz26u97.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpumz26u97.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i = 1:length(numbers)-1\n        for j = i+1:length(numbers)\n        \
    \    if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff = abs(numbers[i]\
    \ - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n       \
    \     end\n        end\n    end\n    return min_pair\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp61bpl51m.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp61bpl51m.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp61bpl51m.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp61bpl51m.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprol8jekq.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmprol8jekq.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmprol8jekq.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprol8jekq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprol8jekq.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprol8jekq.jl:10\n   [3] macro expansion\n     @ /tmp/tmprol8jekq.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprol8jekq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprol8jekq.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprol8jekq.jl:10\n   [3] macro expansion\n     @ /tmp/tmprol8jekq.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprol8jekq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmprol8jekq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmprol8jekq.jl:10\n   [3] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprol8jekq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_nums = (numbers[1], numbers[2])\n    for i in 1:length(numbers)-1\n \
    \       for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_nums = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_nums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxzapaye.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsxzapaye.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsxzapaye.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxzapaye.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe4_az67o.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpe4_az67o.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4_az67o.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe4_az67o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # Initialize the minimum difference to the difference between\
    \ the first two elements\n    min_diff = abs(numbers[1] - numbers[2])\n    # Initialize\
    \ the two closest elements to the first two elements\n    closest_elements = (numbers[1],\
    \ numbers[2])\n    # Loop over all pairs of elements\n    for i in 1:length(numbers)\n\
    \        for j in i+1:length(numbers)\n            # Check if the difference between\
    \ the two elements is smaller than the current minimum difference\n          \
    \  if abs(numbers[i] - numbers[j]) < min_diff\n                # If so, update\
    \ the minimum difference and the two closest elements\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            end\n        end\n    end\n    # Return the two closest\
    \ elements\n    return closest_elements\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpubf9rda6.jl:33\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpubf9rda6.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubf9rda6.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpubf9rda6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n    \
    \    for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < diff\n                diff = abs(numbers[i] - numbers[j])\n              \
    \  min_pair = (numbers[i], numbers[j])\n            end\n        end\n    end\n\
    \    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0hyam2e3.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hyam2e3.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hyam2e3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hyam2e3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwptex77t.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmpwptex77t.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmpwptex77t.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwptex77t.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpwptex77t.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpwptex77t.jl:10\n   [3] macro expansion\n     @ /tmp/tmpwptex77t.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwptex77t.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpwptex77t.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpwptex77t.jl:10\n   [3] macro expansion\n     @ /tmp/tmpwptex77t.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwptex77t.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpwptex77t.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpwptex77t.jl:10\n   [3] macro expansion\n     @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwptex77t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n \
    \   #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n\
    \    #numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    #numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0, 4.0,\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoeogef5j.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoeogef5j.jl:1\n\
    in expression starting at /tmp/tmpoeogef5j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i = 1:n-1\n\
    \        for j = i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpchpy7udc.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpchpy7udc.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpchpy7udc.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpchpy7udc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_diff_index = 1\n    for i in 2:length(numbers)-1\n\
    \        if abs(numbers[i] - numbers[i+1]) < min_diff\n            min_diff =\
    \ abs(numbers[i] - numbers[i+1])\n            min_diff_index = i\n        end\n\
    \    end\n    return (numbers[min_diff_index], numbers[min_diff_index+1])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0clfc4_l.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0clfc4_l.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0clfc4_l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0clfc4_l.jl:28\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0clfc4_l.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0clfc4_l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0clfc4_l.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0clfc4_l.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0clfc4_l.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0clfc4_l.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    n = length(numbers)\n    if n == 2\n  \
    \      return (numbers[1], numbers[2])\n    end\n    min_diff = abs(numbers[1]\
    \ - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n    for i in 1:n-1\n\
    \        for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < min_diff\n\
    \                min_diff = abs(numbers[i] - numbers[j])\n                min_pair\
    \ = (numbers[i], numbers[j])\n            end\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3kooxpog.jl:32\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3kooxpog.jl:32 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3kooxpog.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3kooxpog.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #println(numbers)\n\
    \    #println(length(numbers))\n    #println(numbers[1])\n    #println(numbers[2])\n\
    \    #println(numbers[3])\n    #println(numbers[4])\n    #println(numbers[5])\n\
    \    #println(numbers[6])\n    #println(numbers[7])\n    #println(numbers[8])\n\
    \    #println(numbers[9])\n    #println(numbers[10])\n    #println(numbers[11])\n\
    \    #println(numbers[12])\n    #println(numbers[13])\n    #println(numbers[14])\n\
    \    #println(numbers[15])\n    #println(numbers[16])\n    #println(numbers[17])\n\
    \    #println(numbers[18])\n    #println(numbers[19])\n    #println(numbers[20])\n\
    \    #println(numbers[21])\n    #println(numbers[22])\n    #println(numbers[23])\n\
    \    #println(numbers[24])\n    #println(numbers[25])\n    #println(numbers[26])\n\
    \    #println(numbers[27])\n    #println(numbers[28])\n    #println(numbers[29])\n\
    \    #println(numbers[30])\n    #println(numbers[31])\n    #println(numbers[32])\n\
    \    #println(numbers[33])\n    #println(numbers[34])\n    #println(numbers[35])\n\
    \    #println(numbers[36])\n    #println(numbers[37])\n    #println(numbers[38])\n\
    \    #println(numbers[39])\n    #println(numbers[40])\n    #println(numbers[41])\n\
    \    #println(numbers[42])\n    #println(numbers[43])\n    #println(numbers[44])\n\
    \    #println(numbers[45])\n    #println(numbers[46])\n    #println(numbers[47])\n\
    \    #println(numbers[\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt9kqxb73.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt9kqxb73.jl:1\n\
    in expression starting at /tmp/tmpt9kqxb73.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3t2van6l.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3t2van6l.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3t2van6l.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3t2van6l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < min_diff\n                    min_diff = abs(numbers[i] - numbers[j])\n\
    \                    min_pair = (numbers[i], numbers[j])\n                end\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpytkvu3ad.jl:30\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpytkvu3ad.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytkvu3ad.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytkvu3ad.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjsty3oi0.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsty3oi0.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsty3oi0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjsty3oi0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j])\
    \ < min_diff\n                min_diff = abs(numbers[i] - numbers[j])\n      \
    \          min_pair = (numbers[i], numbers[j])\n            end\n        end\n\
    \    end\n    return min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphz0ere8e.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphz0ere8e.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphz0ere8e.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphz0ere8e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppt49t2ea.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppt49t2ea.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppt49t2ea.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppt49t2ea.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   num1 = numbers[1]\n    num2 = numbers[2]\n    for i in 1:length(numbers)-1\n\
    \        if abs(numbers[i] - numbers[i+1]) < diff\n            diff = abs(numbers[i]\
    \ - numbers[i+1])\n            num1 = numbers[i]\n            num2 = numbers[i+1]\n\
    \        end\n    end\n    return num1, num2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3z6nlxvh.jl:28\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3z6nlxvh.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3z6nlxvh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3z6nlxvh.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3z6nlxvh.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3z6nlxvh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3z6nlxvh.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3z6nlxvh.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3z6nlxvh.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3z6nlxvh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #error(\"Not implemented yet\")\n    diff\
    \ = abs(numbers[1] - numbers[2])\n    for i in 1:length(numbers)-1\n        for\
    \ j in i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < diff\n\
    \                diff = abs(numbers[i] - numbers[j])\n                a = numbers[i]\n\
    \                b = numbers[j]\n            end\n        end\n    end\n    return\
    \ (a,b)\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp4c1eqfyf.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  UndefVarError:\
    \ a not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4c1eqfyf.jl:21\n   [2] macro expansion\n     @ /tmp/tmp4c1eqfyf.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4c1eqfyf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4c1eqfyf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  UndefVarError: a not defined\n\
    \  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n     @\
    \ Main /tmp/tmp4c1eqfyf.jl:21\n   [2] macro expansion\n     @ /tmp/tmp4c1eqfyf.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4c1eqfyf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4c1eqfyf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  UndefVarError: a\
    \ not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4c1eqfyf.jl:21\n   [2] macro expansion\n     @ /tmp/tmp4c1eqfyf.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4c1eqfyf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4c1eqfyf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  UndefVarError: a\
    \ not defined\n  Stacktrace:\n   [1] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp4c1eqfyf.jl:21\n   [2] macro expansion\n     @ /tmp/tmp4c1eqfyf.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4c1eqfyf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb2kc1ghh.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpb2kc1ghh.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2kc1ghh.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2kc1ghh.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    min_diff = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7pa2_1p_.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7pa2_1p_.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7pa2_1p_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7pa2_1p_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    diff = abs(numbers[1] - numbers[2])\n \
    \   pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n        for\
    \ j in 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < diff\n\
    \                diff = abs(numbers[i] - numbers[j])\n                pair = (numbers[i],\
    \ numbers[j])\n            end\n        end\n    end\n    return pair\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb17tyqke.jl:27\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 1.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpb17tyqke.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb17tyqke.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb17tyqke.jl:28\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 1.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpb17tyqke.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb17tyqke.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb17tyqke.jl:29\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 1.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb17tyqke.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb17tyqke.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb17tyqke.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 1.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb17tyqke.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb17tyqke.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb17tyqke.jl:31\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3.1)\n   Evaluated: (1.1, 1.1) == (2.2, 3.1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpb17tyqke.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb17tyqke.jl:26\nTest Summary:\
    \ | Fail  Total\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb17tyqke.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    min_diff\
    \ = abs(numbers[1] - numbers[2])\n    min_pair = (numbers[1], numbers[2])\n  \
    \  for i in 1:length(numbers)-1\n        for j in i+1:length(numbers)\n      \
    \      if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff =\
    \ abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n\
    \            end\n        end\n    end\n    return min_pair\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplggs_vwm.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmplggs_vwm.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplggs_vwm.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplggs_vwm.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    if length(numbers)\
    \ < 2\n        error(\"The list must contain at least two elements\")\n    end\n\
    \    min_diff = abs(numbers[1] - numbers[2])\n    min_num1 = numbers[1]\n    min_num2\
    \ = numbers[2]\n    for i in 1:length(numbers)\n        for j in i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < min_diff\n                min_diff\
    \ = abs(numbers[i] - numbers[j])\n                min_num1 = numbers[i]\n    \
    \            min_num2 = numbers[j]\n            end\n        end\n    end\n  \
    \  if min_num1 > min_num2\n        return (min_num2, min_num1)\n    else\n   \
    \     return (min_num1, min_num2)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    diff\
    \ = abs(numbers[1] - numbers[2])\n    min_diff = diff\n    min_pair = (numbers[1],\
    \ numbers[2])\n    for i in 1:length(numbers)-1\n        diff = abs(numbers[i]\
    \ - numbers[i+1])\n        if diff < min_diff\n            min_diff = diff\n \
    \           min_pair = (numbers[i], numbers[i+1])\n        end\n    end\n    return\
    \ min_pair\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpz9bgdh56.jl:29\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpz9bgdh56.jl:29 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz9bgdh56.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpz9bgdh56.jl:30\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpz9bgdh56.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz9bgdh56.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpz9bgdh56.jl:31\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpz9bgdh56.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz9bgdh56.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz9bgdh56.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp49su9gg.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpp49su9gg.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp49su9gg.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp49su9gg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbxx5zl47.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  Not\
    \ implemented yet\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] find_closest_elements(numbers::Vector{Float64})\n     @ Main /tmp/tmpbxx5zl47.jl:10\n\
    \   [3] macro expansion\n     @ /tmp/tmpbxx5zl47.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxx5zl47.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpbxx5zl47.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpbxx5zl47.jl:10\n   [3] macro expansion\n     @ /tmp/tmpbxx5zl47.jl:18\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxx5zl47.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpbxx5zl47.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpbxx5zl47.jl:10\n   [3] macro expansion\n     @ /tmp/tmpbxx5zl47.jl:19\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxx5zl47.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpbxx5zl47.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  Not implemented yet\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] find_closest_elements(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpbxx5zl47.jl:10\n   [3] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbxx5zl47.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    # YOUR CODE HERE\n    min_diff = abs(numbers[1] - numbers[2])\n\
    \    min_pair = (numbers[1], numbers[2])\n    for i in 1:length(numbers)\n   \
    \     for j in 1:length(numbers)\n            if i != j\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < min_diff\n       \
    \             min_diff = diff\n                    min_pair = (numbers[i], numbers[j])\n\
    \                end\n            end\n        end\n    end\n    return min_pair\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeuf9prqo.jl:31\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n   Evaluated: (5.9, 5.0) == (5.0, 5.9)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpeuf9prqo.jl:31 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeuf9prqo.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeuf9prqo.jl:27\n"
  exit_code: 1
  status: SyntaxError
