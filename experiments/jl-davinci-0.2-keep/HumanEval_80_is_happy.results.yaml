name: HumanEval_80_is_happy
language: julia
results:
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i = 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    return length(s) >= 3 && all(s[i] != s[i+1]\
    \ && s[i] != s[i+2] && s[i+1] != s[i+2] for i in 1:length(s)-2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    return length(s) >= 3 && all(s[i] != s[i+1]\
    \ && s[i] != s[i+2] && s[i+1] != s[i+2] for i in 1:length(s)-2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuqykkclp.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a\") == false\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_happy(s::String)\\n     @ Main /tmp/tmpuqykkclp.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuqykkclp.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuqykkclp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpuqykkclp.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"aa\") == false\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_happy(s::String)\\n     @ Main /tmp/tmpuqykkclp.jl:14\\n   [2] macro expansion\\\
    n     @ /tmp/tmpuqykkclp.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuqykkclp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpuqykkclp.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == true\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8voz27h2.jl:25\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8voz27h2.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8voz27h2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8voz27h2.jl:26\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8voz27h2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8voz27h2.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8voz27h2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
