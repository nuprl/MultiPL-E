name: HumanEval_77_iscube
language: julia
results:
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i*i*i == a\n            return true\n \
    \       end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(round(cbrt(a),\
    \ digits=10)))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2wtjgdcu.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp2wtjgdcu.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2wtjgdcu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2wtjgdcu.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2wtjgdcu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2wtjgdcu.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2wtjgdcu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return isinteger(cbrt(a))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1 || a == -1\n        return true\n    end\n    if a\
    \ < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3 == a\n      \
    \      return true\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == round(Int64, a^(1/3)))\
    \ || (a < 0 && a == round(Int64, -(-a)^(1/3)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy6xpfs66.jl:24\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpy6xpfs66.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy6xpfs66.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy6xpfs66.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy6xpfs66.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy6xpfs66.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy6xpfs66.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptuwb9id4.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptuwb9id4.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptuwb9id4.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptuwb9id4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a>=0) && (a==round(Int64,a^(1/3)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp81gjpkgr.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp81gjpkgr.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81gjpkgr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp81gjpkgr.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81gjpkgr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81gjpkgr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp81gjpkgr.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81gjpkgr.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81gjpkgr.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp81gjpkgr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8y_x05dc.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp8y_x05dc.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8y_x05dc.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8y_x05dc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 8 ||\
    \ a == -8\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnc9sxo7z.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpnc9sxo7z.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnc9sxo7z.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnc9sxo7z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && a == round(Int64, a^(1/3)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqiib7aw8.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpqiib7aw8.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqiib7aw8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqiib7aw8.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqiib7aw8.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqiib7aw8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqiib7aw8.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqiib7aw8.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqiib7aw8.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqiib7aw8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a == 0) || (a > 0 && (round(Int64, a^(1/3))^3 == a)) || (a < 0\
    \ && (round(Int64, -a^(1/3))^3 == -a))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfbqa_2vj.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:901 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:355 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpfbqa_2vj.jl:14\n   [5] macro expansion\n     @ /tmp/tmpfbqa_2vj.jl:23\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpfbqa_2vj.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfbqa_2vj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        for i in 1:a\n            if i^3 == a\n                return\
    \ true\n            end\n        end\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || (a < 0 && iscube(-a)) || (a > 0 && iscube(round(Int64,\
    \ (a)^(1/3))))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphx8xj_8v.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmphx8xj_8v.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphx8xj_8v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphx8xj_8v.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphx8xj_8v.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphx8xj_8v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphx8xj_8v.jl:28\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphx8xj_8v.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphx8xj_8v.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphx8xj_8v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzbogckxq.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpzbogckxq.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzbogckxq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzbogckxq.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzbogckxq.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzbogckxq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzbogckxq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        b = floor(Int64, a^(1/3))\n        return a == b^3\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd4zipsst.jl:31\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpd4zipsst.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4zipsst.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpd4zipsst.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4zipsst.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4zipsst.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd4zipsst.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 125\
    \ || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 ||\
    \ a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a == 117649\
    \ || a == -\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx7samo82.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx7samo82.jl:1\n\
    in expression starting at /tmp/tmpx7samo82.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return iscube(-a)\n    end\n    if a == 0\n        return\
    \ true\n    end\n    if a == 1\n        return true\n    end\n    if a == 2\n\
    \        return false\n    end\n    if a == 3\n        return true\n    end\n\
    \    if a == 4\n        return false\n    end\n    if a == 5\n        return false\n\
    \    end\n    if a == 6\n        return false\n    end\n    if a == 7\n      \
    \  return false\n    end\n    if a == 8\n        return true\n    end\n    if\
    \ a == 9\n        return true\n    end\n    if a == 10\n        return false\n\
    \    end\n    if a == 11\n        return false\n    end\n    if a == 12\n    \
    \    return false\n    end\n    if a == 13\n        return false\n    end\n  \
    \  if a == 14\n        return false\n    end\n    if a == 15\n        return false\n\
    \    end\n    if a == 16\n        return true\n    end\n    if a == 17\n     \
    \   return false\n    end\n    if a == 18\n        return false\n    end\n   \
    \ if a == 19\n        return false\n    end\n    if a == 20\n        return false\n\
    \    end\n    if a == 21\n        return false\n    end\n    if a == 22\n    \
    \    return false\n    end\n    if a == 23\n        return false\n    end\n  \
    \  if a == 24\n        return false\n    end\n    if a == 25\n        return true\n\
    \    end\n    if a == 26\n        return false\n    end\n    if a == 27\n    \
    \    return true\n    end\n    if a == 28\n        return false\n    end\n   \
    \ if a == 29\n        return false\n    end\n    if a == 30\n        return false\n\
    \    end\n    if a == 31\n        return false\n    end\n    if a == 32\n    \
    \    return false\n    end\n    if a == 33\n        return false\n    end\n  \
    \  if a == 34\n        return false\n    end\n    if a == 35\n        return false\n\
    \    end\n    if a == 36\n        return false\n    end\n    if a == 37\n    \
    \    return false\n    end\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpohhin4j6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpohhin4j6.jl:1\n\
    in expression starting at /tmp/tmpohhin4j6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 ||\
    \ a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a ==\
    \ 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a ==\
    \ 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a\
    \ == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952\
    \ || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a ==\
    \ 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319\
    \ || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a ==\
    \ 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000\
    \ || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 ||\
    \ a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a\
    \ == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a ==\
    \ 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911\
    \ || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 ||\
    \ a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a\
    \ == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a ==\
    \ 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688\
    \ || a == 804357 || a == 830584 || a == 857\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7desq7qa.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7desq7qa.jl:1\n\
    in expression starting at /tmp/tmp7desq7qa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == round(Int64, a^(1/3)))\
    \ || (a < 0 && a == round(Int64, -a^(1/3)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2amlo3sz.jl:24\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp2amlo3sz.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2amlo3sz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2amlo3sz.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2amlo3sz.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2amlo3sz.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2amlo3sz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        for i in 1:a\n            if i^3 == a\n                return\
    \ true\n            end\n        end\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 ||\
    \ a == -8 || a == -27 || a == -64\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn5234esb.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpn5234esb.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn5234esb.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5234esb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (round(Int64, a^(1/3))^3\
    \ == a)) || (a < 0 && (round(Int64, a^(1/3))^3 == a))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || (a > 0 && a == round(Int64, a^(1/3)))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi000tgp2.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpi000tgp2.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi000tgp2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi000tgp2.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi000tgp2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi000tgp2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi000tgp2.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi000tgp2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi000tgp2.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi000tgp2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 8 ||\
    \ a == -8 || a == 27 || a == -27 || a == 125 || a == -125 || a == 216 || a ==\
    \ -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729 || a == -729\
    \ || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728\
    \ || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375\
    \ || a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832\
    \ || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823 || a\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnajazonq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnajazonq.jl:1\n\
    in expression starting at /tmp/tmpnajazonq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpcxapyy2f.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpcxapyy2f.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcxapyy2f.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcxapyy2f.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcxapyy2f.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcxapyy2f.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxapyy2f.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a^(1/3))%1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsgg7jhq9.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpsgg7jhq9.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmpsgg7jhq9.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpsgg7jhq9.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpsgg7jhq9.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsgg7jhq9.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsgg7jhq9.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpsgg7jhq9.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsgg7jhq9.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsgg7jhq9.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && iscube(a, 1))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbdrtpd3w.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == false\\n  MethodError: no method matching\
    \ iscube(::Int64, ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at\
    \ /tmp/tmpbdrtpd3w.jl:13\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main\
    \ /tmp/tmpbdrtpd3w.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpbdrtpd3w.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbdrtpd3w.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbdrtpd3w.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  MethodError: no method matching iscube(::Int64, ::Int64)\\\
    n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpbdrtpd3w.jl:13\\n\
    \  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpbdrtpd3w.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbdrtpd3w.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbdrtpd3w.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbdrtpd3w.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(180) == false\\n  MethodError: no method matching iscube(::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpbdrtpd3w.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpbdrtpd3w.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbdrtpd3w.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbdrtpd3w.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbdrtpd3w.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(1000) == true\\n  MethodError: no method matching iscube(::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpbdrtpd3w.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd0mrmila.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpd0mrmila.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd0mrmila.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd0mrmila.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return iscube(a, 0, a)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy0cdtoda.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  MethodError: no method matching\
    \ iscube(::Int64, ::Int64, ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64)\
    \ at /tmp/tmpy0cdtoda.jl:13\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @\
    \ Main /tmp/tmpy0cdtoda.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpy0cdtoda.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy0cdtoda.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpy0cdtoda.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  MethodError: no method matching iscube(::Int64, ::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpy0cdtoda.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpy0cdtoda.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmpy0cdtoda.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy0cdtoda.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpy0cdtoda.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  MethodError: no method matching iscube(::Int64, ::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpy0cdtoda.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpy0cdtoda.jl:19\\\
    n   [2] iscube(a::Int64)\\n     @ Main /tmp/tmpy0cdtoda.jl:17\\n   [3] macro expansion\\\
    n     @ /tmp/tmpy0cdtoda.jl:29 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy0cdtoda.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpy0cdtoda.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  MethodError: no method matching iscube(::Int64, ::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    isc"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a >= 0) && (a == round(Int64, a^(1/3)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgy4j57o3.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgy4j57o3.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgy4j57o3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgy4j57o3.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgy4j57o3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgy4j57o3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgy4j57o3.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgy4j57o3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgy4j57o3.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgy4j57o3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    if a == 1\n        return true\n    end\n    for i in 2:a\n    \
    \    if i^3 == a\n            return true\n        end\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a^(1/3))%1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp24mo4je6.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp24mo4je6.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmp24mo4je6.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp24mo4je6.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp24mo4je6.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp24mo4je6.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp24mo4je6.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmp24mo4je6.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp24mo4je6.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp24mo4je6.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 125\
    \ || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 ||\
    \ a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a == 117649\
    \ || a == -\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_dr24ue1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_dr24ue1.jl:1\n\
    in expression starting at /tmp/tmp_dr24ue1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || (a > 0 && (a == round(Int64, a^(1/3))^3))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp602udvhw.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp602udvhw.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp602udvhw.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp602udvhw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkg1udo1v.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpkg1udo1v.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkg1udo1v.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkg1udo1v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 8 ||\
    \ a == -8 || a == 27 || a == -27 || a == 125 || a == -125 || a == 216 || a ==\
    \ -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729 || a == -729\
    \ || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728\
    \ || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375\
    \ || a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832\
    \ || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823 || a\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppl2q9_vo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppl2q9_vo.jl:1\n\
    in expression starting at /tmp/tmppl2q9_vo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a < 0 && isinteger(cbrt(a))) || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (a % (round(Int64,(a^(1/3)))^3)\
    \ == 0))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9sm3vyon.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp9sm3vyon.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9sm3vyon.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9sm3vyon.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == round(a^(1/3))^3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx56vxd_u.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:901 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:355 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpx56vxd_u.jl:14\n   [5] macro expansion\n     @ /tmp/tmpx56vxd_u.jl:23\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpx56vxd_u.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx56vxd_u.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return iscube(a, 1)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgvp08ffi.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  MethodError: no method matching\
    \ iscube(::Int64, ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at\
    \ /tmp/tmpgvp08ffi.jl:13\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main\
    \ /tmp/tmpgvp08ffi.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpgvp08ffi.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgvp08ffi.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpgvp08ffi.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  MethodError: no method matching iscube(::Int64, ::Int64)\\\
    n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpgvp08ffi.jl:13\\n\
    \  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpgvp08ffi.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgvp08ffi.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgvp08ffi.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpgvp08ffi.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  MethodError: no method matching iscube(::Int64, ::Int64)\\\
    n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpgvp08ffi.jl:13\\n\
    \  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpgvp08ffi.jl:19\\\
    n   [2] iscube(a::Int64)\\n     @ Main /tmp/tmpgvp08ffi.jl:17\\n   [3] macro expansion\\\
    n     @ /tmp/tmpgvp08ffi.jl:29 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgvp08ffi.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpgvp08ffi.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  MethodError: no method matching iscube(::Int64, ::Int64)\\\
    n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpgvp08ffi.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy2tsr148.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpy2tsr148.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2tsr148.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpy2tsr148.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2tsr148.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2tsr148.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2tsr148.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpleskt_73.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpleskt_73.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpleskt_73.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpleskt_73.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpleskt_73.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpleskt_73.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpleskt_73.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (a == round(Int64, a^(1/3))^3))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && trunc(Int64, (a)^(1/3))^3 == a) || (a < 0 &&\
    \ trunc(Int64, (a)^(1/3))^3 == a)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4vyvxtxo.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp4vyvxtxo.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmp4vyvxtxo.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp4vyvxtxo.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp4vyvxtxo.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp4vyvxtxo.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4vyvxtxo.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmp4vyvxtxo.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp4vyvxtxo.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4vyvxtxo.jl:20\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    5     2      1      8\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a>=0) && (a==round(Int64,a^(1/3)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgtww2cvb.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgtww2cvb.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgtww2cvb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgtww2cvb.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgtww2cvb.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgtww2cvb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgtww2cvb.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgtww2cvb.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgtww2cvb.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgtww2cvb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || (a > 0 && (a % (round(Int64, (a)^(1/3))) ==\
    \ 0))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpiuobwik_.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpiuobwik_.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiuobwik_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpiuobwik_.jl:23\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiuobwik_.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiuobwik_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpiuobwik_.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiuobwik_.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiuobwik_.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiuobwik_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 return true end\n    if a < 0 return iscube(-a) end\n    for\
    \ i in 1:a\n        if i^3 == a return true end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwv_36wla.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwv_36wla.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwv_36wla.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwv_36wla.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwv_36wla.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwv_36wla.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwv_36wla.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a % 2 == 0) ? false : (a % 3 == 0) ? false : (a % 5 == 0) ? false\
    \ : (a % 7 == 0) ? false : (a % 11 == 0) ? false : (a % 13 == 0) ? false : (a\
    \ % 17 == 0) ? false : (a % 19 == 0) ? false : (a % 23 == 0) ? false : (a % 29\
    \ == 0) ? false : (a % 31 == 0) ? false : (a % 37 == 0) ? false : (a % 41 == 0)\
    \ ? false : (a % 43 == 0) ? false : (a % 47 == 0) ? false : (a % 53 == 0) ? false\
    \ : (a % 59 == 0) ? false : (a % 61 == 0) ? false : (a % 67 == 0) ? false : (a\
    \ % 71 == 0) ? false : (a % 73 == 0) ? false : (a % 79 == 0) ? false : (a % 83\
    \ == 0) ? false : (a % 89 == 0) ? false : (a % 97 == 0) ? false : (a % 101 ==\
    \ 0) ? false : (a % 103 == 0) ? false : (a % 107 == 0) ? false : (a % 109 == 0)\
    \ ? false : (a % 113 == 0) ? false : (a % 127 == 0) ? false : (a % 131 == 0) ?\
    \ false : (a % 137 == 0) ? false : (a % 139 == 0) ? false : (a % 149 == 0) ? false\
    \ : (a % 151 == 0) ? false : (a % 157 == 0) ? false : (a % 163 == 0) ? false :\
    \ (a % 167 == 0) ? false : (a % 173 == 0) ? false : (a % 179 == 0) ? false : (a\
    \ % 181 == 0) ? false : (a % 191 == 0) ? false : (a % 193 == 0) ? false : (a %\
    \ 197 == 0) ? false : (a % 199 == 0) ? false : (a % 211 == 0) ? false : (a % 223\
    \ == 0) ? false : (a % 227 == 0) ? false : (a % 229 == 0) ? false : (a % 233 ==\
    \ 0) ? false\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswoeivg5.jl:15\nin expression starting at\
    \ /tmp/tmpswoeivg5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || (a > 0 && a == round(a^(1/3))) || (a < 0 &&\
    \ a == round(a^(1/3)))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3oyct613.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp3oyct613.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmp3oyct613.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp3oyct613.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp3oyct613.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp3oyct613.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp3oyct613.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmp3oyct613.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp3oyct613.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp3oyct613.jl:20\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      | '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && (a % (round(Int64, (a)^(1/3))) == 0))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjnnm7iv.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpyjnnm7iv.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjnnm7iv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyjnnm7iv.jl:23\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyjnnm7iv.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjnnm7iv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyjnnm7iv.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyjnnm7iv.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjnnm7iv.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjnnm7iv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr36jinmn.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpr36jinmn.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr36jinmn.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr36jinmn.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr36jinmn.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr36jinmn.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr36jinmn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return iscube(a, 0, a)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4kzbt120.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  MethodError: no method matching\
    \ iscube(::Int64, ::Int64, ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64)\
    \ at /tmp/tmp4kzbt120.jl:13\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @\
    \ Main /tmp/tmp4kzbt120.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp4kzbt120.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4kzbt120.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp4kzbt120.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  MethodError: no method matching iscube(::Int64, ::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmp4kzbt120.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp4kzbt120.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4kzbt120.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4kzbt120.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp4kzbt120.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  MethodError: no method matching iscube(::Int64, ::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmp4kzbt120.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp4kzbt120.jl:19\\\
    n   [2] iscube(a::Int64)\\n     @ Main /tmp/tmp4kzbt120.jl:17\\n   [3] macro expansion\\\
    n     @ /tmp/tmp4kzbt120.jl:29 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4kzbt120.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp4kzbt120.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  MethodError: no method matching iscube(::Int64, ::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    isc"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpoeipyltn.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpoeipyltn.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoeipyltn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpoeipyltn.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoeipyltn.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoeipyltn.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoeipyltn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 return true end\n    if a < 0 return iscube(-a) end\n    if\
    \ a == 1 return true end\n    if a == 2 return false end\n    if a == 3 return\
    \ true end\n    if a == 4 return false end\n    if a == 5 return false end\n \
    \   if a == 6 return false end\n    if a == 7 return false end\n    if a == 8\
    \ return true end\n    if a == 9 return true end\n    if a == 10 return false\
    \ end\n    if a == 11 return false end\n    if a == 12 return false end\n    if\
    \ a == 13 return false end\n    if a == 14 return false end\n    if a == 15 return\
    \ false end\n    if a == 16 return true end\n    if a == 17 return false end\n\
    \    if a == 18 return false end\n    if a == 19 return false end\n    if a ==\
    \ 20 return false end\n    if a == 21 return false end\n    if a == 22 return\
    \ false end\n    if a == 23 return false end\n    if a == 24 return false end\n\
    \    if a == 25 return true end\n    if a == 26 return false end\n    if a ==\
    \ 27 return true end\n    if a == 28 return false end\n    if a == 29 return false\
    \ end\n    if a == 30 return false end\n    if a == 31 return false end\n    if\
    \ a == 32 return true end\n    if a == 33 return false end\n    if a == 34 return\
    \ false end\n    if a == 35 return false end\n    if a == 36 return false end\n\
    \    if a == 37 return false end\n    if a == 38 return false end\n    if a ==\
    \ 39 return false end\n    if a == 40 return false end\n    if a == 41 return\
    \ false end\n    if a == 42 return false end\n    if a == 43 return false end\n\
    \    if a == 44 return false end\n    if a == 45 return false end\n    if a ==\
    \ 46 return false end\n    if a == 47 return false end\n    if a == 48 return\
    \ false end\n    if a == 49 return true end\n    if a == 50 return false end\n\
    \    if a == 51 return false end\n    if a == 52 return false end\n    if a ==\
    \ 53 return false end\n    if a == 54 return false end\n    if a\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgx3er3aj.jl:1\nin expression starting at /tmp/tmpgx3er3aj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    return (a^(1/3))%1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4zq5oamo.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4zq5oamo.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4zq5oamo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4zq5oamo.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4zq5oamo.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4zq5oamo.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zq5oamo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && iscube(a, 1))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjf6o6aic.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == false\\n  MethodError: no method matching\
    \ iscube(::Int64, ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at\
    \ /tmp/tmpjf6o6aic.jl:13\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main\
    \ /tmp/tmpjf6o6aic.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpjf6o6aic.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjf6o6aic.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpjf6o6aic.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  MethodError: no method matching iscube(::Int64, ::Int64)\\\
    n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpjf6o6aic.jl:13\\n\
    \  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpjf6o6aic.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjf6o6aic.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjf6o6aic.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpjf6o6aic.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(180) == false\\n  MethodError: no method matching iscube(::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpjf6o6aic.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpjf6o6aic.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjf6o6aic.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjf6o6aic.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpjf6o6aic.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(1000) == true\\n  MethodError: no method matching iscube(::Int64,\
    \ ::Int64)\\n  Closest candidates are:\\n    iscube(::Int64) at /tmp/tmpjf6o6aic.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        for i in 1:a\n            if i^3 == a\n                return\
    \ true\n            end\n        end\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 \n        return true\n    end\n    if a < 0 \n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || (a < 0 && iscube(-a)) || (a > 0 && iscube(a\
    \ - 1) && iscube(a + 1))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9ybd8_op.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == false\n  StackOverflowError:\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmp9ybd8_op.jl:13\ntest set: Error During\
    \ Test at /tmp/tmp9ybd8_op.jl:24\n  Test threw exception\n  Expression: candidate(64)\
    \ == true\n  StackOverflowError:\n  Stacktrace:\n   [1] iscube(a::Int64)\n   \
    \  @ Main /tmp/tmp9ybd8_op.jl:13\ntest set: Error During Test at /tmp/tmp9ybd8_op.jl:25\n\
    \  Test threw exception\n  Expression: candidate(180) == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp9ybd8_op.jl:13\n\
    test set: Error During Test at /tmp/tmp9ybd8_op.jl:26\n  Test threw exception\n\
    \  Expression: candidate(1000) == true\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp9ybd8_op.jl:13\ntest set: Error\
    \ During Test at /tmp/tmp9ybd8_op.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1729) == false\n  StackOverflowError:\n  Stacktrace:\n   [1] iscube(a::Int64)\n\
    \     @ Main /tmp/tmp9ybd8_op.jl:13\nTest Summary: | Pass  Error  Total\ntest\
    \ set      |    3      5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ybd8_op.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        b = floor(Int64, a^(1/3))\n        return a == b^3\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvtqsgfhi.jl:31\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvtqsgfhi.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvtqsgfhi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpvtqsgfhi.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvtqsgfhi.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvtqsgfhi.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvtqsgfhi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz18pckyg.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpz18pckyg.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz18pckyg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz18pckyg.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz18pckyg.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz18pckyg.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz18pckyg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 \n        return true\n    end\n    if a < 0 \n        a = -a\n\
    \    end\n    if a == 1 \n        return true\n    end\n    for i in 2:a\n   \
    \     if i^3 == a\n            return true\n        end\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (a % (round(Int64, (a)^(1/3)))\
    \ == 0))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpinn97uq9.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpinn97uq9.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinn97uq9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpinn97uq9.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinn97uq9.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinn97uq9.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinn97uq9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 return true end\n    if a < 0 return iscube(-a) end\n    i =\
    \ 1\n    while i*i*i <= a\n        if i*i*i == a return true end\n        i +=\
    \ 1\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a>=0 && a == round(a^(1/3))^3\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiv46cqxt.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpiv46cqxt.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiv46cqxt.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiv46cqxt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && isinteger(cbrt(a)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjl2zv1qt.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpjl2zv1qt.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjl2zv1qt.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjl2zv1qt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(round(cbrt(a),\
    \ digits=10)))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpytepjqgj.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpytepjqgj.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytepjqgj.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytepjqgj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmplhdavtt5.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmplhdavtt5.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplhdavtt5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplhdavtt5.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplhdavtt5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplhdavtt5.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplhdavtt5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7i78tfb.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpp7i78tfb.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7i78tfb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp7i78tfb.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7i78tfb.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7i78tfb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7i78tfb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmppinsqchb.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmppinsqchb.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppinsqchb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppinsqchb.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppinsqchb.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppinsqchb.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppinsqchb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (a % (round(Int64, (a)^(1/3)))\
    \ == 0))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmpz1b4c6.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpmpz1b4c6.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmpz1b4c6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmpz1b4c6.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmpz1b4c6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmpz1b4c6.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmpz1b4c6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        for i in 1:a\n            if i^3 == a\n                return\
    \ true\n            end\n        end\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && (round(Int64, a^(1/3)) == a^(1/3)))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt328abb2.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpt328abb2.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt328abb2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpt328abb2.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt328abb2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt328abb2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpt328abb2.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt328abb2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt328abb2.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt328abb2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppu46x0lw.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmppu46x0lw.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppu46x0lw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppu46x0lw.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppu46x0lw.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppu46x0lw.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppu46x0lw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a >= 0) && (a == round(Int64, a^(1/3)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr4qyjn3y.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpr4qyjn3y.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr4qyjn3y.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr4qyjn3y.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr4qyjn3y.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr4qyjn3y.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr4qyjn3y.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr4qyjn3y.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr4qyjn3y.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr4qyjn3y.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1 || a == -1\n        return true\n    end\n    if a\
    \ < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3 == a\n      \
    \      return true\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvbq0kdru.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvbq0kdru.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvbq0kdru.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvbq0kdru.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvbq0kdru.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvbq0kdru.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbq0kdru.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        x = round(Int64, a^(1/3))\n        return x^3 == a\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a == 0) || (a == 1) || (a == -1) || (a > 0 && a % 8 == 1) || (a\
    \ < 0 && a % 8 == 7)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqrzfyky9.jl:24\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpqrzfyky9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqrzfyky9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqrzfyky9.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqrzfyky9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqrzfyky9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqrzfyky9.jl:28\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqrzfyky9.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqrzfyky9.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqrzfyky9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && round(Int64, a^(1/3))^3\
    \ == a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdgmoph_9.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdgmoph_9.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdgmoph_9.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdgmoph_9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && (round(Int64, a^(1/3))^3 == a))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfa0ed_dd.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpfa0ed_dd.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfa0ed_dd.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfa0ed_dd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(round(cbrt(a),\
    \ digits=10)))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a^(1/3))%1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaoyczkyt.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpaoyczkyt.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmpaoyczkyt.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpaoyczkyt.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpaoyczkyt.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpaoyczkyt.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpaoyczkyt.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpaoyczkyt.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpaoyczkyt.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpaoyczkyt.jl:20\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    5     2      1      8\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a == 0) || (a > 0 && (round(Int64, a^(1/3))^3 == a)) || (a < 0\
    \ && (round(Int64, -a^(1/3))^3 == -a))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3bl35amr.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:901 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:355 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp3bl35amr.jl:14\n   [5] macro expansion\n     @ /tmp/tmp3bl35amr.jl:23\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3bl35amr.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3bl35amr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a>=0) && (a^(1/3) % 1 == 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4awbpbc.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpn4awbpbc.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn4awbpbc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpn4awbpbc.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn4awbpbc.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn4awbpbc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpn4awbpbc.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn4awbpbc.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn4awbpbc.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4awbpbc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && floor(cbrt(a))^3 == a) || (a < 0 && floor(-cbrt(a))^3\
    \ == a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpw4b7vmud.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpw4b7vmud.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw4b7vmud.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4b7vmud.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a in [x^3 for x in 1:abs(a)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4w7em68o.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4w7em68o.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4w7em68o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4w7em68o.jl:27\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4w7em68o.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4w7em68o.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4w7em68o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (a % (round(Int64, (a)^(1/3)))\
    \ == 0))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1toammp8.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp1toammp8.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1toammp8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1toammp8.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1toammp8.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1toammp8.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1toammp8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == Int64(round(a^(1/3)))^3\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpysqjwt12.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:901 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:355 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpysqjwt12.jl:14\n   [5] macro expansion\n     @ /tmp/tmpysqjwt12.jl:23\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpysqjwt12.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpysqjwt12.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i = 1:a\n        if i^3 == a\n            return true\n    \
    \    end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 8 ||\
    \ a == -8 || a == 27 || a == -27 || a == 125 || a == -125 || a == 216 || a ==\
    \ -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729 || a == -729\
    \ || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728\
    \ || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375\
    \ || a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832\
    \ || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823 || a\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuku4uog5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuku4uog5.jl:1\n\
    in expression starting at /tmp/tmpuku4uog5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5xcetvm7.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp5xcetvm7.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5xcetvm7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5xcetvm7.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5xcetvm7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5xcetvm7.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5xcetvm7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 125\
    \ || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 ||\
    \ a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a == 117649\
    \ || a == -\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm96l9u1z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm96l9u1z.jl:1\n\
    in expression starting at /tmp/tmpm96l9u1z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a>=0) && (a^(1/3) % 1 == 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmeagpq91.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpmeagpq91.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmeagpq91.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmeagpq91.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmeagpq91.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmeagpq91.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmeagpq91.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmeagpq91.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmeagpq91.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmeagpq91.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a > 0 && isinteger(cbrt(a))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1 || a == -1\n        return true\n    end\n    if a\
    \ < 0\n        a = -a\n    end\n    for i in 1:a\n        if i^3 == a\n      \
    \      return true\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvl691h46.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpvl691h46.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvl691h46.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvl691h46.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvl691h46.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvl691h46.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvl691h46.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && floor(a^(1/3))^3 == a) || (a < 0 && floor(-a^(1/3))^3\
    \ == -a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx6kfdo1r.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpx6kfdo1r.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmpx6kfdo1r.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpx6kfdo1r.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpx6kfdo1r.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpx6kfdo1r.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpx6kfdo1r.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpx6kfdo1r.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpx6kfdo1r.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpx6kfdo1r.jl:20\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    5     2      1      8\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 0:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i = 1:a\n        if i^3 == a\n            return true\n    \
    \    end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 125\
    \ || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 ||\
    \ a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a == 117649\
    \ || a == -\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq_ctfbtx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq_ctfbtx.jl:1\n\
    in expression starting at /tmp/tmpq_ctfbtx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a >= 0) && (a == round(Int64, a^(1/3)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpykqbliw7.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpykqbliw7.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpykqbliw7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpykqbliw7.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpykqbliw7.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpykqbliw7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpykqbliw7.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpykqbliw7.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpykqbliw7.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykqbliw7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (round(Int64,(a^(1/3)))^3)\
    \ == a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (round(Int64, (a)^(1/3))^3\
    \ == a))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && trunc(Int64, cbrt(a))^3 == a) || (a < 0 &&\
    \ trunc(Int64, cbrt(-a))^3 == -a)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a>=0) && (a^(1/3) % 1 == 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwe34i5lm.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwe34i5lm.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwe34i5lm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwe34i5lm.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwe34i5lm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwe34i5lm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwe34i5lm.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwe34i5lm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwe34i5lm.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwe34i5lm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcwbm0me4.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpcwbm0me4.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwbm0me4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcwbm0me4.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwbm0me4.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwbm0me4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcwbm0me4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        for i in 1:a\n            if i^3 == a\n                return\
    \ true\n            end\n        end\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpupymthbe.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpupymthbe.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpupymthbe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpupymthbe.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpupymthbe.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpupymthbe.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpupymthbe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzcu88yyl.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpzcu88yyl.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzcu88yyl.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzcu88yyl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && (a % (round(Int64, (a)^(1/3))) == 0))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf2dqvth7.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpf2dqvth7.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2dqvth7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf2dqvth7.jl:23\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2dqvth7.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2dqvth7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf2dqvth7.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2dqvth7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2dqvth7.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf2dqvth7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && trunc(Int64, a^(1/3))^3 == a) || (a < 0 &&\
    \ trunc(Int64, -a^(1/3))^3 == -a)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnpx4itol.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpnpx4itol.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmpnpx4itol.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpnpx4itol.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpnpx4itol.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpnpx4itol.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnpx4itol.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpnpx4itol.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpnpx4itol.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnpx4itol.jl:20\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    5  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return isqrt(a)^3 == a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpie26o2x1.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:582\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:608 [inlined]\\n   [4] isqrt(x::Int64)\\\
    n     @ Base ./intfuncs.jl:924\\n   [5] iscube(a::Int64)\\n     @ Main /tmp/tmpie26o2x1.jl:14\\\
    n   [6] macro expansion\\n     @ /tmp/tmpie26o2x1.jl:23 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpie26o2x1.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpie26o2x1.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpie26o2x1.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpie26o2x1.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpie26o2x1.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpie26o2x1.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpie26o2x1.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        for i in 1:a\n            if i^3 == a\n                return\
    \ true\n            end\n        end\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa1s51yrm.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpa1s51yrm.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa1s51yrm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpa1s51yrm.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa1s51yrm.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa1s51yrm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa1s51yrm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || (a < 0 && iseven(a)) || (a > 0 && iseven(a)\
    \ && iscube(a/8))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf2f8n2_n.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == false\\n  MethodError: no method matching\
    \ iscube(::Float64)\\n  Closest candidates are:\\n    iscube(!Matched::Int64)\
    \ at /tmp/tmpf2f8n2_n.jl:13\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @\
    \ Main /tmp/tmpf2f8n2_n.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpf2f8n2_n.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf2f8n2_n.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpf2f8n2_n.jl:23\\n  Expression: candidate(-1) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpf2f8n2_n.jl:23\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpf2f8n2_n.jl:20\\ntest set: Error\
    \ During Test at /tmp/tmpf2f8n2_n.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  MethodError: no method matching iscube(::Float64)\\\
    n  Closest candidates are:\\n    iscube(!Matched::Int64) at /tmp/tmpf2f8n2_n.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpf2f8n2_n.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf2f8n2_n.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf2f8n2_n.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyso3jp7b.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyso3jp7b.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyso3jp7b.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyso3jp7b.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyso3jp7b.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyso3jp7b.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyso3jp7b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64 || a == 125\
    \ || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 ||\
    \ a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a == 117649\
    \ || a == -\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt4n6gcp1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt4n6gcp1.jl:1\n\
    in expression starting at /tmp/tmpt4n6gcp1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (a % (round(Int64, (a)^(1/3)))\
    \ == 0))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb1ofjzlm.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpb1ofjzlm.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb1ofjzlm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb1ofjzlm.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb1ofjzlm.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb1ofjzlm.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb1ofjzlm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % Int(round(cbrt(a)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpa8whg9de.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpa8whg9de.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa8whg9de.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpa8whg9de.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa8whg9de.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa8whg9de.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8whg9de.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && trunc(Int64, cbrt(a))^3 == a) || (a < 0 &&\
    \ trunc(Int64, cbrt(-a))^3 == -a)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 ||\
    \ a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a ==\
    \ 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a ==\
    \ 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a\
    \ == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952\
    \ || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a ==\
    \ 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319\
    \ || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a ==\
    \ 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000\
    \ || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 ||\
    \ a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a\
    \ == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a ==\
    \ 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911\
    \ || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 ||\
    \ a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a\
    \ == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a ==\
    \ 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688\
    \ || a == 804357 || a == 830584 || a == 857\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcb2pb_hu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcb2pb_hu.jl:1\n\
    in expression starting at /tmp/tmpcb2pb_hu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i*i*i == a\n            return true\n \
    \       end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && floor(a^(1/3))^3 == a) || (a < 0 && floor(-a^(1/3))^3\
    \ == -a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1qh_dt_9.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp1qh_dt_9.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmp1qh_dt_9.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp1qh_dt_9.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp1qh_dt_9.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp1qh_dt_9.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1qh_dt_9.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmp1qh_dt_9.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp1qh_dt_9.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1qh_dt_9.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && floor(a^(1/3))^3 == a) || (a < 0 && floor(a^(1/3))^3\
    \ == -a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg8stc6cc.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpg8stc6cc.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmpg8stc6cc.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpg8stc6cc.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpg8stc6cc.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpg8stc6cc.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpg8stc6cc.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpg8stc6cc.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpg8stc6cc.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpg8stc6cc.jl:20\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    5     2      1      8\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppvc2wg8e.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmppvc2wg8e.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppvc2wg8e.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppvc2wg8e.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(cbrt(a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == round(a^(1/3))^3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp79er9wms.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:901 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:355 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp79er9wms.jl:14\n   [5] macro expansion\n     @ /tmp/tmp79er9wms.jl:23\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp79er9wms.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79er9wms.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp46mjwgsi.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp46mjwgsi.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46mjwgsi.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46mjwgsi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 ? true : a > 0 ? isapprox(a, round(a^(1/3))) : isapprox(a,\
    \ round(-a^(1/3)))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe4bbaoii.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpe4bbaoii.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmpe4bbaoii.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpe4bbaoii.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpe4bbaoii.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpe4bbaoii.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe4bbaoii.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpe4bbaoii.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpe4bbaoii.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe4bbaoii.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % round(Int64, cbrt(a))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsd2uixsx.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpsd2uixsx.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsd2uixsx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsd2uixsx.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsd2uixsx.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsd2uixsx.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsd2uixsx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (a % (round(Int64, (a)^(1/3)))\
    \ == 0))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpze_6ld4b.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpze_6ld4b.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpze_6ld4b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpze_6ld4b.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpze_6ld4b.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpze_6ld4b.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpze_6ld4b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && floor(Int64, a^(1/3))^3 == a) || (a < 0 &&\
    \ floor(Int64, -a^(1/3))^3 == -a)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpalzcvtcj.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:901 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:355 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpalzcvtcj.jl:14\\n   [5] macro expansion\\n     @ /tmp/tmpalzcvtcj.jl:23\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpalzcvtcj.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpalzcvtcj.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpalzcvtcj.jl:24\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpalzcvtcj.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpalzcvtcj.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpalzcvtcj.jl:26\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpalzcvtcj.jl:20\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    5     2      1      8\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0 \n        return iscube(-a)\n    end\n    if a == 0 \n      \
    \  return true\n    end\n    if a == 1 \n        return true\n    end\n    if\
    \ a == 2 \n        return false\n    end\n    if a == 3 \n        return false\n\
    \    end\n    if a == 4 \n        return true\n    end\n    if a == 5 \n     \
    \   return false\n    end\n    if a == 6 \n        return false\n    end\n   \
    \ if a == 7 \n        return false\n    end\n    if a == 8 \n        return true\n\
    \    end\n    if a == 9 \n        return true\n    end\n    if a == 10 \n    \
    \    return false\n    end\n    if a == 11 \n        return false\n    end\n \
    \   if a == 12 \n        return false\n    end\n    if a == 13 \n        return\
    \ false\n    end\n    if a == 14 \n        return false\n    end\n    if a ==\
    \ 15 \n        return false\n    end\n    if a == 16 \n        return true\n \
    \   end\n    if a == 17 \n        return false\n    end\n    if a == 18 \n   \
    \     return false\n    end\n    if a == 19 \n        return false\n    end\n\
    \    if a == 20 \n        return false\n    end\n    if a == 21 \n        return\
    \ false\n    end\n    if a == 22 \n        return false\n    end\n    if a ==\
    \ 23 \n        return false\n    end\n    if a == 24 \n        return false\n\
    \    end\n    if a == 25 \n        return true\n    end\n    if a == 26 \n   \
    \     return false\n    end\n    if a == 27 \n        return true\n    end\n \
    \   if a == 28 \n        return false\n    end\n    if a == 29 \n        return\
    \ false\n    end\n    if a == 30 \n        return false\n    end\n    if a ==\
    \ 31 \n        return false\n    end\n    if a == 32 \n        return false\n\
    \    end\n    if a == 33 \n        return false\n    end\n    if a == 34 \n  \
    \      return false\n    end\n    if a\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe18z9yoh.jl:1\nin expression starting at /tmp/tmpe18z9yoh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphjkeealx.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphjkeealx.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjkeealx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphjkeealx.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjkeealx.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjkeealx.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjkeealx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfekaxh5i.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpfekaxh5i.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfekaxh5i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfekaxh5i.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfekaxh5i.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfekaxh5i.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfekaxh5i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph8l6z2og.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmph8l6z2og.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph8l6z2og.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph8l6z2og.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph8l6z2og.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph8l6z2og.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph8l6z2og.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0 \n        a = -a\n    end\n    for i in 1:a\n        if i^3 ==\
    \ a\n            return true\n        end\n    end\n    return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb22dsfub.jl:35\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpb22dsfub.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb22dsfub.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb22dsfub.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && floor(a^(1/3))^3 == a)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsdng2b5l.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsdng2b5l.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdng2b5l.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsdng2b5l.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsdng2b5l.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdng2b5l.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsdng2b5l.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsdng2b5l.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdng2b5l.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsdng2b5l.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a >= 0 && a == round(Int64, a^(1/3))^3\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx9u63bnv.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpx9u63bnv.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx9u63bnv.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9u63bnv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwi8xxki3.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwi8xxki3.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwi8xxki3.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwi8xxki3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return iscube(-a)\n    end\n    if a == 0\n        return\
    \ true\n    end\n    if a == 1\n        return true\n    end\n    if a == 2\n\
    \        return false\n    end\n    if a == 3\n        return true\n    end\n\
    \    if a == 4\n        return false\n    end\n    if a == 5\n        return false\n\
    \    end\n    if a == 6\n        return false\n    end\n    if a == 7\n      \
    \  return false\n    end\n    if a == 8\n        return true\n    end\n    if\
    \ a == 9\n        return true\n    end\n    if a == 10\n        return false\n\
    \    end\n    if a == 11\n        return false\n    end\n    if a == 12\n    \
    \    return false\n    end\n    if a == 13\n        return false\n    end\n  \
    \  if a == 14\n        return false\n    end\n    if a == 15\n        return false\n\
    \    end\n    if a == 16\n        return true\n    end\n    if a == 17\n     \
    \   return false\n    end\n    if a == 18\n        return false\n    end\n   \
    \ if a == 19\n        return false\n    end\n    if a == 20\n        return false\n\
    \    end\n    if a == 21\n        return false\n    end\n    if a == 22\n    \
    \    return false\n    end\n    if a == 23\n        return false\n    end\n  \
    \  if a == 24\n        return false\n    end\n    if a == 25\n        return true\n\
    \    end\n    if a == 26\n        return false\n    end\n    if a == 27\n    \
    \    return true\n    end\n    if a == 28\n        return false\n    end\n   \
    \ if a == 29\n        return false\n    end\n    if a == 30\n        return false\n\
    \    end\n    if a == 31\n        return false\n    end\n    if a == 32\n    \
    \    return false\n    end\n    if a == 33\n        return false\n    end\n  \
    \  if a == 34\n        return false\n    end\n    if a == 35\n        return false\n\
    \    end\n    if a == 36\n        return false\n    end\n    if a == 37\n    \
    \    return false\n    end\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsfkyhlgw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsfkyhlgw.jl:1\n\
    in expression starting at /tmp/tmpsfkyhlgw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && (round(Int64, a^(1/3))^3 == a))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppv5cuxr1.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmppv5cuxr1.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppv5cuxr1.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppv5cuxr1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || (a < 0 && iscube(-a)) || (a > 0 && iscube(a\
    \ - 1) && iscube(a - 2))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz0q3r16p.jl:22\\n  Expression: candidate(2)\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpz0q3r16p.jl:22 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpz0q3r16p.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return isapprox(a, round(a^(1/3)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqdcw7ct2.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpqdcw7ct2.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqdcw7ct2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqdcw7ct2.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqdcw7ct2.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqdcw7ct2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdcw7ct2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == round(a^(1/3))^3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp23pj5qp6.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:901 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:355 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp23pj5qp6.jl:14\n   [5] macro expansion\n     @ /tmp/tmp23pj5qp6.jl:23\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp23pj5qp6.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp23pj5qp6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && (a % (round(Int64, (a)^(1/3)))\
    \ == 0))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqg7qmtrf.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpqg7qmtrf.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqg7qmtrf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqg7qmtrf.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqg7qmtrf.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqg7qmtrf.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqg7qmtrf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a > 0 && isinteger(cbrt(a))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i = 1:a\n        if i^3 == a\n            return true\n    \
    \    end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a>=0) && (a == round(Int64, a^(1/3)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpksthusjq.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpksthusjq.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpksthusjq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpksthusjq.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpksthusjq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpksthusjq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpksthusjq.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpksthusjq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpksthusjq.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpksthusjq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu3d760dt.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpu3d760dt.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu3d760dt.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3d760dt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzegbcrlm.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpzegbcrlm.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzegbcrlm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzegbcrlm.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzegbcrlm.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzegbcrlm.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzegbcrlm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && isinteger(round(cbrt(a))))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxbk0vtmc.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpxbk0vtmc.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxbk0vtmc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxbk0vtmc.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxbk0vtmc.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxbk0vtmc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxbk0vtmc.jl:28\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxbk0vtmc.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxbk0vtmc.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbk0vtmc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return iscube(-a)\n    end\n    if a == 0\n        return\
    \ true\n    end\n    if a == 1\n        return true\n    end\n    if a == 2\n\
    \        return false\n    end\n    if a == 3\n        return true\n    end\n\
    \    if a == 4\n        return false\n    end\n    if a == 5\n        return false\n\
    \    end\n    if a == 6\n        return false\n    end\n    if a == 7\n      \
    \  return false\n    end\n    if a == 8\n        return true\n    end\n    if\
    \ a == 9\n        return true\n    end\n    if a == 10\n        return false\n\
    \    end\n    if a == 11\n        return false\n    end\n    if a == 12\n    \
    \    return false\n    end\n    if a == 13\n        return false\n    end\n  \
    \  if a == 14\n        return false\n    end\n    if a == 15\n        return false\n\
    \    end\n    if a == 16\n        return true\n    end\n    if a == 17\n     \
    \   return false\n    end\n    if a == 18\n        return false\n    end\n   \
    \ if a == 19\n        return false\n    end\n    if a == 20\n        return false\n\
    \    end\n    if a == 21\n        return false\n    end\n    if a == 22\n    \
    \    return false\n    end\n    if a == 23\n        return false\n    end\n  \
    \  if a == 24\n        return false\n    end\n    if a == 25\n        return true\n\
    \    end\n    if a == 26\n        return false\n    end\n    if a == 27\n    \
    \    return true\n    end\n    if a == 28\n        return false\n    end\n   \
    \ if a == 29\n        return false\n    end\n    if a == 30\n        return false\n\
    \    end\n    if a == 31\n        return false\n    end\n    if a == 32\n    \
    \    return false\n    end\n    if a == 33\n        return false\n    end\n  \
    \  if a == 34\n        return false\n    end\n    if a == 35\n        return false\n\
    \    end\n    if a == 36\n        return false\n    end\n    if a == 37\n    \
    \    return false\n    end\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo07wzpd7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo07wzpd7.jl:1\n\
    in expression starting at /tmp/tmpo07wzpd7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && a % (round(Int64, (a)^(1/3)))\
    \ == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnf_te3qi.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpnf_te3qi.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnf_te3qi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnf_te3qi.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnf_te3qi.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnf_te3qi.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnf_te3qi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || a == 64\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0awusfu0.jl:26\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0awusfu0.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0awusfu0.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0awusfu0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && floor(a^(1/3))^3 == a) || (a < 0 && floor(-a^(1/3))^3\
    \ == -a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpi3fdd7xe.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:901 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:355 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpi3fdd7xe.jl:14\n   [5] macro expansion\n     @ /tmp/tmpi3fdd7xe.jl:23\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpi3fdd7xe.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpi3fdd7xe.jl:24\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi3fdd7xe.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3fdd7xe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi3fdd7xe.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi3fdd7xe.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3fdd7xe.jl:20\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi3fdd7xe.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || a == -1 || (a > 0 && floor(cbrt(a))^3 == a)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return iscube(-a)\n    end\n    if a == 0\n        return\
    \ true\n    end\n    if a == 1\n        return true\n    end\n    if a == 2\n\
    \        return false\n    end\n    if a == 3\n        return true\n    end\n\
    \    if a == 4\n        return false\n    end\n    if a == 5\n        return false\n\
    \    end\n    if a == 6\n        return false\n    end\n    if a == 7\n      \
    \  return false\n    end\n    if a == 8\n        return true\n    end\n    if\
    \ a == 9\n        return true\n    end\n    if a == 10\n        return false\n\
    \    end\n    if a == 11\n        return false\n    end\n    if a == 12\n    \
    \    return false\n    end\n    if a == 13\n        return false\n    end\n  \
    \  if a == 14\n        return false\n    end\n    if a == 15\n        return false\n\
    \    end\n    if a == 16\n        return true\n    end\n    if a == 17\n     \
    \   return false\n    end\n    if a == 18\n        return false\n    end\n   \
    \ if a == 19\n        return false\n    end\n    if a == 20\n        return false\n\
    \    end\n    if a == 21\n        return false\n    end\n    if a == 22\n    \
    \    return false\n    end\n    if a == 23\n        return false\n    end\n  \
    \  if a == 24\n        return false\n    end\n    if a == 25\n        return true\n\
    \    end\n    if a == 26\n        return false\n    end\n    if a == 27\n    \
    \    return true\n    end\n    if a == 28\n        return false\n    end\n   \
    \ if a == 29\n        return false\n    end\n    if a == 30\n        return false\n\
    \    end\n    if a == 31\n        return false\n    end\n    if a == 32\n    \
    \    return false\n    end\n    if a == 33\n        return false\n    end\n  \
    \  if a == 34\n        return false\n    end\n    if a == 35\n        return false\n\
    \    end\n    if a == 36\n        return false\n    end\n    if a == 37\n    \
    \    return false\n    end\n\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5mc8_idk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5mc8_idk.jl:1\n\
    in expression starting at /tmp/tmp5mc8_idk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    for i in 1:a\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return iscube(a, 1)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0l306mzr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: no method matching iscube(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    iscube(::Int64) at /tmp/tmp0l306mzr.jl:13\n\
    \  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp0l306mzr.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp0l306mzr.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0l306mzr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0l306mzr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: no method matching iscube(::Int64, ::Int64)\n\
    \  Closest candidates are:\n    iscube(::Int64) at /tmp/tmp0l306mzr.jl:13\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp0l306mzr.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp0l306mzr.jl:28 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0l306mzr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0l306mzr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  MethodError: no method matching iscube(::Int64, ::Int64)\n\
    \  Closest candidates are:\n    iscube(::Int64) at /tmp/tmp0l306mzr.jl:13\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp0l306mzr.jl:19\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmp0l306mzr.jl:17\n   [3] macro expansion\n     @ /tmp/tmp0l306mzr.jl:29\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0l306mzr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0l306mzr.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  MethodError: no method matching iscube(::Int64, ::Int64)\n\
    \  Closest candidates are:\n    iscube(::Int64) at /tmp/tmp0l306mzr.jl:13\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0l306mzr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        for i in 1:a\n            if i^3 == a\n                return\
    \ true\n            end\n        end\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return (floor(a^(1/3))^3 == a)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiq4iad5f.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpiq4iad5f.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiq4iad5f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiq4iad5f.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiq4iad5f.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiq4iad5f.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiq4iad5f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        return iscube(-a)\n\
    \    else\n        return iscube(a, 1)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpszhaao22.jl:27\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: no method matching iscube(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    iscube(::Int64) at /tmp/tmpszhaao22.jl:13\n\
    \  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmpszhaao22.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpszhaao22.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpszhaao22.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpszhaao22.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: no method matching iscube(::Int64, ::Int64)\n\
    \  Closest candidates are:\n    iscube(::Int64) at /tmp/tmpszhaao22.jl:13\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpszhaao22.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpszhaao22.jl:28 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpszhaao22.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpszhaao22.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  MethodError: no method matching iscube(::Int64, ::Int64)\n\
    \  Closest candidates are:\n    iscube(::Int64) at /tmp/tmpszhaao22.jl:13\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpszhaao22.jl:19\n   [2] iscube(a::Int64)\n\
    \     @ Main /tmp/tmpszhaao22.jl:17\n   [3] macro expansion\n     @ /tmp/tmpszhaao22.jl:29\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpszhaao22.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpszhaao22.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  MethodError: no method matching iscube(::Int64, ::Int64)\n\
    \  Closest candidates are:\n    iscube(::Int64) at /tmp/tmpszhaao22.jl:13\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpszhaao22.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || (a > 0 && (a % (round(Int64, (a)^(1/3))) == 0))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbf9wnhhe.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpbf9wnhhe.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbf9wnhhe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbf9wnhhe.jl:23\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbf9wnhhe.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbf9wnhhe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbf9wnhhe.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbf9wnhhe.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbf9wnhhe.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbf9wnhhe.jl:18\n"
  exit_code: 1
  status: SyntaxError
