name: HumanEval_78_hex_key
language: julia
results:
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n    count = 0\n    for i in num\n        if i in primes\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4jcmav2.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpn4jcmav2.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4jcmav2.jl:32\ntest set: Test Failed at /tmp/tmpn4jcmav2.jl:34\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4jcmav2.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4jcmav2.jl:32\ntest set: Test Failed at /tmp/tmpn4jcmav2.jl:35\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4jcmav2.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4jcmav2.jl:32\ntest set: Test Failed at /tmp/tmpn4jcmav2.jl:36\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn4jcmav2.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4jcmav2.jl:32\ntest set: Test Failed at /tmp/tmpn4jcmav2.jl:37\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4jcmav2.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4jcmav2.jl:32\ntest set: Test Failed at /tmp/tmpn4jcmav2.jl:38\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpn4jcmav2.jl:38\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4jcmav2.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4jcmav2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_prime = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in\
    \ hex_digits_prime\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvwi1xye5.jl:35\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpvwi1xye5.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwi1xye5.jl:34\ntest set: Test Failed at /tmp/tmpvwi1xye5.jl:36\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwi1xye5.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwi1xye5.jl:34\ntest set: Test Failed at /tmp/tmpvwi1xye5.jl:37\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwi1xye5.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwi1xye5.jl:34\ntest set: Test Failed at /tmp/tmpvwi1xye5.jl:38\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvwi1xye5.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwi1xye5.jl:34\ntest set: Test Failed at /tmp/tmpvwi1xye5.jl:39\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwi1xye5.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwi1xye5.jl:34\ntest set: Test Failed at /tmp/tmpvwi1xye5.jl:40\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpvwi1xye5.jl:40\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvwi1xye5.jl:34\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvwi1xye5.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4821yk6x.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp4821yk6x.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4821yk6x.jl:31\ntest set: Test Failed at /tmp/tmp4821yk6x.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4821yk6x.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4821yk6x.jl:31\ntest set: Test Failed at /tmp/tmp4821yk6x.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4821yk6x.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4821yk6x.jl:31\ntest set: Test Failed at /tmp/tmp4821yk6x.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4821yk6x.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4821yk6x.jl:31\ntest set: Test Failed at /tmp/tmp4821yk6x.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4821yk6x.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4821yk6x.jl:31\ntest set: Test Failed at /tmp/tmp4821yk6x.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp4821yk6x.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4821yk6x.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4821yk6x.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplxnfb69v.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmplxnfb69v.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplxnfb69v.jl:31\\ntest set: Test Failed at /tmp/tmplxnfb69v.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplxnfb69v.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplxnfb69v.jl:31\\ntest set: Test Failed at /tmp/tmplxnfb69v.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplxnfb69v.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplxnfb69v.jl:31\\ntest set: Test Failed at /tmp/tmplxnfb69v.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplxnfb69v.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplxnfb69v.jl:31\\ntest set: Test Failed at /tmp/tmplxnfb69v.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplxnfb69v.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplxnfb69v.jl:31\\ntest set: Test Failed at /tmp/tmplxnfb69v.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmplxnfb69v.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplxnfb69v.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppf0dizn2.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmppf0dizn2.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppf0dizn2.jl:31\ntest set: Test Failed at /tmp/tmppf0dizn2.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppf0dizn2.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppf0dizn2.jl:31\ntest set: Test Failed at /tmp/tmppf0dizn2.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppf0dizn2.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppf0dizn2.jl:31\ntest set: Test Failed at /tmp/tmppf0dizn2.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppf0dizn2.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppf0dizn2.jl:31\ntest set: Test Failed at /tmp/tmppf0dizn2.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppf0dizn2.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppf0dizn2.jl:31\ntest set: Test Failed at /tmp/tmppf0dizn2.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmppf0dizn2.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppf0dizn2.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppf0dizn2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = Dict(\"0\"=>0, \"1\"=>1, \"2\"=>2, \"3\"=>3, \"4\"=>4, \"5\"=>5, \"6\"=>6,\
    \ \"7\"=>7, \"8\"=>8, \"9\"=>9, \"A\"=>10, \"B\"=>11, \"C\"=>12, \"D\"=>13, \"\
    E\"=>14, \"F\"=>15)\n    count = 0\n    for i in num\n        if hex_digits[i]\
    \ in primes\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5ubxgsnk.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp5ubxgsnk.jl:23\n\
    \   [3] top-level scope at /tmp/tmp5ubxgsnk.jl:34\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ubxgsnk.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp5ubxgsnk.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp5ubxgsnk.jl:23\n\
    \   [3] top-level scope at /tmp/tmp5ubxgsnk.jl:35\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ubxgsnk.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp5ubxgsnk.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp5ubxgsnk.jl:23\n\
    \   [3] top-level scope at /tmp/tmp5ubxgsnk.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ubxgsnk.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp5ubxgsnk.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp5ubxgsnk.jl:23\n\
    \   [3] top-level scope at /tmp/tmp5ubxgsnk.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ubxgsnk.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp5ubxgsnk.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp5ubxgsnk.jl:23\n\
    \   [3] top-level scope at /tmp/tmp5ubxgsnk.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ubxgsnk.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp5ubxgsnk.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp5ubxgsnk.jl:23\n\
    \   [3] top-level scope at /tmp/tmp5ubxgsnk.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5ubxgsnk.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ubxgsnk.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjunod9t.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpmjunod9t.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjunod9t.jl:31\ntest set: Test Failed at /tmp/tmpmjunod9t.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjunod9t.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjunod9t.jl:31\ntest set: Test Failed at /tmp/tmpmjunod9t.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjunod9t.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjunod9t.jl:31\ntest set: Test Failed at /tmp/tmpmjunod9t.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmjunod9t.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjunod9t.jl:31\ntest set: Test Failed at /tmp/tmpmjunod9t.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjunod9t.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjunod9t.jl:31\ntest set: Test Failed at /tmp/tmpmjunod9t.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpmjunod9t.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjunod9t.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjunod9t.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpp7uxiq65.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpp7uxiq65.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp7uxiq65.jl:31\\ntest set: Test Failed at /tmp/tmpp7uxiq65.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpp7uxiq65.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp7uxiq65.jl:31\\ntest set: Test Failed at /tmp/tmpp7uxiq65.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpp7uxiq65.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp7uxiq65.jl:31\\ntest set: Test Failed at /tmp/tmpp7uxiq65.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpp7uxiq65.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp7uxiq65.jl:31\\ntest set: Test Failed at /tmp/tmpp7uxiq65.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpp7uxiq65.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp7uxiq65.jl:31\\ntest set: Test Failed at /tmp/tmpp7uxiq65.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpp7uxiq65.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp7uxiq65.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpp7uxiq65.jl:29\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_prime_digits = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in\
    \ hex_prime_digits\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpak_mlsrh.jl:35\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpak_mlsrh.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpak_mlsrh.jl:34\ntest set: Test Failed at /tmp/tmpak_mlsrh.jl:36\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpak_mlsrh.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpak_mlsrh.jl:34\ntest set: Test Failed at /tmp/tmpak_mlsrh.jl:37\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpak_mlsrh.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpak_mlsrh.jl:34\ntest set: Test Failed at /tmp/tmpak_mlsrh.jl:38\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpak_mlsrh.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpak_mlsrh.jl:34\ntest set: Test Failed at /tmp/tmpak_mlsrh.jl:39\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpak_mlsrh.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpak_mlsrh.jl:34\ntest set: Test Failed at /tmp/tmpak_mlsrh.jl:40\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpak_mlsrh.jl:40\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpak_mlsrh.jl:34\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpak_mlsrh.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp977hfake.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp977hfake.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp977hfake.jl:31\ntest set: Test Failed at /tmp/tmp977hfake.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp977hfake.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp977hfake.jl:31\ntest set: Test Failed at /tmp/tmp977hfake.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp977hfake.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp977hfake.jl:31\ntest set: Test Failed at /tmp/tmp977hfake.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp977hfake.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp977hfake.jl:31\ntest set: Test Failed at /tmp/tmp977hfake.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp977hfake.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp977hfake.jl:31\ntest set: Test Failed at /tmp/tmp977hfake.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp977hfake.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp977hfake.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp977hfake.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt8jo8cvx.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpt8jo8cvx.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8jo8cvx.jl:31\ntest set: Test Failed at /tmp/tmpt8jo8cvx.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt8jo8cvx.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8jo8cvx.jl:31\ntest set: Test Failed at /tmp/tmpt8jo8cvx.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt8jo8cvx.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8jo8cvx.jl:31\ntest set: Test Failed at /tmp/tmpt8jo8cvx.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpt8jo8cvx.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8jo8cvx.jl:31\ntest set: Test Failed at /tmp/tmpt8jo8cvx.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt8jo8cvx.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8jo8cvx.jl:31\ntest set: Test Failed at /tmp/tmpt8jo8cvx.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpt8jo8cvx.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8jo8cvx.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt8jo8cvx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpds1xwpwt.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpds1xwpwt.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds1xwpwt.jl:31\\ntest set: Test Failed at /tmp/tmpds1xwpwt.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpds1xwpwt.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds1xwpwt.jl:31\\ntest set: Test Failed at /tmp/tmpds1xwpwt.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpds1xwpwt.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds1xwpwt.jl:31\\ntest set: Test Failed at /tmp/tmpds1xwpwt.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpds1xwpwt.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds1xwpwt.jl:31\\ntest set: Test Failed at /tmp/tmpds1xwpwt.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpds1xwpwt.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds1xwpwt.jl:31\\ntest set: Test Failed at /tmp/tmpds1xwpwt.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpds1xwpwt.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds1xwpwt.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkkw3czqb.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpkkw3czqb.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkkw3czqb.jl:31\ntest set: Test Failed at /tmp/tmpkkw3czqb.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkkw3czqb.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkkw3czqb.jl:31\ntest set: Test Failed at /tmp/tmpkkw3czqb.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkkw3czqb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkkw3czqb.jl:31\ntest set: Test Failed at /tmp/tmpkkw3czqb.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpkkw3czqb.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkkw3czqb.jl:31\ntest set: Test Failed at /tmp/tmpkkw3czqb.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkkw3czqb.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkkw3czqb.jl:31\ntest set: Test Failed at /tmp/tmpkkw3czqb.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpkkw3czqb.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkkw3czqb.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkw3czqb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BDF\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnpsi7sdn.jl:36\\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\\n   Evaluated: 7 == 6\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpnpsi7sdn.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnpsi7sdn.jl:31\\ntest set: Test Failed at /tmp/tmpnpsi7sdn.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 14 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnpsi7sdn.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnpsi7sdn.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    prime_count = 0\n    for i in num\n\
    \        if i in hex_digits[1:10]\n            if parse(Int64, i) in primes\n\
    \                prime_count += 1\n            end\n        elseif i in hex_digits[11:16]\n\
    \            prime_count += 1\n        end\n    end\n    return prime_count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7wn2_39g.jl:38\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp7wn2_39g.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wn2_39g.jl:37\ntest set: Test Failed at /tmp/tmp7wn2_39g.jl:39\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7wn2_39g.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wn2_39g.jl:37\ntest set: Test Failed at /tmp/tmp7wn2_39g.jl:40\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7wn2_39g.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wn2_39g.jl:37\ntest set: Test Failed at /tmp/tmp7wn2_39g.jl:41\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7wn2_39g.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wn2_39g.jl:37\ntest set: Test Failed at /tmp/tmp7wn2_39g.jl:42\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7wn2_39g.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wn2_39g.jl:37\ntest set: Test Failed at /tmp/tmp7wn2_39g.jl:43\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp7wn2_39g.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wn2_39g.jl:37\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wn2_39g.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # create a dictionary of hexadecimal digits\n\
    \    hex_dict = Dict(\n        \"0\" => 0,\n        \"1\" => 1,\n        \"2\"\
    \ => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n     \
    \   \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n        \"9\" => 9,\n\
    \        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" => 12,\n        \"\
    D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    )\n    # create a list\
    \ of prime numbers\n    prime_list = [2, 3, 5, 7, 11, 13]\n    # create a list\
    \ of hexadecimal digits\n    hex_list = []\n    for i in num\n        push!(hex_list,\
    \ hex_dict[i])\n    end\n    # count the number of prime numbers in the hexadecimal\
    \ list\n    count = 0\n    for i in hex_list\n        if i in prime_list\n   \
    \         count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf89ibqc0.jl:59\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpf89ibqc0.jl:43\n\
    \   [3] top-level scope at /tmp/tmpf89ibqc0.jl:59\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf89ibqc0.jl:58\n  \ntest set: Error During\
    \ Test at /tmp/tmpf89ibqc0.jl:60\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpf89ibqc0.jl:43\n\
    \   [3] top-level scope at /tmp/tmpf89ibqc0.jl:60\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf89ibqc0.jl:58\n  \ntest set: Error During\
    \ Test at /tmp/tmpf89ibqc0.jl:61\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpf89ibqc0.jl:43\n\
    \   [3] top-level scope at /tmp/tmpf89ibqc0.jl:61\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf89ibqc0.jl:58\n  \ntest set: Error During\
    \ Test at /tmp/tmpf89ibqc0.jl:62\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpf89ibqc0.jl:43\n\
    \   [3] top-level scope at /tmp/tmpf89ibqc0.jl:62\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf89ibqc0.jl:58\n  \ntest set: Error During\
    \ Test at /tmp/tmpf89ibqc0.jl:63\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpf89ibqc0.jl:43\n\
    \   [3] top-level scope at /tmp/tmpf89ibqc0.jl:63\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf89ibqc0.jl:58\n  \ntest set: Error During\
    \ Test at /tmp/tmpf89ibqc0.jl:64\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpf89ibqc0.jl:43\n\
    \   [3] top-level scope at /tmp/tmpf89ibqc0.jl:64\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpf89ibqc0.jl:58\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf89ibqc0.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb_2lz6t_.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpb_2lz6t_.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb_2lz6t_.jl:31\ntest set: Test Failed at /tmp/tmpb_2lz6t_.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb_2lz6t_.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb_2lz6t_.jl:31\ntest set: Test Failed at /tmp/tmpb_2lz6t_.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb_2lz6t_.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb_2lz6t_.jl:31\ntest set: Test Failed at /tmp/tmpb_2lz6t_.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb_2lz6t_.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb_2lz6t_.jl:31\ntest set: Test Failed at /tmp/tmpb_2lz6t_.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb_2lz6t_.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb_2lz6t_.jl:31\ntest set: Test Failed at /tmp/tmpb_2lz6t_.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpb_2lz6t_.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb_2lz6t_.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_2lz6t_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02d5blsp.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp02d5blsp.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp02d5blsp.jl:31\ntest set: Test Failed at /tmp/tmp02d5blsp.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02d5blsp.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp02d5blsp.jl:31\ntest set: Test Failed at /tmp/tmp02d5blsp.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02d5blsp.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp02d5blsp.jl:31\ntest set: Test Failed at /tmp/tmp02d5blsp.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp02d5blsp.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp02d5blsp.jl:31\ntest set: Test Failed at /tmp/tmp02d5blsp.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02d5blsp.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp02d5blsp.jl:31\ntest set: Test Failed at /tmp/tmp02d5blsp.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp02d5blsp.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp02d5blsp.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02d5blsp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in num\n \
    \       if i in prime_digits\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf8033q2u.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpf8033q2u.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf8033q2u.jl:33\ntest set: Test Failed at /tmp/tmpf8033q2u.jl:35\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf8033q2u.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf8033q2u.jl:33\ntest set: Test Failed at /tmp/tmpf8033q2u.jl:36\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf8033q2u.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf8033q2u.jl:33\ntest set: Test Failed at /tmp/tmpf8033q2u.jl:37\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpf8033q2u.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf8033q2u.jl:33\ntest set: Test Failed at /tmp/tmpf8033q2u.jl:38\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf8033q2u.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf8033q2u.jl:33\ntest set: Test Failed at /tmp/tmpf8033q2u.jl:39\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpf8033q2u.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf8033q2u.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf8033q2u.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->x in [\"2\",\"3\"\
    ,\"5\",\"7\",\"B\",\"D\"], collect(num)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr7b8kxj2.jl:26\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpr7b8kxj2.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7b8kxj2.jl:25\ntest set: Test Failed at /tmp/tmpr7b8kxj2.jl:27\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr7b8kxj2.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7b8kxj2.jl:25\ntest set: Test Failed at /tmp/tmpr7b8kxj2.jl:28\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr7b8kxj2.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7b8kxj2.jl:25\ntest set: Test Failed at /tmp/tmpr7b8kxj2.jl:29\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpr7b8kxj2.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7b8kxj2.jl:25\ntest set: Test Failed at /tmp/tmpr7b8kxj2.jl:30\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr7b8kxj2.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7b8kxj2.jl:25\ntest set: Test Failed at /tmp/tmpr7b8kxj2.jl:31\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpr7b8kxj2.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7b8kxj2.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr7b8kxj2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmlmrk08_.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpmlmrk08_.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmlmrk08_.jl:26\ntest set: Test Failed at /tmp/tmpmlmrk08_.jl:28\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmlmrk08_.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmlmrk08_.jl:26\ntest set: Test Failed at /tmp/tmpmlmrk08_.jl:29\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmlmrk08_.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmlmrk08_.jl:26\ntest set: Test Failed at /tmp/tmpmlmrk08_.jl:30\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmlmrk08_.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmlmrk08_.jl:26\ntest set: Test Failed at /tmp/tmpmlmrk08_.jl:31\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmlmrk08_.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmlmrk08_.jl:26\ntest set: Test Failed at /tmp/tmpmlmrk08_.jl:32\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpmlmrk08_.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmlmrk08_.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlmrk08_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptdiwwdpu.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmptdiwwdpu.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptdiwwdpu.jl:31\\ntest set: Test Failed at /tmp/tmptdiwwdpu.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptdiwwdpu.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptdiwwdpu.jl:31\\ntest set: Test Failed at /tmp/tmptdiwwdpu.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptdiwwdpu.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptdiwwdpu.jl:31\\ntest set: Test Failed at /tmp/tmptdiwwdpu.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptdiwwdpu.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptdiwwdpu.jl:31\\ntest set: Test Failed at /tmp/tmptdiwwdpu.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptdiwwdpu.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptdiwwdpu.jl:31\\ntest set: Test Failed at /tmp/tmptdiwwdpu.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmptdiwwdpu.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptdiwwdpu.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk0ietq2f.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpk0ietq2f.jl:20\n   [2] top-level scope at /tmp/tmpk0ietq2f.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk0ietq2f.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpk0ietq2f.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpk0ietq2f.jl:20\n\
    \   [2] top-level scope at /tmp/tmpk0ietq2f.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk0ietq2f.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpk0ietq2f.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpk0ietq2f.jl:20\n\
    \   [2] top-level scope at /tmp/tmpk0ietq2f.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk0ietq2f.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpk0ietq2f.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpk0ietq2f.jl:20\n\
    \   [2] top-level scope at /tmp/tmpk0ietq2f.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk0ietq2f.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpk0ietq2f.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpk0ietq2f.jl:20\n   [2] top-level scope at /tmp/tmpk0ietq2f.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk0ietq2f.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpk0ietq2f.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpk0ietq2f.jl:20\n   [2] top-level scope at /tmp/tmpk0ietq2f.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk0ietq2f.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk0ietq2f.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5psh4rqj.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp5psh4rqj.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5psh4rqj.jl:26\ntest set: Test Failed at /tmp/tmp5psh4rqj.jl:28\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5psh4rqj.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5psh4rqj.jl:26\ntest set: Test Failed at /tmp/tmp5psh4rqj.jl:29\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5psh4rqj.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5psh4rqj.jl:26\ntest set: Test Failed at /tmp/tmp5psh4rqj.jl:30\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5psh4rqj.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5psh4rqj.jl:26\ntest set: Test Failed at /tmp/tmp5psh4rqj.jl:31\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5psh4rqj.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5psh4rqj.jl:26\ntest set: Test Failed at /tmp/tmp5psh4rqj.jl:32\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp5psh4rqj.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5psh4rqj.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5psh4rqj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->x in [\"2\",\"3\"\
    ,\"5\",\"7\",\"B\",\"D\"], split(num, \"\")))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # convert hexadecimal to decimal\n    # count\
    \ the number of primes\n    # return the number of primes\n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2g45_qnr.jl:29\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp2g45_qnr.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2g45_qnr.jl:28\ntest set: Test Failed at /tmp/tmp2g45_qnr.jl:30\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2g45_qnr.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2g45_qnr.jl:28\ntest set: Test Failed at /tmp/tmp2g45_qnr.jl:31\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2g45_qnr.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2g45_qnr.jl:28\ntest set: Test Failed at /tmp/tmp2g45_qnr.jl:32\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2g45_qnr.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2g45_qnr.jl:28\ntest set: Test Failed at /tmp/tmp2g45_qnr.jl:33\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2g45_qnr.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2g45_qnr.jl:28\ntest set: Test Failed at /tmp/tmp2g45_qnr.jl:34\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp2g45_qnr.jl:34\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2g45_qnr.jl:28\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2g45_qnr.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            hex_key += 1\n        end\n    end\n\
    \    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp699m51d1.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp699m51d1.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp699m51d1.jl:31\ntest set: Test Failed at /tmp/tmp699m51d1.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp699m51d1.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp699m51d1.jl:31\ntest set: Test Failed at /tmp/tmp699m51d1.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp699m51d1.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp699m51d1.jl:31\ntest set: Test Failed at /tmp/tmp699m51d1.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp699m51d1.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp699m51d1.jl:31\ntest set: Test Failed at /tmp/tmp699m51d1.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp699m51d1.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp699m51d1.jl:31\ntest set: Test Failed at /tmp/tmp699m51d1.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp699m51d1.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp699m51d1.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp699m51d1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppnvh9spc.jl:33\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmppnvh9spc.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppnvh9spc.jl:32\\ntest set: Test Failed at /tmp/tmppnvh9spc.jl:34\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppnvh9spc.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppnvh9spc.jl:32\\ntest set: Test Failed at /tmp/tmppnvh9spc.jl:35\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppnvh9spc.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppnvh9spc.jl:32\\ntest set: Test Failed at /tmp/tmppnvh9spc.jl:36\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppnvh9spc.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppnvh9spc.jl:32\\ntest set: Test Failed at /tmp/tmppnvh9spc.jl:37\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppnvh9spc.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppnvh9spc.jl:32\\ntest set: Test Failed at /tmp/tmppnvh9spc.jl:38\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmppnvh9spc.jl:38\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppnvh9spc.jl:32\\nTest Summary: | Fail  Total\\\
    n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\n\"\"\"\n    You have\
    \ been tasked to write a function that receives a string \n    and returns the\
    \ number of words that start with a capital letter.\n    Examples:\n    For str\
    \ = \"The quick brown fox jumps over the lazy dog.\" \n    the output should be\
    \ 3.\n    For str = \"The quick brown fox jumps over the lazy dog\" \n    the\
    \ output should be 3.\n    For str = \"The quick brown fox jumps over the lazy\
    \ dog. \" \n    the output should be 3.\n    For str = \"The quick brown fox jumps\
    \ over the lazy dog.  \" \n    the output should be 3.\n    For str = \"The quick\
    \ brown fox jumps over the lazy dog.   \" \n    the output should be 3.\n    For\
    \ str = \"The quick brown fox jumps over the lazy dog.    \" \n    the output\
    \ should be 3.\n    For str = \"The quick brown fox jumps over the lazy dog. \
    \    \" \n    the output should be 3.\n    For str = \"The quick brown fox jumps\
    \ over the lazy dog.      \" \n    the output should be 3.\n    For str = \"The\
    \ quick brown fox jumps over the lazy dog.       \" \n    the output should be\
    \ 3.\n    For str = \"The quick brown fox jumps over the lazy dog.        \" \n\
    \    the output should be 3.\n    For str = \"The quick brown fox jumps over the\
    \ lazy dog.         \" \n    the output should be 3.\n    For str = \"The quick\
    \ brown fox jumps over the lazy dog.          \" \n    the output should be 3.\n\
    \    For str = \"The quick brown fox jumps over the lazy dog.           \" \n\
    \    the output should be 3.\n    For str = \"The quick brown fox jumps over the\
    \ lazy dog.            \" \n    the output should be 3.\n    For str = \"The quick\
    \ brown fox jumps over the lazy dog.             \" \n    the output should be\
    \ 3.\n    For str = \"The quick brown fox jumps over the lazy dog.           \
    \   \" \n    the output should be 3.\n    For str = \"The quick brown fox jumps\
    \ over the lazy dog.               \" \n    the output should be 3.\n    For str\
    \ = \"The quick brown fox jumps over the lazy\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcxfl3tuc.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcxfl3tuc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # count = 0\n    # for i in num\n    #   \
    \  if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    #         count += 1\n \
    \   #     end\n    # end\n    # return count\n    return length(filter(x->x in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"], num))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_qf7kho0.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp_qf7kho0.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_qf7kho0.jl:32\ntest set: Test Failed at /tmp/tmp_qf7kho0.jl:34\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_qf7kho0.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_qf7kho0.jl:32\ntest set: Test Failed at /tmp/tmp_qf7kho0.jl:35\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_qf7kho0.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_qf7kho0.jl:32\ntest set: Test Failed at /tmp/tmp_qf7kho0.jl:36\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_qf7kho0.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_qf7kho0.jl:32\ntest set: Test Failed at /tmp/tmp_qf7kho0.jl:37\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_qf7kho0.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_qf7kho0.jl:32\ntest set: Test Failed at /tmp/tmp_qf7kho0.jl:38\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp_qf7kho0.jl:38\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_qf7kho0.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_qf7kho0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_prime_digits = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in\
    \ hex_prime_digits\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_uk2cljh.jl:35\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_uk2cljh.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_uk2cljh.jl:34\\ntest set: Test Failed at /tmp/tmp_uk2cljh.jl:36\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_uk2cljh.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_uk2cljh.jl:34\\ntest set: Test Failed at /tmp/tmp_uk2cljh.jl:37\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_uk2cljh.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_uk2cljh.jl:34\\ntest set: Test Failed at /tmp/tmp_uk2cljh.jl:38\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_uk2cljh.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_uk2cljh.jl:34\\ntest set: Test Failed at /tmp/tmp_uk2cljh.jl:39\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_uk2cljh.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_uk2cljh.jl:34\\ntest set: Test Failed at /tmp/tmp_uk2cljh.jl:40\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_uk2cljh.jl:40\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_uk2cljh.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n\
    \        if i in hex_primes\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd8ohjl5g.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpd8ohjl5g.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd8ohjl5g.jl:33\ntest set: Test Failed at /tmp/tmpd8ohjl5g.jl:35\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd8ohjl5g.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd8ohjl5g.jl:33\ntest set: Test Failed at /tmp/tmpd8ohjl5g.jl:36\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd8ohjl5g.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd8ohjl5g.jl:33\ntest set: Test Failed at /tmp/tmpd8ohjl5g.jl:37\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpd8ohjl5g.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd8ohjl5g.jl:33\ntest set: Test Failed at /tmp/tmpd8ohjl5g.jl:38\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd8ohjl5g.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd8ohjl5g.jl:33\ntest set: Test Failed at /tmp/tmpd8ohjl5g.jl:39\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpd8ohjl5g.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd8ohjl5g.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd8ohjl5g.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key\
    \ += 1\n        end\n    end\n    return hex_key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmyes57g3.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmyes57g3.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmyes57g3.jl:31\\ntest set: Test Failed at /tmp/tmpmyes57g3.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmyes57g3.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmyes57g3.jl:31\\ntest set: Test Failed at /tmp/tmpmyes57g3.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmyes57g3.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmyes57g3.jl:31\\ntest set: Test Failed at /tmp/tmpmyes57g3.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmyes57g3.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmyes57g3.jl:31\\ntest set: Test Failed at /tmp/tmpmyes57g3.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmyes57g3.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmyes57g3.jl:31\\ntest set: Test Failed at /tmp/tmpmyes57g3.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmyes57g3.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmyes57g3.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # convert hex to decimal\n    dec = parse(Int64,\
    \ num, base=16)\n    # count primes\n    count = 0\n    for i in 2:dec\n     \
    \   if isprime(i)\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptrofetff.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmptrofetff.jl:24\n   [2] top-level\
    \ scope at /tmp/tmptrofetff.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptrofetff.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptrofetff.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmptrofetff.jl:24\n   [2] top-level scope at /tmp/tmptrofetff.jl:36\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptrofetff.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptrofetff.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  UndefVarError: isprime not defined\n  Stacktrace:\n   [1]\
    \ hex_key(::String) at /tmp/tmptrofetff.jl:24\n   [2] top-level scope at /tmp/tmptrofetff.jl:37\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptrofetff.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptrofetff.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmptrofetff.jl:24\n   [2] top-level scope at /tmp/tmptrofetff.jl:38\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptrofetff.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptrofetff.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmptrofetff.jl:24\n   [2] top-level scope at\
    \ /tmp/tmptrofetff.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptrofetff.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptrofetff.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  OverflowError: overflow parsing \"\
    112233445566778899AABBCCDDEEFF00\"\n  Stacktrace:\n   [1] tryparse_internal(::Type{Int64},\
    \ ::String, ::Int64, ::Int64, ::Int64, ::Bool) at ./parse.jl:160\n   [2] parse(::Type{Int64},\
    \ ::String; base::Int64) at ./parse.jl:238\n   [3] hex_key(::String) at /tmp/tmptrofetff.jl:20\n\
    \   [4] top-level scope at /tmp/tmptrofetff.jl:40\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptrofetff.jl:34\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrofetff.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits[10:16]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpa8j_j837.jl:34\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpa8j_j837.jl:34\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa8j_j837.jl:33\\ntest set: Test Failed at /tmp/tmpa8j_j837.jl:35\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpa8j_j837.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa8j_j837.jl:33\\ntest set: Test Failed at /tmp/tmpa8j_j837.jl:36\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpa8j_j837.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa8j_j837.jl:33\\ntest set: Test Failed at /tmp/tmpa8j_j837.jl:37\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpa8j_j837.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa8j_j837.jl:33\\ntest set: Test Failed at /tmp/tmpa8j_j837.jl:38\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpa8j_j837.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa8j_j837.jl:33\\ntest set: Test Failed at /tmp/tmpa8j_j837.jl:39\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpa8j_j837.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa8j_j837.jl:33\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_digits = [hex_digits_dict[x] for x in num]\n    count = 0\n\
    \    for i in num_digits\n        if i in primes\n            count += 1\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiljb292f.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n\
    \   [3] iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#4\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpiljb292f.jl:22\n\
    \   [6] top-level scope at /tmp/tmpiljb292f.jl:36\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpiljb292f.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpiljb292f.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate at\
    \ ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"#3#4\"\
    {Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpiljb292f.jl:22\n\
    \   [6] top-level scope at /tmp/tmpiljb292f.jl:37\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpiljb292f.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpiljb292f.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate\
    \ at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#4\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpiljb292f.jl:22\n\
    \   [6] top-level scope at /tmp/tmpiljb292f.jl:38\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpiljb292f.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpiljb292f.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate at\
    \ ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"#3#4\"\
    {Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpiljb292f.jl:22\n\
    \   [6] top-level scope at /tmp/tmpiljb292f.jl:39\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpiljb292f.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpiljb292f.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3]\
    \ iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#4\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpiljb292f.jl:22\n\
    \   [6] top-level scope at /tmp/tmpiljb292f.jl:40\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpiljb292f.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpiljb292f.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n\
    \   [3] iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#4\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpiljb292f.jl:22\n\
    \   [6] top-level scope at /tmp/tmpiljb292f.jl:41\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpiljb292f.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiljb292f.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppa5crnsf.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmppa5crnsf.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppa5crnsf.jl:31\ntest set: Test Failed at /tmp/tmppa5crnsf.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppa5crnsf.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppa5crnsf.jl:31\ntest set: Test Failed at /tmp/tmppa5crnsf.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppa5crnsf.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppa5crnsf.jl:31\ntest set: Test Failed at /tmp/tmppa5crnsf.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppa5crnsf.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppa5crnsf.jl:31\ntest set: Test Failed at /tmp/tmppa5crnsf.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppa5crnsf.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppa5crnsf.jl:31\ntest set: Test Failed at /tmp/tmppa5crnsf.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmppa5crnsf.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppa5crnsf.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppa5crnsf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplnufa1bs.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmplnufa1bs.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplnufa1bs.jl:31\\ntest set: Test Failed at /tmp/tmplnufa1bs.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplnufa1bs.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplnufa1bs.jl:31\\ntest set: Test Failed at /tmp/tmplnufa1bs.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplnufa1bs.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplnufa1bs.jl:31\\ntest set: Test Failed at /tmp/tmplnufa1bs.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplnufa1bs.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplnufa1bs.jl:31\\ntest set: Test Failed at /tmp/tmplnufa1bs.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplnufa1bs.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplnufa1bs.jl:31\\ntest set: Test Failed at /tmp/tmplnufa1bs.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmplnufa1bs.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplnufa1bs.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo1l036xl.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpo1l036xl.jl:20\n   [2] top-level scope at /tmp/tmpo1l036xl.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo1l036xl.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpo1l036xl.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpo1l036xl.jl:20\n\
    \   [2] top-level scope at /tmp/tmpo1l036xl.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo1l036xl.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpo1l036xl.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpo1l036xl.jl:20\n\
    \   [2] top-level scope at /tmp/tmpo1l036xl.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo1l036xl.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpo1l036xl.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpo1l036xl.jl:20\n\
    \   [2] top-level scope at /tmp/tmpo1l036xl.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo1l036xl.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpo1l036xl.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpo1l036xl.jl:20\n   [2] top-level scope at /tmp/tmpo1l036xl.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo1l036xl.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpo1l036xl.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpo1l036xl.jl:20\n   [2] top-level scope at /tmp/tmpo1l036xl.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo1l036xl.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo1l036xl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz4xijbl7.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpz4xijbl7.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz4xijbl7.jl:31\\ntest set: Test Failed at /tmp/tmpz4xijbl7.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz4xijbl7.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz4xijbl7.jl:31\\ntest set: Test Failed at /tmp/tmpz4xijbl7.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz4xijbl7.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz4xijbl7.jl:31\\ntest set: Test Failed at /tmp/tmpz4xijbl7.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz4xijbl7.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz4xijbl7.jl:31\\ntest set: Test Failed at /tmp/tmpz4xijbl7.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz4xijbl7.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz4xijbl7.jl:31\\ntest set: Test Failed at /tmp/tmpz4xijbl7.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpz4xijbl7.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz4xijbl7.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprjx042nj.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmprjx042nj.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprjx042nj.jl:31\\ntest set: Test Failed at /tmp/tmprjx042nj.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprjx042nj.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprjx042nj.jl:31\\ntest set: Test Failed at /tmp/tmprjx042nj.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprjx042nj.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprjx042nj.jl:31\\ntest set: Test Failed at /tmp/tmprjx042nj.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprjx042nj.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprjx042nj.jl:31\\ntest set: Test Failed at /tmp/tmprjx042nj.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprjx042nj.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprjx042nj.jl:31\\ntest set: Test Failed at /tmp/tmprjx042nj.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmprjx042nj.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprjx042nj.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2q1lszuv.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp2q1lszuv.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2q1lszuv.jl:31\ntest set: Test Failed at /tmp/tmp2q1lszuv.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2q1lszuv.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2q1lszuv.jl:31\ntest set: Test Failed at /tmp/tmp2q1lszuv.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2q1lszuv.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2q1lszuv.jl:31\ntest set: Test Failed at /tmp/tmp2q1lszuv.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2q1lszuv.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2q1lszuv.jl:31\ntest set: Test Failed at /tmp/tmp2q1lszuv.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2q1lszuv.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2q1lszuv.jl:31\ntest set: Test Failed at /tmp/tmp2q1lszuv.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp2q1lszuv.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2q1lszuv.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2q1lszuv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3sgz0an.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpq3sgz0an.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq3sgz0an.jl:31\ntest set: Test Failed at /tmp/tmpq3sgz0an.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq3sgz0an.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq3sgz0an.jl:31\ntest set: Test Failed at /tmp/tmpq3sgz0an.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq3sgz0an.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq3sgz0an.jl:31\ntest set: Test Failed at /tmp/tmpq3sgz0an.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq3sgz0an.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq3sgz0an.jl:31\ntest set: Test Failed at /tmp/tmpq3sgz0an.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq3sgz0an.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq3sgz0an.jl:31\ntest set: Test Failed at /tmp/tmpq3sgz0an.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpq3sgz0an.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq3sgz0an.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3sgz0an.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfuamkl02.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpfuamkl02.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfuamkl02.jl:31\ntest set: Test Failed at /tmp/tmpfuamkl02.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfuamkl02.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfuamkl02.jl:31\ntest set: Test Failed at /tmp/tmpfuamkl02.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfuamkl02.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfuamkl02.jl:31\ntest set: Test Failed at /tmp/tmpfuamkl02.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfuamkl02.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfuamkl02.jl:31\ntest set: Test Failed at /tmp/tmpfuamkl02.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfuamkl02.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfuamkl02.jl:31\ntest set: Test Failed at /tmp/tmpfuamkl02.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpfuamkl02.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfuamkl02.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfuamkl02.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = Dict(\"0\"=>0, \"1\"=>1, \"2\"=>2, \"3\"=>3, \"4\"=>4, \"5\"=>5, \"6\"=>6,\
    \ \"7\"=>7, \"8\"=>8, \"9\"=>9, \"A\"=>10, \"B\"=>11, \"C\"=>12, \"D\"=>13, \"\
    E\"=>14, \"F\"=>15)\n    count = 0\n    for i in num\n        if hex_digits[i]\
    \ in primes\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc7gqus91.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpc7gqus91.jl:23\n\
    \   [3] top-level scope at /tmp/tmpc7gqus91.jl:34\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpc7gqus91.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc7gqus91.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpc7gqus91.jl:23\n\
    \   [3] top-level scope at /tmp/tmpc7gqus91.jl:35\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpc7gqus91.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc7gqus91.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpc7gqus91.jl:23\n\
    \   [3] top-level scope at /tmp/tmpc7gqus91.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpc7gqus91.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc7gqus91.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpc7gqus91.jl:23\n\
    \   [3] top-level scope at /tmp/tmpc7gqus91.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpc7gqus91.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc7gqus91.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpc7gqus91.jl:23\n\
    \   [3] top-level scope at /tmp/tmpc7gqus91.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpc7gqus91.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc7gqus91.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpc7gqus91.jl:23\n\
    \   [3] top-level scope at /tmp/tmpc7gqus91.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpc7gqus91.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7gqus91.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnmigkrxr.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpnmigkrxr.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmigkrxr.jl:31\ntest set: Test Failed at /tmp/tmpnmigkrxr.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnmigkrxr.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmigkrxr.jl:31\ntest set: Test Failed at /tmp/tmpnmigkrxr.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnmigkrxr.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmigkrxr.jl:31\ntest set: Test Failed at /tmp/tmpnmigkrxr.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnmigkrxr.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmigkrxr.jl:31\ntest set: Test Failed at /tmp/tmpnmigkrxr.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnmigkrxr.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmigkrxr.jl:31\ntest set: Test Failed at /tmp/tmpnmigkrxr.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpnmigkrxr.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmigkrxr.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnmigkrxr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpl9e_pn0e.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpl9e_pn0e.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl9e_pn0e.jl:31\\ntest set: Test Failed at /tmp/tmpl9e_pn0e.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpl9e_pn0e.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl9e_pn0e.jl:31\\ntest set: Test Failed at /tmp/tmpl9e_pn0e.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpl9e_pn0e.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl9e_pn0e.jl:31\\ntest set: Test Failed at /tmp/tmpl9e_pn0e.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpl9e_pn0e.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl9e_pn0e.jl:31\\ntest set: Test Failed at /tmp/tmpl9e_pn0e.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpl9e_pn0e.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl9e_pn0e.jl:31\\ntest set: Test Failed at /tmp/tmpl9e_pn0e.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpl9e_pn0e.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl9e_pn0e.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp40u51dml.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp40u51dml.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40u51dml.jl:31\ntest set: Test Failed at /tmp/tmp40u51dml.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40u51dml.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40u51dml.jl:31\ntest set: Test Failed at /tmp/tmp40u51dml.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40u51dml.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40u51dml.jl:31\ntest set: Test Failed at /tmp/tmp40u51dml.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp40u51dml.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40u51dml.jl:31\ntest set: Test Failed at /tmp/tmp40u51dml.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40u51dml.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40u51dml.jl:31\ntest set: Test Failed at /tmp/tmp40u51dml.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp40u51dml.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40u51dml.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp40u51dml.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz282ohkt.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpz282ohkt.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz282ohkt.jl:26\ntest set: Test Failed at /tmp/tmpz282ohkt.jl:28\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz282ohkt.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz282ohkt.jl:26\ntest set: Test Failed at /tmp/tmpz282ohkt.jl:29\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz282ohkt.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz282ohkt.jl:26\ntest set: Test Failed at /tmp/tmpz282ohkt.jl:30\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpz282ohkt.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz282ohkt.jl:26\ntest set: Test Failed at /tmp/tmpz282ohkt.jl:31\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz282ohkt.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz282ohkt.jl:26\ntest set: Test Failed at /tmp/tmpz282ohkt.jl:32\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpz282ohkt.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz282ohkt.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz282ohkt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxzikucze.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxzikucze.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxzikucze.jl:31\\ntest set: Test Failed at /tmp/tmpxzikucze.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxzikucze.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxzikucze.jl:31\\ntest set: Test Failed at /tmp/tmpxzikucze.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxzikucze.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxzikucze.jl:31\\ntest set: Test Failed at /tmp/tmpxzikucze.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxzikucze.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxzikucze.jl:31\\ntest set: Test Failed at /tmp/tmpxzikucze.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxzikucze.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxzikucze.jl:31\\ntest set: Test Failed at /tmp/tmpxzikucze.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxzikucze.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxzikucze.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n       \
    \     count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmn9v1vi1.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpmn9v1vi1.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmn9v1vi1.jl:32\ntest set: Test Failed at /tmp/tmpmn9v1vi1.jl:34\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmn9v1vi1.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmn9v1vi1.jl:32\ntest set: Test Failed at /tmp/tmpmn9v1vi1.jl:35\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmn9v1vi1.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmn9v1vi1.jl:32\ntest set: Test Failed at /tmp/tmpmn9v1vi1.jl:36\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmn9v1vi1.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmn9v1vi1.jl:32\ntest set: Test Failed at /tmp/tmpmn9v1vi1.jl:37\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmn9v1vi1.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmn9v1vi1.jl:32\ntest set: Test Failed at /tmp/tmpmn9v1vi1.jl:38\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpmn9v1vi1.jl:38\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmn9v1vi1.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmn9v1vi1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            hex_key += 1\n        end\n    end\n\
    \    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinccxyb9.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpinccxyb9.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinccxyb9.jl:31\ntest set: Test Failed at /tmp/tmpinccxyb9.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpinccxyb9.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinccxyb9.jl:31\ntest set: Test Failed at /tmp/tmpinccxyb9.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpinccxyb9.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinccxyb9.jl:31\ntest set: Test Failed at /tmp/tmpinccxyb9.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpinccxyb9.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinccxyb9.jl:31\ntest set: Test Failed at /tmp/tmpinccxyb9.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpinccxyb9.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinccxyb9.jl:31\ntest set: Test Failed at /tmp/tmpinccxyb9.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpinccxyb9.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinccxyb9.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinccxyb9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_hex = [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"]\n    count = 0\n    for i in num\n        if i in prime_hex\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplg0aoqw9.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmplg0aoqw9.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplg0aoqw9.jl:32\ntest set: Test Failed at /tmp/tmplg0aoqw9.jl:34\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplg0aoqw9.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplg0aoqw9.jl:32\ntest set: Test Failed at /tmp/tmplg0aoqw9.jl:35\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplg0aoqw9.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplg0aoqw9.jl:32\ntest set: Test Failed at /tmp/tmplg0aoqw9.jl:36\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmplg0aoqw9.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplg0aoqw9.jl:32\ntest set: Test Failed at /tmp/tmplg0aoqw9.jl:37\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplg0aoqw9.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplg0aoqw9.jl:32\ntest set: Test Failed at /tmp/tmplg0aoqw9.jl:38\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmplg0aoqw9.jl:38\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplg0aoqw9.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplg0aoqw9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpq9_9pvoa.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpq9_9pvoa.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq9_9pvoa.jl:31\\ntest set: Test Failed at /tmp/tmpq9_9pvoa.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpq9_9pvoa.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq9_9pvoa.jl:31\\ntest set: Test Failed at /tmp/tmpq9_9pvoa.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpq9_9pvoa.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq9_9pvoa.jl:31\\ntest set: Test Failed at /tmp/tmpq9_9pvoa.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpq9_9pvoa.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq9_9pvoa.jl:31\\ntest set: Test Failed at /tmp/tmpq9_9pvoa.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpq9_9pvoa.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq9_9pvoa.jl:31\\ntest set: Test Failed at /tmp/tmpq9_9pvoa.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpq9_9pvoa.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq9_9pvoa.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key\
    \ += 1\n        end\n    end\n    return hex_key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpofhgoq04.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpofhgoq04.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofhgoq04.jl:31\\ntest set: Test Failed at /tmp/tmpofhgoq04.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpofhgoq04.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofhgoq04.jl:31\\ntest set: Test Failed at /tmp/tmpofhgoq04.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpofhgoq04.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofhgoq04.jl:31\\ntest set: Test Failed at /tmp/tmpofhgoq04.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpofhgoq04.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofhgoq04.jl:31\\ntest set: Test Failed at /tmp/tmpofhgoq04.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpofhgoq04.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofhgoq04.jl:31\\ntest set: Test Failed at /tmp/tmpofhgoq04.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpofhgoq04.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofhgoq04.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->x in \"2357BD\", num))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmd9cka2m.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmd9cka2m.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmd9cka2m.jl:31\\ntest set: Test Failed at /tmp/tmpmd9cka2m.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmd9cka2m.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmd9cka2m.jl:31\\ntest set: Test Failed at /tmp/tmpmd9cka2m.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmd9cka2m.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmd9cka2m.jl:31\\ntest set: Test Failed at /tmp/tmpmd9cka2m.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmd9cka2m.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmd9cka2m.jl:31\\ntest set: Test Failed at /tmp/tmpmd9cka2m.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmd9cka2m.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmd9cka2m.jl:31\\ntest set: Test Failed at /tmp/tmpmd9cka2m.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmd9cka2m.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmd9cka2m.jl:31\\nTest Summary: | Fail  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ny2qxry.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp9ny2qxry.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ny2qxry.jl:31\ntest set: Test Failed at /tmp/tmp9ny2qxry.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ny2qxry.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ny2qxry.jl:31\ntest set: Test Failed at /tmp/tmp9ny2qxry.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ny2qxry.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ny2qxry.jl:31\ntest set: Test Failed at /tmp/tmp9ny2qxry.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9ny2qxry.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ny2qxry.jl:31\ntest set: Test Failed at /tmp/tmp9ny2qxry.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ny2qxry.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ny2qxry.jl:31\ntest set: Test Failed at /tmp/tmp9ny2qxry.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp9ny2qxry.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ny2qxry.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ny2qxry.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_g5lo2oj.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp_g5lo2oj.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_g5lo2oj.jl:31\ntest set: Test Failed at /tmp/tmp_g5lo2oj.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_g5lo2oj.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_g5lo2oj.jl:31\ntest set: Test Failed at /tmp/tmp_g5lo2oj.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_g5lo2oj.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_g5lo2oj.jl:31\ntest set: Test Failed at /tmp/tmp_g5lo2oj.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_g5lo2oj.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_g5lo2oj.jl:31\ntest set: Test Failed at /tmp/tmp_g5lo2oj.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_g5lo2oj.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_g5lo2oj.jl:31\ntest set: Test Failed at /tmp/tmp_g5lo2oj.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp_g5lo2oj.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_g5lo2oj.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_g5lo2oj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0wnb9av0.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp0wnb9av0.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wnb9av0.jl:31\ntest set: Test Failed at /tmp/tmp0wnb9av0.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0wnb9av0.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wnb9av0.jl:31\ntest set: Test Failed at /tmp/tmp0wnb9av0.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0wnb9av0.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wnb9av0.jl:31\ntest set: Test Failed at /tmp/tmp0wnb9av0.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0wnb9av0.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wnb9av0.jl:31\ntest set: Test Failed at /tmp/tmp0wnb9av0.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0wnb9av0.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wnb9av0.jl:31\ntest set: Test Failed at /tmp/tmp0wnb9av0.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp0wnb9av0.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wnb9av0.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0wnb9av0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_prime = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_prime += 1\n   \
    \     end\n    end\n    return hex_prime\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk2vswvwe.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpk2vswvwe.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk2vswvwe.jl:31\ntest set: Test Failed at /tmp/tmpk2vswvwe.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2vswvwe.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk2vswvwe.jl:31\ntest set: Test Failed at /tmp/tmpk2vswvwe.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2vswvwe.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk2vswvwe.jl:31\ntest set: Test Failed at /tmp/tmpk2vswvwe.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpk2vswvwe.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk2vswvwe.jl:31\ntest set: Test Failed at /tmp/tmpk2vswvwe.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2vswvwe.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk2vswvwe.jl:31\ntest set: Test Failed at /tmp/tmpk2vswvwe.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpk2vswvwe.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk2vswvwe.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk2vswvwe.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp70orx1qr.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp70orx1qr.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70orx1qr.jl:31\ntest set: Test Failed at /tmp/tmp70orx1qr.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70orx1qr.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70orx1qr.jl:31\ntest set: Test Failed at /tmp/tmp70orx1qr.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70orx1qr.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70orx1qr.jl:31\ntest set: Test Failed at /tmp/tmp70orx1qr.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp70orx1qr.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70orx1qr.jl:31\ntest set: Test Failed at /tmp/tmp70orx1qr.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70orx1qr.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70orx1qr.jl:31\ntest set: Test Failed at /tmp/tmp70orx1qr.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp70orx1qr.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70orx1qr.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70orx1qr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiqmlnsx8.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpiqmlnsx8.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqmlnsx8.jl:31\ntest set: Test Failed at /tmp/tmpiqmlnsx8.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiqmlnsx8.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqmlnsx8.jl:31\ntest set: Test Failed at /tmp/tmpiqmlnsx8.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiqmlnsx8.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqmlnsx8.jl:31\ntest set: Test Failed at /tmp/tmpiqmlnsx8.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpiqmlnsx8.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqmlnsx8.jl:31\ntest set: Test Failed at /tmp/tmpiqmlnsx8.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiqmlnsx8.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqmlnsx8.jl:31\ntest set: Test Failed at /tmp/tmpiqmlnsx8.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpiqmlnsx8.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqmlnsx8.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqmlnsx8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp96efhfwq.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp96efhfwq.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp96efhfwq.jl:31\ntest set: Test Failed at /tmp/tmp96efhfwq.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96efhfwq.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp96efhfwq.jl:31\ntest set: Test Failed at /tmp/tmp96efhfwq.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96efhfwq.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp96efhfwq.jl:31\ntest set: Test Failed at /tmp/tmp96efhfwq.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp96efhfwq.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp96efhfwq.jl:31\ntest set: Test Failed at /tmp/tmp96efhfwq.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96efhfwq.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp96efhfwq.jl:31\ntest set: Test Failed at /tmp/tmp96efhfwq.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp96efhfwq.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp96efhfwq.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96efhfwq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7t9t_ixb.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp7t9t_ixb.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7t9t_ixb.jl:31\ntest set: Test Failed at /tmp/tmp7t9t_ixb.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7t9t_ixb.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7t9t_ixb.jl:31\ntest set: Test Failed at /tmp/tmp7t9t_ixb.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7t9t_ixb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7t9t_ixb.jl:31\ntest set: Test Failed at /tmp/tmp7t9t_ixb.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7t9t_ixb.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7t9t_ixb.jl:31\ntest set: Test Failed at /tmp/tmp7t9t_ixb.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7t9t_ixb.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7t9t_ixb.jl:31\ntest set: Test Failed at /tmp/tmp7t9t_ixb.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp7t9t_ixb.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7t9t_ixb.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7t9t_ixb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0mz0z6jz.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp0mz0z6jz.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0mz0z6jz.jl:31\ntest set: Test Failed at /tmp/tmp0mz0z6jz.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0mz0z6jz.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0mz0z6jz.jl:31\ntest set: Test Failed at /tmp/tmp0mz0z6jz.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0mz0z6jz.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0mz0z6jz.jl:31\ntest set: Test Failed at /tmp/tmp0mz0z6jz.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0mz0z6jz.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0mz0z6jz.jl:31\ntest set: Test Failed at /tmp/tmp0mz0z6jz.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0mz0z6jz.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0mz0z6jz.jl:31\ntest set: Test Failed at /tmp/tmp0mz0z6jz.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp0mz0z6jz.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0mz0z6jz.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0mz0z6jz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdp2qpxsr.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpdp2qpxsr.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdp2qpxsr.jl:31\ntest set: Test Failed at /tmp/tmpdp2qpxsr.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdp2qpxsr.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdp2qpxsr.jl:31\ntest set: Test Failed at /tmp/tmpdp2qpxsr.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdp2qpxsr.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdp2qpxsr.jl:31\ntest set: Test Failed at /tmp/tmpdp2qpxsr.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdp2qpxsr.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdp2qpxsr.jl:31\ntest set: Test Failed at /tmp/tmpdp2qpxsr.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdp2qpxsr.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdp2qpxsr.jl:31\ntest set: Test Failed at /tmp/tmpdp2qpxsr.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpdp2qpxsr.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdp2qpxsr.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdp2qpxsr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_e4u41m4.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_e4u41m4.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_e4u41m4.jl:31\\ntest set: Test Failed at /tmp/tmp_e4u41m4.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_e4u41m4.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_e4u41m4.jl:31\\ntest set: Test Failed at /tmp/tmp_e4u41m4.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_e4u41m4.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_e4u41m4.jl:31\\ntest set: Test Failed at /tmp/tmp_e4u41m4.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_e4u41m4.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_e4u41m4.jl:31\\ntest set: Test Failed at /tmp/tmp_e4u41m4.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_e4u41m4.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_e4u41m4.jl:31\\ntest set: Test Failed at /tmp/tmp_e4u41m4.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_e4u41m4.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_e4u41m4.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkn8orjjg.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkn8orjjg.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkn8orjjg.jl:31\\ntest set: Test Failed at /tmp/tmpkn8orjjg.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkn8orjjg.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkn8orjjg.jl:31\\ntest set: Test Failed at /tmp/tmpkn8orjjg.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkn8orjjg.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkn8orjjg.jl:31\\ntest set: Test Failed at /tmp/tmpkn8orjjg.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkn8orjjg.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkn8orjjg.jl:31\\ntest set: Test Failed at /tmp/tmpkn8orjjg.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkn8orjjg.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkn8orjjg.jl:31\\ntest set: Test Failed at /tmp/tmpkn8orjjg.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkn8orjjg.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkn8orjjg.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoyxxsnfa.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpoyxxsnfa.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyxxsnfa.jl:31\ntest set: Test Failed at /tmp/tmpoyxxsnfa.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoyxxsnfa.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyxxsnfa.jl:31\ntest set: Test Failed at /tmp/tmpoyxxsnfa.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoyxxsnfa.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyxxsnfa.jl:31\ntest set: Test Failed at /tmp/tmpoyxxsnfa.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpoyxxsnfa.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyxxsnfa.jl:31\ntest set: Test Failed at /tmp/tmpoyxxsnfa.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoyxxsnfa.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyxxsnfa.jl:31\ntest set: Test Failed at /tmp/tmpoyxxsnfa.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpoyxxsnfa.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyxxsnfa.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoyxxsnfa.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits[primes]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpapqswzzm.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpapqswzzm.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpapqswzzm.jl:33\ntest set: Test Failed at /tmp/tmpapqswzzm.jl:35\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpapqswzzm.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpapqswzzm.jl:33\ntest set: Test Failed at /tmp/tmpapqswzzm.jl:36\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpapqswzzm.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpapqswzzm.jl:33\ntest set: Test Failed at /tmp/tmpapqswzzm.jl:37\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpapqswzzm.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpapqswzzm.jl:33\ntest set: Test Failed at /tmp/tmpapqswzzm.jl:38\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpapqswzzm.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpapqswzzm.jl:33\ntest set: Test Failed at /tmp/tmpapqswzzm.jl:39\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpapqswzzm.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpapqswzzm.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpapqswzzm.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4n036ky4.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4n036ky4.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4n036ky4.jl:31\\ntest set: Test Failed at /tmp/tmp4n036ky4.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4n036ky4.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4n036ky4.jl:31\\ntest set: Test Failed at /tmp/tmp4n036ky4.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4n036ky4.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4n036ky4.jl:31\\ntest set: Test Failed at /tmp/tmp4n036ky4.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4n036ky4.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4n036ky4.jl:31\\ntest set: Test Failed at /tmp/tmp4n036ky4.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4n036ky4.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4n036ky4.jl:31\\ntest set: Test Failed at /tmp/tmp4n036ky4.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4n036ky4.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4n036ky4.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] in ['2','3','5','7','B','D']\n            hex_key += 1\n  \
    \      end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    count = 0\n    for i in num\n   \
    \     if i in hex_digits[1:10]\n            if parse(Int64, i) in primes\n   \
    \             count += 1\n            end\n        elseif i in hex_digits[11:16]\n\
    \            if hex_digits.index(i) in primes\n                count += 1\n  \
    \          end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq7635slw.jl:40\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpq7635slw.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq7635slw.jl:39\ntest set: Test Failed at /tmp/tmpq7635slw.jl:41\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq7635slw.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq7635slw.jl:39\ntest set: Test Failed at /tmp/tmpq7635slw.jl:42\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq7635slw.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq7635slw.jl:39\ntest set: Test Failed at /tmp/tmpq7635slw.jl:43\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq7635slw.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq7635slw.jl:39\ntest set: Test Failed at /tmp/tmpq7635slw.jl:44\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq7635slw.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq7635slw.jl:39\ntest set: Test Failed at /tmp/tmpq7635slw.jl:45\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpq7635slw.jl:45\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq7635slw.jl:39\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq7635slw.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # hexadecimal digits are 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, A, B, C, D, E, F.\n    # Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    \    # So you have to determine a number of the following digits: 2, 3, 5, 7,\
    \ B (=decimal 11), D (=decimal 13).\n    # Note: you may assume the input is always\
    \ correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\n   \
    \ # Examples:\n    # For num = \"AB\" the output should be 1.\n    # For num =\
    \ \"1077E\" the output should be 2.\n    # For num = \"ABED1A33\" the output should\
    \ be 4.\n    # For num = \"123456789ABCDEF0\" the output should be 6.\n    # For\
    \ num = \"2020\" the output should be 2.\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzv30apk2.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzv30apk2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzv30apk2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6njfzlp8.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6njfzlp8.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6njfzlp8.jl:31\\ntest set: Test Failed at /tmp/tmp6njfzlp8.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6njfzlp8.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6njfzlp8.jl:31\\ntest set: Test Failed at /tmp/tmp6njfzlp8.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6njfzlp8.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6njfzlp8.jl:31\\ntest set: Test Failed at /tmp/tmp6njfzlp8.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6njfzlp8.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6njfzlp8.jl:31\\ntest set: Test Failed at /tmp/tmp6njfzlp8.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6njfzlp8.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6njfzlp8.jl:31\\ntest set: Test Failed at /tmp/tmp6njfzlp8.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6njfzlp8.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6njfzlp8.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9iuxf9pz.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9iuxf9pz.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9iuxf9pz.jl:31\\ntest set: Test Failed at /tmp/tmp9iuxf9pz.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9iuxf9pz.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9iuxf9pz.jl:31\\ntest set: Test Failed at /tmp/tmp9iuxf9pz.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9iuxf9pz.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9iuxf9pz.jl:31\\ntest set: Test Failed at /tmp/tmp9iuxf9pz.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9iuxf9pz.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9iuxf9pz.jl:31\\ntest set: Test Failed at /tmp/tmp9iuxf9pz.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9iuxf9pz.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9iuxf9pz.jl:31\\ntest set: Test Failed at /tmp/tmp9iuxf9pz.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9iuxf9pz.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9iuxf9pz.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnhac225z.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpnhac225z.jl:20\n   [2] top-level scope at /tmp/tmpnhac225z.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnhac225z.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnhac225z.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpnhac225z.jl:20\n\
    \   [2] top-level scope at /tmp/tmpnhac225z.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnhac225z.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnhac225z.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpnhac225z.jl:20\n\
    \   [2] top-level scope at /tmp/tmpnhac225z.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnhac225z.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnhac225z.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpnhac225z.jl:20\n\
    \   [2] top-level scope at /tmp/tmpnhac225z.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnhac225z.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnhac225z.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpnhac225z.jl:20\n   [2] top-level scope at /tmp/tmpnhac225z.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnhac225z.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnhac225z.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpnhac225z.jl:20\n   [2] top-level scope at /tmp/tmpnhac225z.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnhac225z.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnhac225z.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4zl9pvno.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp4zl9pvno.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zl9pvno.jl:31\ntest set: Test Failed at /tmp/tmp4zl9pvno.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4zl9pvno.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zl9pvno.jl:31\ntest set: Test Failed at /tmp/tmp4zl9pvno.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4zl9pvno.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zl9pvno.jl:31\ntest set: Test Failed at /tmp/tmp4zl9pvno.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4zl9pvno.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zl9pvno.jl:31\ntest set: Test Failed at /tmp/tmp4zl9pvno.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4zl9pvno.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zl9pvno.jl:31\ntest set: Test Failed at /tmp/tmp4zl9pvno.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp4zl9pvno.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zl9pvno.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zl9pvno.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc62sib9y.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpc62sib9y.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc62sib9y.jl:31\ntest set: Test Failed at /tmp/tmpc62sib9y.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc62sib9y.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc62sib9y.jl:31\ntest set: Test Failed at /tmp/tmpc62sib9y.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc62sib9y.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc62sib9y.jl:31\ntest set: Test Failed at /tmp/tmpc62sib9y.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpc62sib9y.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc62sib9y.jl:31\ntest set: Test Failed at /tmp/tmpc62sib9y.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc62sib9y.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc62sib9y.jl:31\ntest set: Test Failed at /tmp/tmpc62sib9y.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpc62sib9y.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc62sib9y.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc62sib9y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_g6o4rs.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp2_g6o4rs.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_g6o4rs.jl:31\ntest set: Test Failed at /tmp/tmp2_g6o4rs.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_g6o4rs.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_g6o4rs.jl:31\ntest set: Test Failed at /tmp/tmp2_g6o4rs.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_g6o4rs.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_g6o4rs.jl:31\ntest set: Test Failed at /tmp/tmp2_g6o4rs.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2_g6o4rs.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_g6o4rs.jl:31\ntest set: Test Failed at /tmp/tmp2_g6o4rs.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_g6o4rs.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_g6o4rs.jl:31\ntest set: Test Failed at /tmp/tmp2_g6o4rs.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp2_g6o4rs.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_g6o4rs.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_g6o4rs.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_hex = [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"]\n    count = 0\n    for i in num\n        if i in prime_hex\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5m459al.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpl5m459al.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5m459al.jl:32\ntest set: Test Failed at /tmp/tmpl5m459al.jl:34\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl5m459al.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5m459al.jl:32\ntest set: Test Failed at /tmp/tmpl5m459al.jl:35\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl5m459al.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5m459al.jl:32\ntest set: Test Failed at /tmp/tmpl5m459al.jl:36\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpl5m459al.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5m459al.jl:32\ntest set: Test Failed at /tmp/tmpl5m459al.jl:37\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl5m459al.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5m459al.jl:32\ntest set: Test Failed at /tmp/tmpl5m459al.jl:38\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpl5m459al.jl:38\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5m459al.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5m459al.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcvjt_w25.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpcvjt_w25.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcvjt_w25.jl:31\ntest set: Test Failed at /tmp/tmpcvjt_w25.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvjt_w25.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcvjt_w25.jl:31\ntest set: Test Failed at /tmp/tmpcvjt_w25.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvjt_w25.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcvjt_w25.jl:31\ntest set: Test Failed at /tmp/tmpcvjt_w25.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcvjt_w25.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcvjt_w25.jl:31\ntest set: Test Failed at /tmp/tmpcvjt_w25.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvjt_w25.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcvjt_w25.jl:31\ntest set: Test Failed at /tmp/tmpcvjt_w25.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpcvjt_w25.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcvjt_w25.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcvjt_w25.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            hex_key += 1\n        end\n    end\n\
    \    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in num\n \
    \       if i in prime_digits\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpefmlck73.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpefmlck73.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefmlck73.jl:33\ntest set: Test Failed at /tmp/tmpefmlck73.jl:35\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpefmlck73.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefmlck73.jl:33\ntest set: Test Failed at /tmp/tmpefmlck73.jl:36\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpefmlck73.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefmlck73.jl:33\ntest set: Test Failed at /tmp/tmpefmlck73.jl:37\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpefmlck73.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefmlck73.jl:33\ntest set: Test Failed at /tmp/tmpefmlck73.jl:38\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpefmlck73.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefmlck73.jl:33\ntest set: Test Failed at /tmp/tmpefmlck73.jl:39\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpefmlck73.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefmlck73.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpefmlck73.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_to_int = Dict(zip(hex_digits,\
    \ 1:16))\n    num_to_int = [hex_digits_to_int[x] for x in num]\n    return sum(x\
    \ in primes for x in num_to_int)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq9fjdyen.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n\
    \   [3] iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#5\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpq9fjdyen.jl:22\n\
    \   [6] top-level scope at /tmp/tmpq9fjdyen.jl:30\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpq9fjdyen.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpq9fjdyen.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate at\
    \ ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"#3#5\"\
    {Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpq9fjdyen.jl:22\n\
    \   [6] top-level scope at /tmp/tmpq9fjdyen.jl:31\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpq9fjdyen.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpq9fjdyen.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate\
    \ at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#5\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpq9fjdyen.jl:22\n\
    \   [6] top-level scope at /tmp/tmpq9fjdyen.jl:32\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpq9fjdyen.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpq9fjdyen.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate at\
    \ ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"#3#5\"\
    {Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpq9fjdyen.jl:22\n\
    \   [6] top-level scope at /tmp/tmpq9fjdyen.jl:33\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpq9fjdyen.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpq9fjdyen.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3]\
    \ iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#5\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpq9fjdyen.jl:22\n\
    \   [6] top-level scope at /tmp/tmpq9fjdyen.jl:34\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpq9fjdyen.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpq9fjdyen.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n\
    \   [3] iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#5\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmpq9fjdyen.jl:22\n\
    \   [6] top-level scope at /tmp/tmpq9fjdyen.jl:35\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmpq9fjdyen.jl:29\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9fjdyen.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits\n\
    \            if parse(Int64,i) in primes\n                count += 1\n       \
    \     end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe1vv1k5i.jl:36\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpe1vv1k5i.jl:36\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe1vv1k5i.jl:35\\ntest set: Test Failed at /tmp/tmpe1vv1k5i.jl:37\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe1vv1k5i.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe1vv1k5i.jl:35\\ntest set: Test Failed at /tmp/tmpe1vv1k5i.jl:38\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe1vv1k5i.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe1vv1k5i.jl:35\\ntest set: Test Failed at /tmp/tmpe1vv1k5i.jl:39\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe1vv1k5i.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe1vv1k5i.jl:35\\ntest set: Test Failed at /tmp/tmpe1vv1k5i.jl:40\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe1vv1k5i.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe1vv1k5i.jl:35\\ntest set: Test Failed at /tmp/tmpe1vv1k5i.jl:41\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpe1vv1k5i.jl:41\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe1vv1k5i.jl:35\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in num\n \
    \       if i in prime_digits\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ze2r1sl.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp0ze2r1sl.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ze2r1sl.jl:33\ntest set: Test Failed at /tmp/tmp0ze2r1sl.jl:35\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ze2r1sl.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ze2r1sl.jl:33\ntest set: Test Failed at /tmp/tmp0ze2r1sl.jl:36\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ze2r1sl.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ze2r1sl.jl:33\ntest set: Test Failed at /tmp/tmp0ze2r1sl.jl:37\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0ze2r1sl.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ze2r1sl.jl:33\ntest set: Test Failed at /tmp/tmp0ze2r1sl.jl:38\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ze2r1sl.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ze2r1sl.jl:33\ntest set: Test Failed at /tmp/tmp0ze2r1sl.jl:39\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp0ze2r1sl.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ze2r1sl.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ze2r1sl.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplzoozb6r.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmplzoozb6r.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplzoozb6r.jl:31\\ntest set: Test Failed at /tmp/tmplzoozb6r.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplzoozb6r.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplzoozb6r.jl:31\\ntest set: Test Failed at /tmp/tmplzoozb6r.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplzoozb6r.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplzoozb6r.jl:31\\ntest set: Test Failed at /tmp/tmplzoozb6r.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplzoozb6r.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplzoozb6r.jl:31\\ntest set: Test Failed at /tmp/tmplzoozb6r.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplzoozb6r.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplzoozb6r.jl:31\\ntest set: Test Failed at /tmp/tmplzoozb6r.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmplzoozb6r.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplzoozb6r.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits\n\
    \            if parse(Int64,i) in primes\n                count += 1\n       \
    \     end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy5y_9qgc.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpy5y_9qgc.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5y_9qgc.jl:35\ntest set: Test Failed at /tmp/tmpy5y_9qgc.jl:37\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy5y_9qgc.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5y_9qgc.jl:35\ntest set: Test Failed at /tmp/tmpy5y_9qgc.jl:38\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy5y_9qgc.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5y_9qgc.jl:35\ntest set: Test Failed at /tmp/tmpy5y_9qgc.jl:39\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpy5y_9qgc.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5y_9qgc.jl:35\ntest set: Test Failed at /tmp/tmpy5y_9qgc.jl:40\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy5y_9qgc.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5y_9qgc.jl:35\ntest set: Test Failed at /tmp/tmpy5y_9qgc.jl:41\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpy5y_9qgc.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5y_9qgc.jl:35\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5y_9qgc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    hex_key = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"\
    =>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"\
    F\"=>15)\n    count = 0\n    for i in num\n        if hex_key[i] in [2,3,5,7,11,13]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm67_j_xe.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpm67_j_xe.jl:25\n\
    \   [3] top-level scope at /tmp/tmpm67_j_xe.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpm67_j_xe.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpm67_j_xe.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpm67_j_xe.jl:25\n\
    \   [3] top-level scope at /tmp/tmpm67_j_xe.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpm67_j_xe.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpm67_j_xe.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpm67_j_xe.jl:25\n\
    \   [3] top-level scope at /tmp/tmpm67_j_xe.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpm67_j_xe.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpm67_j_xe.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpm67_j_xe.jl:25\n\
    \   [3] top-level scope at /tmp/tmpm67_j_xe.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpm67_j_xe.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpm67_j_xe.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpm67_j_xe.jl:25\n\
    \   [3] top-level scope at /tmp/tmpm67_j_xe.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpm67_j_xe.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpm67_j_xe.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpm67_j_xe.jl:25\n\
    \   [3] top-level scope at /tmp/tmpm67_j_xe.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpm67_j_xe.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm67_j_xe.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n          \
    \  key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpksdo91c8.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpksdo91c8.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpksdo91c8.jl:31\\ntest set: Test Failed at /tmp/tmpksdo91c8.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpksdo91c8.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpksdo91c8.jl:31\\ntest set: Test Failed at /tmp/tmpksdo91c8.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpksdo91c8.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpksdo91c8.jl:31\\ntest set: Test Failed at /tmp/tmpksdo91c8.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpksdo91c8.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpksdo91c8.jl:31\\ntest set: Test Failed at /tmp/tmpksdo91c8.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpksdo91c8.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpksdo91c8.jl:31\\ntest set: Test Failed at /tmp/tmpksdo91c8.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpksdo91c8.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpksdo91c8.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiltq0mr2.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpiltq0mr2.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiltq0mr2.jl:31\ntest set: Test Failed at /tmp/tmpiltq0mr2.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiltq0mr2.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiltq0mr2.jl:31\ntest set: Test Failed at /tmp/tmpiltq0mr2.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiltq0mr2.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiltq0mr2.jl:31\ntest set: Test Failed at /tmp/tmpiltq0mr2.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpiltq0mr2.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiltq0mr2.jl:31\ntest set: Test Failed at /tmp/tmpiltq0mr2.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiltq0mr2.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiltq0mr2.jl:31\ntest set: Test Failed at /tmp/tmpiltq0mr2.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpiltq0mr2.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiltq0mr2.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiltq0mr2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvx34fwp6.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpvx34fwp6.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvx34fwp6.jl:31\ntest set: Test Failed at /tmp/tmpvx34fwp6.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvx34fwp6.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvx34fwp6.jl:31\ntest set: Test Failed at /tmp/tmpvx34fwp6.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvx34fwp6.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvx34fwp6.jl:31\ntest set: Test Failed at /tmp/tmpvx34fwp6.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvx34fwp6.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvx34fwp6.jl:31\ntest set: Test Failed at /tmp/tmpvx34fwp6.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvx34fwp6.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvx34fwp6.jl:31\ntest set: Test Failed at /tmp/tmpvx34fwp6.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpvx34fwp6.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvx34fwp6.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvx34fwp6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = \"0123456789ABCDEF\"\n    return length(filter(x -> x in primes, map(x ->\
    \ parse(Int64, x), collect(num))))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2tiu80ni.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n   [1] parse(::Type{Int64}, ::Char; base::Int64) at ./parse.jl:46\n\
    \   [2] parse at ./parse.jl:41 [inlined]\n   [3] #4 at /tmp/tmp2tiu80ni.jl:21\
    \ [inlined]\n   [4] iterate at ./generator.jl:47 [inlined]\n   [5] _collect(::Array{Char,1},\
    \ ::Base.Generator{Array{Char,1},var\"#4#6\"}, ::Base.EltypeUnknown, ::Base.HasShape{1})\
    \ at ./array.jl:678\n   [6] collect_similar at ./array.jl:607 [inlined]\n   [7]\
    \ map at ./abstractarray.jl:2072 [inlined]\n   [8] hex_key(::String) at /tmp/tmp2tiu80ni.jl:21\n\
    \   [9] top-level scope at /tmp/tmp2tiu80ni.jl:28\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2tiu80ni.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp2tiu80ni.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E'\n  Stacktrace:\n   [1]\
    \ parse(::Type{Int64}, ::Char; base::Int64) at ./parse.jl:46\n   [2] parse at\
    \ ./parse.jl:41 [inlined]\n   [3] #4 at /tmp/tmp2tiu80ni.jl:21 [inlined]\n   [4]\
    \ iterate at ./generator.jl:47 [inlined]\n   [5] collect_to! at ./array.jl:711\
    \ [inlined]\n   [6] collect_to_with_first!(::Array{Int64,1}, ::Int64, ::Base.Generator{Array{Char,1},var\"\
    #4#6\"}, ::Int64) at ./array.jl:689\n   [7] _collect(::Array{Char,1}, ::Base.Generator{Array{Char,1},var\"\
    #4#6\"}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:683\n   [8] collect_similar\
    \ at ./array.jl:607 [inlined]\n   [9] map at ./abstractarray.jl:2072 [inlined]\n\
    \   [10] hex_key(::String) at /tmp/tmp2tiu80ni.jl:21\n   [11] top-level scope\
    \ at /tmp/tmp2tiu80ni.jl:29\n   [12] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [13] top-level scope at /tmp/tmp2tiu80ni.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp2tiu80ni.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  ArgumentError: invalid base 10 digit 'A'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, ::Char; base::Int64) at ./parse.jl:46\n   [2] parse\
    \ at ./parse.jl:41 [inlined]\n   [3] #4 at /tmp/tmp2tiu80ni.jl:21 [inlined]\n\
    \   [4] iterate at ./generator.jl:47 [inlined]\n   [5] _collect(::Array{Char,1},\
    \ ::Base.Generator{Array{Char,1},var\"#4#6\"}, ::Base.EltypeUnknown, ::Base.HasShape{1})\
    \ at ./array.jl:678\n   [6] collect_similar at ./array.jl:607 [inlined]\n   [7]\
    \ map at ./abstractarray.jl:2072 [inlined]\n   [8] hex_key(::String) at /tmp/tmp2tiu80ni.jl:21\n\
    \   [9] top-level scope at /tmp/tmp2tiu80ni.jl:30\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2tiu80ni.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp2tiu80ni.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  ArgumentError: invalid base 10 digit 'A'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, ::Char; base::Int64) at ./parse.jl:46\n   [2] parse\
    \ at ./parse.jl:41 [inlined]\n   [3] #4 at /tmp/tmp2tiu80ni.jl:21 [inlined]\n\
    \   [4] iterate at ./generator.jl:47 [inlined]\n   [5] collect_to! at ./array.jl:711\
    \ [inlined]\n   [6] collect_to_with_first!(::Array{Int64,1}, ::Int64, ::Base.Generator{Array{Char,1},var\"\
    #4#6\"}, ::Int64) at ./array.jl:689\n   [7] _collect(::Array{Char,1}, ::Base.Generator{Array{Char,1},var\"\
    #4#6\"}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:683\n   [8] collect_similar\
    \ at ./array.jl:607 [inlined]\n   [9] map at ./abstractarray.jl:2072 [inlined]\n\
    \   [10] hex_key(::String) at /tmp/tmp2tiu80ni.jl:21\n   [11] top-level scope\
    \ at /tmp/tmp2tiu80ni.jl:32\n   [12] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [13] top-level scope at /tmp/tmp2tiu80ni.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp2tiu80ni.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n   [1] parse(::Type{Int64}, ::Char; base::Int64) at ./parse.jl:46\n\
    \   [2] parse at ./parse.jl:41 [inlined]\n   [3] #4 at /tmp/tmp2tiu80ni.jl:21\
    \ [inlined]\n   [4] iterate at ./generator.jl:47 [inlined]\n   [5] collect_to!\
    \ at ./array.jl:711 [inlined]\n   [6] collect_to_with_first!(::Array{Int64,1},\
    \ ::Int64, ::Base.Generator{Array{Char,1},var\"#4#6\"}, ::Int64) at ./array.jl:689\n\
    \   [7] _collect(::Array{Char,1}, ::Base.Generator{Array{Char,1},var\"#4#6\"},\
    \ ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:683\n   [8] collect_similar\
    \ at ./array.jl:607 [inlined]\n   [9] map at ./abstractarray.jl:2072 [inlined]\n\
    \   [10] hex_key(::String) at /tmp/tmp2tiu80ni.jl:21\n   [11] top-level scope\
    \ at /tmp/tmp2tiu80ni.jl:33\n   [12] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [13] top-level scope at /tmp/tmp2tiu80ni.jl:27\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2tiu80ni.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_key\
    \ = 0\n    for i in num\n        if i in primes\n            hex_key += 1\n  \
    \      end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppw1v5ctp.jl:33\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmppw1v5ctp.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppw1v5ctp.jl:32\\ntest set: Test Failed at /tmp/tmppw1v5ctp.jl:34\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppw1v5ctp.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppw1v5ctp.jl:32\\ntest set: Test Failed at /tmp/tmppw1v5ctp.jl:35\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppw1v5ctp.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppw1v5ctp.jl:32\\ntest set: Test Failed at /tmp/tmppw1v5ctp.jl:36\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppw1v5ctp.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppw1v5ctp.jl:32\\ntest set: Test Failed at /tmp/tmppw1v5ctp.jl:37\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppw1v5ctp.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppw1v5ctp.jl:32\\ntest set: Test Failed at /tmp/tmppw1v5ctp.jl:38\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmppw1v5ctp.jl:38\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppw1v5ctp.jl:32\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_hex_digits = [\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in prime_hex_digits\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm320szot.jl:33\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm320szot.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm320szot.jl:32\\ntest set: Test Failed at /tmp/tmpm320szot.jl:34\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm320szot.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm320szot.jl:32\\ntest set: Test Failed at /tmp/tmpm320szot.jl:35\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm320szot.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm320szot.jl:32\\ntest set: Test Failed at /tmp/tmpm320szot.jl:36\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm320szot.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm320szot.jl:32\\ntest set: Test Failed at /tmp/tmpm320szot.jl:37\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm320szot.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm320szot.jl:32\\ntest set: Test Failed at /tmp/tmpm320szot.jl:38\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm320szot.jl:38\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm320szot.jl:32\\nTest Summary: | Fail  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # create a dictionary of hexadecimal digits\n\
    \    hex_dict = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"\
    6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"\
    =>14,\"F\"=>15)\n    # create a list of prime numbers\n    prime_list = [2,3,5,7,11,13]\n\
    \    # create a counter\n    counter = 0\n    # iterate over the string\n    for\
    \ i in num\n        # if the value of the key is in the prime list, add 1 to the\
    \ counter\n        if hex_dict[i] in prime_list\n            counter += 1\n  \
    \      end\n    end\n    # return the counter\n    return counter\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3rqlyt2a.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  KeyError: key \\'A\\' not\
    \ found\\n  Stacktrace:\\n   [1] getindex at ./dict.jl:477 [inlined]\\n   [2]\
    \ hex_key(::String) at /tmp/tmp3rqlyt2a.jl:28\\n   [3] top-level scope at /tmp/tmp3rqlyt2a.jl:40\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3rqlyt2a.jl:39\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3rqlyt2a.jl:41\\n  Test threw exception\\n  Expression: candidate(\"\
    1077E\") == 2\\n  KeyError: key \\'1\\' not found\\n  Stacktrace:\\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\\n   [2] hex_key(::String) at /tmp/tmp3rqlyt2a.jl:28\\\
    n   [3] top-level scope at /tmp/tmp3rqlyt2a.jl:41\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3rqlyt2a.jl:39\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3rqlyt2a.jl:42\\n  Test threw exception\\n  Expression: candidate(\"\
    ABED1A33\") == 4\\n  KeyError: key \\'A\\' not found\\n  Stacktrace:\\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\\n   [2] hex_key(::String) at /tmp/tmp3rqlyt2a.jl:28\\\
    n   [3] top-level scope at /tmp/tmp3rqlyt2a.jl:42\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3rqlyt2a.jl:39\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3rqlyt2a.jl:43\\n  Test threw exception\\n  Expression: candidate(\"\
    2020\") == 2\\n  KeyError: key \\'2\\' not found\\n  Stacktrace:\\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\\n   [2] hex_key(::String) at /tmp/tmp3rqlyt2a.jl:28\\\
    n   [3] top-level scope at /tmp/tmp3rqlyt2a.jl:43\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3rqlyt2a.jl:39\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3rqlyt2a.jl:44\\n  Test threw exception\\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\\n  KeyError: key \\'1\\' not found\\n  Stacktrace:\\\
    n   [1] getindex at ./dict.jl:477 [inlined]\\n   [2] hex_key(::String) at /tmp/tmp3rqlyt2a.jl:28\\\
    n   [3] top-level scope at /tmp/tmp3rqlyt2a.jl:44\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3rqlyt2a.jl:39\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3rqlyt2a.jl:45\\n  Test threw exception\\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\\n  KeyError: key \\'1\\' not found\\\
    n  Stacktrace:\\n   [1] getindex at ./dict.jl:477 [inlined]\\n   [2] hex_key(::String)\
    \ at /tmp/tmp3rqlyt2a.jl:28\\n   [3] top-level scope at /tmp/tmp3rqlyt2a.jl:45\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3rqlyt2a.jl:39\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp94fjc0oc.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmp94fjc0oc.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94fjc0oc.jl:31\\ntest set: Test Failed at /tmp/tmp94fjc0oc.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp94fjc0oc.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94fjc0oc.jl:31\\ntest set: Test Failed at /tmp/tmp94fjc0oc.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp94fjc0oc.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94fjc0oc.jl:31\\ntest set: Test Failed at /tmp/tmp94fjc0oc.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp94fjc0oc.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94fjc0oc.jl:31\\ntest set: Test Failed at /tmp/tmp94fjc0oc.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp94fjc0oc.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94fjc0oc.jl:31\\ntest set: Test Failed at /tmp/tmp94fjc0oc.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmp94fjc0oc.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94fjc0oc.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6_uw76cm.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp6_uw76cm.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_uw76cm.jl:26\ntest set: Test Failed at /tmp/tmp6_uw76cm.jl:28\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_uw76cm.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_uw76cm.jl:26\ntest set: Test Failed at /tmp/tmp6_uw76cm.jl:29\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_uw76cm.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_uw76cm.jl:26\ntest set: Test Failed at /tmp/tmp6_uw76cm.jl:30\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6_uw76cm.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_uw76cm.jl:26\ntest set: Test Failed at /tmp/tmp6_uw76cm.jl:31\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_uw76cm.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_uw76cm.jl:26\ntest set: Test Failed at /tmp/tmp6_uw76cm.jl:32\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp6_uw76cm.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_uw76cm.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_uw76cm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits[10:16]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp59jg337.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpp59jg337.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp59jg337.jl:33\ntest set: Test Failed at /tmp/tmpp59jg337.jl:35\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp59jg337.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp59jg337.jl:33\ntest set: Test Failed at /tmp/tmpp59jg337.jl:36\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp59jg337.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp59jg337.jl:33\ntest set: Test Failed at /tmp/tmpp59jg337.jl:37\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp59jg337.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp59jg337.jl:33\ntest set: Test Failed at /tmp/tmpp59jg337.jl:38\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp59jg337.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp59jg337.jl:33\ntest set: Test Failed at /tmp/tmpp59jg337.jl:39\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpp59jg337.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp59jg337.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp59jg337.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp810llmg_.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp810llmg_.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp810llmg_.jl:26\ntest set: Test Failed at /tmp/tmp810llmg_.jl:28\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp810llmg_.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp810llmg_.jl:26\ntest set: Test Failed at /tmp/tmp810llmg_.jl:29\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp810llmg_.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp810llmg_.jl:26\ntest set: Test Failed at /tmp/tmp810llmg_.jl:30\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp810llmg_.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp810llmg_.jl:26\ntest set: Test Failed at /tmp/tmp810llmg_.jl:31\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp810llmg_.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp810llmg_.jl:26\ntest set: Test Failed at /tmp/tmp810llmg_.jl:32\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp810llmg_.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp810llmg_.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp810llmg_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->x in \"2357BD\", num))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoqpksikm.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpoqpksikm.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqpksikm.jl:31\ntest set: Test Failed at /tmp/tmpoqpksikm.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoqpksikm.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqpksikm.jl:31\ntest set: Test Failed at /tmp/tmpoqpksikm.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoqpksikm.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqpksikm.jl:31\ntest set: Test Failed at /tmp/tmpoqpksikm.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpoqpksikm.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqpksikm.jl:31\ntest set: Test Failed at /tmp/tmpoqpksikm.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoqpksikm.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqpksikm.jl:31\ntest set: Test Failed at /tmp/tmpoqpksikm.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpoqpksikm.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqpksikm.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoqpksikm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpam_vhw2u.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpam_vhw2u.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpam_vhw2u.jl:31\ntest set: Test Failed at /tmp/tmpam_vhw2u.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpam_vhw2u.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpam_vhw2u.jl:31\ntest set: Test Failed at /tmp/tmpam_vhw2u.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpam_vhw2u.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpam_vhw2u.jl:31\ntest set: Test Failed at /tmp/tmpam_vhw2u.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpam_vhw2u.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpam_vhw2u.jl:31\ntest set: Test Failed at /tmp/tmpam_vhw2u.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpam_vhw2u.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpam_vhw2u.jl:31\ntest set: Test Failed at /tmp/tmpam_vhw2u.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpam_vhw2u.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpam_vhw2u.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpam_vhw2u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgchiuszu.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgchiuszu.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgchiuszu.jl:31\\ntest set: Test Failed at /tmp/tmpgchiuszu.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgchiuszu.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgchiuszu.jl:31\\ntest set: Test Failed at /tmp/tmpgchiuszu.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgchiuszu.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgchiuszu.jl:31\\ntest set: Test Failed at /tmp/tmpgchiuszu.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgchiuszu.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgchiuszu.jl:31\\ntest set: Test Failed at /tmp/tmpgchiuszu.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgchiuszu.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgchiuszu.jl:31\\ntest set: Test Failed at /tmp/tmpgchiuszu.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgchiuszu.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgchiuszu.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_prime = [\"2\",\"3\",\"5\",\"7\",\"B\"\
    ,\"D\"]\n    count = 0\n    for i in num\n        if i in hex_prime\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsd8_2ieq.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpsd8_2ieq.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsd8_2ieq.jl:32\ntest set: Test Failed at /tmp/tmpsd8_2ieq.jl:34\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsd8_2ieq.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsd8_2ieq.jl:32\ntest set: Test Failed at /tmp/tmpsd8_2ieq.jl:35\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsd8_2ieq.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsd8_2ieq.jl:32\ntest set: Test Failed at /tmp/tmpsd8_2ieq.jl:36\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsd8_2ieq.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsd8_2ieq.jl:32\ntest set: Test Failed at /tmp/tmpsd8_2ieq.jl:37\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsd8_2ieq.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsd8_2ieq.jl:32\ntest set: Test Failed at /tmp/tmpsd8_2ieq.jl:38\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpsd8_2ieq.jl:38\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsd8_2ieq.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsd8_2ieq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzwp3il2q.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpzwp3il2q.jl:20\n   [2] top-level scope at /tmp/tmpzwp3il2q.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzwp3il2q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpzwp3il2q.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpzwp3il2q.jl:20\n\
    \   [2] top-level scope at /tmp/tmpzwp3il2q.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzwp3il2q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpzwp3il2q.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpzwp3il2q.jl:20\n\
    \   [2] top-level scope at /tmp/tmpzwp3il2q.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzwp3il2q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpzwp3il2q.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpzwp3il2q.jl:20\n\
    \   [2] top-level scope at /tmp/tmpzwp3il2q.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzwp3il2q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpzwp3il2q.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpzwp3il2q.jl:20\n   [2] top-level scope at /tmp/tmpzwp3il2q.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzwp3il2q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpzwp3il2q.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpzwp3il2q.jl:20\n   [2] top-level scope at /tmp/tmpzwp3il2q.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzwp3il2q.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwp3il2q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8dmkngjy.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp8dmkngjy.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8dmkngjy.jl:31\ntest set: Test Failed at /tmp/tmp8dmkngjy.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dmkngjy.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8dmkngjy.jl:31\ntest set: Test Failed at /tmp/tmp8dmkngjy.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dmkngjy.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8dmkngjy.jl:31\ntest set: Test Failed at /tmp/tmp8dmkngjy.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8dmkngjy.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8dmkngjy.jl:31\ntest set: Test Failed at /tmp/tmp8dmkngjy.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dmkngjy.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8dmkngjy.jl:31\ntest set: Test Failed at /tmp/tmp8dmkngjy.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp8dmkngjy.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8dmkngjy.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8dmkngjy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n          \
    \  key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqk_r49qj.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpqk_r49qj.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqk_r49qj.jl:31\ntest set: Test Failed at /tmp/tmpqk_r49qj.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqk_r49qj.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqk_r49qj.jl:31\ntest set: Test Failed at /tmp/tmpqk_r49qj.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqk_r49qj.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqk_r49qj.jl:31\ntest set: Test Failed at /tmp/tmpqk_r49qj.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqk_r49qj.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqk_r49qj.jl:31\ntest set: Test Failed at /tmp/tmpqk_r49qj.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqk_r49qj.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqk_r49qj.jl:31\ntest set: Test Failed at /tmp/tmpqk_r49qj.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpqk_r49qj.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqk_r49qj.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqk_r49qj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzwdc9gxx.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpzwdc9gxx.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwdc9gxx.jl:31\ntest set: Test Failed at /tmp/tmpzwdc9gxx.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwdc9gxx.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwdc9gxx.jl:31\ntest set: Test Failed at /tmp/tmpzwdc9gxx.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwdc9gxx.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwdc9gxx.jl:31\ntest set: Test Failed at /tmp/tmpzwdc9gxx.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzwdc9gxx.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwdc9gxx.jl:31\ntest set: Test Failed at /tmp/tmpzwdc9gxx.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwdc9gxx.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwdc9gxx.jl:31\ntest set: Test Failed at /tmp/tmpzwdc9gxx.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpzwdc9gxx.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwdc9gxx.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwdc9gxx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpiggkr9ul.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpiggkr9ul.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiggkr9ul.jl:31\\ntest set: Test Failed at /tmp/tmpiggkr9ul.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpiggkr9ul.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiggkr9ul.jl:31\\ntest set: Test Failed at /tmp/tmpiggkr9ul.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpiggkr9ul.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiggkr9ul.jl:31\\ntest set: Test Failed at /tmp/tmpiggkr9ul.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpiggkr9ul.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiggkr9ul.jl:31\\ntest set: Test Failed at /tmp/tmpiggkr9ul.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpiggkr9ul.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiggkr9ul.jl:31\\ntest set: Test Failed at /tmp/tmpiggkr9ul.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpiggkr9ul.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiggkr9ul.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for c in num\n        if\
    \ c in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3jahkxt9.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp3jahkxt9.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3jahkxt9.jl:31\ntest set: Test Failed at /tmp/tmp3jahkxt9.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3jahkxt9.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3jahkxt9.jl:31\ntest set: Test Failed at /tmp/tmp3jahkxt9.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3jahkxt9.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3jahkxt9.jl:31\ntest set: Test Failed at /tmp/tmp3jahkxt9.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3jahkxt9.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3jahkxt9.jl:31\ntest set: Test Failed at /tmp/tmp3jahkxt9.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3jahkxt9.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3jahkxt9.jl:31\ntest set: Test Failed at /tmp/tmp3jahkxt9.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp3jahkxt9.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3jahkxt9.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jahkxt9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpethcge39.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpethcge39.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpethcge39.jl:31\ntest set: Test Failed at /tmp/tmpethcge39.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpethcge39.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpethcge39.jl:31\ntest set: Test Failed at /tmp/tmpethcge39.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpethcge39.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpethcge39.jl:31\ntest set: Test Failed at /tmp/tmpethcge39.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpethcge39.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpethcge39.jl:31\ntest set: Test Failed at /tmp/tmpethcge39.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpethcge39.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpethcge39.jl:31\ntest set: Test Failed at /tmp/tmpethcge39.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpethcge39.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpethcge39.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpethcge39.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfwzu29as.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpfwzu29as.jl:20\n   [2] top-level scope at /tmp/tmpfwzu29as.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfwzu29as.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpfwzu29as.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpfwzu29as.jl:20\n\
    \   [2] top-level scope at /tmp/tmpfwzu29as.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfwzu29as.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpfwzu29as.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpfwzu29as.jl:20\n\
    \   [2] top-level scope at /tmp/tmpfwzu29as.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfwzu29as.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpfwzu29as.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpfwzu29as.jl:20\n\
    \   [2] top-level scope at /tmp/tmpfwzu29as.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfwzu29as.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpfwzu29as.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpfwzu29as.jl:20\n   [2] top-level scope at /tmp/tmpfwzu29as.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfwzu29as.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpfwzu29as.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpfwzu29as.jl:20\n   [2] top-level scope at /tmp/tmpfwzu29as.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfwzu29as.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwzu29as.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz_k85vq5.jl:33\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpz_k85vq5.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz_k85vq5.jl:32\\ntest set: Test Failed at /tmp/tmpz_k85vq5.jl:34\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz_k85vq5.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz_k85vq5.jl:32\\ntest set: Test Failed at /tmp/tmpz_k85vq5.jl:35\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz_k85vq5.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz_k85vq5.jl:32\\ntest set: Test Failed at /tmp/tmpz_k85vq5.jl:36\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz_k85vq5.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz_k85vq5.jl:32\\ntest set: Test Failed at /tmp/tmpz_k85vq5.jl:37\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz_k85vq5.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz_k85vq5.jl:32\\ntest set: Test Failed at /tmp/tmpz_k85vq5.jl:38\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpz_k85vq5.jl:38\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz_k85vq5.jl:32\\nTest Summary: | Fail  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpynysz9r8.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpynysz9r8.jl:20\n   [2] top-level scope at /tmp/tmpynysz9r8.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpynysz9r8.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpynysz9r8.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpynysz9r8.jl:20\n\
    \   [2] top-level scope at /tmp/tmpynysz9r8.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpynysz9r8.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpynysz9r8.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpynysz9r8.jl:20\n\
    \   [2] top-level scope at /tmp/tmpynysz9r8.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpynysz9r8.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpynysz9r8.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpynysz9r8.jl:20\n\
    \   [2] top-level scope at /tmp/tmpynysz9r8.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpynysz9r8.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpynysz9r8.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpynysz9r8.jl:20\n   [2] top-level scope at /tmp/tmpynysz9r8.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpynysz9r8.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpynysz9r8.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpynysz9r8.jl:20\n   [2] top-level scope at /tmp/tmpynysz9r8.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpynysz9r8.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpynysz9r8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in \"2357BD\"\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpo8epyzkw.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpo8epyzkw.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpo8epyzkw.jl:31\\ntest set: Test Failed at /tmp/tmpo8epyzkw.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpo8epyzkw.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpo8epyzkw.jl:31\\ntest set: Test Failed at /tmp/tmpo8epyzkw.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpo8epyzkw.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpo8epyzkw.jl:31\\ntest set: Test Failed at /tmp/tmpo8epyzkw.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpo8epyzkw.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpo8epyzkw.jl:31\\ntest set: Test Failed at /tmp/tmpo8epyzkw.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpo8epyzkw.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpo8epyzkw.jl:31\\ntest set: Test Failed at /tmp/tmpo8epyzkw.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpo8epyzkw.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpo8epyzkw.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_primes = [hex_digits[i] for i\
    \ in primes]\n    return length(intersect(collect(num), hex_primes))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv_24d9hz.jl:29\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpv_24d9hz.jl:29\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv_24d9hz.jl:28\\ntest set: Test Failed at /tmp/tmpv_24d9hz.jl:30\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv_24d9hz.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv_24d9hz.jl:28\\ntest set: Test Failed at /tmp/tmpv_24d9hz.jl:31\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv_24d9hz.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv_24d9hz.jl:28\\ntest set: Test Failed at /tmp/tmpv_24d9hz.jl:32\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv_24d9hz.jl:32\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv_24d9hz.jl:28\\ntest set: Test Failed at /tmp/tmpv_24d9hz.jl:33\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv_24d9hz.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv_24d9hz.jl:28\\ntest set: Test Failed at /tmp/tmpv_24d9hz.jl:34\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpv_24d9hz.jl:34\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv_24d9hz.jl:28\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BDF\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmgrg8cmr.jl:36\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmgrg8cmr.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmgrg8cmr.jl:31\ntest set: Test Failed at /tmp/tmpmgrg8cmr.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 14 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpmgrg8cmr.jl:37\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmgrg8cmr.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmgrg8cmr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # Create a dictionary of hexadecimal numbers\n\
    \    hex_dict = Dict(\n        \"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3,\
    \ \"4\" => 4, \"5\" => 5, \"6\" => 6, \n        \"7\" => 7, \"8\" => 8, \"9\"\
    \ => 9, \"A\" => 10, \"B\" => 11, \"C\" => 12, \n        \"D\" => 13, \"E\" =>\
    \ 14, \"F\" => 15)\n    # Create a list of prime numbers\n    prime_list = [2,\
    \ 3, 5, 7, 11, 13]\n    # Create a list of hexadecimal numbers\n    hex_list =\
    \ [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\"\
    , \"B\", \n        \"C\", \"D\", \"E\", \"F\"]\n    # Create an empty list\n \
    \   prime_hex_list = []\n    # Create an empty list\n    hex_num_list = []\n \
    \   # Create an empty list\n    hex_num_list_int = []\n    # Create an empty list\n\
    \    prime_hex_num_list = []\n    # Create an empty list\n    prime_hex_num_list_int\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str = []\n    # Create\
    \ an empty list\n    prime_hex_num_list_str_int = []\n    # Create an empty list\n\
    \    prime_hex_num_list_str_int_str = []\n    # Create an empty list\n    prime_hex_num_list_str_int_str_int\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str_int_str_int_str\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str_int_str_int_str_int\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str_int_str_int_str_int_str\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str_int\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbc_ba4y5.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbc_ba4y5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbc_ba4y5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpf7gjgm53.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpf7gjgm53.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf7gjgm53.jl:31\\ntest set: Test Failed at /tmp/tmpf7gjgm53.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf7gjgm53.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf7gjgm53.jl:31\\ntest set: Test Failed at /tmp/tmpf7gjgm53.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf7gjgm53.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf7gjgm53.jl:31\\ntest set: Test Failed at /tmp/tmpf7gjgm53.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf7gjgm53.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf7gjgm53.jl:31\\ntest set: Test Failed at /tmp/tmpf7gjgm53.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf7gjgm53.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf7gjgm53.jl:31\\ntest set: Test Failed at /tmp/tmpf7gjgm53.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpf7gjgm53.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf7gjgm53.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3a1sgafk.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp3a1sgafk.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a1sgafk.jl:31\ntest set: Test Failed at /tmp/tmp3a1sgafk.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3a1sgafk.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a1sgafk.jl:31\ntest set: Test Failed at /tmp/tmp3a1sgafk.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3a1sgafk.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a1sgafk.jl:31\ntest set: Test Failed at /tmp/tmp3a1sgafk.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3a1sgafk.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a1sgafk.jl:31\ntest set: Test Failed at /tmp/tmp3a1sgafk.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3a1sgafk.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a1sgafk.jl:31\ntest set: Test Failed at /tmp/tmp3a1sgafk.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp3a1sgafk.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a1sgafk.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3a1sgafk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in num\n \
    \       if i in prime_digits\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi0il_oiy.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpi0il_oiy.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0il_oiy.jl:33\ntest set: Test Failed at /tmp/tmpi0il_oiy.jl:35\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi0il_oiy.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0il_oiy.jl:33\ntest set: Test Failed at /tmp/tmpi0il_oiy.jl:36\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi0il_oiy.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0il_oiy.jl:33\ntest set: Test Failed at /tmp/tmpi0il_oiy.jl:37\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpi0il_oiy.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0il_oiy.jl:33\ntest set: Test Failed at /tmp/tmpi0il_oiy.jl:38\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi0il_oiy.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0il_oiy.jl:33\ntest set: Test Failed at /tmp/tmpi0il_oiy.jl:39\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpi0il_oiy.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0il_oiy.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi0il_oiy.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits = Dict(\"0\" => 0, \"1\" =>\
    \ 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5, \"6\" => 6, \"7\" => 7, \"\
    8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\"\
    \ => 14, \"F\" => 15)\n    count = 0\n    for i in 1:length(num)\n        if hex_digits[num[i]]\
    \ in primes\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3wv5k90r.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp3wv5k90r.jl:26\n\
    \   [3] top-level scope at /tmp/tmp3wv5k90r.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3wv5k90r.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3wv5k90r.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp3wv5k90r.jl:26\n\
    \   [3] top-level scope at /tmp/tmp3wv5k90r.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3wv5k90r.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3wv5k90r.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp3wv5k90r.jl:26\n\
    \   [3] top-level scope at /tmp/tmp3wv5k90r.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3wv5k90r.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3wv5k90r.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp3wv5k90r.jl:26\n\
    \   [3] top-level scope at /tmp/tmp3wv5k90r.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3wv5k90r.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3wv5k90r.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp3wv5k90r.jl:26\n\
    \   [3] top-level scope at /tmp/tmp3wv5k90r.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3wv5k90r.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3wv5k90r.jl:42\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp3wv5k90r.jl:26\n\
    \   [3] top-level scope at /tmp/tmp3wv5k90r.jl:42\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp3wv5k90r.jl:36\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3wv5k90r.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n          \
    \  key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key\
    \ += 1\n        end\n    end\n    return hex_key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb9ptl1yc.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpb9ptl1yc.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb9ptl1yc.jl:31\ntest set: Test Failed at /tmp/tmpb9ptl1yc.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9ptl1yc.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb9ptl1yc.jl:31\ntest set: Test Failed at /tmp/tmpb9ptl1yc.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9ptl1yc.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb9ptl1yc.jl:31\ntest set: Test Failed at /tmp/tmpb9ptl1yc.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb9ptl1yc.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb9ptl1yc.jl:31\ntest set: Test Failed at /tmp/tmpb9ptl1yc.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9ptl1yc.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb9ptl1yc.jl:31\ntest set: Test Failed at /tmp/tmpb9ptl1yc.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpb9ptl1yc.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb9ptl1yc.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9ptl1yc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4y8ozydw.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp4y8ozydw.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y8ozydw.jl:31\ntest set: Test Failed at /tmp/tmp4y8ozydw.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4y8ozydw.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y8ozydw.jl:31\ntest set: Test Failed at /tmp/tmp4y8ozydw.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4y8ozydw.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y8ozydw.jl:31\ntest set: Test Failed at /tmp/tmp4y8ozydw.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4y8ozydw.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y8ozydw.jl:31\ntest set: Test Failed at /tmp/tmp4y8ozydw.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4y8ozydw.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y8ozydw.jl:31\ntest set: Test Failed at /tmp/tmp4y8ozydw.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp4y8ozydw.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y8ozydw.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4y8ozydw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_digits = length(num)\n    count = 0\n    for i in 1:num_digits\n\
    \        if hex_digits_dict[num[i]] in primes\n            count += 1\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8ff_hs9m.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp8ff_hs9m.jl:25\n\
    \   [3] top-level scope at /tmp/tmp8ff_hs9m.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8ff_hs9m.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp8ff_hs9m.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp8ff_hs9m.jl:25\n\
    \   [3] top-level scope at /tmp/tmp8ff_hs9m.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8ff_hs9m.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp8ff_hs9m.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp8ff_hs9m.jl:25\n\
    \   [3] top-level scope at /tmp/tmp8ff_hs9m.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8ff_hs9m.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp8ff_hs9m.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp8ff_hs9m.jl:25\n\
    \   [3] top-level scope at /tmp/tmp8ff_hs9m.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8ff_hs9m.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp8ff_hs9m.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp8ff_hs9m.jl:25\n\
    \   [3] top-level scope at /tmp/tmp8ff_hs9m.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8ff_hs9m.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp8ff_hs9m.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp8ff_hs9m.jl:25\n\
    \   [3] top-level scope at /tmp/tmp8ff_hs9m.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8ff_hs9m.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ff_hs9m.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu5mp3_5d.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpu5mp3_5d.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5mp3_5d.jl:31\ntest set: Test Failed at /tmp/tmpu5mp3_5d.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu5mp3_5d.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5mp3_5d.jl:31\ntest set: Test Failed at /tmp/tmpu5mp3_5d.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu5mp3_5d.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5mp3_5d.jl:31\ntest set: Test Failed at /tmp/tmpu5mp3_5d.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpu5mp3_5d.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5mp3_5d.jl:31\ntest set: Test Failed at /tmp/tmpu5mp3_5d.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu5mp3_5d.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5mp3_5d.jl:31\ntest set: Test Failed at /tmp/tmpu5mp3_5d.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpu5mp3_5d.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5mp3_5d.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu5mp3_5d.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_digits = [hex_digits_dict[i] for i in num]\n    return sum(i\
    \ in primes for i in num_digits)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4esuy7rg.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n\
    \   [3] iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#5\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmp4esuy7rg.jl:22\n\
    \   [6] top-level scope at /tmp/tmp4esuy7rg.jl:30\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp4esuy7rg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp4esuy7rg.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate at\
    \ ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"#3#5\"\
    {Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmp4esuy7rg.jl:22\n\
    \   [6] top-level scope at /tmp/tmp4esuy7rg.jl:31\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp4esuy7rg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp4esuy7rg.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate\
    \ at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#5\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmp4esuy7rg.jl:22\n\
    \   [6] top-level scope at /tmp/tmp4esuy7rg.jl:32\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp4esuy7rg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp4esuy7rg.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] iterate at\
    \ ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"#3#5\"\
    {Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmp4esuy7rg.jl:22\n\
    \   [6] top-level scope at /tmp/tmp4esuy7rg.jl:33\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp4esuy7rg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp4esuy7rg.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3]\
    \ iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#5\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmp4esuy7rg.jl:22\n\
    \   [6] top-level scope at /tmp/tmp4esuy7rg.jl:34\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp4esuy7rg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp4esuy7rg.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n\
    \   [3] iterate at ./generator.jl:47 [inlined]\n   [4] collect(::Base.Generator{String,var\"\
    #3#5\"{Dict{String,Int64}}}) at ./array.jl:665\n   [5] hex_key(::String) at /tmp/tmp4esuy7rg.jl:22\n\
    \   [6] top-level scope at /tmp/tmp4esuy7rg.jl:35\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp4esuy7rg.jl:29\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4esuy7rg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    num_primes = 0\n    for i in num\n        if i in hex_digits[10:16]\n\
    \            num_primes += 1\n        elseif i in hex_digits[1:9]\n          \
    \  if parse(Int64,i) in primes\n                num_primes += 1\n            end\n\
    \        end\n    end\n    return num_primes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm7lli0i5.jl:38\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm7lli0i5.jl:38\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm7lli0i5.jl:37\\ntest set: Test Failed at /tmp/tmpm7lli0i5.jl:39\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm7lli0i5.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm7lli0i5.jl:37\\ntest set: Test Failed at /tmp/tmpm7lli0i5.jl:40\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm7lli0i5.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm7lli0i5.jl:37\\ntest set: Test Failed at /tmp/tmpm7lli0i5.jl:41\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm7lli0i5.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm7lli0i5.jl:37\\ntest set: Test Failed at /tmp/tmpm7lli0i5.jl:42\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm7lli0i5.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm7lli0i5.jl:37\\ntest set: Test Failed at /tmp/tmpm7lli0i5.jl:43\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm7lli0i5.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm7lli0i5.jl:37\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_arr = collect(num)\n    count = 0\n    for i in num_arr\n  \
    \      if hex_digits_dict[i] in primes\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6_c1szn9.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp6_c1szn9.jl:25\n\
    \   [3] top-level scope at /tmp/tmp6_c1szn9.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6_c1szn9.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_c1szn9.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp6_c1szn9.jl:25\n\
    \   [3] top-level scope at /tmp/tmp6_c1szn9.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6_c1szn9.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_c1szn9.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp6_c1szn9.jl:25\n\
    \   [3] top-level scope at /tmp/tmp6_c1szn9.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6_c1szn9.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_c1szn9.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp6_c1szn9.jl:25\n\
    \   [3] top-level scope at /tmp/tmp6_c1szn9.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6_c1szn9.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_c1szn9.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp6_c1szn9.jl:25\n\
    \   [3] top-level scope at /tmp/tmp6_c1szn9.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6_c1szn9.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_c1szn9.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmp6_c1szn9.jl:25\n\
    \   [3] top-level scope at /tmp/tmp6_c1szn9.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6_c1szn9.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_c1szn9.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4s4z45f.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpn4s4z45f.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4s4z45f.jl:31\ntest set: Test Failed at /tmp/tmpn4s4z45f.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4s4z45f.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4s4z45f.jl:31\ntest set: Test Failed at /tmp/tmpn4s4z45f.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4s4z45f.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4s4z45f.jl:31\ntest set: Test Failed at /tmp/tmpn4s4z45f.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn4s4z45f.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4s4z45f.jl:31\ntest set: Test Failed at /tmp/tmpn4s4z45f.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4s4z45f.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4s4z45f.jl:31\ntest set: Test Failed at /tmp/tmpn4s4z45f.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpn4s4z45f.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4s4z45f.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4s4z45f.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_rhrfckq.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp_rhrfckq.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rhrfckq.jl:31\ntest set: Test Failed at /tmp/tmp_rhrfckq.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rhrfckq.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rhrfckq.jl:31\ntest set: Test Failed at /tmp/tmp_rhrfckq.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rhrfckq.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rhrfckq.jl:31\ntest set: Test Failed at /tmp/tmp_rhrfckq.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_rhrfckq.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rhrfckq.jl:31\ntest set: Test Failed at /tmp/tmp_rhrfckq.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rhrfckq.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rhrfckq.jl:31\ntest set: Test Failed at /tmp/tmp_rhrfckq.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp_rhrfckq.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rhrfckq.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_rhrfckq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnufs8lhy.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnufs8lhy.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnufs8lhy.jl:31\\ntest set: Test Failed at /tmp/tmpnufs8lhy.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnufs8lhy.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnufs8lhy.jl:31\\ntest set: Test Failed at /tmp/tmpnufs8lhy.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnufs8lhy.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnufs8lhy.jl:31\\ntest set: Test Failed at /tmp/tmpnufs8lhy.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnufs8lhy.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnufs8lhy.jl:31\\ntest set: Test Failed at /tmp/tmpnufs8lhy.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnufs8lhy.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnufs8lhy.jl:31\\ntest set: Test Failed at /tmp/tmpnufs8lhy.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnufs8lhy.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnufs8lhy.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptq5fuet0.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmptq5fuet0.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptq5fuet0.jl:31\ntest set: Test Failed at /tmp/tmptq5fuet0.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptq5fuet0.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptq5fuet0.jl:31\ntest set: Test Failed at /tmp/tmptq5fuet0.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptq5fuet0.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptq5fuet0.jl:31\ntest set: Test Failed at /tmp/tmptq5fuet0.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptq5fuet0.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptq5fuet0.jl:31\ntest set: Test Failed at /tmp/tmptq5fuet0.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptq5fuet0.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptq5fuet0.jl:31\ntest set: Test Failed at /tmp/tmptq5fuet0.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmptq5fuet0.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptq5fuet0.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptq5fuet0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    count = 0\n    for i in num\n   \
    \     if i in hex_digits[1:10]\n            if parse(Int64, i) in primes\n   \
    \             count += 1\n            end\n        elseif i in hex_digits[11:16]\n\
    \            if primes[i] in primes\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdycdfu7l.jl:40\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdycdfu7l.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdycdfu7l.jl:39\\ntest set: Test Failed at /tmp/tmpdycdfu7l.jl:41\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdycdfu7l.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdycdfu7l.jl:39\\ntest set: Test Failed at /tmp/tmpdycdfu7l.jl:42\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdycdfu7l.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdycdfu7l.jl:39\\ntest set: Test Failed at /tmp/tmpdycdfu7l.jl:43\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdycdfu7l.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdycdfu7l.jl:39\\ntest set: Test Failed at /tmp/tmpdycdfu7l.jl:44\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdycdfu7l.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdycdfu7l.jl:39\\ntest set: Test Failed at /tmp/tmpdycdfu7l.jl:45\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdycdfu7l.jl:45\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdycdfu7l.jl:39\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkc1bphxp.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkc1bphxp.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkc1bphxp.jl:31\\ntest set: Test Failed at /tmp/tmpkc1bphxp.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkc1bphxp.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkc1bphxp.jl:31\\ntest set: Test Failed at /tmp/tmpkc1bphxp.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkc1bphxp.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkc1bphxp.jl:31\\ntest set: Test Failed at /tmp/tmpkc1bphxp.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkc1bphxp.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkc1bphxp.jl:31\\ntest set: Test Failed at /tmp/tmpkc1bphxp.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkc1bphxp.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkc1bphxp.jl:31\\ntest set: Test Failed at /tmp/tmpkc1bphxp.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkc1bphxp.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkc1bphxp.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpya_jn_3b.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpya_jn_3b.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpya_jn_3b.jl:31\\ntest set: Test Failed at /tmp/tmpya_jn_3b.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpya_jn_3b.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpya_jn_3b.jl:31\\ntest set: Test Failed at /tmp/tmpya_jn_3b.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpya_jn_3b.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpya_jn_3b.jl:31\\ntest set: Test Failed at /tmp/tmpya_jn_3b.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpya_jn_3b.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpya_jn_3b.jl:31\\ntest set: Test Failed at /tmp/tmpya_jn_3b.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpya_jn_3b.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpya_jn_3b.jl:31\\ntest set: Test Failed at /tmp/tmpya_jn_3b.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpya_jn_3b.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpya_jn_3b.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpf6_xk96z.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpf6_xk96z.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6_xk96z.jl:31\\ntest set: Test Failed at /tmp/tmpf6_xk96z.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf6_xk96z.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6_xk96z.jl:31\\ntest set: Test Failed at /tmp/tmpf6_xk96z.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf6_xk96z.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6_xk96z.jl:31\\ntest set: Test Failed at /tmp/tmpf6_xk96z.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf6_xk96z.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6_xk96z.jl:31\\ntest set: Test Failed at /tmp/tmpf6_xk96z.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf6_xk96z.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6_xk96z.jl:31\\ntest set: Test Failed at /tmp/tmpf6_xk96z.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpf6_xk96z.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6_xk96z.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp__rippsf.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp__rippsf.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__rippsf.jl:31\ntest set: Test Failed at /tmp/tmp__rippsf.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__rippsf.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__rippsf.jl:31\ntest set: Test Failed at /tmp/tmp__rippsf.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__rippsf.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__rippsf.jl:31\ntest set: Test Failed at /tmp/tmp__rippsf.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp__rippsf.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__rippsf.jl:31\ntest set: Test Failed at /tmp/tmp__rippsf.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__rippsf.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__rippsf.jl:31\ntest set: Test Failed at /tmp/tmp__rippsf.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp__rippsf.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__rippsf.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__rippsf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi2hqbut4.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpi2hqbut4.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi2hqbut4.jl:31\ntest set: Test Failed at /tmp/tmpi2hqbut4.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi2hqbut4.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi2hqbut4.jl:31\ntest set: Test Failed at /tmp/tmpi2hqbut4.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi2hqbut4.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi2hqbut4.jl:31\ntest set: Test Failed at /tmp/tmpi2hqbut4.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpi2hqbut4.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi2hqbut4.jl:31\ntest set: Test Failed at /tmp/tmpi2hqbut4.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi2hqbut4.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi2hqbut4.jl:31\ntest set: Test Failed at /tmp/tmpi2hqbut4.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpi2hqbut4.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi2hqbut4.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi2hqbut4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp398fihba.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp398fihba.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp398fihba.jl:31\ntest set: Test Failed at /tmp/tmp398fihba.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp398fihba.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp398fihba.jl:31\ntest set: Test Failed at /tmp/tmp398fihba.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp398fihba.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp398fihba.jl:31\ntest set: Test Failed at /tmp/tmp398fihba.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp398fihba.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp398fihba.jl:31\ntest set: Test Failed at /tmp/tmp398fihba.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp398fihba.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp398fihba.jl:31\ntest set: Test Failed at /tmp/tmp398fihba.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp398fihba.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp398fihba.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp398fihba.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpt9coaqey.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpt9coaqey.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9coaqey.jl:31\\ntest set: Test Failed at /tmp/tmpt9coaqey.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt9coaqey.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9coaqey.jl:31\\ntest set: Test Failed at /tmp/tmpt9coaqey.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt9coaqey.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9coaqey.jl:31\\ntest set: Test Failed at /tmp/tmpt9coaqey.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt9coaqey.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9coaqey.jl:31\\ntest set: Test Failed at /tmp/tmpt9coaqey.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt9coaqey.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9coaqey.jl:31\\ntest set: Test Failed at /tmp/tmpt9coaqey.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpt9coaqey.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9coaqey.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9rv_sd14.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp9rv_sd14.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9rv_sd14.jl:31\ntest set: Test Failed at /tmp/tmp9rv_sd14.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rv_sd14.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9rv_sd14.jl:31\ntest set: Test Failed at /tmp/tmp9rv_sd14.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rv_sd14.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9rv_sd14.jl:31\ntest set: Test Failed at /tmp/tmp9rv_sd14.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9rv_sd14.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9rv_sd14.jl:31\ntest set: Test Failed at /tmp/tmp9rv_sd14.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rv_sd14.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9rv_sd14.jl:31\ntest set: Test Failed at /tmp/tmp9rv_sd14.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp9rv_sd14.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9rv_sd14.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9rv_sd14.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    hex_digits_str\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_str_upper = [\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\"]\n    hex_digits_str_lower = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\"]\n    counter = 0\n    for i in 1:length(num)\n        if num[i] in\
    \ hex_digits_str_upper || num[i] in hex_digits_str_lower\n            if hex_digits_str_upper[hex_digits[findall(x->x==num[i],hex_digits_str_upper)[1]]]\
    \ in primes\n                counter += 1\n            end\n        end\n    end\n\
    \    return counter\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppelw3i4c.jl:39\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmppelw3i4c.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppelw3i4c.jl:38\ntest set: Test Failed at /tmp/tmppelw3i4c.jl:40\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppelw3i4c.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppelw3i4c.jl:38\ntest set: Test Failed at /tmp/tmppelw3i4c.jl:41\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppelw3i4c.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppelw3i4c.jl:38\ntest set: Test Failed at /tmp/tmppelw3i4c.jl:42\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppelw3i4c.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppelw3i4c.jl:38\ntest set: Test Failed at /tmp/tmppelw3i4c.jl:43\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppelw3i4c.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppelw3i4c.jl:38\ntest set: Test Failed at /tmp/tmppelw3i4c.jl:44\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmppelw3i4c.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppelw3i4c.jl:38\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppelw3i4c.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ivx2za_.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp6ivx2za_.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ivx2za_.jl:31\ntest set: Test Failed at /tmp/tmp6ivx2za_.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ivx2za_.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ivx2za_.jl:31\ntest set: Test Failed at /tmp/tmp6ivx2za_.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ivx2za_.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ivx2za_.jl:31\ntest set: Test Failed at /tmp/tmp6ivx2za_.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6ivx2za_.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ivx2za_.jl:31\ntest set: Test Failed at /tmp/tmp6ivx2za_.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ivx2za_.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ivx2za_.jl:31\ntest set: Test Failed at /tmp/tmp6ivx2za_.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp6ivx2za_.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ivx2za_.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ivx2za_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7b24ixx.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpp7b24ixx.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7b24ixx.jl:31\ntest set: Test Failed at /tmp/tmpp7b24ixx.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp7b24ixx.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7b24ixx.jl:31\ntest set: Test Failed at /tmp/tmpp7b24ixx.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp7b24ixx.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7b24ixx.jl:31\ntest set: Test Failed at /tmp/tmpp7b24ixx.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp7b24ixx.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7b24ixx.jl:31\ntest set: Test Failed at /tmp/tmpp7b24ixx.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp7b24ixx.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7b24ixx.jl:31\ntest set: Test Failed at /tmp/tmpp7b24ixx.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpp7b24ixx.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7b24ixx.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7b24ixx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptpu7w75r.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmptpu7w75r.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptpu7w75r.jl:31\\ntest set: Test Failed at /tmp/tmptpu7w75r.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptpu7w75r.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptpu7w75r.jl:31\\ntest set: Test Failed at /tmp/tmptpu7w75r.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptpu7w75r.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptpu7w75r.jl:31\\ntest set: Test Failed at /tmp/tmptpu7w75r.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptpu7w75r.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptpu7w75r.jl:31\\ntest set: Test Failed at /tmp/tmptpu7w75r.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptpu7w75r.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptpu7w75r.jl:31\\ntest set: Test Failed at /tmp/tmptpu7w75r.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmptpu7w75r.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptpu7w75r.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmptpu7w75r.jl:29\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb7fj59vo.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpb7fj59vo.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb7fj59vo.jl:32\ntest set: Test Failed at /tmp/tmpb7fj59vo.jl:34\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb7fj59vo.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb7fj59vo.jl:32\ntest set: Test Failed at /tmp/tmpb7fj59vo.jl:35\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb7fj59vo.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb7fj59vo.jl:32\ntest set: Test Failed at /tmp/tmpb7fj59vo.jl:36\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb7fj59vo.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb7fj59vo.jl:32\ntest set: Test Failed at /tmp/tmpb7fj59vo.jl:37\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb7fj59vo.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb7fj59vo.jl:32\ntest set: Test Failed at /tmp/tmpb7fj59vo.jl:38\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpb7fj59vo.jl:38\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb7fj59vo.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb7fj59vo.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_digits = length(num)\n    count = 0\n    for i in 1:num_digits\n\
    \        if hex_digits_dict[num[i]] in primes\n            count += 1\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl1_vvbzv.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpl1_vvbzv.jl:25\n\
    \   [3] top-level scope at /tmp/tmpl1_vvbzv.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpl1_vvbzv.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1_vvbzv.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpl1_vvbzv.jl:25\n\
    \   [3] top-level scope at /tmp/tmpl1_vvbzv.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpl1_vvbzv.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1_vvbzv.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpl1_vvbzv.jl:25\n\
    \   [3] top-level scope at /tmp/tmpl1_vvbzv.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpl1_vvbzv.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1_vvbzv.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpl1_vvbzv.jl:25\n\
    \   [3] top-level scope at /tmp/tmpl1_vvbzv.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpl1_vvbzv.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1_vvbzv.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpl1_vvbzv.jl:25\n\
    \   [3] top-level scope at /tmp/tmpl1_vvbzv.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpl1_vvbzv.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1_vvbzv.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] hex_key(::String) at /tmp/tmpl1_vvbzv.jl:25\n\
    \   [3] top-level scope at /tmp/tmpl1_vvbzv.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpl1_vvbzv.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1_vvbzv.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    for i in num\n        if i in [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            n += 1\n        end\n    end\n\
    \    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp389dhqib.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmp389dhqib.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp389dhqib.jl:31\\ntest set: Test Failed at /tmp/tmp389dhqib.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp389dhqib.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp389dhqib.jl:31\\ntest set: Test Failed at /tmp/tmp389dhqib.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp389dhqib.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp389dhqib.jl:31\\ntest set: Test Failed at /tmp/tmp389dhqib.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp389dhqib.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp389dhqib.jl:31\\ntest set: Test Failed at /tmp/tmp389dhqib.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp389dhqib.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp389dhqib.jl:31\\ntest set: Test Failed at /tmp/tmp389dhqib.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmp389dhqib.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp389dhqib.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvlw397wv.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpvlw397wv.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvlw397wv.jl:31\ntest set: Test Failed at /tmp/tmpvlw397wv.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlw397wv.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvlw397wv.jl:31\ntest set: Test Failed at /tmp/tmpvlw397wv.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlw397wv.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvlw397wv.jl:31\ntest set: Test Failed at /tmp/tmpvlw397wv.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvlw397wv.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvlw397wv.jl:31\ntest set: Test Failed at /tmp/tmpvlw397wv.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlw397wv.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvlw397wv.jl:31\ntest set: Test Failed at /tmp/tmpvlw397wv.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpvlw397wv.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvlw397wv.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvlw397wv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits\n\
    \            if i in primes\n                count += 1\n            end\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphd45kfsi.jl:36\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmphd45kfsi.jl:36\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphd45kfsi.jl:35\\ntest set: Test Failed at /tmp/tmphd45kfsi.jl:37\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphd45kfsi.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphd45kfsi.jl:35\\ntest set: Test Failed at /tmp/tmphd45kfsi.jl:38\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphd45kfsi.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphd45kfsi.jl:35\\ntest set: Test Failed at /tmp/tmphd45kfsi.jl:39\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphd45kfsi.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphd45kfsi.jl:35\\ntest set: Test Failed at /tmp/tmphd45kfsi.jl:40\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphd45kfsi.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphd45kfsi.jl:35\\ntest set: Test Failed at /tmp/tmphd45kfsi.jl:41\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmphd45kfsi.jl:41\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphd45kfsi.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            hex_key += 1\n        end\n    end\n\
    \    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n    count = 0\n    for i in primes\n        count += count(num,i)\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphjbr5lvo.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: objects of type Int64 are\
    \ not callable\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmphjbr5lvo.jl:22\n\
    \   [2] top-level scope at /tmp/tmphjbr5lvo.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphjbr5lvo.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmphjbr5lvo.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmphjbr5lvo.jl:22\n   [2] top-level scope at\
    \ /tmp/tmphjbr5lvo.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphjbr5lvo.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmphjbr5lvo.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmphjbr5lvo.jl:22\n   [2] top-level scope at\
    \ /tmp/tmphjbr5lvo.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphjbr5lvo.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmphjbr5lvo.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmphjbr5lvo.jl:22\n   [2] top-level scope at\
    \ /tmp/tmphjbr5lvo.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphjbr5lvo.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmphjbr5lvo.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmphjbr5lvo.jl:22\n   [2] top-level\
    \ scope at /tmp/tmphjbr5lvo.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphjbr5lvo.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmphjbr5lvo.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: objects of type Int64\
    \ are not callable\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmphjbr5lvo.jl:22\n\
    \   [2] top-level scope at /tmp/tmphjbr5lvo.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphjbr5lvo.jl:30\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjbr5lvo.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp728bxjz.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpp728bxjz.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp728bxjz.jl:31\ntest set: Test Failed at /tmp/tmpp728bxjz.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp728bxjz.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp728bxjz.jl:31\ntest set: Test Failed at /tmp/tmpp728bxjz.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp728bxjz.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp728bxjz.jl:31\ntest set: Test Failed at /tmp/tmpp728bxjz.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp728bxjz.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp728bxjz.jl:31\ntest set: Test Failed at /tmp/tmpp728bxjz.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp728bxjz.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp728bxjz.jl:31\ntest set: Test Failed at /tmp/tmpp728bxjz.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpp728bxjz.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp728bxjz.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp728bxjz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgsefdl_x.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpgsefdl_x.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgsefdl_x.jl:26\ntest set: Test Failed at /tmp/tmpgsefdl_x.jl:28\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgsefdl_x.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgsefdl_x.jl:26\ntest set: Test Failed at /tmp/tmpgsefdl_x.jl:29\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgsefdl_x.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgsefdl_x.jl:26\ntest set: Test Failed at /tmp/tmpgsefdl_x.jl:30\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgsefdl_x.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgsefdl_x.jl:26\ntest set: Test Failed at /tmp/tmpgsefdl_x.jl:31\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgsefdl_x.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgsefdl_x.jl:26\ntest set: Test Failed at /tmp/tmpgsefdl_x.jl:32\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpgsefdl_x.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgsefdl_x.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgsefdl_x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = \"0123456789ABCDEF\"\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n        if i in hex_digits\n\
    \            if i in primes\n                count += 1\n            end\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp56zioxd6.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp56zioxd6.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp56zioxd6.jl:35\ntest set: Test Failed at /tmp/tmp56zioxd6.jl:37\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp56zioxd6.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp56zioxd6.jl:35\ntest set: Test Failed at /tmp/tmp56zioxd6.jl:38\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp56zioxd6.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp56zioxd6.jl:35\ntest set: Test Failed at /tmp/tmp56zioxd6.jl:39\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp56zioxd6.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp56zioxd6.jl:35\ntest set: Test Failed at /tmp/tmp56zioxd6.jl:40\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp56zioxd6.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp56zioxd6.jl:35\ntest set: Test Failed at /tmp/tmp56zioxd6.jl:41\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp56zioxd6.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp56zioxd6.jl:35\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp56zioxd6.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcoca2mgb.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpcoca2mgb.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcoca2mgb.jl:31\ntest set: Test Failed at /tmp/tmpcoca2mgb.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcoca2mgb.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcoca2mgb.jl:31\ntest set: Test Failed at /tmp/tmpcoca2mgb.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcoca2mgb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcoca2mgb.jl:31\ntest set: Test Failed at /tmp/tmpcoca2mgb.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcoca2mgb.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcoca2mgb.jl:31\ntest set: Test Failed at /tmp/tmpcoca2mgb.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcoca2mgb.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcoca2mgb.jl:31\ntest set: Test Failed at /tmp/tmpcoca2mgb.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpcoca2mgb.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcoca2mgb.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcoca2mgb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx2ujijbb.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpx2ujijbb.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx2ujijbb.jl:31\ntest set: Test Failed at /tmp/tmpx2ujijbb.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx2ujijbb.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx2ujijbb.jl:31\ntest set: Test Failed at /tmp/tmpx2ujijbb.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx2ujijbb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx2ujijbb.jl:31\ntest set: Test Failed at /tmp/tmpx2ujijbb.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpx2ujijbb.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx2ujijbb.jl:31\ntest set: Test Failed at /tmp/tmpx2ujijbb.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx2ujijbb.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx2ujijbb.jl:31\ntest set: Test Failed at /tmp/tmpx2ujijbb.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpx2ujijbb.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx2ujijbb.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx2ujijbb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoz4eme7v.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpoz4eme7v.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoz4eme7v.jl:31\ntest set: Test Failed at /tmp/tmpoz4eme7v.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoz4eme7v.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoz4eme7v.jl:31\ntest set: Test Failed at /tmp/tmpoz4eme7v.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoz4eme7v.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoz4eme7v.jl:31\ntest set: Test Failed at /tmp/tmpoz4eme7v.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpoz4eme7v.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoz4eme7v.jl:31\ntest set: Test Failed at /tmp/tmpoz4eme7v.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoz4eme7v.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoz4eme7v.jl:31\ntest set: Test Failed at /tmp/tmpoz4eme7v.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpoz4eme7v.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoz4eme7v.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoz4eme7v.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmple7zkpe7.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmple7zkpe7.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmple7zkpe7.jl:31\ntest set: Test Failed at /tmp/tmple7zkpe7.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmple7zkpe7.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmple7zkpe7.jl:31\ntest set: Test Failed at /tmp/tmple7zkpe7.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmple7zkpe7.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmple7zkpe7.jl:31\ntest set: Test Failed at /tmp/tmple7zkpe7.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmple7zkpe7.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmple7zkpe7.jl:31\ntest set: Test Failed at /tmp/tmple7zkpe7.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmple7zkpe7.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmple7zkpe7.jl:31\ntest set: Test Failed at /tmp/tmple7zkpe7.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmple7zkpe7.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmple7zkpe7.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmple7zkpe7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq81436ue.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpq81436ue.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq81436ue.jl:31\ntest set: Test Failed at /tmp/tmpq81436ue.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq81436ue.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq81436ue.jl:31\ntest set: Test Failed at /tmp/tmpq81436ue.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq81436ue.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq81436ue.jl:31\ntest set: Test Failed at /tmp/tmpq81436ue.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq81436ue.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq81436ue.jl:31\ntest set: Test Failed at /tmp/tmpq81436ue.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq81436ue.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq81436ue.jl:31\ntest set: Test Failed at /tmp/tmpq81436ue.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpq81436ue.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq81436ue.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq81436ue.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpeb0cztsd.jl:32\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope at /tmp/tmpeb0cztsd.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpeb0cztsd.jl:31\\ntest set: Test Failed at /tmp/tmpeb0cztsd.jl:33\\\
    n  Expression: candidate(\"1077E\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpeb0cztsd.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpeb0cztsd.jl:31\\ntest set: Test Failed at /tmp/tmpeb0cztsd.jl:34\\\
    n  Expression: candidate(\"ABED1A33\") == 4\\n   Evaluated: 0 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpeb0cztsd.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpeb0cztsd.jl:31\\ntest set: Test Failed at /tmp/tmpeb0cztsd.jl:35\\\
    n  Expression: candidate(\"2020\") == 2\\n   Evaluated: 0 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpeb0cztsd.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpeb0cztsd.jl:31\\ntest set: Test Failed at /tmp/tmpeb0cztsd.jl:36\\\
    n  Expression: candidate(\"123456789ABCDEF0\") == 6\\n   Evaluated: 0 == 6\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpeb0cztsd.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpeb0cztsd.jl:31\\ntest set: Test Failed at /tmp/tmpeb0cztsd.jl:37\\\
    n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\\n   Evaluated:\
    \ 0 == 12\\nStacktrace:\\n [1] top-level scope at /tmp/tmpeb0cztsd.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpeb0cztsd.jl:31\\nTest Summary: | Fail  Total\\\
    ntest set      |    6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    hex_key = Dict(zip(hex_digits, primes))\n    return sum(hex_key[i]\
    \ in primes for i in num)\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_kywmozy.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n\
    \   [3] MappingRF at ./reduce.jl:90 [inlined]\n   [4] _foldl_impl(::Base.MappingRF{var\"\
    #3#4\"{Array{Int64,1},Dict{String,Int64}},Base.BottomRF{typeof(Base.add_sum)}},\
    \ ::Base._InitialValue, ::String) at ./reduce.jl:55\n   [5] foldl_impl at ./reduce.jl:45\
    \ [inlined]\n   [6] mapfoldl_impl at ./reduce.jl:41 [inlined]\n   [7] #mapfoldl#189\
    \ at ./reduce.jl:157 [inlined]\n   [8] mapfoldl at ./reduce.jl:157 [inlined]\n\
    \   [9] #mapreduce#193 at ./reduce.jl:283 [inlined]\n   [10] mapreduce at ./reduce.jl:283\
    \ [inlined]\n   [11] sum at ./reduce.jl:486 [inlined]\n   [12] sum at ./reduce.jl:503\
    \ [inlined]\n   [13] hex_key(::String) at /tmp/tmp_kywmozy.jl:25\n   [14] top-level\
    \ scope at /tmp/tmp_kywmozy.jl:32\n   [15] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_kywmozy.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp_kywmozy.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] MappingRF at\
    \ ./reduce.jl:90 [inlined]\n   [4] _foldl_impl(::Base.MappingRF{var\"#3#4\"{Array{Int64,1},Dict{String,Int64}},Base.BottomRF{typeof(Base.add_sum)}},\
    \ ::Base._InitialValue, ::String) at ./reduce.jl:55\n   [5] foldl_impl at ./reduce.jl:45\
    \ [inlined]\n   [6] mapfoldl_impl at ./reduce.jl:41 [inlined]\n   [7] #mapfoldl#189\
    \ at ./reduce.jl:157 [inlined]\n   [8] mapfoldl at ./reduce.jl:157 [inlined]\n\
    \   [9] #mapreduce#193 at ./reduce.jl:283 [inlined]\n   [10] mapreduce at ./reduce.jl:283\
    \ [inlined]\n   [11] sum at ./reduce.jl:486 [inlined]\n   [12] sum at ./reduce.jl:503\
    \ [inlined]\n   [13] hex_key(::String) at /tmp/tmp_kywmozy.jl:25\n   [14] top-level\
    \ scope at /tmp/tmp_kywmozy.jl:33\n   [15] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_kywmozy.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp_kywmozy.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n   [1] getindex\
    \ at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] MappingRF\
    \ at ./reduce.jl:90 [inlined]\n   [4] _foldl_impl(::Base.MappingRF{var\"#3#4\"\
    {Array{Int64,1},Dict{String,Int64}},Base.BottomRF{typeof(Base.add_sum)}}, ::Base._InitialValue,\
    \ ::String) at ./reduce.jl:55\n   [5] foldl_impl at ./reduce.jl:45 [inlined]\n\
    \   [6] mapfoldl_impl at ./reduce.jl:41 [inlined]\n   [7] #mapfoldl#189 at ./reduce.jl:157\
    \ [inlined]\n   [8] mapfoldl at ./reduce.jl:157 [inlined]\n   [9] #mapreduce#193\
    \ at ./reduce.jl:283 [inlined]\n   [10] mapreduce at ./reduce.jl:283 [inlined]\n\
    \   [11] sum at ./reduce.jl:486 [inlined]\n   [12] sum at ./reduce.jl:503 [inlined]\n\
    \   [13] hex_key(::String) at /tmp/tmp_kywmozy.jl:25\n   [14] top-level scope\
    \ at /tmp/tmp_kywmozy.jl:34\n   [15] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_kywmozy.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp_kywmozy.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1] getindex at\
    \ ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3] MappingRF at\
    \ ./reduce.jl:90 [inlined]\n   [4] _foldl_impl(::Base.MappingRF{var\"#3#4\"{Array{Int64,1},Dict{String,Int64}},Base.BottomRF{typeof(Base.add_sum)}},\
    \ ::Base._InitialValue, ::String) at ./reduce.jl:55\n   [5] foldl_impl at ./reduce.jl:45\
    \ [inlined]\n   [6] mapfoldl_impl at ./reduce.jl:41 [inlined]\n   [7] #mapfoldl#189\
    \ at ./reduce.jl:157 [inlined]\n   [8] mapfoldl at ./reduce.jl:157 [inlined]\n\
    \   [9] #mapreduce#193 at ./reduce.jl:283 [inlined]\n   [10] mapreduce at ./reduce.jl:283\
    \ [inlined]\n   [11] sum at ./reduce.jl:486 [inlined]\n   [12] sum at ./reduce.jl:503\
    \ [inlined]\n   [13] hex_key(::String) at /tmp/tmp_kywmozy.jl:25\n   [14] top-level\
    \ scope at /tmp/tmp_kywmozy.jl:35\n   [15] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_kywmozy.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp_kywmozy.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  KeyError: key '1' not found\n  Stacktrace:\n   [1]\
    \ getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n   [3]\
    \ MappingRF at ./reduce.jl:90 [inlined]\n   [4] _foldl_impl(::Base.MappingRF{var\"\
    #3#4\"{Array{Int64,1},Dict{String,Int64}},Base.BottomRF{typeof(Base.add_sum)}},\
    \ ::Base._InitialValue, ::String) at ./reduce.jl:55\n   [5] foldl_impl at ./reduce.jl:45\
    \ [inlined]\n   [6] mapfoldl_impl at ./reduce.jl:41 [inlined]\n   [7] #mapfoldl#189\
    \ at ./reduce.jl:157 [inlined]\n   [8] mapfoldl at ./reduce.jl:157 [inlined]\n\
    \   [9] #mapreduce#193 at ./reduce.jl:283 [inlined]\n   [10] mapreduce at ./reduce.jl:283\
    \ [inlined]\n   [11] sum at ./reduce.jl:486 [inlined]\n   [12] sum at ./reduce.jl:503\
    \ [inlined]\n   [13] hex_key(::String) at /tmp/tmp_kywmozy.jl:25\n   [14] top-level\
    \ scope at /tmp/tmp_kywmozy.jl:36\n   [15] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_kywmozy.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp_kywmozy.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  KeyError: key '1' not found\n  Stacktrace:\n\
    \   [1] getindex at ./dict.jl:477 [inlined]\n   [2] #3 at ./none:0 [inlined]\n\
    \   [3] MappingRF at ./reduce.jl:90 [inlined]\n   [4] _foldl_impl(::Base.MappingRF{var\"\
    #3#4\"{Array{Int64,1},Dict{String,Int64}},Base.BottomRF{typeof(Base.add_sum)}},\
    \ ::Base._InitialValue, ::String) at ./reduce.jl:55\n   [5] foldl_impl at ./reduce.jl:45\
    \ [inlined]\n   [6] mapfoldl_impl at ./reduce.jl:41 [inlined]\n   [7] #mapfoldl#189\
    \ at ./reduce.jl:157 [inlined]\n   [8] mapfoldl at ./reduce.jl:157 [inlined]\n\
    \   [9] #mapreduce#193 at ./reduce.jl:283 [inlined]\n   [10] mapreduce at ./reduce.jl:283\
    \ [inlined]\n   [11] sum at ./reduce.jl:486 [inlined]\n   [12] sum at ./reduce.jl:503\
    \ [inlined]\n   [13] hex_key(::String) at /tmp/tmp_kywmozy.jl:25\n   [14] top-level\
    \ scope at /tmp/tmp_kywmozy.jl:37\n   [15] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_kywmozy.jl:31\n  \nTest Summary: | Error\
    \  Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_kywmozy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ub08qnt.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp0ub08qnt.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ub08qnt.jl:31\ntest set: Test Failed at /tmp/tmp0ub08qnt.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ub08qnt.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ub08qnt.jl:31\ntest set: Test Failed at /tmp/tmp0ub08qnt.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ub08qnt.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ub08qnt.jl:31\ntest set: Test Failed at /tmp/tmp0ub08qnt.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0ub08qnt.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ub08qnt.jl:31\ntest set: Test Failed at /tmp/tmp0ub08qnt.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ub08qnt.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ub08qnt.jl:31\ntest set: Test Failed at /tmp/tmp0ub08qnt.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp0ub08qnt.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ub08qnt.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ub08qnt.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnpkpaxkj.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpnpkpaxkj.jl:20\n   [2] top-level scope at /tmp/tmpnpkpaxkj.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnpkpaxkj.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnpkpaxkj.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpnpkpaxkj.jl:20\n\
    \   [2] top-level scope at /tmp/tmpnpkpaxkj.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnpkpaxkj.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnpkpaxkj.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpnpkpaxkj.jl:20\n\
    \   [2] top-level scope at /tmp/tmpnpkpaxkj.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnpkpaxkj.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnpkpaxkj.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpnpkpaxkj.jl:20\n\
    \   [2] top-level scope at /tmp/tmpnpkpaxkj.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnpkpaxkj.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnpkpaxkj.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpnpkpaxkj.jl:20\n   [2] top-level scope at /tmp/tmpnpkpaxkj.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnpkpaxkj.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnpkpaxkj.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpnpkpaxkj.jl:20\n   [2] top-level scope at /tmp/tmpnpkpaxkj.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnpkpaxkj.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnpkpaxkj.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8_hwjbxa.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp8_hwjbxa.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_hwjbxa.jl:31\ntest set: Test Failed at /tmp/tmp8_hwjbxa.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_hwjbxa.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_hwjbxa.jl:31\ntest set: Test Failed at /tmp/tmp8_hwjbxa.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_hwjbxa.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_hwjbxa.jl:31\ntest set: Test Failed at /tmp/tmp8_hwjbxa.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8_hwjbxa.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_hwjbxa.jl:31\ntest set: Test Failed at /tmp/tmp8_hwjbxa.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_hwjbxa.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_hwjbxa.jl:31\ntest set: Test Failed at /tmp/tmp8_hwjbxa.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp8_hwjbxa.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_hwjbxa.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_hwjbxa.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4cjt_lma.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp4cjt_lma.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cjt_lma.jl:31\ntest set: Test Failed at /tmp/tmp4cjt_lma.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4cjt_lma.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cjt_lma.jl:31\ntest set: Test Failed at /tmp/tmp4cjt_lma.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4cjt_lma.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cjt_lma.jl:31\ntest set: Test Failed at /tmp/tmp4cjt_lma.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4cjt_lma.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cjt_lma.jl:31\ntest set: Test Failed at /tmp/tmp4cjt_lma.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4cjt_lma.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cjt_lma.jl:31\ntest set: Test Failed at /tmp/tmp4cjt_lma.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp4cjt_lma.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cjt_lma.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4cjt_lma.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq73f19h_.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpq73f19h_.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq73f19h_.jl:31\ntest set: Test Failed at /tmp/tmpq73f19h_.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq73f19h_.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq73f19h_.jl:31\ntest set: Test Failed at /tmp/tmpq73f19h_.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq73f19h_.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq73f19h_.jl:31\ntest set: Test Failed at /tmp/tmpq73f19h_.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq73f19h_.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq73f19h_.jl:31\ntest set: Test Failed at /tmp/tmpq73f19h_.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq73f19h_.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq73f19h_.jl:31\ntest set: Test Failed at /tmp/tmpq73f19h_.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpq73f19h_.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq73f19h_.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq73f19h_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqi5oz4c6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpqi5oz4c6.jl:20\n   [2] top-level scope at /tmp/tmpqi5oz4c6.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqi5oz4c6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqi5oz4c6.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpqi5oz4c6.jl:20\n\
    \   [2] top-level scope at /tmp/tmpqi5oz4c6.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqi5oz4c6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqi5oz4c6.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpqi5oz4c6.jl:20\n\
    \   [2] top-level scope at /tmp/tmpqi5oz4c6.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqi5oz4c6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqi5oz4c6.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpqi5oz4c6.jl:20\n\
    \   [2] top-level scope at /tmp/tmpqi5oz4c6.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqi5oz4c6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqi5oz4c6.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpqi5oz4c6.jl:20\n   [2] top-level scope at /tmp/tmpqi5oz4c6.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqi5oz4c6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqi5oz4c6.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] hex_key(::String)\
    \ at /tmp/tmpqi5oz4c6.jl:20\n   [2] top-level scope at /tmp/tmpqi5oz4c6.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqi5oz4c6.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqi5oz4c6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvgnyevke.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpvgnyevke.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvgnyevke.jl:31\ntest set: Test Failed at /tmp/tmpvgnyevke.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvgnyevke.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvgnyevke.jl:31\ntest set: Test Failed at /tmp/tmpvgnyevke.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvgnyevke.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvgnyevke.jl:31\ntest set: Test Failed at /tmp/tmpvgnyevke.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvgnyevke.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvgnyevke.jl:31\ntest set: Test Failed at /tmp/tmpvgnyevke.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvgnyevke.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvgnyevke.jl:31\ntest set: Test Failed at /tmp/tmpvgnyevke.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpvgnyevke.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvgnyevke.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvgnyevke.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8xb0qz7l.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp8xb0qz7l.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8xb0qz7l.jl:31\ntest set: Test Failed at /tmp/tmp8xb0qz7l.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8xb0qz7l.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8xb0qz7l.jl:31\ntest set: Test Failed at /tmp/tmp8xb0qz7l.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8xb0qz7l.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8xb0qz7l.jl:31\ntest set: Test Failed at /tmp/tmp8xb0qz7l.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8xb0qz7l.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8xb0qz7l.jl:31\ntest set: Test Failed at /tmp/tmp8xb0qz7l.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8xb0qz7l.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8xb0qz7l.jl:31\ntest set: Test Failed at /tmp/tmp8xb0qz7l.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp8xb0qz7l.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8xb0qz7l.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8xb0qz7l.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1qov9mwf.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmp1qov9mwf.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qov9mwf.jl:26\ntest set: Test Failed at /tmp/tmp1qov9mwf.jl:28\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1qov9mwf.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qov9mwf.jl:26\ntest set: Test Failed at /tmp/tmp1qov9mwf.jl:29\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1qov9mwf.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qov9mwf.jl:26\ntest set: Test Failed at /tmp/tmp1qov9mwf.jl:30\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1qov9mwf.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qov9mwf.jl:26\ntest set: Test Failed at /tmp/tmp1qov9mwf.jl:31\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1qov9mwf.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qov9mwf.jl:26\ntest set: Test Failed at /tmp/tmp1qov9mwf.jl:32\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmp1qov9mwf.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qov9mwf.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1qov9mwf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_prime = [hex_digits[i]\
    \ for i in primes]\n    return length(intersect(collect(num), hex_digits_prime))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpirvncgr_.jl:29\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpirvncgr_.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpirvncgr_.jl:28\ntest set: Test Failed at /tmp/tmpirvncgr_.jl:30\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpirvncgr_.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpirvncgr_.jl:28\ntest set: Test Failed at /tmp/tmpirvncgr_.jl:31\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpirvncgr_.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpirvncgr_.jl:28\ntest set: Test Failed at /tmp/tmpirvncgr_.jl:32\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpirvncgr_.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpirvncgr_.jl:28\ntest set: Test Failed at /tmp/tmpirvncgr_.jl:33\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpirvncgr_.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpirvncgr_.jl:28\ntest set: Test Failed at /tmp/tmpirvncgr_.jl:34\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpirvncgr_.jl:34\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpirvncgr_.jl:28\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpirvncgr_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplgr3qrcw.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmplgr3qrcw.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplgr3qrcw.jl:31\ntest set: Test Failed at /tmp/tmplgr3qrcw.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplgr3qrcw.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplgr3qrcw.jl:31\ntest set: Test Failed at /tmp/tmplgr3qrcw.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplgr3qrcw.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplgr3qrcw.jl:31\ntest set: Test Failed at /tmp/tmplgr3qrcw.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmplgr3qrcw.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplgr3qrcw.jl:31\ntest set: Test Failed at /tmp/tmplgr3qrcw.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplgr3qrcw.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplgr3qrcw.jl:31\ntest set: Test Failed at /tmp/tmplgr3qrcw.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmplgr3qrcw.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplgr3qrcw.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplgr3qrcw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxwjtbcg9.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at /tmp/tmpxwjtbcg9.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxwjtbcg9.jl:31\ntest set: Test Failed at /tmp/tmpxwjtbcg9.jl:33\n\
    \  Expression: candidate(\"1077E\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxwjtbcg9.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxwjtbcg9.jl:31\ntest set: Test Failed at /tmp/tmpxwjtbcg9.jl:34\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n   Evaluated: 0 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxwjtbcg9.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxwjtbcg9.jl:31\ntest set: Test Failed at /tmp/tmpxwjtbcg9.jl:35\n\
    \  Expression: candidate(\"2020\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxwjtbcg9.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxwjtbcg9.jl:31\ntest set: Test Failed at /tmp/tmpxwjtbcg9.jl:36\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n   Evaluated: 0 == 6\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxwjtbcg9.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxwjtbcg9.jl:31\ntest set: Test Failed at /tmp/tmpxwjtbcg9.jl:37\n\
    \  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") == 12\n   Evaluated:\
    \ 0 == 12\nStacktrace:\n [1] top-level scope at /tmp/tmpxwjtbcg9.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxwjtbcg9.jl:31\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwjtbcg9.jl:29\n"
  exit_code: 1
  status: SyntaxError
