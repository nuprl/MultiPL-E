name: HumanEval_78_hex_key
language: julia
results:
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n    count = 0\n    for i in num\n        if i in primes\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzarphp1s.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzarphp1s.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzarphp1s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzarphp1s.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzarphp1s.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzarphp1s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzarphp1s.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzarphp1s.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzarphp1s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzarphp1s.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzarphp1s.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzarphp1s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzarphp1s.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzarphp1s.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzarphp1s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzarphp1s.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzarphp1s.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzarphp1s.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_prime = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in\
    \ hex_digits_prime\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm4tzikss.jl:35\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4tzikss.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4tzikss.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm4tzikss.jl:36\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4tzikss.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4tzikss.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm4tzikss.jl:37\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4tzikss.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4tzikss.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm4tzikss.jl:38\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4tzikss.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4tzikss.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm4tzikss.jl:39\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4tzikss.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4tzikss.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm4tzikss.jl:40\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4tzikss.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm4tzikss.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp46on7aom.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46on7aom.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46on7aom.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp46on7aom.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46on7aom.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46on7aom.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp46on7aom.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46on7aom.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46on7aom.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp46on7aom.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46on7aom.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46on7aom.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp46on7aom.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46on7aom.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46on7aom.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp46on7aom.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46on7aom.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46on7aom.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4jihvs6_.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4jihvs6_.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4jihvs6_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4jihvs6_.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4jihvs6_.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4jihvs6_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4jihvs6_.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4jihvs6_.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4jihvs6_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4jihvs6_.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4jihvs6_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4jihvs6_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4jihvs6_.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4jihvs6_.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4jihvs6_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4jihvs6_.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4jihvs6_.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jihvs6_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4j6qsqa.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4j6qsqa.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4j6qsqa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpq4j6qsqa.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4j6qsqa.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4j6qsqa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpq4j6qsqa.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4j6qsqa.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4j6qsqa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpq4j6qsqa.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4j6qsqa.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4j6qsqa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpq4j6qsqa.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4j6qsqa.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4j6qsqa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpq4j6qsqa.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4j6qsqa.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4j6qsqa.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = Dict(\"0\"=>0, \"1\"=>1, \"2\"=>2, \"3\"=>3, \"4\"=>4, \"5\"=>5, \"6\"=>6,\
    \ \"7\"=>7, \"8\"=>8, \"9\"=>9, \"A\"=>10, \"B\"=>11, \"C\"=>12, \"D\"=>13, \"\
    E\"=>14, \"F\"=>15)\n    count = 0\n    for i in num\n        if hex_digits[i]\
    \ in primes\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpofysid_h.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpofysid_h.jl:23\n   [3] macro\
    \ expansion\n     @ /tmp/tmpofysid_h.jl:34 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpofysid_h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpofysid_h.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpofysid_h.jl:23\n   [3] macro\
    \ expansion\n     @ /tmp/tmpofysid_h.jl:35 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpofysid_h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpofysid_h.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpofysid_h.jl:23\n   [3] macro\
    \ expansion\n     @ /tmp/tmpofysid_h.jl:36 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpofysid_h.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpofysid_h.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1]\
    \ getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n   [2]\
    \ hex_key(num::String)\n     @ Main /tmp/tmpofysid_h.jl:23\n   [3] macro expansion\n\
    \     @ /tmp/tmpofysid_h.jl:37 [inlined]\n   [4] macro expansion\n     @ /buildworker/wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofysid_h.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwu9vdsy.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfwu9vdsy.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwu9vdsy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfwu9vdsy.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfwu9vdsy.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwu9vdsy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfwu9vdsy.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfwu9vdsy.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwu9vdsy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfwu9vdsy.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfwu9vdsy.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwu9vdsy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfwu9vdsy.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfwu9vdsy.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwu9vdsy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfwu9vdsy.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfwu9vdsy.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwu9vdsy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxdwovpri.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdwovpri.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdwovpri.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxdwovpri.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdwovpri.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdwovpri.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxdwovpri.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdwovpri.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdwovpri.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxdwovpri.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdwovpri.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdwovpri.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxdwovpri.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdwovpri.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdwovpri.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxdwovpri.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdwovpri.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdwovpri.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_prime_digits = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in\
    \ hex_prime_digits\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwtv6dbxh.jl:35\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtv6dbxh.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtv6dbxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwtv6dbxh.jl:36\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtv6dbxh.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtv6dbxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwtv6dbxh.jl:37\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtv6dbxh.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtv6dbxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwtv6dbxh.jl:38\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtv6dbxh.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtv6dbxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwtv6dbxh.jl:39\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtv6dbxh.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtv6dbxh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwtv6dbxh.jl:40\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtv6dbxh.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwtv6dbxh.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxmdq1il5.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxmdq1il5.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxmdq1il5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxmdq1il5.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxmdq1il5.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxmdq1il5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxmdq1il5.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxmdq1il5.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxmdq1il5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxmdq1il5.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxmdq1il5.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxmdq1il5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxmdq1il5.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxmdq1il5.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxmdq1il5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxmdq1il5.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxmdq1il5.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxmdq1il5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp15pg3yw3.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp15pg3yw3.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15pg3yw3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp15pg3yw3.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp15pg3yw3.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15pg3yw3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp15pg3yw3.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp15pg3yw3.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15pg3yw3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp15pg3yw3.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp15pg3yw3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15pg3yw3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp15pg3yw3.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp15pg3yw3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15pg3yw3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp15pg3yw3.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp15pg3yw3.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15pg3yw3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6oamsjly.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oamsjly.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oamsjly.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6oamsjly.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oamsjly.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oamsjly.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6oamsjly.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oamsjly.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oamsjly.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6oamsjly.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oamsjly.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oamsjly.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6oamsjly.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oamsjly.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oamsjly.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6oamsjly.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oamsjly.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6oamsjly.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplr_e503b.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplr_e503b.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplr_e503b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplr_e503b.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplr_e503b.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplr_e503b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplr_e503b.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplr_e503b.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplr_e503b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplr_e503b.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplr_e503b.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplr_e503b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplr_e503b.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplr_e503b.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplr_e503b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplr_e503b.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplr_e503b.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplr_e503b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BDF\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpftmccz2k.jl:36\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpftmccz2k.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftmccz2k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpftmccz2k.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpftmccz2k.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftmccz2k.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpftmccz2k.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    prime_count = 0\n    for i in num\n\
    \        if i in hex_digits[1:10]\n            if parse(Int64, i) in primes\n\
    \                prime_count += 1\n            end\n        elseif i in hex_digits[11:16]\n\
    \            prime_count += 1\n        end\n    end\n    return prime_count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppce93isn.jl:38\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppce93isn.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppce93isn.jl:37\ntest set: Test\
    \ Failed at /tmp/tmppce93isn.jl:39\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppce93isn.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppce93isn.jl:37\ntest set: Test\
    \ Failed at /tmp/tmppce93isn.jl:40\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppce93isn.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppce93isn.jl:37\ntest set: Test\
    \ Failed at /tmp/tmppce93isn.jl:41\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppce93isn.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppce93isn.jl:37\ntest set: Test\
    \ Failed at /tmp/tmppce93isn.jl:42\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppce93isn.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppce93isn.jl:37\ntest set: Test\
    \ Failed at /tmp/tmppce93isn.jl:43\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppce93isn.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppce93isn.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # create a dictionary of hexadecimal digits\n\
    \    hex_dict = Dict(\n        \"0\" => 0,\n        \"1\" => 1,\n        \"2\"\
    \ => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\" => 5,\n     \
    \   \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n        \"9\" => 9,\n\
    \        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" => 12,\n        \"\
    D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    )\n    # create a list\
    \ of prime numbers\n    prime_list = [2, 3, 5, 7, 11, 13]\n    # create a list\
    \ of hexadecimal digits\n    hex_list = []\n    for i in num\n        push!(hex_list,\
    \ hex_dict[i])\n    end\n    # count the number of prime numbers in the hexadecimal\
    \ list\n    count = 0\n    for i in hex_list\n        if i in prime_list\n   \
    \         count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8bnql_y9.jl:59\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp8bnql_y9.jl:43\n   [3] macro\
    \ expansion\n     @ /tmp/tmp8bnql_y9.jl:59 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bnql_y9.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp8bnql_y9.jl:60\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp8bnql_y9.jl:43\n   [3] macro\
    \ expansion\n     @ /tmp/tmp8bnql_y9.jl:60 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bnql_y9.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp8bnql_y9.jl:61\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp8bnql_y9.jl:43\n   [3] macro\
    \ expansion\n     @ /tmp/tmp8bnql_y9.jl:61 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bnql_y9.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp8bnql_y9.jl:62\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1]\
    \ getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n   [2]\
    \ hex_key(num::String)\n     @ Main /tmp/tmp8bnql_y9.jl:43\n   [3] macro expansion\n\
    \     @ /tmp/tmp8bnql_y9.jl:62 [inlined]\n   [4] macro expansion\n     @ /buildworker/wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bnql_y9.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvay85ctm.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvay85ctm.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvay85ctm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvay85ctm.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvay85ctm.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvay85ctm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvay85ctm.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvay85ctm.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvay85ctm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvay85ctm.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvay85ctm.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvay85ctm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvay85ctm.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvay85ctm.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvay85ctm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvay85ctm.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvay85ctm.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvay85ctm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobum482p.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobum482p.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobum482p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpobum482p.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobum482p.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobum482p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpobum482p.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobum482p.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobum482p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpobum482p.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobum482p.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobum482p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpobum482p.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobum482p.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobum482p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpobum482p.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobum482p.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobum482p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in num\n \
    \       if i in prime_digits\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxr1x__po.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxr1x__po.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr1x__po.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxr1x__po.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxr1x__po.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr1x__po.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxr1x__po.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxr1x__po.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr1x__po.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxr1x__po.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxr1x__po.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr1x__po.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxr1x__po.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxr1x__po.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr1x__po.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxr1x__po.jl:39\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxr1x__po.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxr1x__po.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->x in [\"2\",\"3\"\
    ,\"5\",\"7\",\"B\",\"D\"], collect(num)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9s4udcx4.jl:26\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9s4udcx4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s4udcx4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9s4udcx4.jl:27\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9s4udcx4.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s4udcx4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9s4udcx4.jl:28\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9s4udcx4.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s4udcx4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9s4udcx4.jl:29\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9s4udcx4.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s4udcx4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9s4udcx4.jl:30\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9s4udcx4.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s4udcx4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9s4udcx4.jl:31\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9s4udcx4.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9s4udcx4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprhstqo9a.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhstqo9a.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhstqo9a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprhstqo9a.jl:28\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhstqo9a.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhstqo9a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprhstqo9a.jl:29\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhstqo9a.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhstqo9a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprhstqo9a.jl:30\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhstqo9a.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhstqo9a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprhstqo9a.jl:31\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhstqo9a.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhstqo9a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprhstqo9a.jl:32\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhstqo9a.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhstqo9a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph71redox.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph71redox.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph71redox.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph71redox.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph71redox.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph71redox.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph71redox.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph71redox.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph71redox.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph71redox.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph71redox.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph71redox.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph71redox.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph71redox.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph71redox.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph71redox.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph71redox.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph71redox.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk91lui_u.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmpk91lui_u.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmpk91lui_u.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk91lui_u.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpk91lui_u.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ hex_key(num::String)\\n     @ Main /tmp/tmpk91lui_u.jl:20\\n   [2] macro expansion\\\
    n     @ /tmp/tmpk91lui_u.jl:27 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk91lui_u.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpk91lui_u.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5j1tiuv_.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5j1tiuv_.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5j1tiuv_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5j1tiuv_.jl:28\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5j1tiuv_.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5j1tiuv_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5j1tiuv_.jl:29\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5j1tiuv_.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5j1tiuv_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5j1tiuv_.jl:30\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5j1tiuv_.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5j1tiuv_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5j1tiuv_.jl:31\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5j1tiuv_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5j1tiuv_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5j1tiuv_.jl:32\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5j1tiuv_.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5j1tiuv_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->x in [\"2\",\"3\"\
    ,\"5\",\"7\",\"B\",\"D\"], split(num, \"\")))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # convert hexadecimal to decimal\n    # count\
    \ the number of primes\n    # return the number of primes\n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3jluzae7.jl:29\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jluzae7.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jluzae7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3jluzae7.jl:30\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jluzae7.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jluzae7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3jluzae7.jl:31\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jluzae7.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jluzae7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3jluzae7.jl:32\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jluzae7.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jluzae7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3jluzae7.jl:33\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jluzae7.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jluzae7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3jluzae7.jl:34\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jluzae7.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jluzae7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            hex_key += 1\n        end\n    end\n\
    \    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzf3plaqi.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzf3plaqi.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzf3plaqi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzf3plaqi.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzf3plaqi.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzf3plaqi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzf3plaqi.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzf3plaqi.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzf3plaqi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzf3plaqi.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzf3plaqi.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzf3plaqi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzf3plaqi.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzf3plaqi.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzf3plaqi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzf3plaqi.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzf3plaqi.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzf3plaqi.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfyf2uh65.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfyf2uh65.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfyf2uh65.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfyf2uh65.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfyf2uh65.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfyf2uh65.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfyf2uh65.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfyf2uh65.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfyf2uh65.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfyf2uh65.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfyf2uh65.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfyf2uh65.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfyf2uh65.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfyf2uh65.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfyf2uh65.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfyf2uh65.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfyf2uh65.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyf2uh65.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\n\"\"\"\n    You have\
    \ been tasked to write a function that receives a string \n    and returns the\
    \ number of words that start with a capital letter.\n    Examples:\n    For str\
    \ = \"The quick brown fox jumps over the lazy dog.\" \n    the output should be\
    \ 3.\n    For str = \"The quick brown fox jumps over the lazy dog\" \n    the\
    \ output should be 3.\n    For str = \"The quick brown fox jumps over the lazy\
    \ dog. \" \n    the output should be 3.\n    For str = \"The quick brown fox jumps\
    \ over the lazy dog.  \" \n    the output should be 3.\n    For str = \"The quick\
    \ brown fox jumps over the lazy dog.   \" \n    the output should be 3.\n    For\
    \ str = \"The quick brown fox jumps over the lazy dog.    \" \n    the output\
    \ should be 3.\n    For str = \"The quick brown fox jumps over the lazy dog. \
    \    \" \n    the output should be 3.\n    For str = \"The quick brown fox jumps\
    \ over the lazy dog.      \" \n    the output should be 3.\n    For str = \"The\
    \ quick brown fox jumps over the lazy dog.       \" \n    the output should be\
    \ 3.\n    For str = \"The quick brown fox jumps over the lazy dog.        \" \n\
    \    the output should be 3.\n    For str = \"The quick brown fox jumps over the\
    \ lazy dog.         \" \n    the output should be 3.\n    For str = \"The quick\
    \ brown fox jumps over the lazy dog.          \" \n    the output should be 3.\n\
    \    For str = \"The quick brown fox jumps over the lazy dog.           \" \n\
    \    the output should be 3.\n    For str = \"The quick brown fox jumps over the\
    \ lazy dog.            \" \n    the output should be 3.\n    For str = \"The quick\
    \ brown fox jumps over the lazy dog.             \" \n    the output should be\
    \ 3.\n    For str = \"The quick brown fox jumps over the lazy dog.           \
    \   \" \n    the output should be 3.\n    For str = \"The quick brown fox jumps\
    \ over the lazy dog.               \" \n    the output should be 3.\n    For str\
    \ = \"The quick brown fox jumps over the lazy\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3jijo9u.jl:21\nin expression starting at\
    \ /tmp/tmpg3jijo9u.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # count = 0\n    # for i in num\n    #   \
    \  if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    #         count += 1\n \
    \   #     end\n    # end\n    # return count\n    return length(filter(x->x in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"], num))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkcv02gm7.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcv02gm7.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcv02gm7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkcv02gm7.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcv02gm7.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcv02gm7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkcv02gm7.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcv02gm7.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcv02gm7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkcv02gm7.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcv02gm7.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcv02gm7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkcv02gm7.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcv02gm7.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcv02gm7.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpkcv02gm7.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcv02gm7.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcv02gm7.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_prime_digits = [\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in\
    \ hex_prime_digits\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp81vgw3rc.jl:35\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81vgw3rc.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81vgw3rc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp81vgw3rc.jl:36\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81vgw3rc.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81vgw3rc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp81vgw3rc.jl:37\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81vgw3rc.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81vgw3rc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp81vgw3rc.jl:38\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81vgw3rc.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81vgw3rc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp81vgw3rc.jl:39\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81vgw3rc.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81vgw3rc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp81vgw3rc.jl:40\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81vgw3rc.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp81vgw3rc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n\
    \        if i in hex_primes\n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg7djgris.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg7djgris.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg7djgris.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg7djgris.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg7djgris.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg7djgris.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg7djgris.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg7djgris.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg7djgris.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg7djgris.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg7djgris.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg7djgris.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg7djgris.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg7djgris.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg7djgris.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg7djgris.jl:39\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg7djgris.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg7djgris.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key\
    \ += 1\n        end\n    end\n    return hex_key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8eg_5um9.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eg_5um9.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8eg_5um9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8eg_5um9.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eg_5um9.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8eg_5um9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8eg_5um9.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eg_5um9.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8eg_5um9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8eg_5um9.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eg_5um9.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8eg_5um9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8eg_5um9.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eg_5um9.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8eg_5um9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8eg_5um9.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eg_5um9.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8eg_5um9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # convert hex to decimal\n    dec = parse(Int64,\
    \ num, base=16)\n    # count primes\n    count = 0\n    for i in 2:dec\n     \
    \   if isprime(i)\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcmuqtobw.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpcmuqtobw.jl:24\n\
    \   [2] macro expansion\n     @ /tmp/tmpcmuqtobw.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcmuqtobw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcmuqtobw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcmuqtobw.jl:24\n   [2] macro\
    \ expansion\n     @ /tmp/tmpcmuqtobw.jl:36 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcmuqtobw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcmuqtobw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcmuqtobw.jl:24\n   [2] macro\
    \ expansion\n     @ /tmp/tmpcmuqtobw.jl:37 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcmuqtobw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcmuqtobw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcmuqtobw.jl:24\n   [2] macro\
    \ expansion\n     @ /tmp/tmpcmuqtobw.jl:38 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcmuqtobw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcmuqtobw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"123456789ABCDEF0\") == 6\n  UndefVarError"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmuqtobw.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits[10:16]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptzlwk3ww.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptzlwk3ww.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzlwk3ww.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptzlwk3ww.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptzlwk3ww.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzlwk3ww.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptzlwk3ww.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptzlwk3ww.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzlwk3ww.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptzlwk3ww.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptzlwk3ww.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzlwk3ww.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptzlwk3ww.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptzlwk3ww.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzlwk3ww.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptzlwk3ww.jl:39\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptzlwk3ww.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzlwk3ww.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_digits = [hex_digits_dict[x] for x in num]\n    count = 0\n\
    \    for i in num_digits\n        if i in primes\n            count += 1\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsmy04lfi.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  KeyError: key \\'A\\' not\
    \ found\\n  Stacktrace:\\n   [1] getindex(h::Dict{String, Int64}, key::Char)\\\
    n     @ Base ./dict.jl:482\\n   [2] (::var\"#1#2\"{Dict{String, Int64}})(x::Char)\\\
    n     @ Main ./none:0\\n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [4] collect(itr::Base.Generator{String, var\"#1#2\"{Dict{String, Int64}}})\\\
    n     @ Base ./array.jl:681\\n   [5] hex_key(num::String)\\n     @ Main /tmp/tmpsmy04lfi.jl:22\\\
    n   [6] macro expansion\\n     @ /tmp/tmpsmy04lfi.jl:36 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpsmy04lfi.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpsmy04lfi.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  KeyError: key \\'1\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] (::var\"#1#2\"{Dict{String, Int64}})(x::Char)\\n     @ Main ./none:0\\\
    n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [4] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"{Dict{String, Int64}}})\\n     @ Base ./array.jl:681\\n   [5] hex_key(num::String)\\\
    n     @ Main /tmp/tmpsmy04lfi.jl:22\\n   [6] macro expansion\\n     @ /tmp/tmpsmy04lfi.jl:37\
    \ [inlined]\\n   [7] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpsmy04lfi.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpsmy04lfi.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  KeyError: key \\'A\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] (::var\"#1#2\"{Dict{String, Int64}})(x::Char)\\n     @ Main ./none:0\\\
    n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [4] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"{Dict{String, Int64}}})\\n     @ B"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzsoc5mwd.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsoc5mwd.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsoc5mwd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsoc5mwd.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsoc5mwd.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsoc5mwd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsoc5mwd.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsoc5mwd.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsoc5mwd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsoc5mwd.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsoc5mwd.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsoc5mwd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsoc5mwd.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsoc5mwd.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsoc5mwd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsoc5mwd.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsoc5mwd.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzsoc5mwd.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgcxr6rzw.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgcxr6rzw.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcxr6rzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgcxr6rzw.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgcxr6rzw.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcxr6rzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgcxr6rzw.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgcxr6rzw.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcxr6rzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgcxr6rzw.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgcxr6rzw.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcxr6rzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgcxr6rzw.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgcxr6rzw.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcxr6rzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgcxr6rzw.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgcxr6rzw.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgcxr6rzw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpph908eto.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmpph908eto.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmpph908eto.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpph908eto.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpph908eto.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ hex_key(num::String)\\n     @ Main /tmp/tmpph908eto.jl:20\\n   [2] macro expansion\\\
    n     @ /tmp/tmpph908eto.jl:27 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpph908eto.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpph908eto.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx75_6c7h.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx75_6c7h.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx75_6c7h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx75_6c7h.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx75_6c7h.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx75_6c7h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx75_6c7h.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx75_6c7h.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx75_6c7h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx75_6c7h.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx75_6c7h.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx75_6c7h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx75_6c7h.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx75_6c7h.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx75_6c7h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx75_6c7h.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx75_6c7h.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx75_6c7h.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp13o1u_o3.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13o1u_o3.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13o1u_o3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp13o1u_o3.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13o1u_o3.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13o1u_o3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp13o1u_o3.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13o1u_o3.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13o1u_o3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp13o1u_o3.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13o1u_o3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13o1u_o3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp13o1u_o3.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13o1u_o3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13o1u_o3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp13o1u_o3.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13o1u_o3.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp13o1u_o3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwma02qla.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwma02qla.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwma02qla.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwma02qla.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwma02qla.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwma02qla.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwma02qla.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwma02qla.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwma02qla.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwma02qla.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwma02qla.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwma02qla.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwma02qla.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwma02qla.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwma02qla.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwma02qla.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwma02qla.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwma02qla.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpul7waj0a.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpul7waj0a.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul7waj0a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpul7waj0a.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpul7waj0a.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul7waj0a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpul7waj0a.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpul7waj0a.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul7waj0a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpul7waj0a.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpul7waj0a.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul7waj0a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpul7waj0a.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpul7waj0a.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul7waj0a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpul7waj0a.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpul7waj0a.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpul7waj0a.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqv1cehhb.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqv1cehhb.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv1cehhb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqv1cehhb.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqv1cehhb.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv1cehhb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqv1cehhb.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqv1cehhb.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv1cehhb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqv1cehhb.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqv1cehhb.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv1cehhb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqv1cehhb.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqv1cehhb.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv1cehhb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqv1cehhb.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqv1cehhb.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqv1cehhb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = Dict(\"0\"=>0, \"1\"=>1, \"2\"=>2, \"3\"=>3, \"4\"=>4, \"5\"=>5, \"6\"=>6,\
    \ \"7\"=>7, \"8\"=>8, \"9\"=>9, \"A\"=>10, \"B\"=>11, \"C\"=>12, \"D\"=>13, \"\
    E\"=>14, \"F\"=>15)\n    count = 0\n    for i in num\n        if hex_digits[i]\
    \ in primes\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfphibzvn.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpfphibzvn.jl:23\n   [3] macro\
    \ expansion\n     @ /tmp/tmpfphibzvn.jl:34 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfphibzvn.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfphibzvn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpfphibzvn.jl:23\n   [3] macro\
    \ expansion\n     @ /tmp/tmpfphibzvn.jl:35 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfphibzvn.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfphibzvn.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpfphibzvn.jl:23\n   [3] macro\
    \ expansion\n     @ /tmp/tmpfphibzvn.jl:36 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfphibzvn.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfphibzvn.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1]\
    \ getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n   [2]\
    \ hex_key(num::String)\n     @ Main /tmp/tmpfphibzvn.jl:23\n   [3] macro expansion\n\
    \     @ /tmp/tmpfphibzvn.jl:37 [inlined]\n   [4] macro expansion\n     @ /buildworker/wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfphibzvn.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpioujf23v.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpioujf23v.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpioujf23v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpioujf23v.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpioujf23v.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpioujf23v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpioujf23v.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpioujf23v.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpioujf23v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpioujf23v.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpioujf23v.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpioujf23v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpioujf23v.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpioujf23v.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpioujf23v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpioujf23v.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpioujf23v.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpioujf23v.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk1vvsic3.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1vvsic3.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1vvsic3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpk1vvsic3.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1vvsic3.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1vvsic3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpk1vvsic3.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1vvsic3.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1vvsic3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpk1vvsic3.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1vvsic3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1vvsic3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpk1vvsic3.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1vvsic3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1vvsic3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpk1vvsic3.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1vvsic3.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1vvsic3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr4tqe9lt.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr4tqe9lt.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr4tqe9lt.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr4tqe9lt.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr4tqe9lt.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr4tqe9lt.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr4tqe9lt.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr4tqe9lt.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr4tqe9lt.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr4tqe9lt.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr4tqe9lt.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr4tqe9lt.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr4tqe9lt.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr4tqe9lt.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr4tqe9lt.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr4tqe9lt.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr4tqe9lt.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr4tqe9lt.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf2vmyeru.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2vmyeru.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2vmyeru.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf2vmyeru.jl:28\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2vmyeru.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2vmyeru.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf2vmyeru.jl:29\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2vmyeru.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2vmyeru.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf2vmyeru.jl:30\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2vmyeru.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2vmyeru.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf2vmyeru.jl:31\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2vmyeru.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2vmyeru.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf2vmyeru.jl:32\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2vmyeru.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf2vmyeru.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj0vns7u3.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0vns7u3.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj0vns7u3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj0vns7u3.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0vns7u3.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj0vns7u3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj0vns7u3.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0vns7u3.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj0vns7u3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj0vns7u3.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0vns7u3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj0vns7u3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj0vns7u3.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0vns7u3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj0vns7u3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj0vns7u3.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0vns7u3.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj0vns7u3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n       \
    \     count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx_rtk78n.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_rtk78n.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_rtk78n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx_rtk78n.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_rtk78n.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_rtk78n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx_rtk78n.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_rtk78n.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_rtk78n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx_rtk78n.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_rtk78n.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_rtk78n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx_rtk78n.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_rtk78n.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_rtk78n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx_rtk78n.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_rtk78n.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_rtk78n.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            hex_key += 1\n        end\n    end\n\
    \    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd4repnhs.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4repnhs.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4repnhs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd4repnhs.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4repnhs.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4repnhs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd4repnhs.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4repnhs.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4repnhs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd4repnhs.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4repnhs.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4repnhs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd4repnhs.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4repnhs.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4repnhs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd4repnhs.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4repnhs.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd4repnhs.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_hex = [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"]\n    count = 0\n    for i in num\n        if i in prime_hex\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzb_pk9kl.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzb_pk9kl.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzb_pk9kl.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzb_pk9kl.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzb_pk9kl.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzb_pk9kl.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzb_pk9kl.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzb_pk9kl.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzb_pk9kl.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzb_pk9kl.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzb_pk9kl.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzb_pk9kl.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzb_pk9kl.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzb_pk9kl.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzb_pk9kl.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzb_pk9kl.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzb_pk9kl.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzb_pk9kl.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7a3vatbi.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7a3vatbi.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7a3vatbi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7a3vatbi.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7a3vatbi.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7a3vatbi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7a3vatbi.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7a3vatbi.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7a3vatbi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7a3vatbi.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7a3vatbi.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7a3vatbi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7a3vatbi.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7a3vatbi.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7a3vatbi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7a3vatbi.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7a3vatbi.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7a3vatbi.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key\
    \ += 1\n        end\n    end\n    return hex_key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdqv525wu.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqv525wu.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdqv525wu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdqv525wu.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqv525wu.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdqv525wu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdqv525wu.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqv525wu.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdqv525wu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdqv525wu.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqv525wu.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdqv525wu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdqv525wu.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqv525wu.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdqv525wu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdqv525wu.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqv525wu.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdqv525wu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->x in \"2357BD\", num))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qdkkxbf.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qdkkxbf.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qdkkxbf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9qdkkxbf.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qdkkxbf.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qdkkxbf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9qdkkxbf.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qdkkxbf.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qdkkxbf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9qdkkxbf.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qdkkxbf.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qdkkxbf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9qdkkxbf.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qdkkxbf.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qdkkxbf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9qdkkxbf.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qdkkxbf.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qdkkxbf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzowovyhh.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzowovyhh.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzowovyhh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzowovyhh.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzowovyhh.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzowovyhh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzowovyhh.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzowovyhh.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzowovyhh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzowovyhh.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzowovyhh.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzowovyhh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzowovyhh.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzowovyhh.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzowovyhh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzowovyhh.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzowovyhh.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzowovyhh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpia3hgarb.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpia3hgarb.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3hgarb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpia3hgarb.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpia3hgarb.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3hgarb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpia3hgarb.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpia3hgarb.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3hgarb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpia3hgarb.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpia3hgarb.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3hgarb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpia3hgarb.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpia3hgarb.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3hgarb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpia3hgarb.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpia3hgarb.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpia3hgarb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3jlckt01.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jlckt01.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jlckt01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3jlckt01.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jlckt01.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jlckt01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3jlckt01.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jlckt01.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jlckt01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3jlckt01.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jlckt01.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jlckt01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3jlckt01.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jlckt01.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jlckt01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3jlckt01.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jlckt01.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jlckt01.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_prime = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_prime += 1\n   \
    \     end\n    end\n    return hex_prime\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfnx1r1f4.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnx1r1f4.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnx1r1f4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfnx1r1f4.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnx1r1f4.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnx1r1f4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfnx1r1f4.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnx1r1f4.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnx1r1f4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfnx1r1f4.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnx1r1f4.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnx1r1f4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfnx1r1f4.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnx1r1f4.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnx1r1f4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfnx1r1f4.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnx1r1f4.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfnx1r1f4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpryubk4mb.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpryubk4mb.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpryubk4mb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpryubk4mb.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpryubk4mb.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpryubk4mb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpryubk4mb.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpryubk4mb.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpryubk4mb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpryubk4mb.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpryubk4mb.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpryubk4mb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpryubk4mb.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpryubk4mb.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpryubk4mb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpryubk4mb.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpryubk4mb.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpryubk4mb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8p_7ioxw.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8p_7ioxw.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8p_7ioxw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8p_7ioxw.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8p_7ioxw.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8p_7ioxw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8p_7ioxw.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8p_7ioxw.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8p_7ioxw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8p_7ioxw.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8p_7ioxw.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8p_7ioxw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8p_7ioxw.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8p_7ioxw.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8p_7ioxw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8p_7ioxw.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8p_7ioxw.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8p_7ioxw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcnxydi9b.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnxydi9b.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnxydi9b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcnxydi9b.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnxydi9b.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnxydi9b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcnxydi9b.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnxydi9b.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnxydi9b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcnxydi9b.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnxydi9b.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnxydi9b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcnxydi9b.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnxydi9b.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnxydi9b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcnxydi9b.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnxydi9b.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcnxydi9b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpozxliep7.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpozxliep7.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpozxliep7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpozxliep7.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpozxliep7.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpozxliep7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpozxliep7.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpozxliep7.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpozxliep7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpozxliep7.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpozxliep7.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpozxliep7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpozxliep7.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpozxliep7.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpozxliep7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpozxliep7.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpozxliep7.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpozxliep7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpko0jokbh.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpko0jokbh.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko0jokbh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpko0jokbh.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpko0jokbh.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko0jokbh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpko0jokbh.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpko0jokbh.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko0jokbh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpko0jokbh.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpko0jokbh.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko0jokbh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpko0jokbh.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpko0jokbh.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko0jokbh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpko0jokbh.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpko0jokbh.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpko0jokbh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpddn9nt55.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpddn9nt55.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddn9nt55.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpddn9nt55.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpddn9nt55.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddn9nt55.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpddn9nt55.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpddn9nt55.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddn9nt55.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpddn9nt55.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpddn9nt55.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddn9nt55.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpddn9nt55.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpddn9nt55.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddn9nt55.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpddn9nt55.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpddn9nt55.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpddn9nt55.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw43oyvxs.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw43oyvxs.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw43oyvxs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw43oyvxs.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw43oyvxs.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw43oyvxs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw43oyvxs.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw43oyvxs.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw43oyvxs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw43oyvxs.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw43oyvxs.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw43oyvxs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw43oyvxs.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw43oyvxs.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw43oyvxs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw43oyvxs.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw43oyvxs.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw43oyvxs.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgbe5uf9y.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgbe5uf9y.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbe5uf9y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgbe5uf9y.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgbe5uf9y.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbe5uf9y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgbe5uf9y.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgbe5uf9y.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbe5uf9y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgbe5uf9y.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgbe5uf9y.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbe5uf9y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgbe5uf9y.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgbe5uf9y.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbe5uf9y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgbe5uf9y.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgbe5uf9y.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbe5uf9y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpka3d2kjh.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka3d2kjh.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka3d2kjh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpka3d2kjh.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka3d2kjh.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka3d2kjh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpka3d2kjh.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka3d2kjh.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka3d2kjh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpka3d2kjh.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka3d2kjh.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka3d2kjh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpka3d2kjh.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka3d2kjh.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka3d2kjh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpka3d2kjh.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka3d2kjh.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpka3d2kjh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits[primes]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5z7lm_xp.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5z7lm_xp.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5z7lm_xp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5z7lm_xp.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5z7lm_xp.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5z7lm_xp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5z7lm_xp.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5z7lm_xp.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5z7lm_xp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5z7lm_xp.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5z7lm_xp.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5z7lm_xp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5z7lm_xp.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5z7lm_xp.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5z7lm_xp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5z7lm_xp.jl:39\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5z7lm_xp.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5z7lm_xp.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphwcxvuz4.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphwcxvuz4.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphwcxvuz4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphwcxvuz4.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphwcxvuz4.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphwcxvuz4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphwcxvuz4.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphwcxvuz4.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphwcxvuz4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphwcxvuz4.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphwcxvuz4.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphwcxvuz4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphwcxvuz4.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphwcxvuz4.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphwcxvuz4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphwcxvuz4.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphwcxvuz4.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwcxvuz4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] in ['2','3','5','7','B','D']\n            hex_key += 1\n  \
    \      end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    count = 0\n    for i in num\n   \
    \     if i in hex_digits[1:10]\n            if parse(Int64, i) in primes\n   \
    \             count += 1\n            end\n        elseif i in hex_digits[11:16]\n\
    \            if hex_digits.index(i) in primes\n                count += 1\n  \
    \          end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9pregzfx.jl:40\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pregzfx.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pregzfx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp9pregzfx.jl:41\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pregzfx.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pregzfx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp9pregzfx.jl:42\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pregzfx.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pregzfx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp9pregzfx.jl:43\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pregzfx.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pregzfx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp9pregzfx.jl:44\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pregzfx.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pregzfx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp9pregzfx.jl:45\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pregzfx.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9pregzfx.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # hexadecimal digits are 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, A, B, C, D, E, F.\n    # Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    \    # So you have to determine a number of the following digits: 2, 3, 5, 7,\
    \ B (=decimal 11), D (=decimal 13).\n    # Note: you may assume the input is always\
    \ correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\n   \
    \ # Examples:\n    # For num = \"AB\" the output should be 1.\n    # For num =\
    \ \"1077E\" the output should be 2.\n    # For num = \"ABED1A33\" the output should\
    \ be 4.\n    # For num = \"123456789ABCDEF0\" the output should be 6.\n    # For\
    \ num = \"2020\" the output should be 2.\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0bm_jlt1.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0bm_jlt1.jl:1\n\
    in expression starting at /tmp/tmp0bm_jlt1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnfye95u4.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfye95u4.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnfye95u4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnfye95u4.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfye95u4.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnfye95u4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnfye95u4.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfye95u4.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnfye95u4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnfye95u4.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfye95u4.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnfye95u4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnfye95u4.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfye95u4.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnfye95u4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnfye95u4.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfye95u4.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnfye95u4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4680gd_.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn4680gd_.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn4680gd_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn4680gd_.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn4680gd_.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn4680gd_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn4680gd_.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn4680gd_.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn4680gd_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn4680gd_.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn4680gd_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn4680gd_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn4680gd_.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn4680gd_.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn4680gd_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn4680gd_.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn4680gd_.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4680gd_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5mz3yi6u.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmp5mz3yi6u.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5mz3yi6u.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5mz3yi6u.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp5mz3yi6u.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ hex_key(num::String)\\n     @ Main /tmp/tmp5mz3yi6u.jl:20\\n   [2] macro expansion\\\
    n     @ /tmp/tmp5mz3yi6u.jl:27 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5mz3yi6u.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp5mz3yi6u.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6akeih6b.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6akeih6b.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6akeih6b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6akeih6b.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6akeih6b.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6akeih6b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6akeih6b.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6akeih6b.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6akeih6b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6akeih6b.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6akeih6b.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6akeih6b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6akeih6b.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6akeih6b.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6akeih6b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6akeih6b.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6akeih6b.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6akeih6b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu_nvtb9s.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_nvtb9s.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_nvtb9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu_nvtb9s.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_nvtb9s.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_nvtb9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu_nvtb9s.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_nvtb9s.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_nvtb9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu_nvtb9s.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_nvtb9s.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_nvtb9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu_nvtb9s.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_nvtb9s.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_nvtb9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu_nvtb9s.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_nvtb9s.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_nvtb9s.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0cq_h7rp.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0cq_h7rp.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0cq_h7rp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0cq_h7rp.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0cq_h7rp.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0cq_h7rp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0cq_h7rp.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0cq_h7rp.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0cq_h7rp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0cq_h7rp.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0cq_h7rp.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0cq_h7rp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0cq_h7rp.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0cq_h7rp.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0cq_h7rp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0cq_h7rp.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0cq_h7rp.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0cq_h7rp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_hex = [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"]\n    count = 0\n    for i in num\n        if i in prime_hex\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8havu37.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8havu37.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8havu37.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm8havu37.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8havu37.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8havu37.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm8havu37.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8havu37.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8havu37.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm8havu37.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8havu37.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8havu37.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm8havu37.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8havu37.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8havu37.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm8havu37.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8havu37.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8havu37.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_pjzsv0z.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_pjzsv0z.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pjzsv0z.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_pjzsv0z.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_pjzsv0z.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pjzsv0z.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_pjzsv0z.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_pjzsv0z.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pjzsv0z.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_pjzsv0z.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_pjzsv0z.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pjzsv0z.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_pjzsv0z.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_pjzsv0z.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pjzsv0z.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_pjzsv0z.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_pjzsv0z.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_pjzsv0z.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            hex_key += 1\n        end\n    end\n\
    \    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in num\n \
    \       if i in prime_digits\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp45pu_qbn.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45pu_qbn.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45pu_qbn.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp45pu_qbn.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45pu_qbn.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45pu_qbn.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp45pu_qbn.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45pu_qbn.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45pu_qbn.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp45pu_qbn.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45pu_qbn.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45pu_qbn.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp45pu_qbn.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45pu_qbn.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45pu_qbn.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp45pu_qbn.jl:39\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45pu_qbn.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45pu_qbn.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_to_int = Dict(zip(hex_digits,\
    \ 1:16))\n    num_to_int = [hex_digits_to_int[x] for x in num]\n    return sum(x\
    \ in primes for x in num_to_int)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfo5pro41.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] (::var\"#1#3\"{Dict{String, Int64}})(x::Char)\n     @ Main ./none:0\n\
    \   [3] iterate\n     @ ./generator.jl:47 [inlined]\n   [4] collect(itr::Base.Generator{String,\
    \ var\"#1#3\"{Dict{String, Int64}}})\n     @ Base ./array.jl:681\n   [5] hex_key(num::String)\n\
    \     @ Main /tmp/tmpfo5pro41.jl:22\n   [6] macro expansion\n     @ /tmp/tmpfo5pro41.jl:30\
    \ [inlined]\n   [7] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpfo5pro41.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfo5pro41.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] (::var\"#1#3\"{Dict{String, Int64}})(x::Char)\n     @ Main ./none:0\n\
    \   [3] iterate\n     @ ./generator.jl:47 [inlined]\n   [4] collect(itr::Base.Generator{String,\
    \ var\"#1#3\"{Dict{String, Int64}}})\n     @ Base ./array.jl:681\n   [5] hex_key(num::String)\n\
    \     @ Main /tmp/tmpfo5pro41.jl:22\n   [6] macro expansion\n     @ /tmp/tmpfo5pro41.jl:31\
    \ [inlined]\n   [7] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpfo5pro41.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfo5pro41.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] (::var\"#1#3\"{Dict{String, Int64}})(x::Char)\n     @ Main ./none:0\n\
    \   [3] iterate\n     @ ./generator.jl:47 [inlined]\n   [4] collect(itr::Base.Generator{String,\
    \ var\"#1#3\"{Dict{String, Int64}}})\n     @ Base ./array.jl:681\n   [5] hex_key(num::String)\n\
    \     @ Main /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfo5pro41.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits\n\
    \            if parse(Int64,i) in primes\n                count += 1\n       \
    \     end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprduya_ot.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprduya_ot.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprduya_ot.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprduya_ot.jl:37\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprduya_ot.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprduya_ot.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprduya_ot.jl:38\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprduya_ot.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprduya_ot.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprduya_ot.jl:39\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprduya_ot.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprduya_ot.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprduya_ot.jl:40\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprduya_ot.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprduya_ot.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprduya_ot.jl:41\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprduya_ot.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprduya_ot.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in num\n \
    \       if i in prime_digits\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbj4uv0fc.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbj4uv0fc.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj4uv0fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbj4uv0fc.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbj4uv0fc.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj4uv0fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbj4uv0fc.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbj4uv0fc.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj4uv0fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbj4uv0fc.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbj4uv0fc.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj4uv0fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbj4uv0fc.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbj4uv0fc.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj4uv0fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbj4uv0fc.jl:39\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbj4uv0fc.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbj4uv0fc.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2u13bb1u.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2u13bb1u.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2u13bb1u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2u13bb1u.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2u13bb1u.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2u13bb1u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2u13bb1u.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2u13bb1u.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2u13bb1u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2u13bb1u.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2u13bb1u.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2u13bb1u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2u13bb1u.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2u13bb1u.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2u13bb1u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2u13bb1u.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2u13bb1u.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2u13bb1u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits\n\
    \            if parse(Int64,i) in primes\n                count += 1\n       \
    \     end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsips3izp.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsips3izp.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsips3izp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsips3izp.jl:37\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsips3izp.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsips3izp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsips3izp.jl:38\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsips3izp.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsips3izp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsips3izp.jl:39\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsips3izp.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsips3izp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsips3izp.jl:40\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsips3izp.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsips3izp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsips3izp.jl:41\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsips3izp.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsips3izp.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    hex_key = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"\
    =>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"\
    F\"=>15)\n    count = 0\n    for i in num\n        if hex_key[i] in [2,3,5,7,11,13]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps1wj4e3w.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  KeyError: key \\'A\\' not\
    \ found\\n  Stacktrace:\\n   [1] getindex(h::Dict{String, Int64}, key::Char)\\\
    n     @ Base ./dict.jl:482\\n   [2] hex_key(num::String)\\n     @ Main /tmp/tmps1wj4e3w.jl:25\\\
    n   [3] macro expansion\\n     @ /tmp/tmps1wj4e3w.jl:36 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps1wj4e3w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmps1wj4e3w.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  KeyError: key \\'1\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmps1wj4e3w.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmps1wj4e3w.jl:37 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps1wj4e3w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmps1wj4e3w.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  KeyError: key \\'A\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmps1wj4e3w.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmps1wj4e3w.jl:38 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps1wj4e3w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmps1wj4e3w.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"2020\") == 2\\n  KeyError: key \\'2\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmps1wj4e3w.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmps1wj4e"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n          \
    \  key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6rbc9nyb.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6rbc9nyb.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6rbc9nyb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6rbc9nyb.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6rbc9nyb.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6rbc9nyb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6rbc9nyb.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6rbc9nyb.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6rbc9nyb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6rbc9nyb.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6rbc9nyb.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6rbc9nyb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6rbc9nyb.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6rbc9nyb.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6rbc9nyb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6rbc9nyb.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6rbc9nyb.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6rbc9nyb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdq6rdhdv.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdq6rdhdv.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdq6rdhdv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdq6rdhdv.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdq6rdhdv.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdq6rdhdv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdq6rdhdv.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdq6rdhdv.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdq6rdhdv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdq6rdhdv.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdq6rdhdv.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdq6rdhdv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdq6rdhdv.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdq6rdhdv.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdq6rdhdv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdq6rdhdv.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdq6rdhdv.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdq6rdhdv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8d7cl0gf.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8d7cl0gf.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8d7cl0gf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8d7cl0gf.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8d7cl0gf.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8d7cl0gf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8d7cl0gf.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8d7cl0gf.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8d7cl0gf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8d7cl0gf.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8d7cl0gf.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8d7cl0gf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8d7cl0gf.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8d7cl0gf.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8d7cl0gf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8d7cl0gf.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8d7cl0gf.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8d7cl0gf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = \"0123456789ABCDEF\"\n    return length(filter(x -> x in primes, map(x ->\
    \ parse(Int64, x), collect(num))))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp35qf9rwj.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  ArgumentError: invalid\
    \ base 10 digit \\'A\\'\\n  Stacktrace:\\n    [1] parse(::Type{Int64}, c::Char;\
    \ base::Int64)\\n      @ Base ./parse.jl:46\\n    [2] parse\\n      @ ./parse.jl:41\
    \ [inlined]\\n    [3] #2\\n      @ /tmp/tmp35qf9rwj.jl:21 [inlined]\\n    [4]\
    \ iterate\\n      @ ./generator.jl:47 [inlined]\\n    [5] _collect(c::Vector{Char},\
    \ itr::Base.Generator{Vector{Char}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\\n      @ Base ./array.jl:695\\n    [6] collect_similar\\\
    n      @ ./array.jl:606 [inlined]\\n    [7] map\\n      @ ./abstractarray.jl:2294\
    \ [inlined]\\n    [8] hex_key(num::String)\\n      @ Main /tmp/tmp35qf9rwj.jl:21\\\
    n    [9] macro expansion\\n      @ /tmp/tmp35qf9rwj.jl:28 [inlined]\\n   [10]\
    \ macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp35qf9rwj.jl:27\\ntest\
    \ set: Error During Test at /tmp/tmp35qf9rwj.jl:29\\n  Test threw exception\\\
    n  Expression: candidate(\"1077E\") == 2\\n  ArgumentError: invalid base 10 digit\
    \ \\'E\\'\\n  Stacktrace:\\n    [1] parse(::Type{Int64}, c::Char; base::Int64)\\\
    n      @ Base ./parse.jl:46\\n    [2] parse\\n      @ ./parse.jl:41 [inlined]\\\
    n    [3] #2\\n      @ /tmp/tmp35qf9rwj.jl:21 [inlined]\\n    [4] iterate\\n  \
    \    @ ./generator.jl:47 [inlined]\\n    [5] collect_to!\\n      @ ./array.jl:728\
    \ [inlined]\\n    [6] collect_to_with_first!(dest::Vector{Int64}, v1::Int64, itr::Base.Generator{Vector{Char},\
    \ var\"#2#4\"}, st::Int64)\\n      @ Base ./array.jl:706\\n    [7] _collect(c::Vector{Char},\
    \ itr::Base.Generator{Vector{Char}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\\n      @ Base ./array.jl:700\\n    [8] collect_similar\\\
    n      @ ./array.jl:606 [inlined]\\n    [9] map\\n      @ ./abstractarray.jl:2294\
    \ [inlined]\\n   [10] hex_key(num::String)\\n      @ Main /tmp/tmp35qf9rwj.jl:21\\\
    n   [11] macro expansion\\n      @ /tmp/tmp35qf9rwj.jl:29 [inlined"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_key\
    \ = 0\n    for i in num\n        if i in primes\n            hex_key += 1\n  \
    \      end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm5qb24b6.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm5qb24b6.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm5qb24b6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm5qb24b6.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm5qb24b6.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm5qb24b6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm5qb24b6.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm5qb24b6.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm5qb24b6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm5qb24b6.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm5qb24b6.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm5qb24b6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm5qb24b6.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm5qb24b6.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm5qb24b6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpm5qb24b6.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm5qb24b6.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5qb24b6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_hex_digits = [\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in prime_hex_digits\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2rib65bk.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2rib65bk.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2rib65bk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2rib65bk.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2rib65bk.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2rib65bk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2rib65bk.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2rib65bk.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2rib65bk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2rib65bk.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2rib65bk.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2rib65bk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2rib65bk.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2rib65bk.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2rib65bk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp2rib65bk.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2rib65bk.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2rib65bk.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # create a dictionary of hexadecimal digits\n\
    \    hex_dict = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"\
    6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"\
    =>14,\"F\"=>15)\n    # create a list of prime numbers\n    prime_list = [2,3,5,7,11,13]\n\
    \    # create a counter\n    counter = 0\n    # iterate over the string\n    for\
    \ i in num\n        # if the value of the key is in the prime list, add 1 to the\
    \ counter\n        if hex_dict[i] in prime_list\n            counter += 1\n  \
    \      end\n    end\n    # return the counter\n    return counter\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5oqrx1hj.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp5oqrx1hj.jl:28\n   [3] macro\
    \ expansion\n     @ /tmp/tmp5oqrx1hj.jl:40 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5oqrx1hj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5oqrx1hj.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp5oqrx1hj.jl:28\n   [3] macro\
    \ expansion\n     @ /tmp/tmp5oqrx1hj.jl:41 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5oqrx1hj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5oqrx1hj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp5oqrx1hj.jl:28\n   [3] macro\
    \ expansion\n     @ /tmp/tmp5oqrx1hj.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5oqrx1hj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5oqrx1hj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1]\
    \ getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n   [2]\
    \ hex_key(num::String)\n     @ Main /tmp/tmp5oqrx1hj.jl:28\n   [3] macro expansion\n\
    \     @ /tmp/tmp5oqrx1hj.jl:43 [inlined]\n   [4] macro expansion\n     @ /buildworker/wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5oqrx1hj.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp34robwt4.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34robwt4.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp34robwt4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp34robwt4.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34robwt4.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp34robwt4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp34robwt4.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34robwt4.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp34robwt4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp34robwt4.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34robwt4.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp34robwt4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp34robwt4.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34robwt4.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp34robwt4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp34robwt4.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34robwt4.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp34robwt4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp17ecg3r7.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp17ecg3r7.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ecg3r7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp17ecg3r7.jl:28\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp17ecg3r7.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ecg3r7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp17ecg3r7.jl:29\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp17ecg3r7.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ecg3r7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp17ecg3r7.jl:30\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp17ecg3r7.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ecg3r7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp17ecg3r7.jl:31\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp17ecg3r7.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ecg3r7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp17ecg3r7.jl:32\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp17ecg3r7.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17ecg3r7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits[10:16]\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplgssbmht.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgssbmht.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgssbmht.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplgssbmht.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgssbmht.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgssbmht.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplgssbmht.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgssbmht.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgssbmht.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplgssbmht.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgssbmht.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgssbmht.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplgssbmht.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgssbmht.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgssbmht.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplgssbmht.jl:39\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgssbmht.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplgssbmht.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeiosyokb.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeiosyokb.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeiosyokb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeiosyokb.jl:28\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeiosyokb.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeiosyokb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeiosyokb.jl:29\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeiosyokb.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeiosyokb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeiosyokb.jl:30\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeiosyokb.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeiosyokb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeiosyokb.jl:31\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeiosyokb.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeiosyokb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeiosyokb.jl:32\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeiosyokb.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeiosyokb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->x in \"2357BD\", num))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv0ae_yxk.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv0ae_yxk.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv0ae_yxk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpv0ae_yxk.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv0ae_yxk.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv0ae_yxk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpv0ae_yxk.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv0ae_yxk.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv0ae_yxk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpv0ae_yxk.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv0ae_yxk.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv0ae_yxk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpv0ae_yxk.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv0ae_yxk.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv0ae_yxk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpv0ae_yxk.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv0ae_yxk.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv0ae_yxk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2px40rbg.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2px40rbg.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2px40rbg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2px40rbg.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2px40rbg.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2px40rbg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2px40rbg.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2px40rbg.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2px40rbg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2px40rbg.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2px40rbg.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2px40rbg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2px40rbg.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2px40rbg.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2px40rbg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2px40rbg.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2px40rbg.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2px40rbg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0p7tqew6.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0p7tqew6.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0p7tqew6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0p7tqew6.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0p7tqew6.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0p7tqew6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0p7tqew6.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0p7tqew6.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0p7tqew6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0p7tqew6.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0p7tqew6.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0p7tqew6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0p7tqew6.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0p7tqew6.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0p7tqew6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0p7tqew6.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0p7tqew6.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0p7tqew6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_prime = [\"2\",\"3\",\"5\",\"7\",\"B\"\
    ,\"D\"]\n    count = 0\n    for i in num\n        if i in hex_prime\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbmgyiz9r.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmgyiz9r.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmgyiz9r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbmgyiz9r.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmgyiz9r.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmgyiz9r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbmgyiz9r.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmgyiz9r.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmgyiz9r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbmgyiz9r.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmgyiz9r.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmgyiz9r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbmgyiz9r.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmgyiz9r.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmgyiz9r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbmgyiz9r.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmgyiz9r.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbmgyiz9r.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmaw_1yjw.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmpmaw_1yjw.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmaw_1yjw.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmaw_1yjw.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpmaw_1yjw.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ hex_key(num::String)\\n     @ Main /tmp/tmpmaw_1yjw.jl:20\\n   [2] macro expansion\\\
    n     @ /tmp/tmpmaw_1yjw.jl:27 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmaw_1yjw.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpmaw_1yjw.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9a7arb7p.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9a7arb7p.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9a7arb7p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9a7arb7p.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9a7arb7p.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9a7arb7p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9a7arb7p.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9a7arb7p.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9a7arb7p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9a7arb7p.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9a7arb7p.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9a7arb7p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9a7arb7p.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9a7arb7p.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9a7arb7p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9a7arb7p.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9a7arb7p.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9a7arb7p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n          \
    \  key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj8kynfj_.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8kynfj_.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8kynfj_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj8kynfj_.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8kynfj_.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8kynfj_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj8kynfj_.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8kynfj_.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8kynfj_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj8kynfj_.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8kynfj_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8kynfj_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj8kynfj_.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8kynfj_.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8kynfj_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj8kynfj_.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8kynfj_.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8kynfj_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbuz0ur0u.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbuz0ur0u.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuz0ur0u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbuz0ur0u.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbuz0ur0u.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuz0ur0u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbuz0ur0u.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbuz0ur0u.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuz0ur0u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbuz0ur0u.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbuz0ur0u.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuz0ur0u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbuz0ur0u.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbuz0ur0u.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuz0ur0u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbuz0ur0u.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbuz0ur0u.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbuz0ur0u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpurhgphnc.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpurhgphnc.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpurhgphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurhgphnc.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpurhgphnc.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpurhgphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurhgphnc.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpurhgphnc.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpurhgphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurhgphnc.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpurhgphnc.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpurhgphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurhgphnc.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpurhgphnc.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpurhgphnc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurhgphnc.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpurhgphnc.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurhgphnc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for c in num\n        if\
    \ c in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnumsbq7i.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnumsbq7i.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnumsbq7i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnumsbq7i.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnumsbq7i.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnumsbq7i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnumsbq7i.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnumsbq7i.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnumsbq7i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnumsbq7i.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnumsbq7i.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnumsbq7i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnumsbq7i.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnumsbq7i.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnumsbq7i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnumsbq7i.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnumsbq7i.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnumsbq7i.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in num\n        if i in \"2357BD\"\n            hex_primes +=\
    \ 1\n        end\n    end\n    return hex_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1nyr3wnp.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1nyr3wnp.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nyr3wnp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1nyr3wnp.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1nyr3wnp.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nyr3wnp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1nyr3wnp.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1nyr3wnp.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nyr3wnp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1nyr3wnp.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1nyr3wnp.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nyr3wnp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1nyr3wnp.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1nyr3wnp.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nyr3wnp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1nyr3wnp.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1nyr3wnp.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nyr3wnp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpewdpuv3i.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmpewdpuv3i.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmpewdpuv3i.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpewdpuv3i.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpewdpuv3i.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ hex_key(num::String)\\n     @ Main /tmp/tmpewdpuv3i.jl:20\\n   [2] macro expansion\\\
    n     @ /tmp/tmpewdpuv3i.jl:27 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpewdpuv3i.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpewdpuv3i.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp13uz7wzq.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13uz7wzq.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13uz7wzq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp13uz7wzq.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13uz7wzq.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13uz7wzq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp13uz7wzq.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13uz7wzq.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13uz7wzq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp13uz7wzq.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13uz7wzq.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13uz7wzq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp13uz7wzq.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13uz7wzq.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp13uz7wzq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp13uz7wzq.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp13uz7wzq.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp13uz7wzq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7txugaz8.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmp7txugaz8.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7txugaz8.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7txugaz8.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp7txugaz8.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ hex_key(num::String)\\n     @ Main /tmp/tmp7txugaz8.jl:20\\n   [2] macro expansion\\\
    n     @ /tmp/tmp7txugaz8.jl:27 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7txugaz8.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp7txugaz8.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in \"2357BD\"\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw9ahf7zz.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9ahf7zz.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9ahf7zz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw9ahf7zz.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9ahf7zz.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9ahf7zz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw9ahf7zz.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9ahf7zz.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9ahf7zz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw9ahf7zz.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9ahf7zz.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9ahf7zz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw9ahf7zz.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9ahf7zz.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9ahf7zz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw9ahf7zz.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9ahf7zz.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw9ahf7zz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_primes = [hex_digits[i] for i\
    \ in primes]\n    return length(intersect(collect(num), hex_primes))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1iltfupk.jl:29\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1iltfupk.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1iltfupk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1iltfupk.jl:30\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1iltfupk.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1iltfupk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1iltfupk.jl:31\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1iltfupk.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1iltfupk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1iltfupk.jl:32\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1iltfupk.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1iltfupk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1iltfupk.jl:33\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1iltfupk.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1iltfupk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1iltfupk.jl:34\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1iltfupk.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1iltfupk.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BDF\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplp0wtuzi.jl:36\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplp0wtuzi.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplp0wtuzi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplp0wtuzi.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplp0wtuzi.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplp0wtuzi.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplp0wtuzi.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # Create a dictionary of hexadecimal numbers\n\
    \    hex_dict = Dict(\n        \"0\" => 0, \"1\" => 1, \"2\" => 2, \"3\" => 3,\
    \ \"4\" => 4, \"5\" => 5, \"6\" => 6, \n        \"7\" => 7, \"8\" => 8, \"9\"\
    \ => 9, \"A\" => 10, \"B\" => 11, \"C\" => 12, \n        \"D\" => 13, \"E\" =>\
    \ 14, \"F\" => 15)\n    # Create a list of prime numbers\n    prime_list = [2,\
    \ 3, 5, 7, 11, 13]\n    # Create a list of hexadecimal numbers\n    hex_list =\
    \ [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\"\
    , \"B\", \n        \"C\", \"D\", \"E\", \"F\"]\n    # Create an empty list\n \
    \   prime_hex_list = []\n    # Create an empty list\n    hex_num_list = []\n \
    \   # Create an empty list\n    hex_num_list_int = []\n    # Create an empty list\n\
    \    prime_hex_num_list = []\n    # Create an empty list\n    prime_hex_num_list_int\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str = []\n    # Create\
    \ an empty list\n    prime_hex_num_list_str_int = []\n    # Create an empty list\n\
    \    prime_hex_num_list_str_int_str = []\n    # Create an empty list\n    prime_hex_num_list_str_int_str_int\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str_int_str_int_str\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str_int_str_int_str_int\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str_int_str_int_str_int_str\
    \ = []\n    # Create an empty list\n    prime_hex_num_list_str_int\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3109zsf_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3109zsf_.jl:1\n\
    in expression starting at /tmp/tmp3109zsf_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy76oo3u5.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy76oo3u5.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy76oo3u5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy76oo3u5.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy76oo3u5.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy76oo3u5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy76oo3u5.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy76oo3u5.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy76oo3u5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy76oo3u5.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy76oo3u5.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy76oo3u5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy76oo3u5.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy76oo3u5.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy76oo3u5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy76oo3u5.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy76oo3u5.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy76oo3u5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeefa4fr7.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeefa4fr7.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeefa4fr7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeefa4fr7.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeefa4fr7.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeefa4fr7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeefa4fr7.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeefa4fr7.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeefa4fr7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeefa4fr7.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeefa4fr7.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeefa4fr7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeefa4fr7.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeefa4fr7.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeefa4fr7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpeefa4fr7.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeefa4fr7.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeefa4fr7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for i in num\n \
    \       if i in prime_digits\n            count += 1\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1po7xfyi.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1po7xfyi.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1po7xfyi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1po7xfyi.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1po7xfyi.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1po7xfyi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1po7xfyi.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1po7xfyi.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1po7xfyi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1po7xfyi.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1po7xfyi.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1po7xfyi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1po7xfyi.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1po7xfyi.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1po7xfyi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1po7xfyi.jl:39\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1po7xfyi.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1po7xfyi.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits = Dict(\"0\" => 0, \"1\" =>\
    \ 1, \"2\" => 2, \"3\" => 3, \"4\" => 4, \"5\" => 5, \"6\" => 6, \"7\" => 7, \"\
    8\" => 8, \"9\" => 9, \"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\"\
    \ => 14, \"F\" => 15)\n    count = 0\n    for i in 1:length(num)\n        if hex_digits[num[i]]\
    \ in primes\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwy4mgrix.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  KeyError: key \\'A\\' not\
    \ found\\n  Stacktrace:\\n   [1] getindex(h::Dict{String, Int64}, key::Char)\\\
    n     @ Base ./dict.jl:482\\n   [2] hex_key(num::String)\\n     @ Main /tmp/tmpwy4mgrix.jl:26\\\
    n   [3] macro expansion\\n     @ /tmp/tmpwy4mgrix.jl:37 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwy4mgrix.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpwy4mgrix.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  KeyError: key \\'1\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmpwy4mgrix.jl:26\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpwy4mgrix.jl:38 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwy4mgrix.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpwy4mgrix.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  KeyError: key \\'A\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmpwy4mgrix.jl:26\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpwy4mgrix.jl:39 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwy4mgrix.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpwy4mgrix.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"2020\") == 2\\n  KeyError: key \\'2\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmpwy4mgrix.jl:26\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpwy4mgr"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n          \
    \  key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key\
    \ += 1\n        end\n    end\n    return hex_key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi3eaqt_k.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi3eaqt_k.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3eaqt_k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi3eaqt_k.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi3eaqt_k.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3eaqt_k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi3eaqt_k.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi3eaqt_k.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3eaqt_k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi3eaqt_k.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi3eaqt_k.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3eaqt_k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi3eaqt_k.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi3eaqt_k.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3eaqt_k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi3eaqt_k.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi3eaqt_k.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi3eaqt_k.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzzj_tgb5.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzj_tgb5.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzj_tgb5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzzj_tgb5.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzj_tgb5.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzj_tgb5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzzj_tgb5.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzj_tgb5.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzj_tgb5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzzj_tgb5.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzj_tgb5.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzj_tgb5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzzj_tgb5.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzj_tgb5.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzj_tgb5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzzj_tgb5.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzj_tgb5.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzzj_tgb5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_digits = length(num)\n    count = 0\n    for i in 1:num_digits\n\
    \        if hex_digits_dict[num[i]] in primes\n            count += 1\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3jekpgn3.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  KeyError: key \\'A\\' not\
    \ found\\n  Stacktrace:\\n   [1] getindex(h::Dict{String, Int64}, key::Char)\\\
    n     @ Base ./dict.jl:482\\n   [2] hex_key(num::String)\\n     @ Main /tmp/tmp3jekpgn3.jl:25\\\
    n   [3] macro expansion\\n     @ /tmp/tmp3jekpgn3.jl:36 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3jekpgn3.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp3jekpgn3.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  KeyError: key \\'1\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmp3jekpgn3.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmp3jekpgn3.jl:37 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3jekpgn3.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp3jekpgn3.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  KeyError: key \\'A\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmp3jekpgn3.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmp3jekpgn3.jl:38 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3jekpgn3.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp3jekpgn3.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"2020\") == 2\\n  KeyError: key \\'2\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmp3jekpgn3.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmp3jekpg"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl0_01h_c.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0_01h_c.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0_01h_c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl0_01h_c.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0_01h_c.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0_01h_c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl0_01h_c.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0_01h_c.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0_01h_c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl0_01h_c.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0_01h_c.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0_01h_c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl0_01h_c.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0_01h_c.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0_01h_c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl0_01h_c.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0_01h_c.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl0_01h_c.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_digits = [hex_digits_dict[i] for i in num]\n    return sum(i\
    \ in primes for i in num_digits)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpytdyiw2b.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  KeyError: key \\'A\\' not\
    \ found\\n  Stacktrace:\\n   [1] getindex(h::Dict{String, Int64}, key::Char)\\\
    n     @ Base ./dict.jl:482\\n   [2] (::var\"#1#3\"{Dict{String, Int64}})(i::Char)\\\
    n     @ Main ./none:0\\n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [4] collect(itr::Base.Generator{String, var\"#1#3\"{Dict{String, Int64}}})\\\
    n     @ Base ./array.jl:681\\n   [5] hex_key(num::String)\\n     @ Main /tmp/tmpytdyiw2b.jl:22\\\
    n   [6] macro expansion\\n     @ /tmp/tmpytdyiw2b.jl:30 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpytdyiw2b.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpytdyiw2b.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  KeyError: key \\'1\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] (::var\"#1#3\"{Dict{String, Int64}})(i::Char)\\n     @ Main ./none:0\\\
    n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [4] collect(itr::Base.Generator{String,\
    \ var\"#1#3\"{Dict{String, Int64}}})\\n     @ Base ./array.jl:681\\n   [5] hex_key(num::String)\\\
    n     @ Main /tmp/tmpytdyiw2b.jl:22\\n   [6] macro expansion\\n     @ /tmp/tmpytdyiw2b.jl:31\
    \ [inlined]\\n   [7] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpytdyiw2b.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpytdyiw2b.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  KeyError: key \\'A\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] (::var\"#1#3\"{Dict{String, Int64}})(i::Char)\\n     @ Main ./none:0\\\
    n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [4] collect(itr::Base.Generator{String,\
    \ var\"#1#3\"{Dict{String, Int64}}})\\n     @ B"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    num_primes = 0\n    for i in num\n        if i in hex_digits[10:16]\n\
    \            num_primes += 1\n        elseif i in hex_digits[1:9]\n          \
    \  if parse(Int64,i) in primes\n                num_primes += 1\n            end\n\
    \        end\n    end\n    return num_primes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp67kvwufk.jl:38\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp67kvwufk.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp67kvwufk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp67kvwufk.jl:39\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp67kvwufk.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp67kvwufk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp67kvwufk.jl:40\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp67kvwufk.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp67kvwufk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp67kvwufk.jl:41\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp67kvwufk.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp67kvwufk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp67kvwufk.jl:42\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp67kvwufk.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp67kvwufk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp67kvwufk.jl:43\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp67kvwufk.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67kvwufk.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_arr = collect(num)\n    count = 0\n    for i in num_arr\n  \
    \      if hex_digits_dict[i] in primes\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx0ms4h_w.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  KeyError: key \\'A\\' not\
    \ found\\n  Stacktrace:\\n   [1] getindex(h::Dict{String, Int64}, key::Char)\\\
    n     @ Base ./dict.jl:482\\n   [2] hex_key(num::String)\\n     @ Main /tmp/tmpx0ms4h_w.jl:25\\\
    n   [3] macro expansion\\n     @ /tmp/tmpx0ms4h_w.jl:36 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx0ms4h_w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpx0ms4h_w.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  KeyError: key \\'1\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmpx0ms4h_w.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpx0ms4h_w.jl:37 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx0ms4h_w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpx0ms4h_w.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  KeyError: key \\'A\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmpx0ms4h_w.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpx0ms4h_w.jl:38 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx0ms4h_w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpx0ms4h_w.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"2020\") == 2\\n  KeyError: key \\'2\\' not found\\n  Stacktrace:\\\
    n   [1] getindex(h::Dict{String, Int64}, key::Char)\\n     @ Base ./dict.jl:482\\\
    n   [2] hex_key(num::String)\\n     @ Main /tmp/tmpx0ms4h_w.jl:25\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpx0ms4h"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6xwgy6of.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6xwgy6of.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xwgy6of.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6xwgy6of.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6xwgy6of.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xwgy6of.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6xwgy6of.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6xwgy6of.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xwgy6of.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6xwgy6of.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6xwgy6of.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xwgy6of.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6xwgy6of.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6xwgy6of.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xwgy6of.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6xwgy6of.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6xwgy6of.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xwgy6of.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8bnv4nzp.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8bnv4nzp.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8bnv4nzp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8bnv4nzp.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8bnv4nzp.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8bnv4nzp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8bnv4nzp.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8bnv4nzp.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8bnv4nzp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8bnv4nzp.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8bnv4nzp.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8bnv4nzp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8bnv4nzp.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8bnv4nzp.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8bnv4nzp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8bnv4nzp.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8bnv4nzp.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bnv4nzp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9amzks45.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9amzks45.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9amzks45.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9amzks45.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9amzks45.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9amzks45.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9amzks45.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9amzks45.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9amzks45.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9amzks45.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9amzks45.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9amzks45.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9amzks45.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9amzks45.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9amzks45.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9amzks45.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9amzks45.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9amzks45.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ov1qnw1.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ov1qnw1.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ov1qnw1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7ov1qnw1.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ov1qnw1.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ov1qnw1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7ov1qnw1.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ov1qnw1.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ov1qnw1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7ov1qnw1.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ov1qnw1.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ov1qnw1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7ov1qnw1.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ov1qnw1.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ov1qnw1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7ov1qnw1.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ov1qnw1.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ov1qnw1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    count = 0\n    for i in num\n   \
    \     if i in hex_digits[1:10]\n            if parse(Int64, i) in primes\n   \
    \             count += 1\n            end\n        elseif i in hex_digits[11:16]\n\
    \            if primes[i] in primes\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeti2e0xx.jl:40\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeti2e0xx.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeti2e0xx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpeti2e0xx.jl:41\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeti2e0xx.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeti2e0xx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpeti2e0xx.jl:42\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeti2e0xx.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeti2e0xx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpeti2e0xx.jl:43\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeti2e0xx.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeti2e0xx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpeti2e0xx.jl:44\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeti2e0xx.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeti2e0xx.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpeti2e0xx.jl:45\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeti2e0xx.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeti2e0xx.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx16dcunj.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx16dcunj.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx16dcunj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx16dcunj.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx16dcunj.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx16dcunj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx16dcunj.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx16dcunj.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx16dcunj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx16dcunj.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx16dcunj.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx16dcunj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx16dcunj.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx16dcunj.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx16dcunj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx16dcunj.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx16dcunj.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx16dcunj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt77ccd70.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt77ccd70.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt77ccd70.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt77ccd70.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt77ccd70.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt77ccd70.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt77ccd70.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt77ccd70.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt77ccd70.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt77ccd70.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt77ccd70.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt77ccd70.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt77ccd70.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt77ccd70.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt77ccd70.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt77ccd70.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt77ccd70.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt77ccd70.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkcdro6k3.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcdro6k3.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcdro6k3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkcdro6k3.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcdro6k3.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcdro6k3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkcdro6k3.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcdro6k3.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcdro6k3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkcdro6k3.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcdro6k3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcdro6k3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkcdro6k3.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcdro6k3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcdro6k3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkcdro6k3.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcdro6k3.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcdro6k3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0a8pw52i.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0a8pw52i.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0a8pw52i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0a8pw52i.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0a8pw52i.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0a8pw52i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0a8pw52i.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0a8pw52i.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0a8pw52i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0a8pw52i.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0a8pw52i.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0a8pw52i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0a8pw52i.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0a8pw52i.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0a8pw52i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0a8pw52i.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0a8pw52i.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0a8pw52i.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl_6p6bm5.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_6p6bm5.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_6p6bm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl_6p6bm5.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_6p6bm5.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_6p6bm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl_6p6bm5.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_6p6bm5.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_6p6bm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl_6p6bm5.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_6p6bm5.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_6p6bm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl_6p6bm5.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_6p6bm5.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_6p6bm5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl_6p6bm5.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_6p6bm5.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl_6p6bm5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe9bhjjue.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9bhjjue.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9bhjjue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe9bhjjue.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9bhjjue.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9bhjjue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe9bhjjue.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9bhjjue.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9bhjjue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe9bhjjue.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9bhjjue.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9bhjjue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe9bhjjue.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9bhjjue.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9bhjjue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe9bhjjue.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9bhjjue.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9bhjjue.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptmdl6z3_.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmdl6z3_.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmdl6z3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptmdl6z3_.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmdl6z3_.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmdl6z3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptmdl6z3_.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmdl6z3_.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmdl6z3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptmdl6z3_.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmdl6z3_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmdl6z3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptmdl6z3_.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmdl6z3_.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmdl6z3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptmdl6z3_.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmdl6z3_.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptmdl6z3_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkxiqbx88.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkxiqbx88.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkxiqbx88.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkxiqbx88.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkxiqbx88.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkxiqbx88.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkxiqbx88.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkxiqbx88.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkxiqbx88.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkxiqbx88.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkxiqbx88.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkxiqbx88.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkxiqbx88.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkxiqbx88.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkxiqbx88.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkxiqbx88.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkxiqbx88.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkxiqbx88.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    hex_digits_str\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_str_upper = [\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\"]\n    hex_digits_str_lower = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\"]\n    counter = 0\n    for i in 1:length(num)\n        if num[i] in\
    \ hex_digits_str_upper || num[i] in hex_digits_str_lower\n            if hex_digits_str_upper[hex_digits[findall(x->x==num[i],hex_digits_str_upper)[1]]]\
    \ in primes\n                counter += 1\n            end\n        end\n    end\n\
    \    return counter\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl4j_vyf2.jl:39\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4j_vyf2.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4j_vyf2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpl4j_vyf2.jl:40\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4j_vyf2.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4j_vyf2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpl4j_vyf2.jl:41\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4j_vyf2.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4j_vyf2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpl4j_vyf2.jl:42\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4j_vyf2.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4j_vyf2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpl4j_vyf2.jl:43\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4j_vyf2.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4j_vyf2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpl4j_vyf2.jl:44\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4j_vyf2.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4j_vyf2.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa6tulkr3.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6tulkr3.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6tulkr3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa6tulkr3.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6tulkr3.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6tulkr3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa6tulkr3.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6tulkr3.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6tulkr3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa6tulkr3.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6tulkr3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6tulkr3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa6tulkr3.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6tulkr3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6tulkr3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa6tulkr3.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6tulkr3.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa6tulkr3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in \"2357BD\"\n            hex_key += 1\n        end\n    end\n    return\
    \ hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmx99p8kz.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmx99p8kz.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmx99p8kz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmx99p8kz.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmx99p8kz.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmx99p8kz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmx99p8kz.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmx99p8kz.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmx99p8kz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmx99p8kz.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmx99p8kz.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmx99p8kz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmx99p8kz.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmx99p8kz.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmx99p8kz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmx99p8kz.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmx99p8kz.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmx99p8kz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo7ks0q3d.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo7ks0q3d.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7ks0q3d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo7ks0q3d.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo7ks0q3d.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7ks0q3d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo7ks0q3d.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo7ks0q3d.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7ks0q3d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo7ks0q3d.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo7ks0q3d.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7ks0q3d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo7ks0q3d.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo7ks0q3d.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7ks0q3d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo7ks0q3d.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo7ks0q3d.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo7ks0q3d.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for i in num\n        if i in hex_primes\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7s1_206a.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7s1_206a.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7s1_206a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7s1_206a.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7s1_206a.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7s1_206a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7s1_206a.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7s1_206a.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7s1_206a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7s1_206a.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7s1_206a.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7s1_206a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7s1_206a.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7s1_206a.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7s1_206a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7s1_206a.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7s1_206a.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7s1_206a.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_dict = Dict(zip(hex_digits,\
    \ 1:16))\n    num_digits = length(num)\n    count = 0\n    for i in 1:num_digits\n\
    \        if hex_digits_dict[num[i]] in primes\n            count += 1\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw4potndd.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpw4potndd.jl:25\n   [3] macro\
    \ expansion\n     @ /tmp/tmpw4potndd.jl:36 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw4potndd.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpw4potndd.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpw4potndd.jl:25\n   [3] macro\
    \ expansion\n     @ /tmp/tmpw4potndd.jl:37 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw4potndd.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpw4potndd.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpw4potndd.jl:25\n   [3] macro\
    \ expansion\n     @ /tmp/tmpw4potndd.jl:38 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw4potndd.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpw4potndd.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyError: key '2' not found\n  Stacktrace:\n   [1]\
    \ getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:482\n   [2]\
    \ hex_key(num::String)\n     @ Main /tmp/tmpw4potndd.jl:25\n   [3] macro expansion\n\
    \     @ /tmp/tmpw4potndd.jl:39 [inlined]\n   [4] macro expansion\n     @ /buildworker/wor"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4potndd.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    for i in num\n        if i in [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            n += 1\n        end\n    end\n\
    \    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprpvd0sxr.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpvd0sxr.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpvd0sxr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprpvd0sxr.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpvd0sxr.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpvd0sxr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprpvd0sxr.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpvd0sxr.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpvd0sxr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprpvd0sxr.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpvd0sxr.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpvd0sxr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprpvd0sxr.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpvd0sxr.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpvd0sxr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprpvd0sxr.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpvd0sxr.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprpvd0sxr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx_wilb78.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_wilb78.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_wilb78.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx_wilb78.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_wilb78.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_wilb78.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx_wilb78.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_wilb78.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_wilb78.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx_wilb78.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_wilb78.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_wilb78.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx_wilb78.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_wilb78.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_wilb78.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx_wilb78.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_wilb78.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_wilb78.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes\
    \ = [2,3,5,7,11,13]\n    count = 0\n    for i in num\n        if i in hex_digits\n\
    \            if i in primes\n                count += 1\n            end\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa81vkmt8.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa81vkmt8.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa81vkmt8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpa81vkmt8.jl:37\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa81vkmt8.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa81vkmt8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpa81vkmt8.jl:38\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa81vkmt8.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa81vkmt8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpa81vkmt8.jl:39\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa81vkmt8.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa81vkmt8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpa81vkmt8.jl:40\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa81vkmt8.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa81vkmt8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpa81vkmt8.jl:41\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa81vkmt8.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa81vkmt8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in 1:length(num)\n\
    \        if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            hex_key += 1\n        end\n    end\n\
    \    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n    count = 0\n    for i in primes\n        count += count(num,i)\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9sl00hwf.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: objects of\
    \ type Int64 are not callable\\n  Stacktrace:\\n   [1] hex_key(num::String)\\\
    n     @ Main /tmp/tmp9sl00hwf.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmp9sl00hwf.jl:31\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9sl00hwf.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp9sl00hwf.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: objects of type Int64 are not callable\\\
    n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmp9sl00hwf.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9sl00hwf.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9sl00hwf.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp9sl00hwf.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: objects of type Int64 are not\
    \ callable\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmp9sl00hwf.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9sl00hwf.jl:33 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9sl00hwf.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp9sl00hwf.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"2020\") == 2\\n  MethodError: objects of type Int64 are not callable\\\
    n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmp9sl00hwf.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9sl00hwf.jl:34 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9sl00hwf.jl:30\\ntest set:\
    \ Error Dur"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_wihlix.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_wihlix.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_wihlix.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2_wihlix.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_wihlix.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_wihlix.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2_wihlix.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_wihlix.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_wihlix.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2_wihlix.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_wihlix.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_wihlix.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2_wihlix.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_wihlix.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_wihlix.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2_wihlix.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_wihlix.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_wihlix.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpssu71ls6.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpssu71ls6.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpssu71ls6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpssu71ls6.jl:28\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpssu71ls6.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpssu71ls6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpssu71ls6.jl:29\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpssu71ls6.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpssu71ls6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpssu71ls6.jl:30\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpssu71ls6.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpssu71ls6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpssu71ls6.jl:31\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpssu71ls6.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpssu71ls6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpssu71ls6.jl:32\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpssu71ls6.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpssu71ls6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = \"0123456789ABCDEF\"\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n        if i in hex_digits\n\
    \            if i in primes\n                count += 1\n            end\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo1p8yhqs.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1p8yhqs.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1p8yhqs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpo1p8yhqs.jl:37\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1p8yhqs.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1p8yhqs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpo1p8yhqs.jl:38\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1p8yhqs.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1p8yhqs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpo1p8yhqs.jl:39\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1p8yhqs.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1p8yhqs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpo1p8yhqs.jl:40\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1p8yhqs.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1p8yhqs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpo1p8yhqs.jl:41\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1p8yhqs.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo1p8yhqs.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphtkjlyb_.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphtkjlyb_.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtkjlyb_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphtkjlyb_.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphtkjlyb_.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtkjlyb_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphtkjlyb_.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphtkjlyb_.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtkjlyb_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphtkjlyb_.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphtkjlyb_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtkjlyb_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphtkjlyb_.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphtkjlyb_.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtkjlyb_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphtkjlyb_.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphtkjlyb_.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphtkjlyb_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8676cobd.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8676cobd.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8676cobd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8676cobd.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8676cobd.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8676cobd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8676cobd.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8676cobd.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8676cobd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8676cobd.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8676cobd.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8676cobd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8676cobd.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8676cobd.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8676cobd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8676cobd.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8676cobd.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8676cobd.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcwd81dzj.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwd81dzj.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwd81dzj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcwd81dzj.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwd81dzj.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwd81dzj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcwd81dzj.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwd81dzj.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwd81dzj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcwd81dzj.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwd81dzj.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwd81dzj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcwd81dzj.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwd81dzj.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwd81dzj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcwd81dzj.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwd81dzj.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcwd81dzj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ \"2357BD\"\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxcfagsm0.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxcfagsm0.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxcfagsm0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxcfagsm0.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxcfagsm0.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxcfagsm0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxcfagsm0.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxcfagsm0.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxcfagsm0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxcfagsm0.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxcfagsm0.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxcfagsm0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxcfagsm0.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxcfagsm0.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxcfagsm0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxcfagsm0.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxcfagsm0.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxcfagsm0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i == \"2\" || i == \"3\" || i == \"5\" || i == \"7\" || i == \"B\" || i == \"\
    D\"\n            hex_key += 1\n        end\n    end\n    return hex_key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2pl8fz5r.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pl8fz5r.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pl8fz5r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2pl8fz5r.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pl8fz5r.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pl8fz5r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2pl8fz5r.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pl8fz5r.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pl8fz5r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2pl8fz5r.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pl8fz5r.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pl8fz5r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2pl8fz5r.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pl8fz5r.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pl8fz5r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2pl8fz5r.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pl8fz5r.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2pl8fz5r.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp21yg59o4.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp21yg59o4.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp21yg59o4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp21yg59o4.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp21yg59o4.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp21yg59o4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp21yg59o4.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp21yg59o4.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp21yg59o4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp21yg59o4.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp21yg59o4.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp21yg59o4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp21yg59o4.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp21yg59o4.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp21yg59o4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp21yg59o4.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp21yg59o4.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp21yg59o4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"]\n    hex_key = Dict(zip(hex_digits, primes))\n    return sum(hex_key[i]\
    \ in primes for i in num)\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3h02zpn0.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  KeyError: key \\'A\\' not\
    \ found\\n  Stacktrace:\\n    [1] getindex(h::Dict{String, Int64}, key::Char)\\\
    n      @ Base ./dict.jl:482\\n    [2] (::var\"#1#2\"{Dict{String, Int64}, Vector{Int64}})(i::Char)\\\
    n      @ Main ./none:0\\n    [3] MappingRF\\n      @ ./reduce.jl:93 [inlined]\\\
    n    [4] _foldl_impl\\n      @ ./reduce.jl:58 [inlined]\\n    [5] foldl_impl(op::Base.MappingRF{var\"\
    #1#2\"{Dict{String, Int64}, Vector{Int64}}, Base.BottomRF{typeof(Base.add_sum)}},\
    \ nt::Base._InitialValue, itr::String)\\n      @ Base ./reduce.jl:48\\n    [6]\
    \ mapfoldl_impl(f::typeof(identity), op::typeof(Base.add_sum), nt::Base._InitialValue,\
    \ itr::Base.Generator{String, var\"#1#2\"{Dict{String, Int64}, Vector{Int64}}})\\\
    n      @ Base ./reduce.jl:44\\n    [7] mapfoldl(f::Function, op::Function, itr::Base.Generator{String,\
    \ var\"#1#2\"{Dict{String, Int64}, Vector{Int64}}}; init::Base._InitialValue)\\\
    n      @ Base ./reduce.jl:160\\n    [8] mapfoldl(f::Function, op::Function, itr::Base.Generator{String,\
    \ var\"#1#2\"{Dict{String, Int64}, Vector{Int64}}})\\n      @ Base ./reduce.jl:160\\\
    n    [9] mapreduce(f::Function, op::Function, itr::Base.Generator{String, var\"\
    #1#2\"{Dict{String, Int64}, Vector{Int64}}}; kw::Base.Iterators.Pairs{Union{},\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\\n      @ Base ./reduce.jl:287\\\
    n   [10] mapreduce(f::Function, op::Function, itr::Base.Generator{String, var\"\
    #1#2\"{Dict{String, Int64}, Vector{Int64}}})\\n      @ Base ./reduce.jl:287\\\
    n   [11] sum(f::Function, a::Base.Generator{String, var\"#1#2\"{Dict{String, Int64},\
    \ Vector{Int64}}}; kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(),\
    \ Tuple{}}})\\n      @ Base ./reduce.jl:501\\n   [12] sum(f::Function, a::Base.Generator{String,\
    \ var\"#1#2\"{Dict{String, Int64}, Vector{Int64}}})\\n      @ Base ./reduce.jl:501\\\
    n   [13] sum(a::Base.Generator{String, var\"#1#2\"{Dict{String, Int64}, Vector{Int64}}};\
    \ kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\\\
    n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp93xq7m2j.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93xq7m2j.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93xq7m2j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp93xq7m2j.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93xq7m2j.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93xq7m2j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp93xq7m2j.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93xq7m2j.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93xq7m2j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp93xq7m2j.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93xq7m2j.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93xq7m2j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp93xq7m2j.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93xq7m2j.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93xq7m2j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp93xq7m2j.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93xq7m2j.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp93xq7m2j.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpywewpbjs.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmpywewpbjs.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmpywewpbjs.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpywewpbjs.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpywewpbjs.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ hex_key(num::String)\\n     @ Main /tmp/tmpywewpbjs.jl:20\\n   [2] macro expansion\\\
    n     @ /tmp/tmpywewpbjs.jl:27 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpywewpbjs.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpywewpbjs.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoj7fua1r.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoj7fua1r.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoj7fua1r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj7fua1r.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoj7fua1r.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoj7fua1r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj7fua1r.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoj7fua1r.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoj7fua1r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj7fua1r.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoj7fua1r.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoj7fua1r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj7fua1r.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoj7fua1r.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoj7fua1r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpoj7fua1r.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoj7fua1r.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoj7fua1r.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            key += 1\n        end\n \
    \   end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpudpc3dds.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudpc3dds.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudpc3dds.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpudpc3dds.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudpc3dds.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudpc3dds.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpudpc3dds.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudpc3dds.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudpc3dds.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpudpc3dds.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudpc3dds.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudpc3dds.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpudpc3dds.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudpc3dds.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudpc3dds.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpudpc3dds.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudpc3dds.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudpc3dds.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6tol0n9d.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6tol0n9d.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6tol0n9d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6tol0n9d.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6tol0n9d.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6tol0n9d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6tol0n9d.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6tol0n9d.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6tol0n9d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6tol0n9d.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6tol0n9d.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6tol0n9d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6tol0n9d.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6tol0n9d.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6tol0n9d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6tol0n9d.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6tol0n9d.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tol0n9d.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgywpwfjd.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] hex_key(num::String)\\n     @ Main /tmp/tmpgywpwfjd.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgywpwfjd.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgywpwfjd.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpgywpwfjd.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1077E\") == 2\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ hex_key(num::String)\\n     @ Main /tmp/tmpgywpwfjd.jl:20\\n   [2] macro expansion\\\
    n     @ /tmp/tmpgywpwfjd.jl:27 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgywpwfjd.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpgywpwfjd.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqddeogdu.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqddeogdu.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqddeogdu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqddeogdu.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqddeogdu.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqddeogdu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqddeogdu.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqddeogdu.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqddeogdu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqddeogdu.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqddeogdu.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqddeogdu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqddeogdu.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqddeogdu.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqddeogdu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqddeogdu.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqddeogdu.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqddeogdu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp36_eg6_5.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36_eg6_5.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36_eg6_5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp36_eg6_5.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36_eg6_5.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36_eg6_5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp36_eg6_5.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36_eg6_5.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36_eg6_5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp36_eg6_5.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36_eg6_5.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36_eg6_5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp36_eg6_5.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36_eg6_5.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36_eg6_5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp36_eg6_5.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36_eg6_5.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36_eg6_5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc6xauk_a.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6xauk_a.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6xauk_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc6xauk_a.jl:28\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6xauk_a.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6xauk_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc6xauk_a.jl:29\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6xauk_a.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6xauk_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc6xauk_a.jl:30\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6xauk_a.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6xauk_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc6xauk_a.jl:31\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6xauk_a.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6xauk_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc6xauk_a.jl:32\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6xauk_a.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6xauk_a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    hex_digits_prime = [hex_digits[i]\
    \ for i in primes]\n    return length(intersect(collect(num), hex_digits_prime))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt_pdcywd.jl:29\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_pdcywd.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_pdcywd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt_pdcywd.jl:30\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_pdcywd.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_pdcywd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt_pdcywd.jl:31\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_pdcywd.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_pdcywd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt_pdcywd.jl:32\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_pdcywd.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_pdcywd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt_pdcywd.jl:33\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_pdcywd.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_pdcywd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt_pdcywd.jl:34\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_pdcywd.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt_pdcywd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzsgnlp5s.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsgnlp5s.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsgnlp5s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsgnlp5s.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsgnlp5s.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsgnlp5s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsgnlp5s.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsgnlp5s.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsgnlp5s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsgnlp5s.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsgnlp5s.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsgnlp5s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsgnlp5s.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsgnlp5s.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzsgnlp5s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzsgnlp5s.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzsgnlp5s.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzsgnlp5s.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            hex_key += 1\n     \
    \   end\n    end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz4lufrem.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4lufrem.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4lufrem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz4lufrem.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4lufrem.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4lufrem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz4lufrem.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4lufrem.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4lufrem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz4lufrem.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4lufrem.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4lufrem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz4lufrem.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4lufrem.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4lufrem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz4lufrem.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4lufrem.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_li"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4lufrem.jl:29\n"
  exit_code: 1
  status: SyntaxError
