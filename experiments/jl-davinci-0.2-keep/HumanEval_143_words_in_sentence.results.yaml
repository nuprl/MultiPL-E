name: HumanEval_143_words_in_sentence
language: julia
results:
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_words = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(prime_words,\
    \ word)\n        end\n    end\n    return join(prime_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiz4l8w3i.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpiz4l8w3i.jl:24\n   [2] macro expansion\n     @ /tmp/tmpiz4l8w3i.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiz4l8w3i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiz4l8w3i.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpiz4l8w3i.jl:24\n   [2] macro expansion\n     @ /tmp/tmpiz4l8w3i.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiz4l8w3i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiz4l8w3i.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpiz4l8w3i.jl:24\n   [2] macro expansion\n     @ /tmp/tmpiz4l8w3i.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiz4l8w3i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiz4l8w3i.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpiz4l8w3i.jl:24\n   [2] macro expansion\n     @ /tmp/tmpiz4l8w3i.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiz4l8w3i.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu8wovc3k.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu8wovc3k.jl:24\n   [2] macro expansion\n     @ /tmp/tmpu8wovc3k.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu8wovc3k.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu8wovc3k.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu8wovc3k.jl:24\n   [2] macro expansion\n     @ /tmp/tmpu8wovc3k.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu8wovc3k.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu8wovc3k.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpu8wovc3k.jl:24\n   [2] macro expansion\n     @ /tmp/tmpu8wovc3k.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu8wovc3k.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu8wovc3k.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu8wovc3k.jl:24\n   [2] macro expansion\n     @ /tmp/tmpu8wovc3k.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8wovc3k.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn92ml8tq.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpn92ml8tq.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpn92ml8tq.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn92ml8tq.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpn92ml8tq.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpn92ml8tq.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpn92ml8tq.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn92ml8tq.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpn92ml8tq.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpn92ml8tq.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpn92ml8tq.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn92ml8tq.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpn92ml8tq.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpn92ml8tq.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpn92ml8tq.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2akj6otn.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp2akj6otn.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp2akj6otn.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2akj6otn.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp2akj6otn.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp2akj6otn.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp2akj6otn.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2akj6otn.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp2akj6otn.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp2akj6otn.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp2akj6otn.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2akj6otn.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp2akj6otn.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp2akj6otn.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp2akj6otn.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    words_prime = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(words_prime, word)\n        end\n    end\n    join(words_prime,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6brpf1g2.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6brpf1g2.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6brpf1g2.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6brpf1g2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6brpf1g2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6brpf1g2.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6brpf1g2.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6brpf1g2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6brpf1g2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp6brpf1g2.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6brpf1g2.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6brpf1g2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6brpf1g2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6brpf1g2.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6brpf1g2.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6brpf1g2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4yek17y0.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp4yek17y0.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4yek17y0.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4yek17y0.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4yek17y0.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp4yek17y0.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4yek17y0.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4yek17y0.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4yek17y0.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp4yek17y0.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4yek17y0.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4yek17y0.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4yek17y0.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp4yek17y0.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4yek17y0.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptivvwiom.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptivvwiom.jl:24\n   [2] macro expansion\n     @ /tmp/tmptivvwiom.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptivvwiom.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptivvwiom.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptivvwiom.jl:24\n   [2] macro expansion\n     @ /tmp/tmptivvwiom.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptivvwiom.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptivvwiom.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmptivvwiom.jl:24\n   [2] macro expansion\n     @ /tmp/tmptivvwiom.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptivvwiom.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptivvwiom.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptivvwiom.jl:24\n   [2] macro expansion\n     @ /tmp/tmptivvwiom.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptivvwiom.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # your code here\n\
    \    return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiavgxje4.jl:29\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"\" == \"is\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpiavgxje4.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiavgxje4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpiavgxje4.jl:30\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpiavgxje4.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiavgxje4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpiavgxje4.jl:31\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"\" == \"there is\
    \ no place\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiavgxje4.jl:31 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiavgxje4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpiavgxje4.jl:32\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpiavgxje4.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiavgxje4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpiavgxje4.jl:33\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"\" == \"go for it\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpiavgxje4.jl:33 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiavgxje4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpiavgxje4.jl:35\n  Expression: candidate(\"here is\") == \"\
    is\"\n   Evalu"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiavgxje4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeovy7be6.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpeovy7be6.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpeovy7be6.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeovy7be6.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpeovy7be6.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpeovy7be6.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpeovy7be6.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeovy7be6.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpeovy7be6.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpeovy7be6.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpeovy7be6.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeovy7be6.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpeovy7be6.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpeovy7be6.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpeovy7be6.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6jdao6d4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6jdao6d4.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6jdao6d4.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6jdao6d4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6jdao6d4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6jdao6d4.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6jdao6d4.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6jdao6d4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6jdao6d4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp6jdao6d4.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6jdao6d4.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6jdao6d4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6jdao6d4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6jdao6d4.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6jdao6d4.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6jdao6d4.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_words = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(prime_words,\
    \ word)\n        end\n    end\n    return join(prime_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjjzuedrw.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpjjzuedrw.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpjjzuedrw.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjzuedrw.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpjjzuedrw.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpjjzuedrw.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpjjzuedrw.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjzuedrw.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpjjzuedrw.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpjjzuedrw.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpjjzuedrw.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjzuedrw.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpjjzuedrw.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpjjzuedrw.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpjjzuedrw.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    words_prime = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(words_prime, word)\n        end\n    end\n    return join(words_prime,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkz1q8wvd.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkz1q8wvd.jl:24\n   [2] macro expansion\n     @ /tmp/tmpkz1q8wvd.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkz1q8wvd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkz1q8wvd.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkz1q8wvd.jl:24\n   [2] macro expansion\n     @ /tmp/tmpkz1q8wvd.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkz1q8wvd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkz1q8wvd.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpkz1q8wvd.jl:24\n   [2] macro expansion\n     @ /tmp/tmpkz1q8wvd.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkz1q8wvd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkz1q8wvd.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkz1q8wvd.jl:24\n   [2] macro expansion\n     @ /tmp/tmpkz1q8wvd.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkz1q8wvd.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfmb2zeei.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfmb2zeei.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfmb2zeei.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfmb2zeei.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfmb2zeei.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfmb2zeei.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfmb2zeei.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfmb2zeei.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfmb2zeei.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpfmb2zeei.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfmb2zeei.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfmb2zeei.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfmb2zeei.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfmb2zeei.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfmb2zeei.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfmb2zeei.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg818t0z2.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpg818t0z2.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpg818t0z2.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg818t0z2.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpg818t0z2.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpg818t0z2.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpg818t0z2.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg818t0z2.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpg818t0z2.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpg818t0z2.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpg818t0z2.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg818t0z2.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpg818t0z2.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpg818t0z2.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpg818t0z2.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp65yxm4mx.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp65yxm4mx.jl:24\n   [2] macro expansion\n     @ /tmp/tmp65yxm4mx.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp65yxm4mx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp65yxm4mx.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp65yxm4mx.jl:24\n   [2] macro expansion\n     @ /tmp/tmp65yxm4mx.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp65yxm4mx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp65yxm4mx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp65yxm4mx.jl:24\n   [2] macro expansion\n     @ /tmp/tmp65yxm4mx.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp65yxm4mx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp65yxm4mx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp65yxm4mx.jl:24\n   [2] macro expansion\n     @ /tmp/tmp65yxm4mx.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp65yxm4mx.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp16g_41bf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp16g_41bf.jl:24\n   [2] macro expansion\n     @ /tmp/tmp16g_41bf.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp16g_41bf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp16g_41bf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp16g_41bf.jl:24\n   [2] macro expansion\n     @ /tmp/tmp16g_41bf.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp16g_41bf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp16g_41bf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp16g_41bf.jl:24\n   [2] macro expansion\n     @ /tmp/tmp16g_41bf.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp16g_41bf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp16g_41bf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp16g_41bf.jl:24\n   [2] macro expansion\n     @ /tmp/tmp16g_41bf.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp16g_41bf.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe116a_jy.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpe116a_jy.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpe116a_jy.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe116a_jy.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpe116a_jy.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpe116a_jy.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpe116a_jy.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe116a_jy.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpe116a_jy.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpe116a_jy.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpe116a_jy.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe116a_jy.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpe116a_jy.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpe116a_jy.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpe116a_jy.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5j4yog0f.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp5j4yog0f.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp5j4yog0f.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5j4yog0f.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5j4yog0f.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp5j4yog0f.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp5j4yog0f.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5j4yog0f.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5j4yog0f.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp5j4yog0f.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp5j4yog0f.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5j4yog0f.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp5j4yog0f.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp5j4yog0f.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp5j4yog0f.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp70z_fx5g.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp70z_fx5g.jl:24\n   [2] macro expansion\n     @ /tmp/tmp70z_fx5g.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp70z_fx5g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp70z_fx5g.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp70z_fx5g.jl:24\n   [2] macro expansion\n     @ /tmp/tmp70z_fx5g.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp70z_fx5g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp70z_fx5g.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp70z_fx5g.jl:24\n   [2] macro expansion\n     @ /tmp/tmp70z_fx5g.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp70z_fx5g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp70z_fx5g.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp70z_fx5g.jl:24\n   [2] macro expansion\n     @ /tmp/tmp70z_fx5g.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70z_fx5g.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    new_sentence = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(new_sentence,\
    \ word)\n        end\n    end\n    return join(new_sentence, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd5xr9wtv.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd5xr9wtv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpd5xr9wtv.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd5xr9wtv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpd5xr9wtv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd5xr9wtv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpd5xr9wtv.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd5xr9wtv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpd5xr9wtv.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpd5xr9wtv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpd5xr9wtv.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd5xr9wtv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpd5xr9wtv.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd5xr9wtv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpd5xr9wtv.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5xr9wtv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpquv9l0ck.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpquv9l0ck.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpquv9l0ck.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpquv9l0ck.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpquv9l0ck.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpquv9l0ck.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpquv9l0ck.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpquv9l0ck.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpquv9l0ck.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpquv9l0ck.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpquv9l0ck.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpquv9l0ck.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpquv9l0ck.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpquv9l0ck.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpquv9l0ck.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfvzu13j4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfvzu13j4.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfvzu13j4.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfvzu13j4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfvzu13j4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfvzu13j4.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfvzu13j4.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfvzu13j4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfvzu13j4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpfvzu13j4.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfvzu13j4.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfvzu13j4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfvzu13j4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfvzu13j4.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfvzu13j4.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvzu13j4.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0a_jrcmm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0a_jrcmm.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0a_jrcmm.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0a_jrcmm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0a_jrcmm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0a_jrcmm.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0a_jrcmm.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0a_jrcmm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0a_jrcmm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp0a_jrcmm.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0a_jrcmm.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0a_jrcmm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0a_jrcmm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0a_jrcmm.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0a_jrcmm.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0a_jrcmm.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphr0fd3uz.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphr0fd3uz.jl:24\n   [2] macro expansion\n     @ /tmp/tmphr0fd3uz.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphr0fd3uz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphr0fd3uz.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphr0fd3uz.jl:24\n   [2] macro expansion\n     @ /tmp/tmphr0fd3uz.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphr0fd3uz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphr0fd3uz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphr0fd3uz.jl:24\n   [2] macro expansion\n     @ /tmp/tmphr0fd3uz.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphr0fd3uz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphr0fd3uz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphr0fd3uz.jl:24\n   [2] macro expansion\n     @ /tmp/tmphr0fd3uz.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphr0fd3uz.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    new_words = []\n    for word in\
    \ words\n        if length(word) in primes\n            push!(new_words, word)\n\
    \        end\n    end\n    join(new_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2dd2room.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2dd2room.jl:24\n   [2] macro expansion\n     @ /tmp/tmp2dd2room.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2dd2room.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2dd2room.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2dd2room.jl:24\n   [2] macro expansion\n     @ /tmp/tmp2dd2room.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2dd2room.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2dd2room.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp2dd2room.jl:24\n   [2] macro expansion\n     @ /tmp/tmp2dd2room.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2dd2room.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2dd2room.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2dd2room.jl:24\n   [2] macro expansion\n     @ /tmp/tmp2dd2room.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dd2room.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6nzrywmx.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp6nzrywmx.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp6nzrywmx.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6nzrywmx.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp6nzrywmx.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp6nzrywmx.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp6nzrywmx.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6nzrywmx.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp6nzrywmx.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp6nzrywmx.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp6nzrywmx.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6nzrywmx.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp6nzrywmx.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp6nzrywmx.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp6nzrywmx.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpizylrgzz.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpizylrgzz.jl:24\n   [2] macro expansion\n     @ /tmp/tmpizylrgzz.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpizylrgzz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpizylrgzz.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpizylrgzz.jl:24\n   [2] macro expansion\n     @ /tmp/tmpizylrgzz.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpizylrgzz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpizylrgzz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpizylrgzz.jl:24\n   [2] macro expansion\n     @ /tmp/tmpizylrgzz.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpizylrgzz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpizylrgzz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpizylrgzz.jl:24\n   [2] macro expansion\n     @ /tmp/tmpizylrgzz.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizylrgzz.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphkswa6yn.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphkswa6yn.jl:24\n   [2] macro expansion\n     @ /tmp/tmphkswa6yn.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphkswa6yn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphkswa6yn.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphkswa6yn.jl:24\n   [2] macro expansion\n     @ /tmp/tmphkswa6yn.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphkswa6yn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphkswa6yn.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphkswa6yn.jl:24\n   [2] macro expansion\n     @ /tmp/tmphkswa6yn.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphkswa6yn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphkswa6yn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphkswa6yn.jl:24\n   [2] macro expansion\n     @ /tmp/tmphkswa6yn.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkswa6yn.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_sentence = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(new_sentence, word)\n        end\n    end\n    return join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp17c6nizv.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp17c6nizv.jl:24\n   [2] macro expansion\n     @ /tmp/tmp17c6nizv.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp17c6nizv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp17c6nizv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp17c6nizv.jl:24\n   [2] macro expansion\n     @ /tmp/tmp17c6nizv.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp17c6nizv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp17c6nizv.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp17c6nizv.jl:24\n   [2] macro expansion\n     @ /tmp/tmp17c6nizv.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp17c6nizv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp17c6nizv.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp17c6nizv.jl:24\n   [2] macro expansion\n     @ /tmp/tmp17c6nizv.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17c6nizv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_sentence = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(new_sentence, word)\n        end\n    end\n    return join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv1lsfhnv.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpv1lsfhnv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpv1lsfhnv.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv1lsfhnv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv1lsfhnv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpv1lsfhnv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpv1lsfhnv.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv1lsfhnv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv1lsfhnv.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpv1lsfhnv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpv1lsfhnv.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv1lsfhnv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpv1lsfhnv.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpv1lsfhnv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpv1lsfhnv.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1lsfhnv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb01oggzt.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpb01oggzt.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpb01oggzt.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb01oggzt.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpb01oggzt.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpb01oggzt.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpb01oggzt.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb01oggzt.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpb01oggzt.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpb01oggzt.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpb01oggzt.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb01oggzt.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpb01oggzt.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpb01oggzt.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpb01oggzt.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo0c7cndl.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpo0c7cndl.jl:24\n   [2] macro expansion\n     @ /tmp/tmpo0c7cndl.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo0c7cndl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpo0c7cndl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpo0c7cndl.jl:24\n   [2] macro expansion\n     @ /tmp/tmpo0c7cndl.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo0c7cndl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpo0c7cndl.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpo0c7cndl.jl:24\n   [2] macro expansion\n     @ /tmp/tmpo0c7cndl.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo0c7cndl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpo0c7cndl.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpo0c7cndl.jl:24\n   [2] macro expansion\n     @ /tmp/tmpo0c7cndl.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0c7cndl.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpigu66l2t.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpigu66l2t.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpigu66l2t.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpigu66l2t.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpigu66l2t.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpigu66l2t.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpigu66l2t.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpigu66l2t.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpigu66l2t.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpigu66l2t.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpigu66l2t.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpigu66l2t.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpigu66l2t.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpigu66l2t.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpigu66l2t.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgu5k4v43.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpgu5k4v43.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpgu5k4v43.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgu5k4v43.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpgu5k4v43.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpgu5k4v43.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpgu5k4v43.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgu5k4v43.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpgu5k4v43.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpgu5k4v43.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpgu5k4v43.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgu5k4v43.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpgu5k4v43.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpgu5k4v43.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpgu5k4v43.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp336aw9x9.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp336aw9x9.jl:24\n   [2] macro expansion\n     @ /tmp/tmp336aw9x9.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp336aw9x9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp336aw9x9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp336aw9x9.jl:24\n   [2] macro expansion\n     @ /tmp/tmp336aw9x9.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp336aw9x9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp336aw9x9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp336aw9x9.jl:24\n   [2] macro expansion\n     @ /tmp/tmp336aw9x9.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp336aw9x9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp336aw9x9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp336aw9x9.jl:24\n   [2] macro expansion\n     @ /tmp/tmp336aw9x9.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp336aw9x9.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps30uw04u.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmps30uw04u.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmps30uw04u.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps30uw04u.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmps30uw04u.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmps30uw04u.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmps30uw04u.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps30uw04u.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmps30uw04u.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmps30uw04u.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmps30uw04u.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps30uw04u.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmps30uw04u.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmps30uw04u.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmps30uw04u.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3qs6nrck.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3qs6nrck.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3qs6nrck.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3qs6nrck.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3qs6nrck.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3qs6nrck.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3qs6nrck.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3qs6nrck.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3qs6nrck.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp3qs6nrck.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3qs6nrck.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3qs6nrck.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3qs6nrck.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3qs6nrck.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3qs6nrck.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qs6nrck.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdep1ltn3.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpdep1ltn3.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpdep1ltn3.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdep1ltn3.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpdep1ltn3.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpdep1ltn3.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpdep1ltn3.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdep1ltn3.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpdep1ltn3.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpdep1ltn3.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpdep1ltn3.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdep1ltn3.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpdep1ltn3.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpdep1ltn3.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpdep1ltn3.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy48ys_s_.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpy48ys_s_.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpy48ys_s_.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy48ys_s_.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpy48ys_s_.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpy48ys_s_.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpy48ys_s_.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy48ys_s_.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpy48ys_s_.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpy48ys_s_.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpy48ys_s_.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy48ys_s_.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpy48ys_s_.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpy48ys_s_.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpy48ys_s_.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    primes_words = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(primes_words,\
    \ word)\n        end\n    end\n    join(primes_words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    new_sentence = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(new_sentence,\
    \ word)\n        end\n    end\n    join(new_sentence, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_words = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(prime_words,\
    \ word)\n        end\n    end\n    return join(prime_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    join(result, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptovvo72f.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptovvo72f.jl:24\n   [2] macro expansion\n     @ /tmp/tmptovvo72f.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptovvo72f.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptovvo72f.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptovvo72f.jl:24\n   [2] macro expansion\n     @ /tmp/tmptovvo72f.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptovvo72f.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptovvo72f.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmptovvo72f.jl:24\n   [2] macro expansion\n     @ /tmp/tmptovvo72f.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptovvo72f.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptovvo72f.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptovvo72f.jl:24\n   [2] macro expansion\n     @ /tmp/tmptovvo72f.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptovvo72f.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl0ybpjpg.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl0ybpjpg.jl:24\n   [2] macro expansion\n     @ /tmp/tmpl0ybpjpg.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl0ybpjpg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl0ybpjpg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl0ybpjpg.jl:24\n   [2] macro expansion\n     @ /tmp/tmpl0ybpjpg.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl0ybpjpg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl0ybpjpg.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpl0ybpjpg.jl:24\n   [2] macro expansion\n     @ /tmp/tmpl0ybpjpg.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl0ybpjpg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl0ybpjpg.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl0ybpjpg.jl:24\n   [2] macro expansion\n     @ /tmp/tmpl0ybpjpg.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl0ybpjpg.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjjnltlae.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpjjnltlae.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpjjnltlae.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjnltlae.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpjjnltlae.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpjjnltlae.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpjjnltlae.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjnltlae.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpjjnltlae.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpjjnltlae.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpjjnltlae.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjnltlae.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpjjnltlae.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpjjnltlae.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpjjnltlae.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4m5in2xp.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp4m5in2xp.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4m5in2xp.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4m5in2xp.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4m5in2xp.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp4m5in2xp.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4m5in2xp.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4m5in2xp.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4m5in2xp.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp4m5in2xp.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4m5in2xp.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4m5in2xp.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4m5in2xp.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp4m5in2xp.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4m5in2xp.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp4m5in2xp.jl:32\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptixvqnc2.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptixvqnc2.jl:24\n   [2] macro expansion\n     @ /tmp/tmptixvqnc2.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptixvqnc2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptixvqnc2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptixvqnc2.jl:24\n   [2] macro expansion\n     @ /tmp/tmptixvqnc2.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptixvqnc2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptixvqnc2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmptixvqnc2.jl:24\n   [2] macro expansion\n     @ /tmp/tmptixvqnc2.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptixvqnc2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptixvqnc2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptixvqnc2.jl:24\n   [2] macro expansion\n     @ /tmp/tmptixvqnc2.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptixvqnc2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw9d63t9d.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpw9d63t9d.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpw9d63t9d.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw9d63t9d.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpw9d63t9d.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpw9d63t9d.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpw9d63t9d.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw9d63t9d.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpw9d63t9d.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpw9d63t9d.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpw9d63t9d.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw9d63t9d.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpw9d63t9d.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpw9d63t9d.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpw9d63t9d.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzua24c4z.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpzua24c4z.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpzua24c4z.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzua24c4z.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpzua24c4z.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpzua24c4z.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpzua24c4z.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzua24c4z.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpzua24c4z.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpzua24c4z.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpzua24c4z.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzua24c4z.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpzua24c4z.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpzua24c4z.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpzua24c4z.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpzua24c4z.jl:32\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuejfzvac.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpuejfzvac.jl:24\n   [2] macro expansion\n     @ /tmp/tmpuejfzvac.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuejfzvac.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpuejfzvac.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpuejfzvac.jl:24\n   [2] macro expansion\n     @ /tmp/tmpuejfzvac.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuejfzvac.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpuejfzvac.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpuejfzvac.jl:24\n   [2] macro expansion\n     @ /tmp/tmpuejfzvac.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuejfzvac.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpuejfzvac.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpuejfzvac.jl:24\n   [2] macro expansion\n     @ /tmp/tmpuejfzvac.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuejfzvac.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    join(result, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsexv612y.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpsexv612y.jl:24\n   [2] macro expansion\n     @ /tmp/tmpsexv612y.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsexv612y.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpsexv612y.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpsexv612y.jl:24\n   [2] macro expansion\n     @ /tmp/tmpsexv612y.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsexv612y.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpsexv612y.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpsexv612y.jl:24\n   [2] macro expansion\n     @ /tmp/tmpsexv612y.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsexv612y.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpsexv612y.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpsexv612y.jl:24\n   [2] macro expansion\n     @ /tmp/tmpsexv612y.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsexv612y.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2nfg5ndj.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2nfg5ndj.jl:24\n   [2] macro expansion\n     @ /tmp/tmp2nfg5ndj.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2nfg5ndj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2nfg5ndj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2nfg5ndj.jl:24\n   [2] macro expansion\n     @ /tmp/tmp2nfg5ndj.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2nfg5ndj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2nfg5ndj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp2nfg5ndj.jl:24\n   [2] macro expansion\n     @ /tmp/tmp2nfg5ndj.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2nfg5ndj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2nfg5ndj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2nfg5ndj.jl:24\n   [2] macro expansion\n     @ /tmp/tmp2nfg5ndj.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nfg5ndj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfw9403px.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfw9403px.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfw9403px.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfw9403px.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfw9403px.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfw9403px.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfw9403px.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfw9403px.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfw9403px.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpfw9403px.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfw9403px.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfw9403px.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfw9403px.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfw9403px.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfw9403px.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfw9403px.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0b5kmc9n.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0b5kmc9n.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0b5kmc9n.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0b5kmc9n.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0b5kmc9n.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0b5kmc9n.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0b5kmc9n.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0b5kmc9n.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0b5kmc9n.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp0b5kmc9n.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0b5kmc9n.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0b5kmc9n.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0b5kmc9n.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0b5kmc9n.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0b5kmc9n.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0b5kmc9n.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7hsswar3.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp7hsswar3.jl:24\n   [2] macro expansion\n     @ /tmp/tmp7hsswar3.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7hsswar3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7hsswar3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp7hsswar3.jl:24\n   [2] macro expansion\n     @ /tmp/tmp7hsswar3.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7hsswar3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7hsswar3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp7hsswar3.jl:24\n   [2] macro expansion\n     @ /tmp/tmp7hsswar3.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7hsswar3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7hsswar3.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp7hsswar3.jl:24\n   [2] macro expansion\n     @ /tmp/tmp7hsswar3.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7hsswar3.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpihxgqz6n.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpihxgqz6n.jl:24\n   [2] macro expansion\n     @ /tmp/tmpihxgqz6n.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpihxgqz6n.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpihxgqz6n.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpihxgqz6n.jl:24\n   [2] macro expansion\n     @ /tmp/tmpihxgqz6n.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpihxgqz6n.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpihxgqz6n.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpihxgqz6n.jl:24\n   [2] macro expansion\n     @ /tmp/tmpihxgqz6n.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpihxgqz6n.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpihxgqz6n.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpihxgqz6n.jl:24\n   [2] macro expansion\n     @ /tmp/tmpihxgqz6n.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpihxgqz6n.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph7kmxs5c.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmph7kmxs5c.jl:24\n   [2] macro expansion\n     @ /tmp/tmph7kmxs5c.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph7kmxs5c.jl:34\ntest set:\
    \ Error During Test at /tmp/tmph7kmxs5c.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmph7kmxs5c.jl:24\n   [2] macro expansion\n     @ /tmp/tmph7kmxs5c.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph7kmxs5c.jl:34\ntest set:\
    \ Error During Test at /tmp/tmph7kmxs5c.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmph7kmxs5c.jl:24\n   [2] macro expansion\n     @ /tmp/tmph7kmxs5c.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph7kmxs5c.jl:34\ntest set:\
    \ Error During Test at /tmp/tmph7kmxs5c.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmph7kmxs5c.jl:24\n   [2] macro expansion\n     @ /tmp/tmph7kmxs5c.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph7kmxs5c.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmemob7xo.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpmemob7xo.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpmemob7xo.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmemob7xo.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpmemob7xo.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpmemob7xo.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpmemob7xo.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmemob7xo.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpmemob7xo.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpmemob7xo.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpmemob7xo.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmemob7xo.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpmemob7xo.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpmemob7xo.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpmemob7xo.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_sentence = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(new_sentence, word)\n        end\n    end\n    return join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppx5ex87_.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmppx5ex87_.jl:24\n   [2] macro expansion\n     @ /tmp/tmppx5ex87_.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppx5ex87_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmppx5ex87_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmppx5ex87_.jl:24\n   [2] macro expansion\n     @ /tmp/tmppx5ex87_.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppx5ex87_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmppx5ex87_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmppx5ex87_.jl:24\n   [2] macro expansion\n     @ /tmp/tmppx5ex87_.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppx5ex87_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmppx5ex87_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmppx5ex87_.jl:24\n   [2] macro expansion\n     @ /tmp/tmppx5ex87_.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppx5ex87_.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3hyti1jx.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp3hyti1jx.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp3hyti1jx.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3hyti1jx.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp3hyti1jx.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp3hyti1jx.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp3hyti1jx.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3hyti1jx.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp3hyti1jx.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp3hyti1jx.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp3hyti1jx.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3hyti1jx.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp3hyti1jx.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp3hyti1jx.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp3hyti1jx.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfkyuk3sj.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpfkyuk3sj.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpfkyuk3sj.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfkyuk3sj.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpfkyuk3sj.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpfkyuk3sj.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpfkyuk3sj.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfkyuk3sj.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpfkyuk3sj.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpfkyuk3sj.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpfkyuk3sj.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfkyuk3sj.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpfkyuk3sj.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpfkyuk3sj.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpfkyuk3sj.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa180ncfj.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa180ncfj.jl:24\n   [2] macro expansion\n     @ /tmp/tmpa180ncfj.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa180ncfj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa180ncfj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa180ncfj.jl:24\n   [2] macro expansion\n     @ /tmp/tmpa180ncfj.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa180ncfj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa180ncfj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpa180ncfj.jl:24\n   [2] macro expansion\n     @ /tmp/tmpa180ncfj.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa180ncfj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa180ncfj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa180ncfj.jl:24\n   [2] macro expansion\n     @ /tmp/tmpa180ncfj.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa180ncfj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    new_words = []\n    for word in\
    \ words\n        if length(word) in primes\n            push!(new_words, word)\n\
    \        end\n    end\n    return join(new_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfg5gqvby.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfg5gqvby.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfg5gqvby.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfg5gqvby.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfg5gqvby.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfg5gqvby.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfg5gqvby.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfg5gqvby.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfg5gqvby.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpfg5gqvby.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfg5gqvby.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfg5gqvby.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfg5gqvby.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfg5gqvby.jl:24\n   [2] macro expansion\n     @ /tmp/tmpfg5gqvby.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfg5gqvby.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphhekwbk8.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphhekwbk8.jl:24\n   [2] macro expansion\n     @ /tmp/tmphhekwbk8.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphhekwbk8.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphhekwbk8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphhekwbk8.jl:24\n   [2] macro expansion\n     @ /tmp/tmphhekwbk8.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphhekwbk8.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphhekwbk8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphhekwbk8.jl:24\n   [2] macro expansion\n     @ /tmp/tmphhekwbk8.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphhekwbk8.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphhekwbk8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphhekwbk8.jl:24\n   [2] macro expansion\n     @ /tmp/tmphhekwbk8.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphhekwbk8.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3w0w1529.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3w0w1529.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3w0w1529.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3w0w1529.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3w0w1529.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3w0w1529.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3w0w1529.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3w0w1529.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3w0w1529.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp3w0w1529.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3w0w1529.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3w0w1529.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3w0w1529.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3w0w1529.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3w0w1529.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3w0w1529.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptrr0c7lb.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptrr0c7lb.jl:24\n   [2] macro expansion\n     @ /tmp/tmptrr0c7lb.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptrr0c7lb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptrr0c7lb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptrr0c7lb.jl:24\n   [2] macro expansion\n     @ /tmp/tmptrr0c7lb.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptrr0c7lb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptrr0c7lb.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmptrr0c7lb.jl:24\n   [2] macro expansion\n     @ /tmp/tmptrr0c7lb.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptrr0c7lb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptrr0c7lb.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptrr0c7lb.jl:24\n   [2] macro expansion\n     @ /tmp/tmptrr0c7lb.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrr0c7lb.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1mig3nma.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1mig3nma.jl:24\n   [2] macro expansion\n     @ /tmp/tmp1mig3nma.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1mig3nma.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1mig3nma.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1mig3nma.jl:24\n   [2] macro expansion\n     @ /tmp/tmp1mig3nma.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1mig3nma.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1mig3nma.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp1mig3nma.jl:24\n   [2] macro expansion\n     @ /tmp/tmp1mig3nma.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1mig3nma.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1mig3nma.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1mig3nma.jl:24\n   [2] macro expansion\n     @ /tmp/tmp1mig3nma.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1mig3nma.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    is_prime(x) = x > 1 && all(x % i != 0 for i in 2:x-1)\n    primes\
    \ = [word for word in words if is_prime(length(word))]\n    join(primes, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppu3fnbva.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n     @\
    \ Main /tmp/tmppu3fnbva.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmppu3fnbva.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppu3fnbva.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmppu3fnbva.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n     @\
    \ Main /tmp/tmppu3fnbva.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmppu3fnbva.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppu3fnbva.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmppu3fnbva.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at esse"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl4bs_c91.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl4bs_c91.jl:24\n   [2] macro expansion\n     @ /tmp/tmpl4bs_c91.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl4bs_c91.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl4bs_c91.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl4bs_c91.jl:24\n   [2] macro expansion\n     @ /tmp/tmpl4bs_c91.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl4bs_c91.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl4bs_c91.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpl4bs_c91.jl:24\n   [2] macro expansion\n     @ /tmp/tmpl4bs_c91.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl4bs_c91.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl4bs_c91.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl4bs_c91.jl:24\n   [2] macro expansion\n     @ /tmp/tmpl4bs_c91.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4bs_c91.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    res = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(res, word)\n        end\n\
    \    end\n    return join(res, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprzsho_43.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmprzsho_43.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmprzsho_43.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprzsho_43.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmprzsho_43.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmprzsho_43.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmprzsho_43.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprzsho_43.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmprzsho_43.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmprzsho_43.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmprzsho_43.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprzsho_43.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmprzsho_43.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmprzsho_43.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmprzsho_43.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4a_xjt8t.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp4a_xjt8t.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4a_xjt8t.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4a_xjt8t.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4a_xjt8t.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp4a_xjt8t.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4a_xjt8t.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4a_xjt8t.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4a_xjt8t.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp4a_xjt8t.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4a_xjt8t.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4a_xjt8t.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp4a_xjt8t.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp4a_xjt8t.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp4a_xjt8t.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = [word for word in words if isprime(length(word))]\n\
    \    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6vvg4g3m.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\\
    n     @ Main ./none:0\\n   [2] iterate\\n     @ ./iterators.jl:451 [inlined]\\\
    n   [3] iterate\\n     @ ./generator.jl:44 [inlined]\\n   [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\\n     @ Base ./array.jl:743\\n   [5] collect\\n     @ ./array.jl:678\
    \ [inlined]\\n   [6] words_in_sentence(sentence::String)\\n     @ Main /tmp/tmp6vvg4g3m.jl:22\\\
    n   [7] macro expansion\\n     @ /tmp/tmp6vvg4g3m.jl:30 [inlined]\\n   [8] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp6vvg4g3m.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp6vvg4g3m.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\\
    n     @ Main ./none:0\\n   [2] iterate\\n     @ ./iterators.jl:451 [inlined]\\\
    n   [3] iterate\\n     @ ./generator.jl:44 [inlined]\\n   [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\\n     @ Base ./array.jl:743\\n   [5] collect\\n     @ ./array.jl:678\
    \ [inlined]\\n   [6] words_in_sentence(sentence::String)\\n     @ Main /tmp/tmp6vvg4g3m.jl:22\\\
    n   [7] macro expansion\\n     @ /tmp/tmp6vvg4g3m.jl:31 [inlined]\\n   [8] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp6vvg4g3m.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp6vvg4g3m.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0h9uj1ql.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0h9uj1ql.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0h9uj1ql.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0h9uj1ql.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0h9uj1ql.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0h9uj1ql.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0h9uj1ql.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0h9uj1ql.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0h9uj1ql.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp0h9uj1ql.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0h9uj1ql.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0h9uj1ql.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0h9uj1ql.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0h9uj1ql.jl:24\n   [2] macro expansion\n     @ /tmp/tmp0h9uj1ql.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0h9uj1ql.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8jyknkor.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp8jyknkor.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp8jyknkor.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8jyknkor.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp8jyknkor.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp8jyknkor.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp8jyknkor.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8jyknkor.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp8jyknkor.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp8jyknkor.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp8jyknkor.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8jyknkor.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp8jyknkor.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp8jyknkor.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp8jyknkor.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphgm165fz.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphgm165fz.jl:24\n   [2] macro expansion\n     @ /tmp/tmphgm165fz.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphgm165fz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgm165fz.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphgm165fz.jl:24\n   [2] macro expansion\n     @ /tmp/tmphgm165fz.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphgm165fz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgm165fz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphgm165fz.jl:24\n   [2] macro expansion\n     @ /tmp/tmphgm165fz.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphgm165fz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgm165fz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphgm165fz.jl:24\n   [2] macro expansion\n     @ /tmp/tmphgm165fz.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgm165fz.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3nbgckm_.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3nbgckm_.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3nbgckm_.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3nbgckm_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3nbgckm_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3nbgckm_.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3nbgckm_.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3nbgckm_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3nbgckm_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp3nbgckm_.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3nbgckm_.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3nbgckm_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3nbgckm_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3nbgckm_.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3nbgckm_.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nbgckm_.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpys5xncmi.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpys5xncmi.jl:24\n   [2] macro expansion\n     @ /tmp/tmpys5xncmi.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpys5xncmi.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpys5xncmi.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpys5xncmi.jl:24\n   [2] macro expansion\n     @ /tmp/tmpys5xncmi.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpys5xncmi.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpys5xncmi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpys5xncmi.jl:24\n   [2] macro expansion\n     @ /tmp/tmpys5xncmi.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpys5xncmi.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpys5xncmi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpys5xncmi.jl:24\n   [2] macro expansion\n     @ /tmp/tmpys5xncmi.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpys5xncmi.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpogv6gg8l.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpogv6gg8l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpogv6gg8l.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpogv6gg8l.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpogv6gg8l.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpogv6gg8l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpogv6gg8l.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpogv6gg8l.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpogv6gg8l.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpogv6gg8l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpogv6gg8l.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpogv6gg8l.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpogv6gg8l.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpogv6gg8l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpogv6gg8l.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpogv6gg8l.jl:32\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj2e5ofl1.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpj2e5ofl1.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpj2e5ofl1.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj2e5ofl1.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpj2e5ofl1.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpj2e5ofl1.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpj2e5ofl1.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj2e5ofl1.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpj2e5ofl1.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpj2e5ofl1.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpj2e5ofl1.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj2e5ofl1.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpj2e5ofl1.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpj2e5ofl1.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpj2e5ofl1.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf5_hjbfv.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpf5_hjbfv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpf5_hjbfv.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpf5_hjbfv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpf5_hjbfv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpf5_hjbfv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpf5_hjbfv.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpf5_hjbfv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpf5_hjbfv.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpf5_hjbfv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpf5_hjbfv.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpf5_hjbfv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpf5_hjbfv.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpf5_hjbfv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpf5_hjbfv.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf5_hjbfv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg6wdt7z9.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpg6wdt7z9.jl:24\n   [2] macro expansion\n     @ /tmp/tmpg6wdt7z9.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg6wdt7z9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpg6wdt7z9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpg6wdt7z9.jl:24\n   [2] macro expansion\n     @ /tmp/tmpg6wdt7z9.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg6wdt7z9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpg6wdt7z9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpg6wdt7z9.jl:24\n   [2] macro expansion\n     @ /tmp/tmpg6wdt7z9.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg6wdt7z9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpg6wdt7z9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpg6wdt7z9.jl:24\n   [2] macro expansion\n     @ /tmp/tmpg6wdt7z9.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6wdt7z9.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwhys7l03.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwhys7l03.jl:24\n   [2] macro expansion\n     @ /tmp/tmpwhys7l03.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwhys7l03.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwhys7l03.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwhys7l03.jl:24\n   [2] macro expansion\n     @ /tmp/tmpwhys7l03.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwhys7l03.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwhys7l03.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwhys7l03.jl:24\n   [2] macro expansion\n     @ /tmp/tmpwhys7l03.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwhys7l03.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwhys7l03.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwhys7l03.jl:24\n   [2] macro expansion\n     @ /tmp/tmpwhys7l03.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhys7l03.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_sentence = \"\"\n    for word in words\n        if isprime(length(word))\n\
    \            new_sentence = new_sentence * word * \" \"\n        end\n    end\n\
    \    return rstrip(new_sentence)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpk_hej_2g.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpk_hej_2g.jl:24\n   [2] macro expansion\n     @ /tmp/tmpk_hej_2g.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_hej_2g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk_hej_2g.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpk_hej_2g.jl:24\n   [2] macro expansion\n     @ /tmp/tmpk_hej_2g.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_hej_2g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk_hej_2g.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpk_hej_2g.jl:24\n   [2] macro expansion\n     @ /tmp/tmpk_hej_2g.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_hej_2g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk_hej_2g.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpk_hej_2g.jl:24\n   [2] macro expansion\n     @ /tmp/tmpk_hej_2g.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_hej_2g.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7_pbfm3q.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp7_pbfm3q.jl:24\n   [2] macro expansion\n     @ /tmp/tmp7_pbfm3q.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7_pbfm3q.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7_pbfm3q.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp7_pbfm3q.jl:24\n   [2] macro expansion\n     @ /tmp/tmp7_pbfm3q.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7_pbfm3q.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7_pbfm3q.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp7_pbfm3q.jl:24\n   [2] macro expansion\n     @ /tmp/tmp7_pbfm3q.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7_pbfm3q.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7_pbfm3q.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp7_pbfm3q.jl:24\n   [2] macro expansion\n     @ /tmp/tmp7_pbfm3q.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_pbfm3q.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6prsguhg.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6prsguhg.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6prsguhg.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6prsguhg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6prsguhg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6prsguhg.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6prsguhg.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6prsguhg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6prsguhg.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp6prsguhg.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6prsguhg.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6prsguhg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6prsguhg.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6prsguhg.jl:24\n   [2] macro expansion\n     @ /tmp/tmp6prsguhg.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6prsguhg.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = primes_up_to(maximum(map(length, words)))\n    return join(filter(w\
    \ -> length(w) in primes, words), \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjkqk85ea.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes_up_to\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjkqk85ea.jl:22\n   [2] macro expansion\n     @ /tmp/tmpjkqk85ea.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjkqk85ea.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjkqk85ea.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes_up_to\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjkqk85ea.jl:22\n   [2] macro expansion\n     @ /tmp/tmpjkqk85ea.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjkqk85ea.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjkqk85ea.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes_up_to not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjkqk85ea.jl:22\n   [2] macro expansion\n     @ /tmp/tmpjkqk85ea.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjkqk85ea.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjkqk85ea.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes_up_to\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjkqk85ea.jl:22\n   [2] macro expansion\n     @ /tmp/tmpjkqk85ea.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjkqk85ea.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8eqv3v64.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8eqv3v64.jl:24\n   [2] macro expansion\n     @ /tmp/tmp8eqv3v64.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8eqv3v64.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8eqv3v64.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8eqv3v64.jl:24\n   [2] macro expansion\n     @ /tmp/tmp8eqv3v64.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8eqv3v64.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8eqv3v64.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp8eqv3v64.jl:24\n   [2] macro expansion\n     @ /tmp/tmp8eqv3v64.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8eqv3v64.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8eqv3v64.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8eqv3v64.jl:24\n   [2] macro expansion\n     @ /tmp/tmp8eqv3v64.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8eqv3v64.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnru2oxbe.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpnru2oxbe.jl:24\n   [2] macro expansion\n     @ /tmp/tmpnru2oxbe.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnru2oxbe.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpnru2oxbe.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpnru2oxbe.jl:24\n   [2] macro expansion\n     @ /tmp/tmpnru2oxbe.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnru2oxbe.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpnru2oxbe.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpnru2oxbe.jl:24\n   [2] macro expansion\n     @ /tmp/tmpnru2oxbe.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnru2oxbe.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpnru2oxbe.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpnru2oxbe.jl:24\n   [2] macro expansion\n     @ /tmp/tmpnru2oxbe.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnru2oxbe.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl0ttqz6e.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpl0ttqz6e.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpl0ttqz6e.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0ttqz6e.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpl0ttqz6e.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpl0ttqz6e.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpl0ttqz6e.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0ttqz6e.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpl0ttqz6e.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpl0ttqz6e.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpl0ttqz6e.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0ttqz6e.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpl0ttqz6e.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpl0ttqz6e.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpl0ttqz6e.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppib79r3l.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmppib79r3l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmppib79r3l.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppib79r3l.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmppib79r3l.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmppib79r3l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmppib79r3l.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppib79r3l.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmppib79r3l.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmppib79r3l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmppib79r3l.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppib79r3l.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmppib79r3l.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmppib79r3l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmppib79r3l.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmppib79r3l.jl:32\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9w8t0kn3.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9w8t0kn3.jl:24\n   [2] macro expansion\n     @ /tmp/tmp9w8t0kn3.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9w8t0kn3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9w8t0kn3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9w8t0kn3.jl:24\n   [2] macro expansion\n     @ /tmp/tmp9w8t0kn3.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9w8t0kn3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9w8t0kn3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp9w8t0kn3.jl:24\n   [2] macro expansion\n     @ /tmp/tmp9w8t0kn3.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9w8t0kn3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9w8t0kn3.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9w8t0kn3.jl:24\n   [2] macro expansion\n     @ /tmp/tmp9w8t0kn3.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9w8t0kn3.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa_ojj8y8.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa_ojj8y8.jl:24\n   [2] macro expansion\n     @ /tmp/tmpa_ojj8y8.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa_ojj8y8.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa_ojj8y8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa_ojj8y8.jl:24\n   [2] macro expansion\n     @ /tmp/tmpa_ojj8y8.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa_ojj8y8.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa_ojj8y8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpa_ojj8y8.jl:24\n   [2] macro expansion\n     @ /tmp/tmpa_ojj8y8.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa_ojj8y8.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpa_ojj8y8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa_ojj8y8.jl:24\n   [2] macro expansion\n     @ /tmp/tmpa_ojj8y8.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_ojj8y8.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0ha89vzc.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp0ha89vzc.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp0ha89vzc.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ha89vzc.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp0ha89vzc.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp0ha89vzc.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp0ha89vzc.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ha89vzc.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp0ha89vzc.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp0ha89vzc.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp0ha89vzc.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ha89vzc.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp0ha89vzc.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp0ha89vzc.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp0ha89vzc.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpayacwauv.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpayacwauv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpayacwauv.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpayacwauv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpayacwauv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpayacwauv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpayacwauv.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpayacwauv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpayacwauv.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpayacwauv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpayacwauv.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpayacwauv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpayacwauv.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpayacwauv.jl:24\n   [2] macro expansion\n     @ /tmp/tmpayacwauv.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpayacwauv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9l5bbeof.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp9l5bbeof.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp9l5bbeof.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9l5bbeof.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp9l5bbeof.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp9l5bbeof.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp9l5bbeof.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9l5bbeof.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp9l5bbeof.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmp9l5bbeof.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp9l5bbeof.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9l5bbeof.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp9l5bbeof.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmp9l5bbeof.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp9l5bbeof.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmhpw0rlx.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmhpw0rlx.jl:24\n   [2] macro expansion\n     @ /tmp/tmpmhpw0rlx.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmhpw0rlx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmhpw0rlx.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmhpw0rlx.jl:24\n   [2] macro expansion\n     @ /tmp/tmpmhpw0rlx.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmhpw0rlx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmhpw0rlx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpmhpw0rlx.jl:24\n   [2] macro expansion\n     @ /tmp/tmpmhpw0rlx.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmhpw0rlx.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmhpw0rlx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmhpw0rlx.jl:24\n   [2] macro expansion\n     @ /tmp/tmpmhpw0rlx.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhpw0rlx.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpff_lcr99.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  UndefVarError:\
    \ isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpff_lcr99.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpff_lcr99.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpff_lcr99.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpff_lcr99.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpff_lcr99.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpff_lcr99.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpff_lcr99.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpff_lcr99.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  UndefVarError: isprime not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\\
    n     @ Main /tmp/tmpff_lcr99.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpff_lcr99.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpff_lcr99.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpff_lcr99.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n\
    \     @ Main /tmp/tmpff_lcr99.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpff_lcr99.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Te"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpff_lcr99.jl:32\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphfer_2xn.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphfer_2xn.jl:24\n   [2] macro expansion\n     @ /tmp/tmphfer_2xn.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphfer_2xn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphfer_2xn.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphfer_2xn.jl:24\n   [2] macro expansion\n     @ /tmp/tmphfer_2xn.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphfer_2xn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphfer_2xn.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphfer_2xn.jl:24\n   [2] macro expansion\n     @ /tmp/tmphfer_2xn.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphfer_2xn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphfer_2xn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphfer_2xn.jl:24\n   [2] macro expansion\n     @ /tmp/tmphfer_2xn.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphfer_2xn.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpok93a9s1.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpok93a9s1.jl:24\n   [2] macro expansion\n     @ /tmp/tmpok93a9s1.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpok93a9s1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpok93a9s1.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpok93a9s1.jl:24\n   [2] macro expansion\n     @ /tmp/tmpok93a9s1.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpok93a9s1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpok93a9s1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpok93a9s1.jl:24\n   [2] macro expansion\n     @ /tmp/tmpok93a9s1.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpok93a9s1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpok93a9s1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpok93a9s1.jl:24\n   [2] macro expansion\n     @ /tmp/tmpok93a9s1.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpok93a9s1.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [isprime(length(word)) for word in words]\n    return join(words[primes],\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwr4psigy.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n \
    \    @ Base ./array.jl:681\n   [4] words_in_sentence(sentence::String)\n     @\
    \ Main /tmp/tmpwr4psigy.jl:22\n   [5] macro expansion\n     @ /tmp/tmpwr4psigy.jl:30\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpwr4psigy.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpwr4psigy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n \
    \    @ Base ./array.jl:681\n   [4] words_in_sentence(sentence::String)\n     @\
    \ Main /tmp/tmpwr4psigy.jl:22\n   [5] macro expansion\n     @ /tmp/tmpwr4psigy.jl:31\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpwr4psigy.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpwr4psigy.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n \
    \    @ Base ./array.jl:681\n   [4] words_in_sentence(sentence::String)\n     @\
    \ Main /tmp/tmpwr4psigy.jl:22\n   [5] macro expansion\n     @ /tmp/tmpwr4psigy.jl:32\
    \ [inlined]\n   [6] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwr4psigy.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = filter(word -> isprime(length(word)), words)\n   \
    \ join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgi0eov_r.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpgi0eov_r.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2511\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgi0eov_r.jl:22\n   [4] macro expansion\n     @ /tmp/tmpgi0eov_r.jl:30\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgi0eov_r.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgi0eov_r.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpgi0eov_r.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2511\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgi0eov_r.jl:22\n   [4] macro expansion\n     @ /tmp/tmpgi0eov_r.jl:31\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgi0eov_r.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgi0eov_r.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpgi0eov_r.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2511\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgi0eov_r.jl:22\n   [4] macro expansion\n     @ /tmp/tmpgi0eov_r.jl:32\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgi0eov_"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgi0eov_r.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn0on7i7y.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpn0on7i7y.jl:24\n   [2] macro expansion\n     @ /tmp/tmpn0on7i7y.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn0on7i7y.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpn0on7i7y.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpn0on7i7y.jl:24\n   [2] macro expansion\n     @ /tmp/tmpn0on7i7y.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn0on7i7y.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpn0on7i7y.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpn0on7i7y.jl:24\n   [2] macro expansion\n     @ /tmp/tmpn0on7i7y.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn0on7i7y.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpn0on7i7y.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpn0on7i7y.jl:24\n   [2] macro expansion\n     @ /tmp/tmpn0on7i7y.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0on7i7y.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvp676voi.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvp676voi.jl:24\n   [2] macro expansion\n     @ /tmp/tmpvp676voi.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvp676voi.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpvp676voi.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvp676voi.jl:24\n   [2] macro expansion\n     @ /tmp/tmpvp676voi.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvp676voi.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpvp676voi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpvp676voi.jl:24\n   [2] macro expansion\n     @ /tmp/tmpvp676voi.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvp676voi.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpvp676voi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvp676voi.jl:24\n   [2] macro expansion\n     @ /tmp/tmpvp676voi.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvp676voi.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8836uj22.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8836uj22.jl:24\n   [2] macro expansion\n     @ /tmp/tmp8836uj22.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8836uj22.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8836uj22.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8836uj22.jl:24\n   [2] macro expansion\n     @ /tmp/tmp8836uj22.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8836uj22.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8836uj22.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp8836uj22.jl:24\n   [2] macro expansion\n     @ /tmp/tmp8836uj22.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8836uj22.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8836uj22.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8836uj22.jl:24\n   [2] macro expansion\n     @ /tmp/tmp8836uj22.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8836uj22.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3se5gw1o.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3se5gw1o.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3se5gw1o.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3se5gw1o.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3se5gw1o.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3se5gw1o.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3se5gw1o.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3se5gw1o.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3se5gw1o.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp3se5gw1o.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3se5gw1o.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3se5gw1o.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3se5gw1o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3se5gw1o.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3se5gw1o.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3se5gw1o.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpst697nqm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpst697nqm.jl:24\n   [2] macro expansion\n     @ /tmp/tmpst697nqm.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpst697nqm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpst697nqm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpst697nqm.jl:24\n   [2] macro expansion\n     @ /tmp/tmpst697nqm.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpst697nqm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpst697nqm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpst697nqm.jl:24\n   [2] macro expansion\n     @ /tmp/tmpst697nqm.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpst697nqm.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpst697nqm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpst697nqm.jl:24\n   [2] macro expansion\n     @ /tmp/tmpst697nqm.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpst697nqm.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
