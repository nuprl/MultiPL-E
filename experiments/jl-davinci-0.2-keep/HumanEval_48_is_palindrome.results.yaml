name: HumanEval_48_is_palindrome
language: julia
results:
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) < 2\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    else\n        return text[1]\
    \ == text[end] && is_palindrome(text[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == \"\"\n        return true\n    end\n    if text[1] == text[end]\n\
    \        return is_palindrome(text[2:end-1])\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if length(text) == 2\n        if text[1]\
    \ == text[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if length(text) == 2\n        if text[1]\
    \ == text[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    return text == reverse(text)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\"\
    ) == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if text == reverse(text)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if length(text) == 2\n        if text[1]\
    \ == text[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if text[1] == text[end]\n        return is_palindrome(text[2:end-1])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_palindrome;\n\t@test(candidate(\"\") == true)\n\t@test(candidate(\"\
    aba\") == true)\n\t@test(candidate(\"aaaaa\") == true)\n\t@test(candidate(\"zbcd\"\
    ) == false)\n\t@test(candidate(\"xywyx\") == true)\n\t@test(candidate(\"xywyz\"\
    ) == false)\n\t@test(candidate(\"xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if text[1] ==\
    \ text[end]\n        return is_palindrome(text[2:end-1])\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\
    \t@test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) <= 1\n        return true\n    elseif text[1] != text[end]\n\
    \        return false\n    else\n        return is_palindrome(text[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t\
    @test(candidate(\"\") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"\
    aaaaa\") == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"\
    xywyx\") == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"\
    xywzx\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n\
    \    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n\
    \    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\nfunction is_palindrome(text::String)::Bool\
    \ \n    if length(text) == 0\n        return true\n    end\n    if length(text)\
    \ == 1\n        return true\n    end\n    if text[1] == text[end]\n        return\
    \ is_palindrome(text[2:end-1])\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_palindrome;\n\t@test(candidate(\"\
    \") == true)\n\t@test(candidate(\"aba\") == true)\n\t@test(candidate(\"aaaaa\"\
    ) == true)\n\t@test(candidate(\"zbcd\") == false)\n\t@test(candidate(\"xywyx\"\
    ) == true)\n\t@test(candidate(\"xywyz\") == false)\n\t@test(candidate(\"xywzx\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
