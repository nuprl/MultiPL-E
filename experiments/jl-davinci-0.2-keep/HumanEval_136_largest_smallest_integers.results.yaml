name: HumanEval_136_largest_smallest_integers
language: julia
results:
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo44c__96.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo44c__96.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0 && lst[2] > 0\n            return (nothing, minimum(lst))\n        end\n \
    \   end\n    if length(lst) > 1\n        if lst[1] < 0 && lst[2] < 0\n       \
    \     return (maximum(lst), nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0 && lst[2] < 0\n            return (maximum(lst[2:end]),\
    \ minimum(lst))\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0 && lst[2] > 0\n            return (maximum(lst), minimum(lst[2:end]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa4i_dyau.jl:58\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpa4i_dyau.jl:58\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa4i_dyau.jl:56\ntest set: Test Failed at /tmp/tmpa4i_dyau.jl:59\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpa4i_dyau.jl:59\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa4i_dyau.jl:56\ntest set: Test Failed at /tmp/tmpa4i_dyau.jl:60\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpa4i_dyau.jl:60\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa4i_dyau.jl:56\ntest set: Test Failed at /tmp/tmpa4i_dyau.jl:61\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpa4i_dyau.jl:61\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa4i_dyau.jl:56\ntest set: Test Failed at /tmp/tmpa4i_dyau.jl:65\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpa4i_dyau.jl:65\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa4i_dyau.jl:56\ntest set: Test Failed at /tmp/tmpa4i_dyau.jl:66\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpa4i_dyau.jl:66\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa4i_dyau.jl:56\ntest set: Test Failed at /tmp/tmpa4i_dyau.jl:67\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpa4i_dyau.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa4i_dyau.jl:56\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa4i_dyau.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(x -> x >= 0, lst)\n        return (nothing, minimum(lst))\n\
    \    end\n    if all(x -> x <= 0, lst)\n        return (maximum(lst), nothing)\n\
    \    end\n    return (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpexx8y6sq.jl:30\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpexx8y6sq.jl:30\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpexx8y6sq.jl:28\\ntest set: Test Failed at /tmp/tmpexx8y6sq.jl:35\\\
    n  Expression: candidate([0]) == (nothing, nothing)\\n   Evaluated: (nothing,\
    \ 0) == (nothing, nothing)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpexx8y6sq.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpexx8y6sq.jl:28\\ntest set: Test Failed at /tmp/tmpexx8y6sq.jl:37\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpexx8y6sq.jl:37\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpexx8y6sq.jl:28\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     3     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnvfyjjyp.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnvfyjjyp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    pos = nothing\n    neg = nothing\n    for i in lst\n\
    \        if i > 0\n            if pos == nothing\n                pos = i\n  \
    \          elseif i < pos\n                pos = i\n            end\n        elseif\
    \ i < 0\n            if neg == nothing\n                neg = i\n            elseif\
    \ i > neg\n                neg = i\n            end\n        end\n    end\n  \
    \  return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \      if lst[1] < 0\n            return (lst[1], nothing)\n        end\n    end\n\
    \    if length(lst) > 1\n        if all(x -> x < 0, lst)\n            return (maximum(lst),\
    \ nothing)\n        end\n        if all(x -> x > 0, lst)\n            return (nothing,\
    \ minimum(lst))\n        end\n        if any(x -> x < 0, lst) && any(x -> x >\
    \ 0, lst)\n            return (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph27sum_j.jl:47\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Tuple{Union{Nothing,\
    \ Int64},Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n\
    \    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmph27sum_j.jl:37\n   [2] top-level scope at /tmp/tmph27sum_j.jl:47\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph27sum_j.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmph27sum_j.jl:54\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmph27sum_j.jl:37\n   [2] top-level scope at /tmp/tmph27sum_j.jl:54\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph27sum_j.jl:45\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph27sum_j.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_fk552ju.jl:84\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_fk552ju.jl:84\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i > 0\n            if b == nothing\n                b = i\n          \
    \  elseif i < b\n                b = i\n            end\n        elseif i < 0\n\
    \            if a == nothing\n                a = i\n            elseif i > a\n\
    \                a = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if all(x -> x >= 0, lst)\n        return (nothing, minimum(lst))\n\
    \    end\n    if all(x -> x <= 0, lst)\n        return (maximum(lst), nothing)\n\
    \    end\n    return (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobfcyvxt.jl:33\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpobfcyvxt.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpobfcyvxt.jl:31\ntest set: Test Failed at /tmp/tmpobfcyvxt.jl:40\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpobfcyvxt.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpobfcyvxt.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobfcyvxt.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoj36v1d3.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoj36v1d3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5folkii6.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5folkii6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphw5o1fp8.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n   [1] _empty_reduce_error() at ./reduce.jl:295\\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\\\
    n   [8] _maximum at ./reducedim.jl:657 [inlined]\\n   [9] _maximum at ./reducedim.jl:656\
    \ [inlined]\\n   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\\n   [11] maximum\
    \ at ./reducedim.jl:652 [inlined]\\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmphw5o1fp8.jl:25\\n   [13] top-level scope at /tmp/tmphw5o1fp8.jl:33\\\
    n   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmphw5o1fp8.jl:31\\n  \\ntest set: Error During\
    \ Test at /tmp/tmphw5o1fp8.jl:40\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error() at ./reduce.jl:295\\\
    n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\\\
    n   [4] _mapreduce at ./reduce.jl:392 [inlined]\\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\\n   [8] _minimum at ./reducedim.jl:657 [inlined]\\\
    n   [9] _minimum at ./reducedim.jl:656 [inlined]\\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\\n   [11] minimum at ./reducedim.jl:652 [inlined]\\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmphw5o1fp8.jl:25\\n   [13] top-level scope at /tmp/tmphw5o1fp8.jl:40\\\
    n   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmphw5o1fp8.jl:31\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] > 0\n        \
    \    return (nothing, lst[1])\n        elseif lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        else\n            return (nothing, nothing)\n        end\n\
    \    end\n    neg_max = nothing\n    pos_min = nothing\n    for i in lst\n   \
    \     if i > 0\n            if pos_min == nothing\n                pos_min = i\n\
    \            elseif i < pos_min\n                pos_min = i\n            end\n\
    \        elseif i < 0\n            if neg_max == nothing\n                neg_max\
    \ = i\n            elseif i > neg_max\n                neg_max = i\n         \
    \   end\n        end\n    end\n    return (neg_max, pos_min)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    negative_numbers =\
    \ []\n    positive_numbers = []\n    for i in lst\n        if i < 0\n        \
    \    push!(negative_numbers, i)\n        elseif i > 0\n            push!(positive_numbers,\
    \ i)\n        end\n    end\n    if length(negative_numbers) == 0\n        negative_numbers\
    \ = nothing\n    else\n        negative_numbers = maximum(negative_numbers)\n\
    \    end\n    if length(positive_numbers) == 0\n        positive_numbers = nothing\n\
    \    else\n        positive_numbers = minimum(positive_numbers)\n    end\n   \
    \ return (negative_numbers, positive_numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\n    if length(lst) > 1\n        a = lst[1]\n\
    \        b = lst[1]\n        for i in lst\n            if i < 0\n            \
    \    if i > a\n                    a = i\n                end\n            end\n\
    \            if i > 0\n                if i < b\n                    b = i\n \
    \               end\n            end\n        end\n        if a == lst[1]\n  \
    \          a = nothing\n        end\n        if b == lst[1]\n            b = nothing\n\
    \        end\n        return (a, b)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyq9k4x8_.jl:62\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing, nothing) == (-2, 1)\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyq9k4x8_.jl:62\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyq9k4x8_.jl:59\ntest set: Test Failed at /tmp/tmpyq9k4x8_.jl:63\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ 2) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpyq9k4x8_.jl:63\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyq9k4x8_.jl:59\ntest set: Test Failed at /tmp/tmpyq9k4x8_.jl:64\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, 2) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpyq9k4x8_.jl:64\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyq9k4x8_.jl:59\ntest set: Test Failed at /tmp/tmpyq9k4x8_.jl:67\n\
    \  Expression: candidate([-1, -3, -5, -6]) == (-1, nothing)\n   Evaluated: (nothing,\
    \ nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpyq9k4x8_.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyq9k4x8_.jl:59\ntest set: Test Failed at /tmp/tmpyq9k4x8_.jl:68\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (nothing, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpyq9k4x8_.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyq9k4x8_.jl:59\ntest set: Test Failed at /tmp/tmpyq9k4x8_.jl:69\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (-3, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpyq9k4x8_.jl:69\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyq9k4x8_.jl:59\ntest set: Test Failed at /tmp/tmpyq9k4x8_.jl:70\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (-3, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpyq9k4x8_.jl:70\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyq9k4x8_.jl:59\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyq9k4x8_.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        return (nothing, nothing)\n    end\n    if length(neg) == 0\n   \
    \     return (nothing, nothing)\n    end\n    return (maximum(neg), minimum(pos))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkwu5a3zg.jl:43\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkwu5a3zg.jl:43\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkwu5a3zg.jl:42\\ntest set: Test Failed at /tmp/tmpkwu5a3zg.jl:44\\\
    n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated:\
    \ (nothing, nothing) == (nothing, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkwu5a3zg.jl:44\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkwu5a3zg.jl:42\\ntest set: Test Failed at /tmp/tmpkwu5a3zg.jl:50\\\
    n  Expression: candidate([-1, -3, -5, -6]) == (-1, nothing)\\n   Evaluated: (nothing,\
    \ nothing) == (-1, nothing)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkwu5a3zg.jl:50\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkwu5a3zg.jl:42\\ntest set: Test Failed at /tmp/tmpkwu5a3zg.jl:51\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n   Evaluated:\
    \ (nothing, nothing) == (-1, nothing)\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpkwu5a3zg.jl:51\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkwu5a3zg.jl:42\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb_jg27x7.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n   [1] _empty_reduce_error() at ./reduce.jl:295\\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\\\
    n   [8] _maximum at ./reducedim.jl:657 [inlined]\\n   [9] _maximum at ./reducedim.jl:656\
    \ [inlined]\\n   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\\n   [11] maximum\
    \ at ./reducedim.jl:652 [inlined]\\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpb_jg27x7.jl:25\\n   [13] top-level scope at /tmp/tmpb_jg27x7.jl:33\\\
    n   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmpb_jg27x7.jl:31\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpb_jg27x7.jl:40\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error() at ./reduce.jl:295\\\
    n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\\\
    n   [4] _mapreduce at ./reduce.jl:392 [inlined]\\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\\n   [8] _minimum at ./reducedim.jl:657 [inlined]\\\
    n   [9] _minimum at ./reducedim.jl:656 [inlined]\\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\\n   [11] minimum at ./reducedim.jl:652 [inlined]\\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpb_jg27x7.jl:25\\n   [13] top-level scope at /tmp/tmpb_jg27x7.jl:40\\\
    n   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmpb_jg27x7.jl:31\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] < lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n            end\n \
    \       end\n    end\n    if length(lst) > 1\n        if lst[1] > 0\n        \
    \    if lst[2] < 0\n                return (lst[2], lst[1])\n            end\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] < 0\n       \
    \     if lst[2] < 0\n                if lst[1] > lst[2]\n                    return\
    \ (lst[1], nothing)\n                end\n            end\n        end\n    end\n\
    \    if length(lst) > 1\n        if lst[1] < 0\n            if lst[2] > 0\n  \
    \              return (lst[1], lst[2])\n            end\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] > 0\n            if lst[2] > 0\n  \
    \              if lst[3] > 0\n                    if lst[1] < lst[2]\n       \
    \                 if lst[1] < lst[3]\n                            return (nothing,\
    \ lst[1])\n                        end\n                    end\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] > 0\n            if lst[2] > 0\n                if lst[3] < 0\n\
    \                    return (l\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp57ubytrz.jl:81\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp57ubytrz.jl:81\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp66lfqrzt.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp66lfqrzt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = 0\n    b = 0\n\
    \    for i in lst\n        if i < 0\n            if i > a\n                a =\
    \ i\n            end\n        end\n        if i > 0\n            if b == 0\n \
    \               b = i\n            end\n            if i < b\n               \
    \ b = i\n            end\n        end\n    end\n    if a == 0\n        a = nothing\n\
    \    end\n    if b == 0\n        b = nothing\n    end\n    return (a, b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3fz3ftti.jl:53\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing, 1) == (-2, 1)\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3fz3ftti.jl:53\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz3ftti.jl:50\ntest set: Test Failed at /tmp/tmp3fz3ftti.jl:54\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ 2) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz3ftti.jl:54\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz3ftti.jl:50\ntest set: Test Failed at /tmp/tmp3fz3ftti.jl:55\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, 2) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz3ftti.jl:55\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz3ftti.jl:50\ntest set: Test Failed at /tmp/tmp3fz3ftti.jl:58\n\
    \  Expression: candidate([-1, -3, -5, -6]) == (-1, nothing)\n   Evaluated: (nothing,\
    \ nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz3ftti.jl:58\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz3ftti.jl:50\ntest set: Test Failed at /tmp/tmp3fz3ftti.jl:59\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (nothing, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz3ftti.jl:59\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz3ftti.jl:50\ntest set: Test Failed at /tmp/tmp3fz3ftti.jl:60\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (nothing,\
    \ 1) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz3ftti.jl:60\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz3ftti.jl:50\ntest set: Test Failed at /tmp/tmp3fz3ftti.jl:61\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (nothing, 1) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz3ftti.jl:61\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz3ftti.jl:50\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fz3ftti.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) >= 2\n        if lst[1] >\
    \ 0 && lst[2] > 0\n            return (nothing, minimum(lst))\n        end\n \
    \   end\n    if length(lst) >= 2\n        if lst[1] < 0 && lst[2] < 0\n      \
    \      return (maximum(lst), nothing)\n        end\n    end\n    if length(lst)\
    \ >= 2\n        if lst[1] < 0 && lst[2] > 0\n            return (maximum(lst),\
    \ minimum(lst))\n        end\n    end\n    if length(lst) >= 2\n        if lst[1]\
    \ > 0 && lst[2] < 0\n            return (maximum(lst), minimum(lst))\n       \
    \ end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvdrvxuit.jl:58\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpvdrvxuit.jl:58\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvdrvxuit.jl:56\ntest set: Test Failed at /tmp/tmpvdrvxuit.jl:59\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpvdrvxuit.jl:59\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvdrvxuit.jl:56\ntest set: Test Failed at /tmp/tmpvdrvxuit.jl:60\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpvdrvxuit.jl:60\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvdrvxuit.jl:56\ntest set: Test Failed at /tmp/tmpvdrvxuit.jl:61\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpvdrvxuit.jl:61\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvdrvxuit.jl:56\ntest set: Test Failed at /tmp/tmpvdrvxuit.jl:65\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpvdrvxuit.jl:65\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvdrvxuit.jl:56\ntest set: Test Failed at /tmp/tmpvdrvxuit.jl:66\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpvdrvxuit.jl:66\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvdrvxuit.jl:56\ntest set: Test Failed at /tmp/tmpvdrvxuit.jl:67\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpvdrvxuit.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvdrvxuit.jl:56\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvdrvxuit.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpesj8ev9f.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Tuple{Union{Nothing,\
    \ Int64},Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n\
    \    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:21\n  Test threw exception\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:22\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:23\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:24\n  Test threw exception\n  Expression: candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:25\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == (nothing, nothing)\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:25\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:26\n  Test threw exception\n  Expression: candidate([0])\
    \ == (nothing, nothing)\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:27\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:28\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:29\n  Test threw exception\n  Expression: candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1)\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:29\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpesj8ev9f.jl:30\n  Test threw exception\n  Expression: candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpesj8ev9f.jl:14\n   [2] top-level scope at /tmp/tmpesj8ev9f.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesj8ev9f.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpesj8ev9f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\n    a = nothing\n \
    \   b = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            elseif i > a\n                a = i\n    \
    \        end\n        elseif i > 0\n            if b == nothing\n            \
    \    b = i\n            elseif i < b\n                b = i\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] < lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n            end\n \
    \       end\n    end\n    if length(lst) > 1\n        if lst[1] > 0\n        \
    \    if lst[2] < 0\n                return (lst[2], lst[1])\n            end\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] < 0\n       \
    \     if lst[2] < 0\n                if lst[1] > lst[2]\n                    return\
    \ (lst[1], nothing)\n                end\n            end\n        end\n    end\n\
    \    if length(lst) > 1\n        if lst[1] < 0\n            if lst[2] > 0\n  \
    \              return (lst[1], lst[2])\n            end\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] > 0\n            if lst[2] > 0\n  \
    \              if lst[3] > 0\n                    if lst[1] < lst[2]\n       \
    \                 if lst[1] < lst[3]\n                            return (nothing,\
    \ lst[1])\n                        end\n                    end\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] > 0\n            if lst[2] > 0\n                if lst[3] < 0\n\
    \                    return (l\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb58atkcw.jl:81\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb58atkcw.jl:81\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0 && lst[2] > 0\n            return (nothing, minimum(lst))\n        end\n \
    \   end\n    if length(lst) > 1\n        if lst[1] < 0 && lst[2] < 0\n       \
    \     return (maximum(lst), nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0 && lst[2] < 0\n            return (maximum(lst[2:end]),\
    \ minimum(lst))\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0 && lst[2] > 0\n            return (maximum(lst), minimum(lst[2:end]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfiy62mn1.jl:58\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpfiy62mn1.jl:58\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfiy62mn1.jl:56\ntest set: Test Failed at /tmp/tmpfiy62mn1.jl:59\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpfiy62mn1.jl:59\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfiy62mn1.jl:56\ntest set: Test Failed at /tmp/tmpfiy62mn1.jl:60\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpfiy62mn1.jl:60\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfiy62mn1.jl:56\ntest set: Test Failed at /tmp/tmpfiy62mn1.jl:61\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpfiy62mn1.jl:61\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfiy62mn1.jl:56\ntest set: Test Failed at /tmp/tmpfiy62mn1.jl:65\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpfiy62mn1.jl:65\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfiy62mn1.jl:56\ntest set: Test Failed at /tmp/tmpfiy62mn1.jl:66\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpfiy62mn1.jl:66\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfiy62mn1.jl:56\ntest set: Test Failed at /tmp/tmpfiy62mn1.jl:67\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpfiy62mn1.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfiy62mn1.jl:56\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfiy62mn1.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpishhyrta.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpishhyrta.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i > 0\n            if b == nothing\n\
    \                b = i\n            elseif i < b\n                b = i\n    \
    \        end\n        elseif i < 0\n            if a == nothing\n            \
    \    a = i\n            elseif i > a\n                a = i\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if all(x -> x < 0,\
    \ lst)\n        return (maximum(lst), nothing)\n    end\n    if all(x -> x > 0,\
    \ lst)\n        return (nothing, minimum(lst))\n    end\n    if any(x -> x < 0,\
    \ lst) && any(x -> x > 0, lst)\n        return (maximum(lst[lst .< 0]), minimum(lst[lst\
    \ .> 0]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpejkacrgj.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Tuple{Union{Nothing,\
    \ Int64},Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n\
    \    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpejkacrgj.jl:28\n   [2] top-level scope at /tmp/tmpejkacrgj.jl:37\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpejkacrgj.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpejkacrgj.jl:44\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpejkacrgj.jl:28\n   [2] top-level scope at /tmp/tmpejkacrgj.jl:44\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpejkacrgj.jl:35\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejkacrgj.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if length(lst) == 2\n        if lst[1] < 0 && lst[2] > 0\n     \
    \       return (lst[1], lst[2])\n        elseif lst[1] > 0 && lst[2] < 0\n   \
    \         return (lst[2], lst[1])\n        else\n            return (nothing,\
    \ nothing)\n        end\n    end\n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return (neg_max, pos_min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \      if lst[1] < 0\n            return (lst[1], nothing)\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] > 0 && lst[2] > 0\n            return\
    \ (nothing, minimum(lst))\n        end\n        if lst[1] < 0 && lst[2] < 0\n\
    \            return (maximum(lst), nothing)\n        end\n        if lst[1] >\
    \ 0 && lst[2] < 0\n            return (lst[2], lst[1])\n        end\n        if\
    \ lst[1] < 0 && lst[2] > 0\n            return (lst[1], lst[2])\n        end\n\
    \    end\n    if length(lst) > 2\n        if lst[1] > 0 && lst[2] > 0\n      \
    \      return (nothing, minimum(lst))\n        end\n        if lst[1] < 0 && lst[2]\
    \ < 0\n            return (maximum(lst), nothing)\n        end\n        if lst[1]\
    \ > 0 && lst[2] < 0\n            return (lst[2], lst[1])\n        end\n      \
    \  if lst[1] < 0 && lst[2] > 0\n            return (lst[1], lst[2])\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6vfzs2fk.jl:64\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmp6vfzs2fk.jl:64\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6vfzs2fk.jl:62\ntest set: Test Failed at /tmp/tmp6vfzs2fk.jl:65\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmp6vfzs2fk.jl:65\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6vfzs2fk.jl:62\ntest set: Test Failed at /tmp/tmp6vfzs2fk.jl:66\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmp6vfzs2fk.jl:66\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6vfzs2fk.jl:62\ntest set: Test Failed at /tmp/tmp6vfzs2fk.jl:67\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmp6vfzs2fk.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6vfzs2fk.jl:62\ntest set: Test Failed at /tmp/tmp6vfzs2fk.jl:71\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmp6vfzs2fk.jl:71\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6vfzs2fk.jl:62\ntest set: Test Failed at /tmp/tmp6vfzs2fk.jl:72\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmp6vfzs2fk.jl:72\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6vfzs2fk.jl:62\ntest set: Test Failed at /tmp/tmp6vfzs2fk.jl:73\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmp6vfzs2fk.jl:73\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6vfzs2fk.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6vfzs2fk.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \      if lst[1] < 0\n            return (lst[1], nothing)\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] > 0\n            if lst[2] > 0\n \
    \               return (nothing, minimum(lst))\n            end\n            if\
    \ lst[2] < 0\n                return (lst[2], lst[1])\n            end\n     \
    \   end\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n            if lst[2] < 0\n             \
    \   return (maximum(lst), nothing)\n            end\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] > 0\n            if lst[2] > 0\n    \
    \            return (nothing, minimum(lst))\n            end\n            if lst[2]\
    \ < 0\n                return (lst[2], minimum(lst))\n            end\n      \
    \  end\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (maximum(lst), lst[2])\n            end\n            if lst[2] < 0\n       \
    \         return (maximum(lst), nothing)\n            end\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpd299lqfk.jl:72\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd299lqfk.jl:72\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd299lqfk.jl:70\\ntest set: Test Failed at /tmp/tmpd299lqfk.jl:73\\\
    n  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd299lqfk.jl:73\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd299lqfk.jl:70\\ntest set: Test Failed at /tmp/tmpd299lqfk.jl:74\\\
    n  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd299lqfk.jl:74\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd299lqfk.jl:70\\ntest set: Test Failed at /tmp/tmpd299lqfk.jl:75\\\
    n  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd299lqfk.jl:75\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd299lqfk.jl:70\\ntest set: Test Failed at /tmp/tmpd299lqfk.jl:79\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd299lqfk.jl:79\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd299lqfk.jl:70\\ntest set: Test Failed at /tmp/tmpd299lqfk.jl:80\\\
    n  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd299lqfk.jl:80\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd299lqfk.jl:70\\ntest set: Test Failed at /tmp/tmpd299lqfk.jl:81\\\
    n  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd299lqfk.jl:81\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd299lqfk.jl:70\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i > 0\n            if b == nothing\n                b = i\n          \
    \  elseif i < b\n                b = i\n            end\n        elseif i < 0\n\
    \            if a == nothing\n                a = i\n            elseif i > a\n\
    \                a = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                return (nothing, minimum(lst))\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0\n            if lst[2] < 0\n                return (maximum(lst), nothing)\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ > 0\n            if lst[2] < 0\n                return (maximum(lst[2:end]),\
    \ minimum(lst))\n            end\n        end\n    end\n    if length(lst) > 1\n\
    \        if lst[1] < 0\n            if lst[2] > 0\n                return (maximum(lst),\
    \ minimum(lst[2:end]))\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvg_8z8cy.jl:66\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpvg_8z8cy.jl:66\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvg_8z8cy.jl:64\ntest set: Test Failed at /tmp/tmpvg_8z8cy.jl:67\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpvg_8z8cy.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvg_8z8cy.jl:64\ntest set: Test Failed at /tmp/tmpvg_8z8cy.jl:68\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpvg_8z8cy.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvg_8z8cy.jl:64\ntest set: Test Failed at /tmp/tmpvg_8z8cy.jl:69\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpvg_8z8cy.jl:69\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvg_8z8cy.jl:64\ntest set: Test Failed at /tmp/tmpvg_8z8cy.jl:73\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpvg_8z8cy.jl:73\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvg_8z8cy.jl:64\ntest set: Test Failed at /tmp/tmpvg_8z8cy.jl:74\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpvg_8z8cy.jl:74\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvg_8z8cy.jl:64\ntest set: Test Failed at /tmp/tmpvg_8z8cy.jl:75\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpvg_8z8cy.jl:75\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvg_8z8cy.jl:64\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvg_8z8cy.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_max = nothing\n    positive_min\
    \ = nothing\n    for i in lst\n        if i < 0\n            if negative_max ==\
    \ nothing\n                negative_max = i\n            elseif i > negative_max\n\
    \                negative_max = i\n            end\n        elseif i > 0\n   \
    \         if positive_min == nothing\n                positive_min = i\n     \
    \       elseif i < positive_min\n                positive_min = i\n          \
    \  end\n        end\n    end\n    return negative_max, positive_min\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpflkndkc7.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpflkndkc7.jl:25\n\
    \   [13] top-level scope at /tmp/tmpflkndkc7.jl:33\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpflkndkc7.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpflkndkc7.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n\
    \   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\n\
    \   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\n   [8] _minimum at ./reducedim.jl:657 [inlined]\n\
    \   [9] _minimum at ./reducedim.jl:656 [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\n   [11] minimum at ./reducedim.jl:652 [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpflkndkc7.jl:25\n   [13] top-level scope at /tmp/tmpflkndkc7.jl:40\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpflkndkc7.jl:31\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpflkndkc7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9snhs38r.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Tuple{Union{Nothing,\
    \ Int64},Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n\
    \    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:21\n  Test threw exception\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:22\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:23\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:24\n  Test threw exception\n  Expression: candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:25\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == (nothing, nothing)\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:25\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:26\n  Test threw exception\n  Expression: candidate([0])\
    \ == (nothing, nothing)\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:27\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:28\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:29\n  Test threw exception\n  Expression: candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1)\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:29\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9snhs38r.jl:30\n  Test threw exception\n  Expression: candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp9snhs38r.jl:14\n   [2] top-level scope at /tmp/tmp9snhs38r.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9snhs38r.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9snhs38r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if isempty(pos)\n\
    \        pos = nothing\n    else\n        pos = minimum(pos)\n    end\n    if\
    \ isempty(neg)\n        neg = nothing\n    else\n        neg = maximum(neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    neg_max = nothing\n    pos_min = nothing\n    for i in\
    \ lst\n        if i < 0 && (neg_max == nothing || i > neg_max)\n            neg_max\
    \ = i\n        end\n        if i > 0 && (pos_min == nothing || i < pos_min)\n\
    \            pos_min = i\n        end\n    end\n    return (neg_max, pos_min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst = []\n    for\
    \ i in lst\n        if i < 0\n            push!(neg_lst, i)\n        end\n   \
    \     if i > 0\n            push!(pos_lst, i)\n        end\n    end\n    if length(neg_lst)\
    \ == 0\n        neg_lst = nothing\n    end\n    if length(pos_lst) == 0\n    \
    \    pos_lst = nothing\n    end\n    if length(neg_lst) != 0\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) != 0\n        pos_lst =\
    \ minimum(pos_lst)\n    end\n    return (neg_lst, pos_lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxd3lk2b7.jl:60\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching length(::Nothing)\n  Closest candidates are:\n    length(!Matched::Core.SimpleVector)\
    \ at essentials.jl:596\n    length(!Matched::Base.MethodList) at reflection.jl:852\n\
    \    length(!Matched::Core.MethodTable) at reflection.jl:938\n    ...\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpxd3lk2b7.jl:47\n\
    \   [2] top-level scope at /tmp/tmpxd3lk2b7.jl:60\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxd3lk2b7.jl:59\n  \ntest set: Error During\
    \ Test at /tmp/tmpxd3lk2b7.jl:61\n  Test threw exception\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching length(::Nothing)\n\
    \  Closest candidates are:\n    length(!Matched::Core.SimpleVector) at essentials.jl:596\n\
    \    length(!Matched::Base.MethodList) at reflection.jl:852\n    length(!Matched::Core.MethodTable)\
    \ at reflection.jl:938\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpxd3lk2b7.jl:47\n   [2] top-level scope at /tmp/tmpxd3lk2b7.jl:61\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxd3lk2b7.jl:59\n  \ntest set: Error During\
    \ Test at /tmp/tmpxd3lk2b7.jl:67\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing)\n  MethodError: no method matching length(::Nothing)\n\
    \  Closest candidates are:\n    length(!Matched::Core.SimpleVector) at essentials.jl:596\n\
    \    length(!Matched::Base.MethodList) at reflection.jl:852\n    length(!Matched::Core.MethodTable)\
    \ at reflection.jl:938\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpxd3lk2b7.jl:50\n   [2] top-level scope at /tmp/tmpxd3lk2b7.jl:67\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxd3lk2b7.jl:59\n  \ntest set: Error During\
    \ Test at /tmp/tmpxd3lk2b7.jl:68\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  MethodError: no method matching length(::Nothing)\n\
    \  Closest candidates are:\n    length(!Matched::Core.SimpleVector) at essentials.jl:596\n\
    \    length(!Matched::Base.MethodList) at reflection.jl:852\n    length(!Matched::Core.MethodTable)\
    \ at reflection.jl:938\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpxd3lk2b7.jl:50\n   [2] top-level scope at /tmp/tmpxd3lk2b7.jl:68\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxd3lk2b7.jl:59\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    7      4     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxd3lk2b7.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe9e3i3_p.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe9e3i3_p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdqkfxi6j.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdqkfxi6j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpji55y8fg.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpji55y8fg.jl:25\n\
    \   [13] top-level scope at /tmp/tmpji55y8fg.jl:33\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpji55y8fg.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpji55y8fg.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n\
    \   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\n\
    \   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\n   [8] _minimum at ./reducedim.jl:657 [inlined]\n\
    \   [9] _minimum at ./reducedim.jl:656 [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\n   [11] minimum at ./reducedim.jl:652 [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpji55y8fg.jl:25\n   [13] top-level scope at /tmp/tmpji55y8fg.jl:40\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpji55y8fg.jl:31\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpji55y8fg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2rs3rbyv.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2rs3rbyv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    lst_pos = filter(x\
    \ -> x > 0, lst)\n    lst_neg = filter(x -> x < 0, lst)\n    if length(lst_pos)\
    \ == 0\n        pos = nothing\n    else\n        pos = minimum(lst_pos)\n    end\n\
    \    if length(lst_neg) == 0\n        neg = nothing\n    else\n        neg = maximum(lst_neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        pos = nothing\n    else\n        pos = minimum(pos)\n    end\n  \
    \  if length(neg) == 0\n        neg = nothing\n    else\n        neg = maximum(neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpltzgslaz.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpltzgslaz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        pos = nothing\n    else\n        pos = minimum(pos)\n    end\n  \
    \  if length(neg) == 0\n        neg = nothing\n    else\n        neg = maximum(neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb4gc__hb.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpb4gc__hb.jl:25\n\
    \   [13] top-level scope at /tmp/tmpb4gc__hb.jl:33\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpb4gc__hb.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpb4gc__hb.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n\
    \   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\n\
    \   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\n   [8] _minimum at ./reducedim.jl:657 [inlined]\n\
    \   [9] _minimum at ./reducedim.jl:656 [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\n   [11] minimum at ./reducedim.jl:652 [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpb4gc__hb.jl:25\n   [13] top-level scope at /tmp/tmpb4gc__hb.jl:40\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpb4gc__hb.jl:31\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4gc__hb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaxhb6j3e.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaxhb6j3e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgc2njcy4.jl:52\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, 2) == (nothing, 1)\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgc2njcy4.jl:52\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgc2njcy4.jl:51\ntest set: Test Failed at /tmp/tmpgc2njcy4.jl:53\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated:\
    \ (nothing, 2) == (nothing, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpgc2njcy4.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgc2njcy4.jl:51\ntest set: Test Failed at /tmp/tmpgc2njcy4.jl:54\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ 1) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpgc2njcy4.jl:54\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgc2njcy4.jl:51\ntest set: Test Failed at /tmp/tmpgc2njcy4.jl:55\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ 4) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpgc2njcy4.jl:55\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgc2njcy4.jl:51\ntest set: Test Failed at /tmp/tmpgc2njcy4.jl:56\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, 7) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpgc2njcy4.jl:56\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgc2njcy4.jl:51\ntest set: Test Failed at /tmp/tmpgc2njcy4.jl:61\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (-6, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpgc2njcy4.jl:61\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgc2njcy4.jl:51\ntest set: Test Failed at /tmp/tmpgc2njcy4.jl:62\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (-6, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpgc2njcy4.jl:62\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgc2njcy4.jl:51\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgc2njcy4.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing || i < b\n         \
    \       b = i\n            end\n        elseif i < 0\n            if a == nothing\
    \ || i > a\n                a = i\n            end\n        end\n    end\n   \
    \ return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps31cq39b.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps31cq39b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3u_h4slf.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3u_h4slf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                return (nothing, minimum(lst))\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0\n            if lst[2] < 0\n                return (maximum(lst), nothing)\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ > 0\n            if lst[2] < 0\n                return (maximum(lst[2:end]),\
    \ minimum(lst))\n            end\n        end\n    end\n    if length(lst) > 1\n\
    \        if lst[1] < 0\n            if lst[2] > 0\n                return (maximum(lst),\
    \ minimum(lst[2:end]))\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu5q2tw_j.jl:66\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpu5q2tw_j.jl:66\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5q2tw_j.jl:64\ntest set: Test Failed at /tmp/tmpu5q2tw_j.jl:67\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpu5q2tw_j.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5q2tw_j.jl:64\ntest set: Test Failed at /tmp/tmpu5q2tw_j.jl:68\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpu5q2tw_j.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5q2tw_j.jl:64\ntest set: Test Failed at /tmp/tmpu5q2tw_j.jl:69\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpu5q2tw_j.jl:69\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5q2tw_j.jl:64\ntest set: Test Failed at /tmp/tmpu5q2tw_j.jl:73\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpu5q2tw_j.jl:73\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5q2tw_j.jl:64\ntest set: Test Failed at /tmp/tmpu5q2tw_j.jl:74\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpu5q2tw_j.jl:74\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5q2tw_j.jl:64\ntest set: Test Failed at /tmp/tmpu5q2tw_j.jl:75\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpu5q2tw_j.jl:75\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5q2tw_j.jl:64\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu5q2tw_j.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzkym6nx7.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzkym6nx7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpswg4ql9s.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpswg4ql9s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3iw6catw.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3iw6catw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if isempty(neg_lst)\n        a = nothing\n    else\n        a = maximum(neg_lst)\n\
    \    end\n    if isempty(pos_lst)\n        b = nothing\n    else\n        b =\
    \ minimum(pos_lst)\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                return (nothing, minimum(lst))\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0\n            if lst[2] < 0\n                return (maximum(lst), nothing)\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ > 0\n            if lst[2] < 0\n                return (maximum(lst[2:end]),\
    \ minimum(lst))\n            end\n        end\n    end\n    if length(lst) > 1\n\
    \        if lst[1] < 0\n            if lst[2] > 0\n                return (maximum(lst),\
    \ minimum(lst[2:end]))\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpacy18ldx.jl:66\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpacy18ldx.jl:66\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacy18ldx.jl:64\ntest set: Test Failed at /tmp/tmpacy18ldx.jl:67\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpacy18ldx.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacy18ldx.jl:64\ntest set: Test Failed at /tmp/tmpacy18ldx.jl:68\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpacy18ldx.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacy18ldx.jl:64\ntest set: Test Failed at /tmp/tmpacy18ldx.jl:69\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpacy18ldx.jl:69\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacy18ldx.jl:64\ntest set: Test Failed at /tmp/tmpacy18ldx.jl:73\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpacy18ldx.jl:73\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacy18ldx.jl:64\ntest set: Test Failed at /tmp/tmpacy18ldx.jl:74\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpacy18ldx.jl:74\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacy18ldx.jl:64\ntest set: Test Failed at /tmp/tmpacy18ldx.jl:75\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpacy18ldx.jl:75\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacy18ldx.jl:64\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpacy18ldx.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3u_3v0b_.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp3u_3v0b_.jl:25\n\
    \   [13] top-level scope at /tmp/tmp3u_3v0b_.jl:33\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp3u_3v0b_.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u_3v0b_.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n\
    \   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\n\
    \   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\n   [8] _minimum at ./reducedim.jl:657 [inlined]\n\
    \   [9] _minimum at ./reducedim.jl:656 [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\n   [11] minimum at ./reducedim.jl:652 [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmp3u_3v0b_.jl:25\n   [13] top-level scope at /tmp/tmp3u_3v0b_.jl:40\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp3u_3v0b_.jl:31\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3u_3v0b_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = b = nothing\n    for i in lst\n \
    \       if i < 0\n            if a == nothing || i > a\n                a = i\n\
    \            end\n        elseif i > 0\n            if b == nothing || i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc8xyzpxq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc8xyzpxq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    positive_lst = []\n\
    \    negative_lst = []\n    for i in lst\n        if i > 0\n            push!(positive_lst,\
    \ i)\n        elseif i < 0\n            push!(negative_lst, i)\n        end\n\
    \    end\n    if length(positive_lst) == 0\n        positive_lst = nothing\n \
    \   else\n        positive_lst = minimum(positive_lst)\n    end\n    if length(negative_lst)\
    \ == 0\n        negative_lst = nothing\n    else\n        negative_lst = maximum(negative_lst)\n\
    \    end\n    return (negative_lst, positive_lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos_lst = []\n    neg_lst\
    \ = []\n    for i in lst\n        if i > 0\n            push!(pos_lst, i)\n  \
    \      elseif i < 0\n            push!(neg_lst, i)\n        end\n    end\n   \
    \ if length(pos_lst) == 0\n        pos_lst = nothing\n    else\n        pos_lst\
    \ = minimum(pos_lst)\n    end\n    if length(neg_lst) == 0\n        neg_lst =\
    \ nothing\n    else\n        neg_lst = maximum(neg_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, minimum(lst))\n        end\n    end\n    if\
    \ length(lst) > 1\n        if lst[1] < 0\n            return (maximum(lst), nothing)\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] == 0\n      \
    \      return (nothing, minimum(lst))\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfn6pzyg5.jl:53\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpfn6pzyg5.jl:53\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn6pzyg5.jl:51\ntest set: Test Failed at /tmp/tmpfn6pzyg5.jl:54\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpfn6pzyg5.jl:54\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn6pzyg5.jl:51\ntest set: Test Failed at /tmp/tmpfn6pzyg5.jl:55\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpfn6pzyg5.jl:55\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn6pzyg5.jl:51\ntest set: Test Failed at /tmp/tmpfn6pzyg5.jl:56\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpfn6pzyg5.jl:56\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn6pzyg5.jl:51\ntest set: Test Failed at /tmp/tmpfn6pzyg5.jl:60\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpfn6pzyg5.jl:60\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn6pzyg5.jl:51\ntest set: Test Failed at /tmp/tmpfn6pzyg5.jl:61\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpfn6pzyg5.jl:61\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn6pzyg5.jl:51\ntest set: Test Failed at /tmp/tmpfn6pzyg5.jl:62\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpfn6pzyg5.jl:62\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn6pzyg5.jl:51\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfn6pzyg5.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] > lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n                if\
    \ lst[1] < lst[2]\n                    return (nothing, lst[2])\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 1\n    \
    \    if lst[1] < 0\n            if lst[2] < 0\n                if lst[1] > lst[2]\n\
    \                    return (lst[1], nothing)\n                end\n         \
    \       if lst[1] < lst[2]\n                    return (lst[2], nothing)\n   \
    \             end\n            end\n        end\n    end\n    if length(lst) >\
    \ 1\n        if lst[1] > 0\n            if lst[2] < 0\n                return\
    \ (lst[2], lst[1])\n            end\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] > 0\n            if lst[2] > 0\n                if lst[3]\
    \ > 0\n                    if lst[1] > lst[2]\n                        if lst[1]\
    \ > lst[3]\n                            return (nothing, lst[1])\n           \
    \             end\n                        if l\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxenfz6pt.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxenfz6pt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        pos_min = nothing\n    else\n        pos_min = minimum(pos)\n   \
    \ end\n    if length(neg) == 0\n        neg_max = nothing\n    else\n        neg_max\
    \ = maximum(neg)\n    end\n    return (neg_max, pos_min)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg = []\n    pos =\
    \ []\n    for i in lst\n        if i < 0\n            push!(neg, i)\n        elseif\
    \ i > 0\n            push!(pos, i)\n        end\n    end\n    if length(neg) ==\
    \ 0\n        a = nothing\n    else\n        a = maximum(neg)\n    end\n    if\
    \ length(pos) == 0\n        b = nothing\n    else\n        b = minimum(pos)\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    positive_lst = []\n\
    \    negative_lst = []\n    for i in lst\n        if i > 0\n            push!(positive_lst,\
    \ i)\n        elseif i < 0\n            push!(negative_lst, i)\n        end\n\
    \    end\n    if length(positive_lst) == 0\n        positive_lst = nothing\n \
    \   else\n        positive_lst = minimum(positive_lst)\n    end\n    if length(negative_lst)\
    \ == 0\n        negative_lst = nothing\n    else\n        negative_lst = maximum(negative_lst)\n\
    \    end\n    return (negative_lst, positive_lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] > lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n                if\
    \ lst[1] < lst[2]\n                    return (nothing, lst[2])\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 1\n    \
    \    if lst[1] < 0\n            if lst[2] < 0\n                if lst[1] > lst[2]\n\
    \                    return (lst[1], nothing)\n                end\n         \
    \       if lst[1] < lst[2]\n                    return (lst[2], nothing)\n   \
    \             end\n            end\n        end\n    end\n    if length(lst) >\
    \ 1\n        if lst[1] > 0\n            if lst[2] < 0\n                return\
    \ (lst[2], lst[1])\n            end\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] > 0\n            if lst[2] > 0\n                if lst[3]\
    \ > 0\n                    if lst[1] > lst[2]\n                        if lst[1]\
    \ > lst[3]\n                            return (nothing, lst[1])\n           \
    \             end\n                        if l\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_hsd3rh_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_hsd3rh_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf44f4bzj.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpf44f4bzj.jl:25\n\
    \   [13] top-level scope at /tmp/tmpf44f4bzj.jl:33\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpf44f4bzj.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpf44f4bzj.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n\
    \   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\n\
    \   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\n   [8] _minimum at ./reducedim.jl:657 [inlined]\n\
    \   [9] _minimum at ./reducedim.jl:656 [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\n   [11] minimum at ./reducedim.jl:652 [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpf44f4bzj.jl:25\n   [13] top-level scope at /tmp/tmpf44f4bzj.jl:40\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpf44f4bzj.jl:31\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf44f4bzj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp75wpzroq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp75wpzroq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvwksrmj.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcvwksrmj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ad943h4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ad943h4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = 0\n    b = 0\n\
    \    for i in lst\n        if i > 0\n            if b == 0\n                b\
    \ = i\n            elseif i < b\n                b = i\n            end\n    \
    \    elseif i < 0\n            if a == 0\n                a = i\n            elseif\
    \ i > a\n                a = i\n            end\n        end\n    end\n    if\
    \ a == 0\n        a = nothing\n    end\n    if b == 0\n        b = nothing\n \
    \   end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0 && lst[2] > 0\n            return (nothing, minimum(lst))\n        end\n \
    \   end\n    if length(lst) > 1\n        if lst[1] < 0 && lst[2] < 0\n       \
    \     return (maximum(lst), nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0 && lst[2] < 0\n            return (maximum(lst[2:end]),\
    \ minimum(lst))\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0 && lst[2] > 0\n            return (maximum(lst), minimum(lst[2:end]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_r2xqky3.jl:58\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_r2xqky3.jl:58\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_r2xqky3.jl:56\\ntest set: Test Failed at /tmp/tmp_r2xqky3.jl:59\\\
    n  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_r2xqky3.jl:59\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_r2xqky3.jl:56\\ntest set: Test Failed at /tmp/tmp_r2xqky3.jl:60\\\
    n  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_r2xqky3.jl:60\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_r2xqky3.jl:56\\ntest set: Test Failed at /tmp/tmp_r2xqky3.jl:61\\\
    n  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_r2xqky3.jl:61\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_r2xqky3.jl:56\\ntest set: Test Failed at /tmp/tmp_r2xqky3.jl:65\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_r2xqky3.jl:65\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_r2xqky3.jl:56\\ntest set: Test Failed at /tmp/tmp_r2xqky3.jl:66\\\
    n  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_r2xqky3.jl:66\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_r2xqky3.jl:56\\ntest set: Test Failed at /tmp/tmp_r2xqky3.jl:67\\\
    n  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_r2xqky3.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_r2xqky3.jl:56\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpktwrm1_m.jl:84\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpktwrm1_m.jl:84\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        pos = nothing\n    else\n        pos = minimum(pos)\n    end\n  \
    \  if length(neg) == 0\n        neg = nothing\n    else\n        neg = maximum(neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf4gr24w_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf4gr24w_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(x -> x >= 0, lst)\n        return (nothing, minimum(lst))\n\
    \    end\n    if all(x -> x <= 0, lst)\n        return (maximum(lst), nothing)\n\
    \    end\n    return (maximum(filter(x -> x < 0, lst)), minimum(filter(x -> x\
    \ > 0, lst)))\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp37_06223.jl:30\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmp37_06223.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp37_06223.jl:28\ntest set: Test Failed at /tmp/tmp37_06223.jl:35\n\
    \  Expression: candidate([0]) == (nothing, nothing)\n   Evaluated: (nothing, 0)\
    \ == (nothing, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmp37_06223.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp37_06223.jl:28\ntest set: Test Failed at /tmp/tmp37_06223.jl:37\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmp37_06223.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp37_06223.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     3     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp37_06223.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        else\n      \
    \      if b == nothing\n                b = i\n            else\n            \
    \    if i < b\n                    b = i\n                end\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5tk25dcp.jl:50\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmp5tk25dcp.jl:50\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5tk25dcp.jl:48\ntest set: Test Failed at /tmp/tmp5tk25dcp.jl:57\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (-1, 0) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmp5tk25dcp.jl:57\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5tk25dcp.jl:48\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tk25dcp.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] > lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n                if\
    \ lst[1] < lst[2]\n                    return (nothing, lst[2])\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 1\n    \
    \    if lst[1] < 0\n            if lst[2] < 0\n                if lst[1] > lst[2]\n\
    \                    return (lst[1], nothing)\n                end\n         \
    \       if lst[1] < lst[2]\n                    return (lst[2], nothing)\n   \
    \             end\n            end\n        end\n    end\n    if length(lst) >\
    \ 1\n        if lst[1] > 0\n            if lst[2] < 0\n                return\
    \ (lst[2], lst[1])\n            end\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] > 0\n            if lst[2] > 0\n                if lst[3]\
    \ > 0\n                    if lst[1] > lst[2]\n                        if lst[1]\
    \ > lst[3]\n                            return (nothing, lst[1])\n           \
    \             end\n                        if l\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpakf43p1m.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpakf43p1m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if all(lst .> 0)\n\
    \        return (nothing, minimum(lst))\n    end\n    if all(lst .< 0)\n     \
    \   return (maximum(lst), nothing)\n    end\n    return (maximum(lst[lst .< 0]),\
    \ minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqvyxy4n0.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpqvyxy4n0.jl:27\n\
    \   [13] top-level scope at /tmp/tmpqvyxy4n0.jl:35\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpqvyxy4n0.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpqvyxy4n0.jl:42\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n\
    \   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\n\
    \   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\n   [8] _minimum at ./reducedim.jl:657 [inlined]\n\
    \   [9] _minimum at ./reducedim.jl:656 [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\n   [11] minimum at ./reducedim.jl:652 [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpqvyxy4n0.jl:27\n   [13] top-level scope at /tmp/tmpqvyxy4n0.jl:42\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpqvyxy4n0.jl:33\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvyxy4n0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        else\n      \
    \      if b == nothing\n                b = i\n            else\n            \
    \    if i < b\n                    b = i\n                end\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpup0orj9x.jl:50\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpup0orj9x.jl:50\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpup0orj9x.jl:48\ntest set: Test Failed at /tmp/tmpup0orj9x.jl:57\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (-1, 0) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpup0orj9x.jl:57\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpup0orj9x.jl:48\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpup0orj9x.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcmd_xsac.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcmd_xsac.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc77p5opc.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Tuple{Union{Nothing,\
    \ Int64},Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n\
    \    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:21\n  Test threw exception\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:22\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:23\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:24\n  Test threw exception\n  Expression: candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:25\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == (nothing, nothing)\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:25\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:26\n  Test threw exception\n  Expression: candidate([0])\
    \ == (nothing, nothing)\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:27\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:28\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:29\n  Test threw exception\n  Expression: candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1)\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:309\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\n \
    \   convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1}) at\
    \ /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:29\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpc77p5opc.jl:30\n  Test threw exception\n  Expression: candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1)\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\n    ...\n  Stacktrace:\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpc77p5opc.jl:14\n   [2] top-level scope at /tmp/tmpc77p5opc.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc77p5opc.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc77p5opc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbea_lm5z.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n   [1] _empty_reduce_error() at ./reduce.jl:295\\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\\\
    n   [8] _maximum at ./reducedim.jl:657 [inlined]\\n   [9] _maximum at ./reducedim.jl:656\
    \ [inlined]\\n   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\\n   [11] maximum\
    \ at ./reducedim.jl:652 [inlined]\\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpbea_lm5z.jl:25\\n   [13] top-level scope at /tmp/tmpbea_lm5z.jl:33\\\
    n   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmpbea_lm5z.jl:31\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpbea_lm5z.jl:40\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error() at ./reduce.jl:295\\\
    n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\\\
    n   [4] _mapreduce at ./reduce.jl:392 [inlined]\\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\\n   [8] _minimum at ./reducedim.jl:657 [inlined]\\\
    n   [9] _minimum at ./reducedim.jl:656 [inlined]\\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\\n   [11] minimum at ./reducedim.jl:652 [inlined]\\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpbea_lm5z.jl:25\\n   [13] top-level scope at /tmp/tmpbea_lm5z.jl:40\\\
    n   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmpbea_lm5z.jl:31\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_max = nothing\n\
    \    pos_min = nothing\n    for i in lst\n        if i < 0\n            if neg_max\
    \ == nothing\n                neg_max = i\n            else\n                if\
    \ i > neg_max\n                    neg_max = i\n                end\n        \
    \    end\n        end\n        if i > 0\n            if pos_min == nothing\n \
    \               pos_min = i\n            else\n                if i < pos_min\n\
    \                    pos_min = i\n                end\n            end\n     \
    \   end\n    end\n    return (neg_max, pos_min)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    max_neg = nothing\n\
    \    min_pos = nothing\n    for i in lst\n        if i < 0\n            if max_neg\
    \ == nothing\n                max_neg = i\n            else\n                if\
    \ i > max_neg\n                    max_neg = i\n                end\n        \
    \    end\n        end\n        if i > 0\n            if min_pos == nothing\n \
    \               min_pos = i\n            else\n                if i < min_pos\n\
    \                    min_pos = i\n                end\n            end\n     \
    \   end\n    end\n    return (max_neg, min_pos)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, minimum(lst))\n        end\n    end\n    if\
    \ length(lst) > 1\n        if lst[1] < 0\n            return (maximum(lst), nothing)\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] == 0\n      \
    \      return (nothing, minimum(lst))\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnh20518l.jl:53\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnh20518l.jl:53\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnh20518l.jl:51\\ntest set: Test Failed at /tmp/tmpnh20518l.jl:54\\\
    n  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnh20518l.jl:54\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnh20518l.jl:51\\ntest set: Test Failed at /tmp/tmpnh20518l.jl:55\\\
    n  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnh20518l.jl:55\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnh20518l.jl:51\\ntest set: Test Failed at /tmp/tmpnh20518l.jl:56\\\
    n  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnh20518l.jl:56\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnh20518l.jl:51\\ntest set: Test Failed at /tmp/tmpnh20518l.jl:60\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnh20518l.jl:60\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnh20518l.jl:51\\ntest set: Test Failed at /tmp/tmpnh20518l.jl:61\\\
    n  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnh20518l.jl:61\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnh20518l.jl:51\\ntest set: Test Failed at /tmp/tmpnh20518l.jl:62\\\
    n  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnh20518l.jl:62\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnh20518l.jl:51\\nTest Summary: | Pass  Fail \
    \ '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, minimum(lst))\n        end\n    end\n    if\
    \ length(lst) > 1\n        if lst[1] < 0\n            return (maximum(lst), nothing)\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] == 0\n      \
    \      return (nothing, minimum(lst))\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpakh_qlrh.jl:53\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpakh_qlrh.jl:53\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpakh_qlrh.jl:51\ntest set: Test Failed at /tmp/tmpakh_qlrh.jl:54\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpakh_qlrh.jl:54\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpakh_qlrh.jl:51\ntest set: Test Failed at /tmp/tmpakh_qlrh.jl:55\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpakh_qlrh.jl:55\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpakh_qlrh.jl:51\ntest set: Test Failed at /tmp/tmpakh_qlrh.jl:56\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpakh_qlrh.jl:56\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpakh_qlrh.jl:51\ntest set: Test Failed at /tmp/tmpakh_qlrh.jl:60\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpakh_qlrh.jl:60\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpakh_qlrh.jl:51\ntest set: Test Failed at /tmp/tmpakh_qlrh.jl:61\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpakh_qlrh.jl:61\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpakh_qlrh.jl:51\ntest set: Test Failed at /tmp/tmpakh_qlrh.jl:62\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpakh_qlrh.jl:62\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpakh_qlrh.jl:51\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpakh_qlrh.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp1z2_co6.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp1z2_co6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i > 0\n            if b == nothing\n                b = i\n          \
    \  elseif i < b\n                b = i\n            end\n        elseif i < 0\n\
    \            if a == nothing\n                a = i\n            elseif i > a\n\
    \                a = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if all(x -> x > 0, lst)\n        return (nothing, minimum(lst))\n\
    \    end\n    if all(x -> x < 0, lst)\n        return (maximum(lst), nothing)\n\
    \    end\n    return (maximum(filter(x -> x < 0, lst)), minimum(filter(x -> x\
    \ > 0, lst)))\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoip5_u52.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpoip5_u52.jl:25\n\
    \   [13] top-level scope at /tmp/tmpoip5_u52.jl:33\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpoip5_u52.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpoip5_u52.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n\
    \   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\n\
    \   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\n   [8] _minimum at ./reducedim.jl:657 [inlined]\n\
    \   [9] _minimum at ./reducedim.jl:656 [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\n   [11] minimum at ./reducedim.jl:652 [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpoip5_u52.jl:25\n   [13] top-level scope at /tmp/tmpoip5_u52.jl:40\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpoip5_u52.jl:31\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoip5_u52.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    min_pos = nothing\n\
    \    max_neg = nothing\n    for i in lst\n        if i > 0\n            if min_pos\
    \ == nothing\n                min_pos = i\n            else\n                if\
    \ i < min_pos\n                    min_pos = i\n                end\n        \
    \    end\n        else\n            if max_neg == nothing\n                max_neg\
    \ = i\n            else\n                if i > max_neg\n                    max_neg\
    \ = i\n                end\n            end\n        end\n    end\n    return\
    \ (max_neg, min_pos)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppymhmjgk.jl:50\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (0, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppymhmjgk.jl:50\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppymhmjgk.jl:48\ntest set: Test Failed at /tmp/tmppymhmjgk.jl:57\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmppymhmjgk.jl:57\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppymhmjgk.jl:48\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppymhmjgk.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if all(x ->\
    \ x > 0, lst)\n            return (nothing, minimum(lst))\n        end\n    end\n\
    \    if length(lst) > 1\n        if all(x -> x < 0, lst)\n            return (maximum(lst),\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if any(x ->\
    \ x < 0, lst) && any(x -> x > 0, lst)\n            return (maximum(lst[lst .<\
    \ 0]), minimum(lst[lst .> 0]))\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzjfi5zxq.jl:53\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Tuple{Union{Nothing, Int64},Union{Nothing, Int64}}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Tuple{Any,Vararg{Any,N} where N}\
    \ at essentials.jl:309\\n    convert(::Type{T}, !Matched::Tuple{Any,Vararg{Any,N}\
    \ where N}) where T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:310\\n\
    \    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at multidimensional.jl:134\\\
    n    ...\\n  Stacktrace:\\n   [1] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpzjfi5zxq.jl:43\\n   [2] top-level scope at /tmp/tmpzjfi5zxq.jl:53\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpzjfi5zxq.jl:51\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpzjfi5zxq.jl:60\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Tuple{Union{Nothing, Int64},Union{Nothing,\
    \ Int64}}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple{Any,Vararg{Any,N} where N} at essentials.jl:309\\n    convert(::Type{T},\
    \ !Matched::Tuple{Any,Vararg{Any,N} where N}) where T<:Tuple{Any,Vararg{Any,N}\
    \ where N} at essentials.jl:310\\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:134\\n    ...\\n  Stacktrace:\\n   [1]\
    \ largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpzjfi5zxq.jl:43\\n   [2]\
    \ top-level scope at /tmp/tmpzjfi5zxq.jl:60\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpzjfi5zxq.jl:51\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    9      2     11\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpzjfi5zxq.jl:49\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    positive_lst = filter(x -> x > 0, lst)\n    negative_lst\
    \ = filter(x -> x < 0, lst)\n    if length(positive_lst) == 0\n        return\
    \ (maximum(negative_lst), nothing)\n    elseif length(negative_lst) == 0\n   \
    \     return (nothing, minimum(positive_lst))\n    else\n        return (maximum(negative_lst),\
    \ minimum(positive_lst))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj0yex4fj.jl:37\n  Test threw exception\n\
    \  Expression: candidate([0]) == (nothing, nothing)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpj0yex4fj.jl:19\n\
    \   [13] top-level scope at /tmp/tmpj0yex4fj.jl:37\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpj0yex4fj.jl:30\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |   10      1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj0yex4fj.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        a = 0\n    \
    \    b = 0\n        for i in lst\n            if i < 0\n                if i >\
    \ a\n                    a = i\n                end\n            end\n       \
    \     if i > 0\n                if i < b\n                    b = i\n        \
    \        end\n            end\n        end\n        if a == 0\n            a =\
    \ nothing\n        end\n        if b == 0\n            b = nothing\n        end\n\
    \        return (a, b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9ez7rjv5.jl:60\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ez7rjv5.jl:60\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\ntest set: Test Failed at /tmp/tmp9ez7rjv5.jl:61\\\
    n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated:\
    \ (nothing, nothing) == (nothing, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ez7rjv5.jl:61\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\ntest set: Test Failed at /tmp/tmp9ez7rjv5.jl:62\\\
    n  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\\n   Evaluated: (nothing,\
    \ nothing) == (-2, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ez7rjv5.jl:62\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\ntest set: Test Failed at /tmp/tmp9ez7rjv5.jl:63\\\
    n  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\\n   Evaluated: (nothing,\
    \ nothing) == (-7, 2)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ez7rjv5.jl:63\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\ntest set: Test Failed at /tmp/tmp9ez7rjv5.jl:64\\\
    n  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\\n   Evaluated:\
    \ (nothing, nothing) == (-9, 2)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ez7rjv5.jl:64\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\ntest set: Test Failed at /tmp/tmp9ez7rjv5.jl:67\\\
    n  Expression: candidate([-1, -3, -5, -6]) == (-1, nothing)\\n   Evaluated: (nothing,\
    \ nothing) == (-1, nothing)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ez7rjv5.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\ntest set: Test Failed at /tmp/tmp9ez7rjv5.jl:68\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n   Evaluated:\
    \ (nothing, nothing) == (-1, nothing)\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp9ez7rjv5.jl:68\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\ntest set: Test Failed at /tmp/tmp9ez7rjv5.jl:69\\\
    n  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\\n   Evaluated: (nothing,\
    \ nothing) == (-3, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ez7rjv5.jl:69\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\ntest set: Test Failed at /tmp/tmp9ez7rjv5.jl:70\\\
    n  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\\n   Evaluated:\
    \ (nothing, nothing) == (-3, 1)\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ez7rjv5.jl:70\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ez7rjv5.jl:59\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     9     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, minimum(lst))\n        end\n    end\n    if\
    \ length(lst) > 1\n        if lst[1] < 0\n            return (maximum(lst), nothing)\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] == 0\n      \
    \      return (nothing, minimum(lst))\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp0zx1rfa.jl:53\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpp0zx1rfa.jl:53\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp0zx1rfa.jl:51\ntest set: Test Failed at /tmp/tmpp0zx1rfa.jl:54\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing,\
    \ -2) == (-2, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpp0zx1rfa.jl:54\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp0zx1rfa.jl:51\ntest set: Test Failed at /tmp/tmpp0zx1rfa.jl:55\n\
    \  Expression: candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n   Evaluated: (nothing,\
    \ -7) == (-7, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpp0zx1rfa.jl:55\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp0zx1rfa.jl:51\ntest set: Test Failed at /tmp/tmpp0zx1rfa.jl:56\n\
    \  Expression: candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n   Evaluated:\
    \ (nothing, -9) == (-9, 2)\nStacktrace:\n [1] top-level scope at /tmp/tmpp0zx1rfa.jl:56\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp0zx1rfa.jl:51\ntest set: Test Failed at /tmp/tmpp0zx1rfa.jl:60\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (0, nothing) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpp0zx1rfa.jl:60\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp0zx1rfa.jl:51\ntest set: Test Failed at /tmp/tmpp0zx1rfa.jl:61\n\
    \  Expression: candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n   Evaluated: (1, nothing)\
    \ == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpp0zx1rfa.jl:61\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp0zx1rfa.jl:51\ntest set: Test Failed at /tmp/tmpp0zx1rfa.jl:62\n\
    \  Expression: candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n   Evaluated:\
    \ (1, nothing) == (-3, 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpp0zx1rfa.jl:62\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp0zx1rfa.jl:51\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp0zx1rfa.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdgnvl_z3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _maximum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _maximum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #maximum#587 at ./reducedim.jl:652 [inlined]\n   [11] maximum at ./reducedim.jl:652\
    \ [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmpdgnvl_z3.jl:25\n\
    \   [13] top-level scope at /tmp/tmpdgnvl_z3.jl:33\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpdgnvl_z3.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpdgnvl_z3.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n\
    \   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n   [3]\
    \ mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at ./reduce.jl:335\n\
    \   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312\
    \ [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307 [inlined]\n   [7] mapreduce\
    \ at ./reducedim.jl:307 [inlined]\n   [8] _minimum at ./reducedim.jl:657 [inlined]\n\
    \   [9] _minimum at ./reducedim.jl:656 [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652\
    \ [inlined]\n   [11] minimum at ./reducedim.jl:652 [inlined]\n   [12] largest_smallest_integers(::Array{Int64,1})\
    \ at /tmp/tmpdgnvl_z3.jl:25\n   [13] top-level scope at /tmp/tmpdgnvl_z3.jl:40\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpdgnvl_z3.jl:31\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    9      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdgnvl_z3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_01j06ef.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_01j06ef.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_max = nothing\n\
    \    pos_min = nothing\n    for i in lst\n        if i < 0\n            if neg_max\
    \ == nothing\n                neg_max = i\n            else\n                if\
    \ i > neg_max\n                    neg_max = i\n                end\n        \
    \    end\n        else\n            if pos_min == nothing\n                pos_min\
    \ = i\n            else\n                if i < pos_min\n                    pos_min\
    \ = i\n                end\n            end\n        end\n    end\n    return\
    \ (neg_max, pos_min)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj44un3p1.jl:50\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] top-level scope at /tmp/tmpj44un3p1.jl:50\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj44un3p1.jl:48\ntest set: Test Failed at /tmp/tmpj44un3p1.jl:57\n\
    \  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n   Evaluated:\
    \ (-1, 0) == (-1, nothing)\nStacktrace:\n [1] top-level scope at /tmp/tmpj44un3p1.jl:57\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj44un3p1.jl:48\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj44un3p1.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyquble6b.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyquble6b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjp1xahgm.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjp1xahgm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0 && (a == nothing || i > a)\n \
    \           a = i\n        end\n        if i > 0 && (b == nothing || i < b)\n\
    \            b = i\n        end\n    end\n    return (a, b)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\n    if length(lst) > 1\n        if lst[1] < 0\n\
    \            a = lst[1]\n        else\n            a = nothing\n        end\n\
    \        if lst[1] > 0\n            b = lst[1]\n        else\n            b =\
    \ nothing\n        end\n        for i in 2:length(lst)\n            if lst[i]\
    \ < 0\n                if a == nothing\n                    a = lst[i]\n     \
    \           else\n                    if lst[i] > a\n                        a\
    \ = lst[i]\n                    end\n                end\n            end\n  \
    \          if lst[i] > 0\n                if b == nothing\n                  \
    \  b = lst[i]\n                else\n                    if lst[i] < b\n     \
    \                   b = lst[i]\n                    end\n                end\n\
    \            end\n        end\n        return (a, b)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5zkom6no.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5zkom6no.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
