name: HumanEval_136_largest_smallest_integers
language: julia
results:
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmx4k6yk9.jl:1\nin expression starting at /tmp/tmpmx4k6yk9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0 && lst[2] > 0\n            return (nothing, minimum(lst))\n        end\n \
    \   end\n    if length(lst) > 1\n        if lst[1] < 0 && lst[2] < 0\n       \
    \     return (maximum(lst), nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0 && lst[2] < 0\n            return (maximum(lst[2:end]),\
    \ minimum(lst))\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0 && lst[2] > 0\n            return (maximum(lst), minimum(lst[2:end]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgb6ss42x.jl:58\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpgb6ss42x.jl:58 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgb6ss42x.jl:56\\ntest set: Test\
    \ Failed at /tmp/tmpgb6ss42x.jl:59\\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\\n   Evaluated: (nothing, -2) == (-2, 1)\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpgb6ss42x.jl:59 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgb6ss42x.jl:56\\ntest set: Test\
    \ Failed at /tmp/tmpgb6ss42x.jl:60\\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\\n   Evaluated: (nothing, -7) == (-7, 2)\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpgb6ss42x.jl:60 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgb6ss42x.jl:56\\ntest set: Test\
    \ Failed at /tmp/tmpgb6ss42x.jl:61\\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\\n   Evaluated: (nothing, -9) == (-9, 2)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpgb6ss42x.jl:61 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgb6ss42x.jl:56\\ntest set: Test\
    \ Failed at /tmp/tmpgb6ss42x.jl:65\\n  Expression: candidate([-1, -3, -5, -6,\
    \ 0]) == (-1, nothing)\\n   Evaluated: (0, nothing) == (-1, nothing)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpgb6ss42x.jl:65 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgb6ss42x.jl:56\\ntest se"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpgb6ss42x.jl:54\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(x -> x >= 0, lst)\n        return (nothing, minimum(lst))\n\
    \    end\n    if all(x -> x <= 0, lst)\n        return (maximum(lst), nothing)\n\
    \    end\n    return (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbu8gcw9c.jl:30\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpbu8gcw9c.jl:30 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbu8gcw9c.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpbu8gcw9c.jl:35\\n  Expression: candidate([0]) == (nothing,\
    \ nothing)\\n   Evaluated: (nothing, 0) == (nothing, nothing)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpbu8gcw9c.jl:35 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbu8gcw9c.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpbu8gcw9c.jl:37\\n  Expression: candidate([-1, -3, -5, -6,\
    \ 0]) == (-1, nothing)\\n   Evaluated: (0, nothing) == (-1, nothing)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpbu8gcw9c.jl:37 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbu8gcw9c.jl:28\\nTest Summary:\
    \ | Pass  Fail  Total\\ntest set      |    8     3     11\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8uami19.jl:1\nin expression starting at /tmp/tmpd8uami19.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    pos = nothing\n    neg = nothing\n    for i in lst\n\
    \        if i > 0\n            if pos == nothing\n                pos = i\n  \
    \          elseif i < pos\n                pos = i\n            end\n        elseif\
    \ i < 0\n            if neg == nothing\n                neg = i\n            elseif\
    \ i > neg\n                neg = i\n            end\n        end\n    end\n  \
    \  return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \      if lst[1] < 0\n            return (lst[1], nothing)\n        end\n    end\n\
    \    if length(lst) > 1\n        if all(x -> x < 0, lst)\n            return (maximum(lst),\
    \ nothing)\n        end\n        if all(x -> x > 0, lst)\n            return (nothing,\
    \ minimum(lst))\n        end\n        if any(x -> x < 0, lst) && any(x -> x >\
    \ 0, lst)\n            return (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpge21mpmr.jl:47\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Tuple{Union{Nothing, Int64}, Union{Nothing, Int64}}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Tuple at essentials.jl:315\\n  \
    \  convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple\
    \ at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpge21mpmr.jl:37\\n   [2] macro expansion\\n     @ /tmp/tmpge21mpmr.jl:47\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpge21mpmr.jl:45\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj9xh15y.jl:84\nin expression starting at\
    \ /tmp/tmpdj9xh15y.jl:84\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i > 0\n            if b == nothing\n                b = i\n          \
    \  elseif i < b\n                b = i\n            end\n        elseif i < 0\n\
    \            if a == nothing\n                a = i\n            elseif i > a\n\
    \                a = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if all(x -> x >= 0, lst)\n        return (nothing, minimum(lst))\n\
    \    end\n    if all(x -> x <= 0, lst)\n        return (maximum(lst), nothing)\n\
    \    end\n    return (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphx6ohysu.jl:33\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmphx6ohysu.jl:33 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphx6ohysu.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmphx6ohysu.jl:40\\n  Expression: candidate([-1, -3, -5, -6,\
    \ 0]) == (-1, nothing)\\n   Evaluated: (0, nothing) == (-1, nothing)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmphx6ohysu.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphx6ohysu.jl:31\\nTest Summary:\
    \ | Pass  Fail  Total\\ntest set      |    9     2     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3p_efwe.jl:1\nin expression starting at /tmp/tmps3p_efwe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgimxo47p.jl:1\nin expression starting at /tmp/tmpgimxo47p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxsdf1t1t.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpxsdf1t1t.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmpxsdf1t1t.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmpxsdf1t1t.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpxsdf1t1t.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] > 0\n        \
    \    return (nothing, lst[1])\n        elseif lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        else\n            return (nothing, nothing)\n        end\n\
    \    end\n    neg_max = nothing\n    pos_min = nothing\n    for i in lst\n   \
    \     if i > 0\n            if pos_min == nothing\n                pos_min = i\n\
    \            elseif i < pos_min\n                pos_min = i\n            end\n\
    \        elseif i < 0\n            if neg_max == nothing\n                neg_max\
    \ = i\n            elseif i > neg_max\n                neg_max = i\n         \
    \   end\n        end\n    end\n    return (neg_max, pos_min)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    negative_numbers =\
    \ []\n    positive_numbers = []\n    for i in lst\n        if i < 0\n        \
    \    push!(negative_numbers, i)\n        elseif i > 0\n            push!(positive_numbers,\
    \ i)\n        end\n    end\n    if length(negative_numbers) == 0\n        negative_numbers\
    \ = nothing\n    else\n        negative_numbers = maximum(negative_numbers)\n\
    \    end\n    if length(positive_numbers) == 0\n        positive_numbers = nothing\n\
    \    else\n        positive_numbers = minimum(positive_numbers)\n    end\n   \
    \ return (negative_numbers, positive_numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\n    if length(lst) > 1\n        a = lst[1]\n\
    \        b = lst[1]\n        for i in lst\n            if i < 0\n            \
    \    if i > a\n                    a = i\n                end\n            end\n\
    \            if i > 0\n                if i < b\n                    b = i\n \
    \               end\n            end\n        end\n        if a == lst[1]\n  \
    \          a = nothing\n        end\n        if b == lst[1]\n            b = nothing\n\
    \        end\n        return (a, b)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkmg8hj9r.jl:62\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing, nothing) == (-2, 1)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkmg8hj9r.jl:62 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkmg8hj9r.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpkmg8hj9r.jl:63\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, 2) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkmg8hj9r.jl:63 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkmg8hj9r.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpkmg8hj9r.jl:64\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, 2) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpkmg8hj9r.jl:64 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkmg8hj9r.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpkmg8hj9r.jl:67\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkmg8hj9r.jl:67 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkmg8hj9r.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpkmg8hj9r.jl:68\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkmg8hj9r.jl:68 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkmg8hj9r.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpkmg8hj9r.jl:69"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkmg8hj9r.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        return (nothing, nothing)\n    end\n    if length(neg) == 0\n   \
    \     return (nothing, nothing)\n    end\n    return (maximum(neg), minimum(pos))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdlo1djm8.jl:43\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdlo1djm8.jl:43 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdlo1djm8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpdlo1djm8.jl:44\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdlo1djm8.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdlo1djm8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpdlo1djm8.jl:50\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdlo1djm8.jl:50 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdlo1djm8.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpdlo1djm8.jl:51\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdlo1djm8.jl:51 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdlo1djm8.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     4     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdlo1djm8.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpee07blpx.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpee07blpx.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmpee07blpx.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmpee07blpx.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpee07blpx.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] < lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n            end\n \
    \       end\n    end\n    if length(lst) > 1\n        if lst[1] > 0\n        \
    \    if lst[2] < 0\n                return (lst[2], lst[1])\n            end\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] < 0\n       \
    \     if lst[2] < 0\n                if lst[1] > lst[2]\n                    return\
    \ (lst[1], nothing)\n                end\n            end\n        end\n    end\n\
    \    if length(lst) > 1\n        if lst[1] < 0\n            if lst[2] > 0\n  \
    \              return (lst[1], lst[2])\n            end\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] > 0\n            if lst[2] > 0\n  \
    \              if lst[3] > 0\n                    if lst[1] < lst[2]\n       \
    \                 if lst[1] < lst[3]\n                            return (nothing,\
    \ lst[1])\n                        end\n                    end\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] > 0\n            if lst[2] > 0\n                if lst[3] < 0\n\
    \                    return (l\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqg21dw8t.jl:81\nin expression starting at\
    \ /tmp/tmpqg21dw8t.jl:81\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptsyymzw7.jl:1\nin expression starting at /tmp/tmptsyymzw7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = 0\n    b = 0\n\
    \    for i in lst\n        if i < 0\n            if i > a\n                a =\
    \ i\n            end\n        end\n        if i > 0\n            if b == 0\n \
    \               b = i\n            end\n            if i < b\n               \
    \ b = i\n            end\n        end\n    end\n    if a == 0\n        a = nothing\n\
    \    end\n    if b == 0\n        b = nothing\n    end\n    return (a, b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ychsw_v.jl:53\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing, 1) == (-2, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5ychsw_v.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ychsw_v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp5ychsw_v.jl:54\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, 2) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5ychsw_v.jl:54 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ychsw_v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp5ychsw_v.jl:55\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, 2) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5ychsw_v.jl:55 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ychsw_v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp5ychsw_v.jl:58\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5ychsw_v.jl:58 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ychsw_v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp5ychsw_v.jl:59\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5ychsw_v.jl:59 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ychsw_v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp5ychsw_v.jl:60\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ychsw_v.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) >= 2\n        if lst[1] >\
    \ 0 && lst[2] > 0\n            return (nothing, minimum(lst))\n        end\n \
    \   end\n    if length(lst) >= 2\n        if lst[1] < 0 && lst[2] < 0\n      \
    \      return (maximum(lst), nothing)\n        end\n    end\n    if length(lst)\
    \ >= 2\n        if lst[1] < 0 && lst[2] > 0\n            return (maximum(lst),\
    \ minimum(lst))\n        end\n    end\n    if length(lst) >= 2\n        if lst[1]\
    \ > 0 && lst[2] < 0\n            return (maximum(lst), minimum(lst))\n       \
    \ end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6f21n_s2.jl:58\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6f21n_s2.jl:58 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f21n_s2.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp6f21n_s2.jl:59\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6f21n_s2.jl:59 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f21n_s2.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp6f21n_s2.jl:60\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6f21n_s2.jl:60 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f21n_s2.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp6f21n_s2.jl:61\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6f21n_s2.jl:61 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f21n_s2.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp6f21n_s2.jl:65\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6f21n_s2.jl:65 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f21n_s2.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp6f21n_s2.jl:66\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6f21n_s2.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp35avquhn.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\\n \
    \ MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Tuple{Union{Nothing, Int64}, Union{Nothing, Int64}}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Tuple at essentials.jl:315\\n  \
    \  convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple\
    \ at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp35avquhn.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp35avquhn.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp35avquhn.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp35avquhn.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Union{Nothing, Int64},\
    \ Union{Nothing, Int64}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple at essentials.jl:315\\n    convert(::Type{T}, !Matched::Tuple{Vararg{Any,\
    \ N}}) where {N, T<:Tuple} at essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1]\
    \ largest_smallest_integers(lst::Vector{Int64})\\n     @ Main /tmp/tmp35avquhn.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp35avquhn.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp35avquhn.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp35avquhn.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\\n  MethodError: Cannot `convert`\
    \ an object of"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\n    a = nothing\n \
    \   b = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            elseif i > a\n                a = i\n    \
    \        end\n        elseif i > 0\n            if b == nothing\n            \
    \    b = i\n            elseif i < b\n                b = i\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] < lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n            end\n \
    \       end\n    end\n    if length(lst) > 1\n        if lst[1] > 0\n        \
    \    if lst[2] < 0\n                return (lst[2], lst[1])\n            end\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] < 0\n       \
    \     if lst[2] < 0\n                if lst[1] > lst[2]\n                    return\
    \ (lst[1], nothing)\n                end\n            end\n        end\n    end\n\
    \    if length(lst) > 1\n        if lst[1] < 0\n            if lst[2] > 0\n  \
    \              return (lst[1], lst[2])\n            end\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] > 0\n            if lst[2] > 0\n  \
    \              if lst[3] > 0\n                    if lst[1] < lst[2]\n       \
    \                 if lst[1] < lst[3]\n                            return (nothing,\
    \ lst[1])\n                        end\n                    end\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] > 0\n            if lst[2] > 0\n                if lst[3] < 0\n\
    \                    return (l\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8uzm_wz.jl:81\nin expression starting at\
    \ /tmp/tmpv8uzm_wz.jl:81\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0 && lst[2] > 0\n            return (nothing, minimum(lst))\n        end\n \
    \   end\n    if length(lst) > 1\n        if lst[1] < 0 && lst[2] < 0\n       \
    \     return (maximum(lst), nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0 && lst[2] < 0\n            return (maximum(lst[2:end]),\
    \ minimum(lst))\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0 && lst[2] > 0\n            return (maximum(lst), minimum(lst[2:end]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphub3u9_m.jl:58\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphub3u9_m.jl:58 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphub3u9_m.jl:56\ntest set: Test\
    \ Failed at /tmp/tmphub3u9_m.jl:59\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphub3u9_m.jl:59 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphub3u9_m.jl:56\ntest set: Test\
    \ Failed at /tmp/tmphub3u9_m.jl:60\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphub3u9_m.jl:60 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphub3u9_m.jl:56\ntest set: Test\
    \ Failed at /tmp/tmphub3u9_m.jl:61\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphub3u9_m.jl:61 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphub3u9_m.jl:56\ntest set: Test\
    \ Failed at /tmp/tmphub3u9_m.jl:65\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphub3u9_m.jl:65 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphub3u9_m.jl:56\ntest set: Test\
    \ Failed at /tmp/tmphub3u9_m.jl:66\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphub3u9_m.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qj4naw1.jl:1\nin expression starting at /tmp/tmp1qj4naw1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i > 0\n            if b == nothing\n\
    \                b = i\n            elseif i < b\n                b = i\n    \
    \        end\n        elseif i < 0\n            if a == nothing\n            \
    \    a = i\n            elseif i > a\n                a = i\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if all(x -> x < 0,\
    \ lst)\n        return (maximum(lst), nothing)\n    end\n    if all(x -> x > 0,\
    \ lst)\n        return (nothing, minimum(lst))\n    end\n    if any(x -> x < 0,\
    \ lst) && any(x -> x > 0, lst)\n        return (maximum(lst[lst .< 0]), minimum(lst[lst\
    \ .> 0]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmlk2jkco.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Tuple{Union{Nothing, Int64}, Union{Nothing, Int64}}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Tuple at essentials.jl:315\\n  \
    \  convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple\
    \ at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpmlk2jkco.jl:28\\n   [2] macro expansion\\n     @ /tmp/tmpmlk2jkco.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmlk2jkco.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpmlk2jkco.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Union{Nothing, Int64},\
    \ Union{Nothing, Int64}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple at essentials.jl:315\\n    convert(::Type{T}, !Matched::Tuple{Vararg{Any,\
    \ N}}) where {N, T<:Tuple} at essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1]\
    \ largest_smallest_integers(lst::Vector{Int64})\\n     @ Main /tmp/tmpmlk2jkco.jl:28\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmlk2jkco.jl:44 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmlk2jkco.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if length(lst) == 2\n        if lst[1] < 0 && lst[2] > 0\n     \
    \       return (lst[1], lst[2])\n        elseif lst[1] > 0 && lst[2] < 0\n   \
    \         return (lst[2], lst[1])\n        else\n            return (nothing,\
    \ nothing)\n        end\n    end\n    neg_max = nothing\n    pos_min = nothing\n\
    \    for i in lst\n        if i < 0\n            if neg_max == nothing\n     \
    \           neg_max = i\n            elseif i > neg_max\n                neg_max\
    \ = i\n            end\n        elseif i > 0\n            if pos_min == nothing\n\
    \                pos_min = i\n            elseif i < pos_min\n               \
    \ pos_min = i\n            end\n        end\n    end\n    return (neg_max, pos_min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \      if lst[1] < 0\n            return (lst[1], nothing)\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] > 0 && lst[2] > 0\n            return\
    \ (nothing, minimum(lst))\n        end\n        if lst[1] < 0 && lst[2] < 0\n\
    \            return (maximum(lst), nothing)\n        end\n        if lst[1] >\
    \ 0 && lst[2] < 0\n            return (lst[2], lst[1])\n        end\n        if\
    \ lst[1] < 0 && lst[2] > 0\n            return (lst[1], lst[2])\n        end\n\
    \    end\n    if length(lst) > 2\n        if lst[1] > 0 && lst[2] > 0\n      \
    \      return (nothing, minimum(lst))\n        end\n        if lst[1] < 0 && lst[2]\
    \ < 0\n            return (maximum(lst), nothing)\n        end\n        if lst[1]\
    \ > 0 && lst[2] < 0\n            return (lst[2], lst[1])\n        end\n      \
    \  if lst[1] < 0 && lst[2] > 0\n            return (lst[1], lst[2])\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjo6zo39v.jl:64\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjo6zo39v.jl:64 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjo6zo39v.jl:62\ntest set: Test\
    \ Failed at /tmp/tmpjo6zo39v.jl:65\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjo6zo39v.jl:65 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjo6zo39v.jl:62\ntest set: Test\
    \ Failed at /tmp/tmpjo6zo39v.jl:66\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjo6zo39v.jl:66 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjo6zo39v.jl:62\ntest set: Test\
    \ Failed at /tmp/tmpjo6zo39v.jl:67\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpjo6zo39v.jl:67 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjo6zo39v.jl:62\ntest set: Test\
    \ Failed at /tmp/tmpjo6zo39v.jl:71\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjo6zo39v.jl:71 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjo6zo39v.jl:62\ntest set: Test\
    \ Failed at /tmp/tmpjo6zo39v.jl:72\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjo6zo39v.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \      if lst[1] < 0\n            return (lst[1], nothing)\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] > 0\n            if lst[2] > 0\n \
    \               return (nothing, minimum(lst))\n            end\n            if\
    \ lst[2] < 0\n                return (lst[2], lst[1])\n            end\n     \
    \   end\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n            if lst[2] < 0\n             \
    \   return (maximum(lst), nothing)\n            end\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] > 0\n            if lst[2] > 0\n    \
    \            return (nothing, minimum(lst))\n            end\n            if lst[2]\
    \ < 0\n                return (lst[2], minimum(lst))\n            end\n      \
    \  end\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (maximum(lst), lst[2])\n            end\n            if lst[2] < 0\n       \
    \         return (maximum(lst), nothing)\n            end\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8qqmo753.jl:72\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8qqmo753.jl:72 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qqmo753.jl:70\ntest set: Test\
    \ Failed at /tmp/tmp8qqmo753.jl:73\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8qqmo753.jl:73 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qqmo753.jl:70\ntest set: Test\
    \ Failed at /tmp/tmp8qqmo753.jl:74\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8qqmo753.jl:74 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qqmo753.jl:70\ntest set: Test\
    \ Failed at /tmp/tmp8qqmo753.jl:75\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8qqmo753.jl:75 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qqmo753.jl:70\ntest set: Test\
    \ Failed at /tmp/tmp8qqmo753.jl:79\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8qqmo753.jl:79 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qqmo753.jl:70\ntest set: Test\
    \ Failed at /tmp/tmp8qqmo753.jl:80\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qqmo753.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i > 0\n            if b == nothing\n                b = i\n          \
    \  elseif i < b\n                b = i\n            end\n        elseif i < 0\n\
    \            if a == nothing\n                a = i\n            elseif i > a\n\
    \                a = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                return (nothing, minimum(lst))\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0\n            if lst[2] < 0\n                return (maximum(lst), nothing)\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ > 0\n            if lst[2] < 0\n                return (maximum(lst[2:end]),\
    \ minimum(lst))\n            end\n        end\n    end\n    if length(lst) > 1\n\
    \        if lst[1] < 0\n            if lst[2] > 0\n                return (maximum(lst),\
    \ minimum(lst[2:end]))\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgcjfoeyb.jl:66\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgcjfoeyb.jl:66 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcjfoeyb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpgcjfoeyb.jl:67\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgcjfoeyb.jl:67 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcjfoeyb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpgcjfoeyb.jl:68\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgcjfoeyb.jl:68 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcjfoeyb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpgcjfoeyb.jl:69\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgcjfoeyb.jl:69 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcjfoeyb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpgcjfoeyb.jl:73\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgcjfoeyb.jl:73 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgcjfoeyb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpgcjfoeyb.jl:74\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgcjfoeyb.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_max = nothing\n    positive_min\
    \ = nothing\n    for i in lst\n        if i < 0\n            if negative_max ==\
    \ nothing\n                negative_max = i\n            elseif i > negative_max\n\
    \                negative_max = i\n            end\n        elseif i > 0\n   \
    \         if positive_min == nothing\n                positive_min = i\n     \
    \       elseif i < positive_min\n                positive_min = i\n          \
    \  end\n        end\n    end\n    return negative_max, positive_min\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1dtgie87.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp1dtgie87.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmp1dtgie87.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmp1dtgie87.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmp1dtgie87.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx2b3jxtk.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\\n \
    \ MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Tuple{Union{Nothing, Int64}, Union{Nothing, Int64}}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Tuple at essentials.jl:315\\n  \
    \  convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple\
    \ at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpx2b3jxtk.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpx2b3jxtk.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx2b3jxtk.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpx2b3jxtk.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Union{Nothing, Int64},\
    \ Union{Nothing, Int64}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple at essentials.jl:315\\n    convert(::Type{T}, !Matched::Tuple{Vararg{Any,\
    \ N}}) where {N, T<:Tuple} at essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1]\
    \ largest_smallest_integers(lst::Vector{Int64})\\n     @ Main /tmp/tmpx2b3jxtk.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpx2b3jxtk.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx2b3jxtk.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpx2b3jxtk.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\\n  MethodError: Cannot `convert`\
    \ an object of"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if isempty(pos)\n\
    \        pos = nothing\n    else\n        pos = minimum(pos)\n    end\n    if\
    \ isempty(neg)\n        neg = nothing\n    else\n        neg = maximum(neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    neg_max = nothing\n    pos_min = nothing\n    for i in\
    \ lst\n        if i < 0 && (neg_max == nothing || i > neg_max)\n            neg_max\
    \ = i\n        end\n        if i > 0 && (pos_min == nothing || i < pos_min)\n\
    \            pos_min = i\n        end\n    end\n    return (neg_max, pos_min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst = []\n    for\
    \ i in lst\n        if i < 0\n            push!(neg_lst, i)\n        end\n   \
    \     if i > 0\n            push!(pos_lst, i)\n        end\n    end\n    if length(neg_lst)\
    \ == 0\n        neg_lst = nothing\n    end\n    if length(pos_lst) == 0\n    \
    \    pos_lst = nothing\n    end\n    if length(neg_lst) != 0\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) != 0\n        pos_lst =\
    \ minimum(pos_lst)\n    end\n    return (neg_lst, pos_lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsq5e2s48.jl:60\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\\n \
    \ MethodError: no method matching length(::Nothing)\\n  Closest candidates are:\\\
    n    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:58\\\
    n    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:195\\\
    n    length(!Matched::Base.Iterators.Accumulate) at iterators.jl:523\\n    ...\\\
    n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\n     @\
    \ Main /tmp/tmpsq5e2s48.jl:47\\n   [2] macro expansion\\n     @ /tmp/tmpsq5e2s48.jl:60\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsq5e2s48.jl:59\\ntest set:\
    \ Error During Test at /tmp/tmpsq5e2s48.jl:61\\n  Test threw exception\\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  MethodError: no method\
    \ matching length(::Nothing)\\n  Closest candidates are:\\n    length(!Matched::Union{Base.KeySet,\
    \ Base.ValueIterator}) at abstractdict.jl:58\\n    length(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ S}, LinearAlgebra.Transpose{T, S}} where {T, S}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:195\\\
    n    length(!Matched::Base.Iterators.Accumulate) at iterators.jl:523\\n    ...\\\
    n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\n     @\
    \ Main /tmp/tmpsq5e2s48.jl:47\\n   [2] macro expansion\\n     @ /tmp/tmpsq5e2s48.jl:61\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsq5e2s48.jl:59\\ntest set:\
    \ Error During Test at /tmp/tmpsq5e2s48.jl:67\\n  Test threw exception\\n  Expression:\
    \ candidate([-1, -3, -5, -6]) == (-1, nothing)\\n  Me"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfpu0lzp.jl:1\nin expression starting at /tmp/tmpkfpu0lzp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw10z9epe.jl:1\nin expression starting at /tmp/tmpw10z9epe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfy63s2ve.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpfy63s2ve.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmpfy63s2ve.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmpfy63s2ve.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpfy63s2ve.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wezmzj3.jl:1\nin expression starting at /tmp/tmp6wezmzj3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    lst_pos = filter(x\
    \ -> x > 0, lst)\n    lst_neg = filter(x -> x < 0, lst)\n    if length(lst_pos)\
    \ == 0\n        pos = nothing\n    else\n        pos = minimum(lst_pos)\n    end\n\
    \    if length(lst_neg) == 0\n        neg = nothing\n    else\n        neg = maximum(lst_neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        pos = nothing\n    else\n        pos = minimum(pos)\n    end\n  \
    \  if length(neg) == 0\n        neg = nothing\n    else\n        neg = maximum(neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7f8qe5l.jl:1\nin expression starting at /tmp/tmpn7f8qe5l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        pos = nothing\n    else\n        pos = minimum(pos)\n    end\n  \
    \  if length(neg) == 0\n        neg = nothing\n    else\n        neg = maximum(neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpopujs83p.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpopujs83p.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmpopujs83p.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmpopujs83p.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpopujs83p.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5ri4i7r.jl:1\nin expression starting at /tmp/tmpm5ri4i7r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5eyrfc38.jl:52\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, 2) == (nothing, 1)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5eyrfc38.jl:52 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eyrfc38.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp5eyrfc38.jl:53\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, 2) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5eyrfc38.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eyrfc38.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp5eyrfc38.jl:54\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, 1) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5eyrfc38.jl:54 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eyrfc38.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp5eyrfc38.jl:55\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, 4) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5eyrfc38.jl:55 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eyrfc38.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp5eyrfc38.jl:56\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, 7) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5eyrfc38.jl:56 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eyrfc38.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp5eyrfc38.jl:61\n  Expression: can"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5eyrfc38.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing || i < b\n         \
    \       b = i\n            end\n        elseif i < 0\n            if a == nothing\
    \ || i > a\n                a = i\n            end\n        end\n    end\n   \
    \ return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucrrrtqt.jl:1\nin expression starting at /tmp/tmpucrrrtqt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0u1tep7x.jl:1\nin expression starting at /tmp/tmp0u1tep7x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                return (nothing, minimum(lst))\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0\n            if lst[2] < 0\n                return (maximum(lst), nothing)\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ > 0\n            if lst[2] < 0\n                return (maximum(lst[2:end]),\
    \ minimum(lst))\n            end\n        end\n    end\n    if length(lst) > 1\n\
    \        if lst[1] < 0\n            if lst[2] > 0\n                return (maximum(lst),\
    \ minimum(lst[2:end]))\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr3c92bpb.jl:66\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr3c92bpb.jl:66 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3c92bpb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpr3c92bpb.jl:67\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr3c92bpb.jl:67 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3c92bpb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpr3c92bpb.jl:68\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr3c92bpb.jl:68 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3c92bpb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpr3c92bpb.jl:69\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpr3c92bpb.jl:69 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3c92bpb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpr3c92bpb.jl:73\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr3c92bpb.jl:73 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3c92bpb.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpr3c92bpb.jl:74\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr3c92bpb.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdeapllo.jl:1\nin expression starting at /tmp/tmpmdeapllo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpww920i78.jl:1\nin expression starting at /tmp/tmpww920i78.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpme6x0rrm.jl:1\nin expression starting at /tmp/tmpme6x0rrm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if isempty(neg_lst)\n        a = nothing\n    else\n        a = maximum(neg_lst)\n\
    \    end\n    if isempty(pos_lst)\n        b = nothing\n    else\n        b =\
    \ minimum(pos_lst)\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                return (nothing, minimum(lst))\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0\n            if lst[2] < 0\n                return (maximum(lst), nothing)\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ > 0\n            if lst[2] < 0\n                return (maximum(lst[2:end]),\
    \ minimum(lst))\n            end\n        end\n    end\n    if length(lst) > 1\n\
    \        if lst[1] < 0\n            if lst[2] > 0\n                return (maximum(lst),\
    \ minimum(lst[2:end]))\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp71cg7e3c.jl:66\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp71cg7e3c.jl:66 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71cg7e3c.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp71cg7e3c.jl:67\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp71cg7e3c.jl:67 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71cg7e3c.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp71cg7e3c.jl:68\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp71cg7e3c.jl:68 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71cg7e3c.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp71cg7e3c.jl:69\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp71cg7e3c.jl:69 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71cg7e3c.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp71cg7e3c.jl:73\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp71cg7e3c.jl:73 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71cg7e3c.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp71cg7e3c.jl:74\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp71cg7e3c.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdkszncj7.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpdkszncj7.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmpdkszncj7.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmpdkszncj7.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpdkszncj7.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = b = nothing\n    for i in lst\n \
    \       if i < 0\n            if a == nothing || i > a\n                a = i\n\
    \            end\n        elseif i > 0\n            if b == nothing || i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkudm88y1.jl:1\nin expression starting at /tmp/tmpkudm88y1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    positive_lst = []\n\
    \    negative_lst = []\n    for i in lst\n        if i > 0\n            push!(positive_lst,\
    \ i)\n        elseif i < 0\n            push!(negative_lst, i)\n        end\n\
    \    end\n    if length(positive_lst) == 0\n        positive_lst = nothing\n \
    \   else\n        positive_lst = minimum(positive_lst)\n    end\n    if length(negative_lst)\
    \ == 0\n        negative_lst = nothing\n    else\n        negative_lst = maximum(negative_lst)\n\
    \    end\n    return (negative_lst, positive_lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos_lst = []\n    neg_lst\
    \ = []\n    for i in lst\n        if i > 0\n            push!(pos_lst, i)\n  \
    \      elseif i < 0\n            push!(neg_lst, i)\n        end\n    end\n   \
    \ if length(pos_lst) == 0\n        pos_lst = nothing\n    else\n        pos_lst\
    \ = minimum(pos_lst)\n    end\n    if length(neg_lst) == 0\n        neg_lst =\
    \ nothing\n    else\n        neg_lst = maximum(neg_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, minimum(lst))\n        end\n    end\n    if\
    \ length(lst) > 1\n        if lst[1] < 0\n            return (maximum(lst), nothing)\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] == 0\n      \
    \      return (nothing, minimum(lst))\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgpktym85.jl:53\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgpktym85.jl:53 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpktym85.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpgpktym85.jl:54\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgpktym85.jl:54 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpktym85.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpgpktym85.jl:55\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgpktym85.jl:55 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpktym85.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpgpktym85.jl:56\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgpktym85.jl:56 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpktym85.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpgpktym85.jl:60\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgpktym85.jl:60 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpktym85.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpgpktym85.jl:61\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgpktym85.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] > lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n                if\
    \ lst[1] < lst[2]\n                    return (nothing, lst[2])\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 1\n    \
    \    if lst[1] < 0\n            if lst[2] < 0\n                if lst[1] > lst[2]\n\
    \                    return (lst[1], nothing)\n                end\n         \
    \       if lst[1] < lst[2]\n                    return (lst[2], nothing)\n   \
    \             end\n            end\n        end\n    end\n    if length(lst) >\
    \ 1\n        if lst[1] > 0\n            if lst[2] < 0\n                return\
    \ (lst[2], lst[1])\n            end\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] > 0\n            if lst[2] > 0\n                if lst[3]\
    \ > 0\n                    if lst[1] > lst[2]\n                        if lst[1]\
    \ > lst[3]\n                            return (nothing, lst[1])\n           \
    \             end\n                        if l\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujxsxwcz.jl:1\nin expression starting at /tmp/tmpujxsxwcz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        pos_min = nothing\n    else\n        pos_min = minimum(pos)\n   \
    \ end\n    if length(neg) == 0\n        neg_max = nothing\n    else\n        neg_max\
    \ = maximum(neg)\n    end\n    return (neg_max, pos_min)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg = []\n    pos =\
    \ []\n    for i in lst\n        if i < 0\n            push!(neg, i)\n        elseif\
    \ i > 0\n            push!(pos, i)\n        end\n    end\n    if length(neg) ==\
    \ 0\n        a = nothing\n    else\n        a = maximum(neg)\n    end\n    if\
    \ length(pos) == 0\n        b = nothing\n    else\n        b = minimum(pos)\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    positive_lst = []\n\
    \    negative_lst = []\n    for i in lst\n        if i > 0\n            push!(positive_lst,\
    \ i)\n        elseif i < 0\n            push!(negative_lst, i)\n        end\n\
    \    end\n    if length(positive_lst) == 0\n        positive_lst = nothing\n \
    \   else\n        positive_lst = minimum(positive_lst)\n    end\n    if length(negative_lst)\
    \ == 0\n        negative_lst = nothing\n    else\n        negative_lst = maximum(negative_lst)\n\
    \    end\n    return (negative_lst, positive_lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] > lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n                if\
    \ lst[1] < lst[2]\n                    return (nothing, lst[2])\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 1\n    \
    \    if lst[1] < 0\n            if lst[2] < 0\n                if lst[1] > lst[2]\n\
    \                    return (lst[1], nothing)\n                end\n         \
    \       if lst[1] < lst[2]\n                    return (lst[2], nothing)\n   \
    \             end\n            end\n        end\n    end\n    if length(lst) >\
    \ 1\n        if lst[1] > 0\n            if lst[2] < 0\n                return\
    \ (lst[2], lst[1])\n            end\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] > 0\n            if lst[2] > 0\n                if lst[3]\
    \ > 0\n                    if lst[1] > lst[2]\n                        if lst[1]\
    \ > lst[3]\n                            return (nothing, lst[1])\n           \
    \             end\n                        if l\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsg9yf_60.jl:1\nin expression starting at /tmp/tmpsg9yf_60.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4knl5y81.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp4knl5y81.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmp4knl5y81.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmp4knl5y81.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmp4knl5y81.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5l8d16l.jl:1\nin expression starting at /tmp/tmpk5l8d16l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpln768p8w.jl:1\nin expression starting at /tmp/tmpln768p8w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qn96p5s.jl:1\nin expression starting at /tmp/tmp5qn96p5s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = 0\n    b = 0\n\
    \    for i in lst\n        if i > 0\n            if b == 0\n                b\
    \ = i\n            elseif i < b\n                b = i\n            end\n    \
    \    elseif i < 0\n            if a == 0\n                a = i\n            elseif\
    \ i > a\n                a = i\n            end\n        end\n    end\n    if\
    \ a == 0\n        a = nothing\n    end\n    if b == 0\n        b = nothing\n \
    \   end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0 && lst[2] > 0\n            return (nothing, minimum(lst))\n        end\n \
    \   end\n    if length(lst) > 1\n        if lst[1] < 0 && lst[2] < 0\n       \
    \     return (maximum(lst), nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0 && lst[2] < 0\n            return (maximum(lst[2:end]),\
    \ minimum(lst))\n        end\n    end\n    if length(lst) > 1\n        if lst[1]\
    \ < 0 && lst[2] > 0\n            return (maximum(lst), minimum(lst[2:end]))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_kz73k55.jl:58\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_kz73k55.jl:58 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kz73k55.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp_kz73k55.jl:59\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_kz73k55.jl:59 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kz73k55.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp_kz73k55.jl:60\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_kz73k55.jl:60 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kz73k55.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp_kz73k55.jl:61\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_kz73k55.jl:61 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kz73k55.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp_kz73k55.jl:65\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_kz73k55.jl:65 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kz73k55.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp_kz73k55.jl:66\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_kz73k55.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] ==\
    \ 0\n            return (nothing, nothing)\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] > 0\n            return (nothing\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa69vhx6f.jl:84\nin expression starting at\
    \ /tmp/tmpa69vhx6f.jl:84\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && (a == nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    pos = []\n    neg =\
    \ []\n    for i in lst\n        if i > 0\n            push!(pos, i)\n        elseif\
    \ i < 0\n            push!(neg, i)\n        end\n    end\n    if length(pos) ==\
    \ 0\n        pos = nothing\n    else\n        pos = minimum(pos)\n    end\n  \
    \  if length(neg) == 0\n        neg = nothing\n    else\n        neg = maximum(neg)\n\
    \    end\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3u1orybw.jl:1\nin expression starting at /tmp/tmp3u1orybw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(x -> x >= 0, lst)\n        return (nothing, minimum(lst))\n\
    \    end\n    if all(x -> x <= 0, lst)\n        return (maximum(lst), nothing)\n\
    \    end\n    return (maximum(filter(x -> x < 0, lst)), minimum(filter(x -> x\
    \ > 0, lst)))\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpejdfrozx.jl:30\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpejdfrozx.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpejdfrozx.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpejdfrozx.jl:35\n  Expression: candidate([0]) == (nothing,\
    \ nothing)\n   Evaluated: (nothing, 0) == (nothing, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpejdfrozx.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpejdfrozx.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpejdfrozx.jl:37\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpejdfrozx.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpejdfrozx.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     3     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejdfrozx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        else\n      \
    \      if b == nothing\n                b = i\n            else\n            \
    \    if i < b\n                    b = i\n                end\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ick2jia.jl:50\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ick2jia.jl:50 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ick2jia.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp9ick2jia.jl:57\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (-1, 0) == (-1, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9ick2jia.jl:57 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ick2jia.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ick2jia.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            if lst[2] > 0\n                if lst[1] > lst[2]\n         \
    \           return (nothing, lst[1])\n                end\n                if\
    \ lst[1] < lst[2]\n                    return (nothing, lst[2])\n            \
    \    end\n            end\n        end\n    end\n    if length(lst) > 1\n    \
    \    if lst[1] < 0\n            if lst[2] < 0\n                if lst[1] > lst[2]\n\
    \                    return (lst[1], nothing)\n                end\n         \
    \       if lst[1] < lst[2]\n                    return (lst[2], nothing)\n   \
    \             end\n            end\n        end\n    end\n    if length(lst) >\
    \ 1\n        if lst[1] > 0\n            if lst[2] < 0\n                return\
    \ (lst[2], lst[1])\n            end\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            if lst[2] > 0\n                return\
    \ (lst[1], lst[2])\n            end\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] > 0\n            if lst[2] > 0\n                if lst[3]\
    \ > 0\n                    if lst[1] > lst[2]\n                        if lst[1]\
    \ > lst[3]\n                            return (nothing, lst[1])\n           \
    \             end\n                        if l\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4qcayk6.jl:1\nin expression starting at /tmp/tmpq4qcayk6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if all(lst .> 0)\n\
    \        return (nothing, minimum(lst))\n    end\n    if all(lst .< 0)\n     \
    \   return (maximum(lst), nothing)\n    end\n    return (maximum(lst[lst .< 0]),\
    \ minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2prsjbb4.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp2prsjbb4.jl:27\\n   [18] macro expansion\\n      @ /tmp/tmp2prsjbb4.jl:35\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmp2prsjbb4.jl:33\\ntest\
    \ set: Error During Test at /tmp/tmp2prsjbb4.jl:42\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        else\n      \
    \      if b == nothing\n                b = i\n            else\n            \
    \    if i < b\n                    b = i\n                end\n            end\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpubmksbv2.jl:50\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpubmksbv2.jl:50 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubmksbv2.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpubmksbv2.jl:57\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (-1, 0) == (-1, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpubmksbv2.jl:57 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubmksbv2.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpubmksbv2.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqbnkh9s.jl:1\nin expression starting at /tmp/tmpgqbnkh9s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppqte3cge.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\\n \
    \ MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Tuple{Union{Nothing, Int64}, Union{Nothing, Int64}}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Tuple at essentials.jl:315\\n  \
    \  convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple\
    \ at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmppqte3cge.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmppqte3cge.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppqte3cge.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmppqte3cge.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Union{Nothing, Int64},\
    \ Union{Nothing, Int64}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple at essentials.jl:315\\n    convert(::Type{T}, !Matched::Tuple{Vararg{Any,\
    \ N}}) where {N, T<:Tuple} at essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex)\
    \ where T<:Tuple at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1]\
    \ largest_smallest_integers(lst::Vector{Int64})\\n     @ Main /tmp/tmppqte3cge.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmppqte3cge.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppqte3cge.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmppqte3cge.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\\n  MethodError: Cannot `convert`\
    \ an object of"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgse1yqmd.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpgse1yqmd.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmpgse1yqmd.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmpgse1yqmd.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpgse1yqmd.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_max = nothing\n\
    \    pos_min = nothing\n    for i in lst\n        if i < 0\n            if neg_max\
    \ == nothing\n                neg_max = i\n            else\n                if\
    \ i > neg_max\n                    neg_max = i\n                end\n        \
    \    end\n        end\n        if i > 0\n            if pos_min == nothing\n \
    \               pos_min = i\n            else\n                if i < pos_min\n\
    \                    pos_min = i\n                end\n            end\n     \
    \   end\n    end\n    return (neg_max, pos_min)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    max_neg = nothing\n\
    \    min_pos = nothing\n    for i in lst\n        if i < 0\n            if max_neg\
    \ == nothing\n                max_neg = i\n            else\n                if\
    \ i > max_neg\n                    max_neg = i\n                end\n        \
    \    end\n        end\n        if i > 0\n            if min_pos == nothing\n \
    \               min_pos = i\n            else\n                if i < min_pos\n\
    \                    min_pos = i\n                end\n            end\n     \
    \   end\n    end\n    return (max_neg, min_pos)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, minimum(lst))\n        end\n    end\n    if\
    \ length(lst) > 1\n        if lst[1] < 0\n            return (maximum(lst), nothing)\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] == 0\n      \
    \      return (nothing, minimum(lst))\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz0fjb0m2.jl:53\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz0fjb0m2.jl:53 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0fjb0m2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpz0fjb0m2.jl:54\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpz0fjb0m2.jl:54 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0fjb0m2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpz0fjb0m2.jl:55\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpz0fjb0m2.jl:55 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0fjb0m2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpz0fjb0m2.jl:56\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz0fjb0m2.jl:56 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0fjb0m2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpz0fjb0m2.jl:60\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpz0fjb0m2.jl:60 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0fjb0m2.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpz0fjb0m2.jl:61\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0fjb0m2.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, minimum(lst))\n        end\n    end\n    if\
    \ length(lst) > 1\n        if lst[1] < 0\n            return (maximum(lst), nothing)\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] == 0\n      \
    \      return (nothing, minimum(lst))\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyphdeu09.jl:53\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyphdeu09.jl:53 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyphdeu09.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpyphdeu09.jl:54\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyphdeu09.jl:54 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyphdeu09.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpyphdeu09.jl:55\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyphdeu09.jl:55 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyphdeu09.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpyphdeu09.jl:56\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpyphdeu09.jl:56 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyphdeu09.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpyphdeu09.jl:60\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyphdeu09.jl:60 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyphdeu09.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpyphdeu09.jl:61\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyphdeu09.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfakl7rjr.jl:1\nin expression starting at /tmp/tmpfakl7rjr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i > 0\n            if b == nothing\n                b = i\n          \
    \  elseif i < b\n                b = i\n            end\n        elseif i < 0\n\
    \            if a == nothing\n                a = i\n            elseif i > a\n\
    \                a = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        return (nothing, nothing)\n\
    \    end\n    if all(x -> x > 0, lst)\n        return (nothing, minimum(lst))\n\
    \    end\n    if all(x -> x < 0, lst)\n        return (maximum(lst), nothing)\n\
    \    end\n    return (maximum(filter(x -> x < 0, lst)), minimum(filter(x -> x\
    \ > 0, lst)))\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbnpwzg4m.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:343\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:329\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:355 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:351\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:400 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:318 [inlined]\n    [9] #mapreduce#678\n      @ ./reducedim.jl:310\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:310 [inlined]\n   [11]\
    \ #_maximum#696\n      @ ./reducedim.jl:878 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:878 [inlined]\n   [13] #_maximum#695\n      @ ./reducedim.jl:877\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:877 [inlined]\n   [15] #maximum#693\n\
    \      @ ./reducedim.jl:873 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:873\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpbnpwzg4m.jl:25\n   [18] macro expansion\n      @ /tmp/tmpbnpwzg4m.jl:33\
    \ [inlined]\n   [19] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmpbnpwzg4m.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbnpwzg4m.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\n  ArgumentError: reducing over\
    \ an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./re"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbnpwzg4m.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    min_pos = nothing\n\
    \    max_neg = nothing\n    for i in lst\n        if i > 0\n            if min_pos\
    \ == nothing\n                min_pos = i\n            else\n                if\
    \ i < min_pos\n                    min_pos = i\n                end\n        \
    \    end\n        else\n            if max_neg == nothing\n                max_neg\
    \ = i\n            else\n                if i > max_neg\n                    max_neg\
    \ = i\n                end\n            end\n        end\n    end\n    return\
    \ (max_neg, min_pos)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpegioqic6.jl:50\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (0, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpegioqic6.jl:50 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegioqic6.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpegioqic6.jl:57\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpegioqic6.jl:57 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegioqic6.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpegioqic6.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if all(x ->\
    \ x > 0, lst)\n            return (nothing, minimum(lst))\n        end\n    end\n\
    \    if length(lst) > 1\n        if all(x -> x < 0, lst)\n            return (maximum(lst),\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if any(x ->\
    \ x < 0, lst) && any(x -> x > 0, lst)\n            return (maximum(lst[lst .<\
    \ 0]), minimum(lst[lst .> 0]))\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4on1wvi5.jl:53\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Tuple{Union{Nothing, Int64}, Union{Nothing, Int64}}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Tuple at essentials.jl:315\\n  \
    \  convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ essentials.jl:316\\n    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple\
    \ at multidimensional.jl:137\\n    ...\\n  Stacktrace:\\n   [1] largest_smallest_integers(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp4on1wvi5.jl:43\\n   [2] macro expansion\\n     @ /tmp/tmp4on1wvi5.jl:53\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4on1wvi5.jl:51\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    positive_lst = filter(x -> x > 0, lst)\n    negative_lst\
    \ = filter(x -> x < 0, lst)\n    if length(positive_lst) == 0\n        return\
    \ (maximum(negative_lst), nothing)\n    elseif length(negative_lst) == 0\n   \
    \     return (nothing, minimum(positive_lst))\n    else\n        return (maximum(negative_lst),\
    \ minimum(positive_lst))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp395to8h4.jl:37\n  Test threw exception\n\
    \  Expression: candidate([0]) == (nothing, nothing)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:343\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:329\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:355 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:351\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:400 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:318 [inlined]\n    [9] #mapreduce#678\n      @ ./reducedim.jl:310\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:310 [inlined]\n   [11]\
    \ #_maximum#696\n      @ ./reducedim.jl:878 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:878 [inlined]\n   [13] #_maximum#695\n      @ ./reducedim.jl:877\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:877 [inlined]\n   [15] #maximum#693\n\
    \      @ ./reducedim.jl:873 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:873\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmp395to8h4.jl:19\n   [18] macro expansion\n      @ /tmp/tmp395to8h4.jl:37\
    \ [inlined]\n   [19] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmp395to8h4.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   10      1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp395to8h4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        a = 0\n    \
    \    b = 0\n        for i in lst\n            if i < 0\n                if i >\
    \ a\n                    a = i\n                end\n            end\n       \
    \     if i > 0\n                if i < b\n                    b = i\n        \
    \        end\n            end\n        end\n        if a == 0\n            a =\
    \ nothing\n        end\n        if b == 0\n            b = nothing\n        end\n\
    \        return (a, b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzxjmoied.jl:60\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxjmoied.jl:60 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxjmoied.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpzxjmoied.jl:61\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzxjmoied.jl:61 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxjmoied.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpzxjmoied.jl:62\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, nothing) == (-2, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzxjmoied.jl:62 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxjmoied.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpzxjmoied.jl:63\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, nothing) == (-7, 2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzxjmoied.jl:63 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxjmoied.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpzxjmoied.jl:64\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, nothing) == (-9, 2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzxjmoied.jl:64 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxjmoied.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpzx"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxjmoied.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, minimum(lst))\n        end\n    end\n    if\
    \ length(lst) > 1\n        if lst[1] < 0\n            return (maximum(lst), nothing)\n\
    \        end\n    end\n    if length(lst) > 1\n        if lst[1] == 0\n      \
    \      return (nothing, minimum(lst))\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr7z42s8p.jl:53\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr7z42s8p.jl:53 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7z42s8p.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpr7z42s8p.jl:54\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr7z42s8p.jl:54 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7z42s8p.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpr7z42s8p.jl:55\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr7z42s8p.jl:55 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7z42s8p.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpr7z42s8p.jl:56\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, -9) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpr7z42s8p.jl:56 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7z42s8p.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpr7z42s8p.jl:60\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (0, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr7z42s8p.jl:60 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7z42s8p.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpr7z42s8p.jl:61\n  Expressio"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr7z42s8p.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    if all(lst .> 0)\n        return (nothing, minimum(lst))\n    end\n\
    \    if all(lst .< 0)\n        return (maximum(lst), nothing)\n    end\n    return\
    \ (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx76yeaad.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:299\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:309\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:343\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:329\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:355 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:351\\n    [7] _mapreduce\\n      @ ./reduce.jl:400 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:318 [inlined]\\n    [9] #mapreduce#678\\\
    n      @ ./reducedim.jl:310 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:310\
    \ [inlined]\\n   [11] #_maximum#696\\n      @ ./reducedim.jl:878 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:878 [inlined]\\n   [13] #_maximum#695\\\
    n      @ ./reducedim.jl:877 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:877\
    \ [inlined]\\n   [15] #maximum#693\\n      @ ./reducedim.jl:873 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:873 [inlined]\\n   [17] largest_smallest_integers(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpx76yeaad.jl:25\\n   [18] macro expansion\\n      @ /tmp/tmpx76yeaad.jl:33\
    \ [inlined]\\n   [19] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmpx76yeaad.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpx76yeaad.jl:40\\n  Test threw exception\\\
    n  Expression: candidate([-1, -3, -5, -6, 0]) == (-1, nothing)\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:299\\n    [2] reduce_empty("
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpciutqaoy.jl:1\nin expression starting at /tmp/tmpciutqaoy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_max = nothing\n\
    \    pos_min = nothing\n    for i in lst\n        if i < 0\n            if neg_max\
    \ == nothing\n                neg_max = i\n            else\n                if\
    \ i > neg_max\n                    neg_max = i\n                end\n        \
    \    end\n        else\n            if pos_min == nothing\n                pos_min\
    \ = i\n            else\n                if i < pos_min\n                    pos_min\
    \ = i\n                end\n            end\n        end\n    end\n    return\
    \ (neg_max, pos_min)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcj8y_hj6.jl:50\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcj8y_hj6.jl:50 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcj8y_hj6.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpcj8y_hj6.jl:57\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (-1, 0) == (-1, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpcj8y_hj6.jl:57 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcj8y_hj6.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcj8y_hj6.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7196vvzc.jl:1\nin expression starting at /tmp/tmp7196vvzc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeypz7t21.jl:1\nin expression starting at /tmp/tmpeypz7t21.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    neg_lst = []\n    pos_lst\
    \ = []\n    for i in lst\n        if i < 0\n            push!(neg_lst, i)\n  \
    \      elseif i > 0\n            push!(pos_lst, i)\n        end\n    end\n   \
    \ if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n        neg_lst\
    \ = maximum(neg_lst)\n    end\n    if length(pos_lst) == 0\n        pos_lst =\
    \ nothing\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0 && a == nothing\n            a = i\n        elseif\
    \ i < 0 && i > a\n            a = i\n        elseif i > 0 && b == nothing\n  \
    \          b = i\n        elseif i > 0 && i < b\n            b = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0\n            if a == nothing\n                a = i\n          \
    \  elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if b == nothing\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i < 0\n            if a == nothing\n                a =\
    \ i\n            elseif i > a\n                a = i\n            end\n      \
    \  elseif i > 0\n            if b == nothing\n                b = i\n        \
    \    elseif i < b\n                b = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0\n            if a == nothing\n\
    \                a = i\n            else\n                if i > a\n         \
    \           a = i\n                end\n            end\n        end\n       \
    \ if i > 0\n            if b == nothing\n                b = i\n            else\n\
    \                if i < b\n                    b = i\n                end\n  \
    \          end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0 && (a == nothing || i > a)\n \
    \           a = i\n        end\n        if i > 0 && (b == nothing || i < b)\n\
    \            b = i\n        end\n    end\n    return (a, b)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\n    if length(lst) > 1\n        if lst[1] < 0\n\
    \            a = lst[1]\n        else\n            a = nothing\n        end\n\
    \        if lst[1] > 0\n            b = lst[1]\n        else\n            b =\
    \ nothing\n        end\n        for i in 2:length(lst)\n            if lst[i]\
    \ < 0\n                if a == nothing\n                    a = lst[i]\n     \
    \           else\n                    if lst[i] > a\n                        a\
    \ = lst[i]\n                    end\n                end\n            end\n  \
    \          if lst[i] > 0\n                if b == nothing\n                  \
    \  b = lst[i]\n                else\n                    if lst[i] < b\n     \
    \                   b = lst[i]\n                    end\n                end\n\
    \            end\n        end\n        return (a, b)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] > 0\n            return (nothing, lst[1])\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] < 0\n            return (lst[1],\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n\
    \    end\n    if length(lst) > 1\n        if lst[1] == 0\n            return (nothing,\
    \ nothing)\n        end\n    end\n    if length(lst) > 1\n        if lst[1] >\
    \ 0\n            return (nothing, lst[1])\n        end\n    end\n    if length(lst)\
    \ > 1\n        if lst[1] < 0\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgbmwdf4.jl:1\nin expression starting at /tmp/tmpdgbmwdf4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
