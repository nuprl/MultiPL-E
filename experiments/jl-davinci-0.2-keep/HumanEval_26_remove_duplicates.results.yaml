name: HumanEval_26_remove_duplicates
language: julia
results:
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsl9l5f1z.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsl9l5f1z.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsl9l5f1z.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsl9l5f1z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzdgc5wg4.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzdgc5wg4.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdgc5wg4.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzdgc5wg4.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmponyxarjd.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmponyxarjd.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmponyxarjd.jl:17\ntest set: Test\
    \ Failed at /tmp/tmponyxarjd.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmponyxarjd.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmponyxarjd.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponyxarjd.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2b3orwp2.jl:14\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmp2b3orwp2.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmp2b3orwp2.jl:14\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2b3orwp2.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmp2b3orwp2.jl:15\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmp2b3orwp2.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmp2b3orwp2.jl:15\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2b3orwp2.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmp2b3orwp2.jl:16\\n  Test threw exception\\n "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3qn5z5_m.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3qn5z5_m.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qn5z5_m.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qn5z5_m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return [number for number in numbers\
    \ if number in unique_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpppc5gl8g.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpppc5gl8g.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpppc5gl8g.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpppc5gl8g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprxbo1oio.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprxbo1oio.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprxbo1oio.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprxbo1oio.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpue341weg.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpue341weg.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpue341weg.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpue341weg.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgoz9y8u6.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgoz9y8u6.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgoz9y8u6.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgoz9y8u6.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgoz9y8u6.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgoz9y8u6.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgoz9y8u6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6gfj2hax.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6gfj2hax.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6gfj2hax.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6gfj2hax.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if number in unique_numbers\n            continue\n    \
    \    end\n        push!(unique_numbers_list, number)\n        push!(unique_numbers,\
    \ number)\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1igf3van.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1igf3van.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1igf3van.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1igf3van.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3pc7hcf.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpa3pc7hcf.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3pc7hcf.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3pc7hcf.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6xu1bve6.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6xu1bve6.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xu1bve6.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp6xu1bve6.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6xu1bve6.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xu1bve6.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xu1bve6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphwk46gim.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphwk46gim.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphwk46gim.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwk46gim.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphbfnvb2x.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphbfnvb2x.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbfnvb2x.jl:17\ntest set: Test\
    \ Failed at /tmp/tmphbfnvb2x.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphbfnvb2x.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbfnvb2x.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbfnvb2x.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjkzzkmi2.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjkzzkmi2.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjkzzkmi2.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpjkzzkmi2.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjkzzkmi2.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjkzzkmi2.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjkzzkmi2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7u0yxoj1.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7u0yxoj1.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7u0yxoj1.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp7u0yxoj1.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7u0yxoj1.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7u0yxoj1.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7u0yxoj1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyvsu5sth.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpyvsu5sth.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyvsu5sth.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvsu5sth.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    result = Vector{Int64}()\n    for n in numbers\n   \
    \     if n in seen\n            continue\n        end\n        push!(result, n)\n\
    \        push!(seen, n)\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps8ktu4yk.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps8ktu4yk.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8ktu4yk.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8ktu4yk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    result = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(result, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw8p2yxjv.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpw8p2yxjv.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8p2yxjv.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8p2yxjv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpftu5_ugr.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpftu5_ugr.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftu5_ugr.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpftu5_ugr.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    return [1, 3, 4]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpamjwcnpc.jl:15\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [1, 3, 4] == Int64[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpamjwcnpc.jl:15 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamjwcnpc.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpamjwcnpc.jl:16\n  Expression: candidate([1, 2, 3, 4]) == [1,\
    \ 2, 3, 4]\n   Evaluated: [1, 3, 4] == [1, 2, 3, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpamjwcnpc.jl:16 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamjwcnpc.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpamjwcnpc.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [1, 3, 4] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpamjwcnpc.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamjwcnpc.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamjwcnpc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt28vp6vu.jl:14\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmpt28vp6vu.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmpt28vp6vu.jl:14\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt28vp6vu.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmpt28vp6vu.jl:15\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmpt28vp6vu.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmpt28vp6vu.jl:15\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt28vp6vu.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmpt28vp6vu.jl:16\\n  Test threw exception\\n "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9a3jpsta.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9a3jpsta.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9a3jpsta.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp9a3jpsta.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9a3jpsta.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9a3jpsta.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9a3jpsta.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpboyrxltx.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpboyrxltx.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpboyrxltx.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpboyrxltx.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpboyrxltx.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpboyrxltx.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpboyrxltx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    result = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(result, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5t4xu1t.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpr5t4xu1t.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5t4xu1t.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5t4xu1t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxxzg0_1i.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxxzg0_1i.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxzg0_1i.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxzg0_1i.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2w8i50b5.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2w8i50b5.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2w8i50b5.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2w8i50b5.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd99sibqy.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpd99sibqy.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd99sibqy.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd99sibqy.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = []\n    for n in numbers\n        if n in seen\n\
    \            continue\n        end\n        push!(unique, n)\n        push!(seen,\
    \ n)\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc0uqd73c.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc0uqd73c.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc0uqd73c.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc0uqd73c.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphp9ub42i.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphp9ub42i.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphp9ub42i.jl:17\ntest set: Test\
    \ Failed at /tmp/tmphp9ub42i.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphp9ub42i.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphp9ub42i.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphp9ub42i.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6uj0tycc.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6uj0tycc.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6uj0tycc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6uj0tycc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return [x for x in numbers if x in\
    \ unique_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ds0inwi.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0ds0inwi.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ds0inwi.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ds0inwi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0b5ucnjm.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0b5ucnjm.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0b5ucnjm.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp0b5ucnjm.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0b5ucnjm.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0b5ucnjm.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0b5ucnjm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyc0epmpj.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyc0epmpj.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyc0epmpj.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpyc0epmpj.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyc0epmpj.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyc0epmpj.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyc0epmpj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    unique = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(unique, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpekgog142.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpekgog142.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpekgog142.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpekgog142.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjpqe68y2.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjpqe68y2.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjpqe68y2.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjpqe68y2.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    result = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(result, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4oyy00os.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4oyy00os.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oyy00os.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4oyy00os.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    unique = Vector{Int64}()\n    for n in numbers\n\
    \        if n in seen\n            continue\n        end\n        push!(unique,\
    \ n)\n        push!(seen, n)\n    end\n    return unique\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3azsx4ll.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3azsx4ll.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3azsx4ll.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3azsx4ll.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for n in numbers\n   \
    \     if !(n in seen)\n            push!(unique, n)\n            push!(seen, n)\n\
    \        end\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4rv0s9qy.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4rv0s9qy.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4rv0s9qy.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4rv0s9qy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9o_9ffsl.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9o_9ffsl.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9o_9ffsl.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9o_9ffsl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaox34b5l.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpaox34b5l.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaox34b5l.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpaox34b5l.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaox34b5l.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaox34b5l.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaox34b5l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return [x for x in numbers if x in\
    \ unique_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpak_0qo7_.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpak_0qo7_.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpak_0qo7_.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpak_0qo7_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnh9c9yxl.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnh9c9yxl.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnh9c9yxl.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpnh9c9yxl.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnh9c9yxl.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnh9c9yxl.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnh9c9yxl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ucfcnfv.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8ucfcnfv.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ucfcnfv.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ucfcnfv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm99hhziy.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpm99hhziy.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm99hhziy.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm99hhziy.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplei1w_yb.jl:14\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmplei1w_yb.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmplei1w_yb.jl:14\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplei1w_yb.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmplei1w_yb.jl:15\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmplei1w_yb.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmplei1w_yb.jl:15\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplei1w_yb.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmplei1w_yb.jl:16\\n  Test threw exception\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdkim1_jq.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdkim1_jq.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdkim1_jq.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpdkim1_jq.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdkim1_jq.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdkim1_jq.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdkim1_jq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwl4dw8j.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfwl4dw8j.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwl4dw8j.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpfwl4dw8j.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfwl4dw8j.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwl4dw8j.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwl4dw8j.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6esqq2vi.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6esqq2vi.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6esqq2vi.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp6esqq2vi.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6esqq2vi.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6esqq2vi.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6esqq2vi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv8o_nuwc.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv8o_nuwc.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8o_nuwc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpv8o_nuwc.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv8o_nuwc.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8o_nuwc.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv8o_nuwc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp45s3nwqp.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp45s3nwqp.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45s3nwqp.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45s3nwqp.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    unique_numbers\
    \ = []\n    for i in numbers\n        if !(i in unique_numbers)\n            push!(unique_numbers,\
    \ i)\n        end\n    end\n    return unique_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_kj7myt3.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_kj7myt3.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kj7myt3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_kj7myt3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpucz2dhp7.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpucz2dhp7.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpucz2dhp7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpucz2dhp7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    unique = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(unique, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn1mnqwz0.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpn1mnqwz0.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn1mnqwz0.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn1mnqwz0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppy24gi89.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppy24gi89.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppy24gi89.jl:17\ntest set: Test\
    \ Failed at /tmp/tmppy24gi89.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppy24gi89.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppy24gi89.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppy24gi89.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp15ue0s2q.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp15ue0s2q.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15ue0s2q.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15ue0s2q.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpho_02rqi.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpho_02rqi.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpho_02rqi.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpho_02rqi.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpho_02rqi.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpho_02rqi.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpho_02rqi.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return collect(unique_numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsrnnnbip.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsrnnnbip.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrnnnbip.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpsrnnnbip.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsrnnnbip.jl:17 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrnnnbip.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrnnnbip.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp57tmbafp.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp57tmbafp.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57tmbafp.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp57tmbafp.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp57tmbafp.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57tmbafp.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57tmbafp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb0zfm1kk.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb0zfm1kk.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0zfm1kk.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpb0zfm1kk.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb0zfm1kk.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0zfm1kk.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0zfm1kk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xbx5yft.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4xbx5yft.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xbx5yft.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp4xbx5yft.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4xbx5yft.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xbx5yft.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xbx5yft.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwvj6zbqy.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwvj6zbqy.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwvj6zbqy.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvj6zbqy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6lz4_2c1.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6lz4_2c1.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6lz4_2c1.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp6lz4_2c1.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6lz4_2c1.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6lz4_2c1.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6lz4_2c1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return [x for x in numbers if x in\
    \ unique_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv4qaok7s.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv4qaok7s.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4qaok7s.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4qaok7s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvd3qpzd8.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvd3qpzd8.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvd3qpzd8.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpvd3qpzd8.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvd3qpzd8.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvd3qpzd8.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvd3qpzd8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8hzielbr.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8hzielbr.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hzielbr.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp8hzielbr.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8hzielbr.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hzielbr.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hzielbr.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp08x_p7ud.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp08x_p7ud.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08x_p7ud.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08x_p7ud.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcpxqj9nc.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcpxqj9nc.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcpxqj9nc.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpcpxqj9nc.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcpxqj9nc.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcpxqj9nc.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcpxqj9nc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4qstgzs6.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4qstgzs6.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4qstgzs6.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4qstgzs6.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    unique_numbers = Set(numbers)\n    return collect(unique_numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi3gngrh3.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi3gngrh3.jl:17 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3gngrh3.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpi3gngrh3.jl:18\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi3gngrh3.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3gngrh3.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi3gngrh3.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0pwo3j04.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0pwo3j04.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0pwo3j04.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp0pwo3j04.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0pwo3j04.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0pwo3j04.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0pwo3j04.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbisoj_tu.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbisoj_tu.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbisoj_tu.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbisoj_tu.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp625xwddq.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp625xwddq.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp625xwddq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp625xwddq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm3mzh834.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm3mzh834.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm3mzh834.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpm3mzh834.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm3mzh834.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm3mzh834.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm3mzh834.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3na9n9rn.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3na9n9rn.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3na9n9rn.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp3na9n9rn.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3na9n9rn.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3na9n9rn.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3na9n9rn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5fby8nx.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpl5fby8nx.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5fby8nx.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5fby8nx.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxv2uizxf.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxv2uizxf.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxv2uizxf.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpxv2uizxf.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxv2uizxf.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxv2uizxf.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxv2uizxf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjqvu0ivk.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjqvu0ivk.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjqvu0ivk.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjqvu0ivk.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Create a dictionary to store the number of times each number appears\n\
    \    # in the input vector.\n    num_counts = Dict{Int64, Int64}()\n    for num\
    \ in numbers\n        if haskey(num_counts, num)\n            num_counts[num]\
    \ += 1\n        else\n            num_counts[num] = 1\n        end\n    end\n\
    \    \n    # Create a new vector to store the numbers that only appear once.\n\
    \    unique_numbers = Vector{Int64}()\n    for num in numbers\n        if num_counts[num]\
    \ == 1\n            push!(unique_numbers, num)\n        end\n    end\n    \n \
    \   return unique_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa9dr9frb.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa9dr9frb.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa9dr9frb.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpa9dr9frb.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpa9dr9frb.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa9dr9frb.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9dr9frb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphv1xmccu.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphv1xmccu.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv1xmccu.jl:14\ntest set: Test\
    \ Failed at /tmp/tmphv1xmccu.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphv1xmccu.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv1xmccu.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphv1xmccu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    return [numbers[i] for i in 1:length(numbers) if\
    \ count(x -> x == numbers[i], numbers) == 1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # create a dictionary with the number of times each number appears\n \
    \   counts = Dict{Int64, Int64}()\n    for n in numbers\n        if haskey(counts,\
    \ n)\n            counts[n] += 1\n        else\n            counts[n] = 1\n  \
    \      end\n    end\n    \n    # create a new vector with the numbers that appear\
    \ only once\n    unique_numbers = Vector{Int64}()\n    for n in numbers\n    \
    \    if counts[n] == 1\n            push!(unique_numbers, n)\n        end\n  \
    \  end\n    \n    return unique_numbers\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp69tprx8.jl:14\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmpp69tprx8.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmpp69tprx8.jl:14\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp69tprx8.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmpp69tprx8.jl:15\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmpp69tprx8.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmpp69tprx8.jl:15\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp69tprx8.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmpp69tprx8.jl:16\\n  Test threw exception\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph1cofykn.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph1cofykn.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph1cofykn.jl:17\ntest set: Test\
    \ Failed at /tmp/tmph1cofykn.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph1cofykn.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph1cofykn.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph1cofykn.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9h4ya1cc.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9h4ya1cc.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9h4ya1cc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp9h4ya1cc.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9h4ya1cc.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9h4ya1cc.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9h4ya1cc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg0j_9zdy.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpg0j_9zdy.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg0j_9zdy.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpg0j_9zdy.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpg0j_9zdy.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg0j_9zdy.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg0j_9zdy.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: Implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgtz8ovah.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgtz8ovah.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgtz8ovah.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgtz8ovah.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgtz8ovah.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgtz8ovah.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgtz8ovah.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    result = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(result, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp97k4cbwo.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp97k4cbwo.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp97k4cbwo.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp97k4cbwo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfi589czn.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpfi589czn.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfi589czn.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfi589czn.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = []\n    for n in numbers\n        if n in seen\n\
    \            continue\n        end\n        push!(unique, n)\n        push!(seen,\
    \ n)\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2tox8gf.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmph2tox8gf.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2tox8gf.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2tox8gf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_muiho1i.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_muiho1i.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_muiho1i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_muiho1i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpajpsjl73.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpajpsjl73.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpajpsjl73.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpajpsjl73.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpajpsjl73.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpajpsjl73.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajpsjl73.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7smzy45.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpp7smzy45.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7smzy45.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpp7smzy45.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp7smzy45.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7smzy45.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7smzy45.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp88ktihkt.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp88ktihkt.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp88ktihkt.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88ktihkt.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpchfywq7c.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpchfywq7c.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpchfywq7c.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpchfywq7c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo5ghtvkb.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpo5ghtvkb.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo5ghtvkb.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5ghtvkb.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2z265w3.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmph2z265w3.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2z265w3.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2z265w3.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphlgg7uzx.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphlgg7uzx.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphlgg7uzx.jl:17\ntest set: Test\
    \ Failed at /tmp/tmphlgg7uzx.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphlgg7uzx.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphlgg7uzx.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphlgg7uzx.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    result = Vector{Int64}()\n    for n in numbers\n\
    \        if n in seen\n            continue\n        end\n        push!(result,\
    \ n)\n        push!(seen, n)\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcco0zvsj.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpcco0zvsj.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcco0zvsj.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcco0zvsj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp94pzq__n.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp94pzq__n.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94pzq__n.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp94pzq__n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return [x for x in numbers if x in\
    \ unique_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmper8tf2h4.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmper8tf2h4.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmper8tf2h4.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmper8tf2h4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpejiu8rnm.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpejiu8rnm.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpejiu8rnm.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejiu8rnm.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr8hmog06.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpr8hmog06.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr8hmog06.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8hmog06.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return collect(unique_numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ncictlo.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8ncictlo.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ncictlo.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp8ncictlo.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8ncictlo.jl:17 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ncictlo.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ncictlo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp433ynrdk.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp433ynrdk.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp433ynrdk.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp433ynrdk.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp433ynrdk.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp433ynrdk.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp433ynrdk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return [numbers[i] for i in 1:length(numbers) if\
    \ count(x -> x == numbers[i], numbers) == 1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptord7fby.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmptord7fby.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptord7fby.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptord7fby.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp749ehumm.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp749ehumm.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp749ehumm.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp749ehumm.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ypak503.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1ypak503.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ypak503.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp1ypak503.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1ypak503.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ypak503.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ypak503.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw8j3xcx7.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpw8j3xcx7.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8j3xcx7.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8j3xcx7.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1gfftlr_.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1gfftlr_.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1gfftlr_.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp1gfftlr_.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1gfftlr_.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1gfftlr_.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1gfftlr_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiue5lzpc.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpiue5lzpc.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiue5lzpc.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiue5lzpc.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplyy3d7y9.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplyy3d7y9.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyy3d7y9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmplyy3d7y9.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplyy3d7y9.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyy3d7y9.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyy3d7y9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    unique = Vector{Int64}()\n    for n in numbers\n\
    \        if n in seen\n            continue\n        end\n        push!(unique,\
    \ n)\n        push!(seen, n)\n    end\n    return unique\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6wcxwgsm.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6wcxwgsm.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6wcxwgsm.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6wcxwgsm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return [n for n in numbers if n in\
    \ unique_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3_utopn0.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3_utopn0.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3_utopn0.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3_utopn0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgzy7ggyk.jl:14\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmpgzy7ggyk.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmpgzy7ggyk.jl:14\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgzy7ggyk.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmpgzy7ggyk.jl:15\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] remove_duplicates(numbers::Vector{Int64})\\\
    n     @ Main /tmp/tmpgzy7ggyk.jl:8\\n   [2] macro expansion\\n     @ /tmp/tmpgzy7ggyk.jl:15\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgzy7ggyk.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmpgzy7ggyk.jl:16\\n  Test threw exception\\n "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7gw7dafb.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7gw7dafb.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7gw7dafb.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7gw7dafb.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return [unique(numbers)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8qr_js00.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object\
    \ of type Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n    [1]\
    \ setindex!(A::Vector{Int64}, x::Vector{Int64}, i1::Int64)\\n      @ Base ./array.jl:843\\\
    n    [2] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64, src::Vector{Vector{Int64}},\
    \ soffs::Int64, n::Int64)\\n      @ Base ./array.jl:235\\n    [3] unsafe_copyto!\\\
    n      @ ./array.jl:289 [inlined]\\n    [4] _copyto_impl!\\n      @ ./array.jl:313\
    \ [inlined]\\n    [5] copyto!\\n      @ ./array.jl:299 [inlined]\\n    [6] copyto!\\\
    n      @ ./array.jl:325 [inlined]\\n    [7] copyto_axcheck!\\n      @ ./abstractarray.jl:1056\
    \ [inlined]\\n    [8] Vector{Int64}(x::Vector{Vector{Int64}})\\n      @ Base ./array.jl:540\\\
    n    [9] convert\\n      @ ./array.jl:532 [inlined]\\n   [10] remove_duplicates(numbers::Vector{Int64})\\\
    n      @ Main /tmp/tmp8qr_js00.jl:8\\n   [11] macro expansion\\n      @ /tmp/tmp8qr_js00.jl:15\
    \ [inlined]\\n   [12] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [13] top-level scope\\n      @ /tmp/tmp8qr_js00.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp8qr_js00.jl:16\\n  Test threw exception\\\
    n  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Int64} to an object of type Int64\\n  Closest\
    \ candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n    [1] set"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3sgm58x.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa3sgm58x.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3sgm58x.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpa3sgm58x.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpa3sgm58x.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3sgm58x.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3sgm58x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj00p5d6a.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpj00p5d6a.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj00p5d6a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj00p5d6a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    result = Vector{Int64}()\n    for n in numbers\n   \
    \     if !(n in seen)\n            push!(result, n)\n            push!(seen, n)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbwp5nkw4.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbwp5nkw4.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbwp5nkw4.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwp5nkw4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp398qdt0w.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp398qdt0w.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp398qdt0w.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp398qdt0w.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3og5v25s.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3og5v25s.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3og5v25s.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3og5v25s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Your code here\n    return numbers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcft_hhs9.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcft_hhs9.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcft_hhs9.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcft_hhs9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = []\n    for n in numbers\n        if n in seen\n\
    \            continue\n        end\n        push!(unique, n)\n        push!(seen,\
    \ n)\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzvcs1lhn.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzvcs1lhn.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzvcs1lhn.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvcs1lhn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpui6p0136.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpui6p0136.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpui6p0136.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpui6p0136.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpui6p0136.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpui6p0136.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpui6p0136.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    return [numbers[i] for i in 1:length(numbers) if\
    \ count(x -> x == numbers[i], numbers) == 1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1c9a_vkg.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1c9a_vkg.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1c9a_vkg.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1c9a_vkg.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpecebnnxd.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpecebnnxd.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecebnnxd.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpecebnnxd.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpecebnnxd.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecebnnxd.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpecebnnxd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc4o_5cp1.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc4o_5cp1.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4o_5cp1.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpc4o_5cp1.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc4o_5cp1.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4o_5cp1.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4o_5cp1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_hctec2b.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_hctec2b.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hctec2b.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp_hctec2b.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_hctec2b.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hctec2b.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hctec2b.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaym1okx4.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpaym1okx4.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaym1okx4.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpaym1okx4.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaym1okx4.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaym1okx4.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaym1okx4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for n in numbers\n        push!(unique_numbers,\
    \ n)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7_q8wx5.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpp7_q8wx5.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7_q8wx5.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpp7_q8wx5.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpp7_q8wx5.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7_q8wx5.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7_q8wx5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptp4iihk6.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptp4iihk6.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptp4iihk6.jl:17\ntest set: Test\
    \ Failed at /tmp/tmptp4iihk6.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptp4iihk6.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptp4iihk6.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptp4iihk6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return [x for x in numbers if x in\
    \ unique_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_yzhrbj6.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_yzhrbj6.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_yzhrbj6.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_yzhrbj6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if number in unique_numbers\n            continue\n\
    \        end\n        push!(unique_numbers_list, number)\n        push!(unique_numbers,\
    \ number)\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ntc_ms_.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ntc_ms_.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ntc_ms_.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ntc_ms_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    result = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(result, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4b9tixd2.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4b9tixd2.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4b9tixd2.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4b9tixd2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr2uob1p3.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr2uob1p3.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr2uob1p3.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpr2uob1p3.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr2uob1p3.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr2uob1p3.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr2uob1p3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return [number for number in numbers\
    \ if number in unique_numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2fnn0g6m.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2fnn0g6m.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2fnn0g6m.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2fnn0g6m.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr6ziqy1u.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr6ziqy1u.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6ziqy1u.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpr6ziqy1u.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr6ziqy1u.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6ziqy1u.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6ziqy1u.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ath8pa0.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0ath8pa0.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ath8pa0.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp0ath8pa0.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0ath8pa0.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ath8pa0.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ath8pa0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpivxphzdz.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpivxphzdz.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivxphzdz.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivxphzdz.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwhhj6s8q.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwhhj6s8q.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhhj6s8q.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhhj6s8q.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    return unique(numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5uixw2js.jl:18\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5uixw2js.jl:18 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5uixw2js.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5uixw2js.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph12h8gfh.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmph12h8gfh.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph12h8gfh.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph12h8gfh.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3kwm7_h.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpq3kwm7_h.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3kwm7_h.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3kwm7_h.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return [1, 3, 4]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnbbae9x6.jl:15\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [1, 3, 4] == Int64[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpnbbae9x6.jl:15 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnbbae9x6.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpnbbae9x6.jl:16\n  Expression: candidate([1, 2, 3, 4]) == [1,\
    \ 2, 3, 4]\n   Evaluated: [1, 3, 4] == [1, 2, 3, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnbbae9x6.jl:16 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnbbae9x6.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpnbbae9x6.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [1, 3, 4] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnbbae9x6.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnbbae9x6.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnbbae9x6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8mude2ve.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8mude2ve.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8mude2ve.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp8mude2ve.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8mude2ve.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8mude2ve.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8mude2ve.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    return []\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplvf1pppa.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplvf1pppa.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplvf1pppa.jl:14\ntest set: Test\
    \ Failed at /tmp/tmplvf1pppa.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplvf1pppa.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplvf1pppa.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplvf1pppa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps_wis0jw.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps_wis0jw.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_wis0jw.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_wis0jw.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxebr47d.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsxebr47d.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsxebr47d.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpsxebr47d.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsxebr47d.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsxebr47d.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxebr47d.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    unique = Vector{Int64}()\n    for n in numbers\n\
    \        if !(n in seen)\n            push!(unique, n)\n            push!(seen,\
    \ n)\n        end\n    end\n    return unique\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsbwdbq3h.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsbwdbq3h.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbwdbq3h.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbwdbq3h.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28uw2qrc.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp28uw2qrc.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28uw2qrc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp28uw2qrc.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp28uw2qrc.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28uw2qrc.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28uw2qrc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeyriar1t.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpeyriar1t.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyriar1t.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyriar1t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1nw326xs.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1nw326xs.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nw326xs.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp1nw326xs.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1nw326xs.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nw326xs.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nw326xs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzhc4dp4d.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzhc4dp4d.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzhc4dp4d.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzhc4dp4d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6u794stv.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6u794stv.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6u794stv.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6u794stv.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkk6vlytc.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkk6vlytc.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkk6vlytc.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkk6vlytc.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # Create a dictionary to store the number of times each element occurs\n\
    \    # in the input list.\n    counts = Dict{Int64, Int64}()\n    for n in numbers\n\
    \        if haskey(counts, n)\n            counts[n] += 1\n        else\n    \
    \        counts[n] = 1\n        end\n    end\n    \n    # Create a new list to\
    \ store the unique elements.\n    unique_numbers = Vector{Int64}()\n    for n\
    \ in numbers\n        if counts[n] == 1\n            push!(unique_numbers, n)\n\
    \        end\n    end\n    \n    return unique_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if number in unique_numbers\n            continue\n    \
    \    end\n        push!(unique_numbers_list, number)\n        push!(unique_numbers,\
    \ number)\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpil8l3p04.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpil8l3p04.jl:25 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpil8l3p04.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpil8l3p04.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    result = Vector{Int64}()\n    for n in numbers\n   \
    \     if !(n in seen)\n            push!(result, n)\n            push!(seen, n)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoky_drgw.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpoky_drgw.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoky_drgw.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoky_drgw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for n in numbers\n        push!(unique_numbers,\
    \ n)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp37cmqaog.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp37cmqaog.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37cmqaog.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp37cmqaog.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp37cmqaog.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37cmqaog.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp37cmqaog.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2oycxy4_.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2oycxy4_.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2oycxy4_.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp2oycxy4_.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2oycxy4_.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2oycxy4_.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2oycxy4_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement me\n    return []\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfckvulf.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwfckvulf.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfckvulf.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwfckvulf.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwfckvulf.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfckvulf.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfckvulf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ganlb64.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ganlb64.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ganlb64.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ganlb64.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1z9lhvyy.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1z9lhvyy.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1z9lhvyy.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1z9lhvyy.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkjxhorga.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkjxhorga.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkjxhorga.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpkjxhorga.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkjxhorga.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkjxhorga.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjxhorga.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm2ge_4gv.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm2ge_4gv.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm2ge_4gv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpm2ge_4gv.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm2ge_4gv.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm2ge_4gv.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm2ge_4gv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp66rdlw37.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp66rdlw37.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66rdlw37.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66rdlw37.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return collect(unique_numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4bmu77dj.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4bmu77dj.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4bmu77dj.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp4bmu77dj.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4bmu77dj.jl:17 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4bmu77dj.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4bmu77dj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28r0bd1_.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp28r0bd1_.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28r0bd1_.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28r0bd1_.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsu27hjyr.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsu27hjyr.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu27hjyr.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsu27hjyr.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvqar_h_g.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvqar_h_g.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqar_h_g.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpvqar_h_g.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvqar_h_g.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqar_h_g.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvqar_h_g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpddnftt6t.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpddnftt6t.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddnftt6t.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpddnftt6t.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpddnftt6t.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddnftt6t.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpddnftt6t.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4n8mko2l.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4n8mko2l.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4n8mko2l.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp4n8mko2l.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4n8mko2l.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4n8mko2l.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4n8mko2l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprdlxz1e6.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprdlxz1e6.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdlxz1e6.jl:14\ntest set: Test\
    \ Failed at /tmp/tmprdlxz1e6.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprdlxz1e6.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdlxz1e6.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprdlxz1e6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp255tsi40.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp255tsi40.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp255tsi40.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp255tsi40.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqop5393n.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqop5393n.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqop5393n.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpqop5393n.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqop5393n.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqop5393n.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqop5393n.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwey7yue7.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwey7yue7.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwey7yue7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwey7yue7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpole21t5x.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpole21t5x.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpole21t5x.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpole21t5x.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpole21t5x.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpole21t5x.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpole21t5x.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    return unique(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0gux603k.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0gux603k.jl:17 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0gux603k.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0gux603k.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkb53l5tz.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkb53l5tz.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkb53l5tz.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpkb53l5tz.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkb53l5tz.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkb53l5tz.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkb53l5tz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz6v32cns.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpz6v32cns.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6v32cns.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpz6v32cns.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpz6v32cns.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6v32cns.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6v32cns.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp35bvzf2q.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp35bvzf2q.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp35bvzf2q.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp35bvzf2q.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7gc94ga.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpk7gc94ga.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk7gc94ga.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7gc94ga.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ct4u1k_.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ct4u1k_.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ct4u1k_.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ct4u1k_.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1vjqno9j.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1vjqno9j.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1vjqno9j.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp1vjqno9j.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1vjqno9j.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1vjqno9j.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1vjqno9j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return numbers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4lizf0dk.jl:17\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 2, 4, 3, 5] == [1,\
    \ 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4lizf0dk.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lizf0dk.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4lizf0dk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = []\n    for number\
    \ in numbers\n        if !(number in unique_numbers)\n            push!(unique_numbers_list,\
    \ number)\n            push!(unique_numbers, number)\n        end\n    end\n \
    \   return unique_numbers_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkjw3vpy3.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkjw3vpy3.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkjw3vpy3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjw3vpy3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    for number in numbers\n        push!(unique_numbers,\
    \ number)\n    end\n    return collect(unique_numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsgmbh1q5.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsgmbh1q5.jl:19 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsgmbh1q5.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpsgmbh1q5.jl:20\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsgmbh1q5.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsgmbh1q5.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgmbh1q5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgdu5ebwt.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgdu5ebwt.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgdu5ebwt.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgdu5ebwt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpudb011x8.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpudb011x8.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudb011x8.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpudb011x8.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpudb011x8.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudb011x8.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudb011x8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return collect(unique_numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp22zvqlq9.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp22zvqlq9.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp22zvqlq9.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp22zvqlq9.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp22zvqlq9.jl:17 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp22zvqlq9.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22zvqlq9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set{Int64}()\n    unique_numbers_list = Vector{Int64}()\n\
    \    for number in numbers\n        if !(number in unique_numbers)\n         \
    \   push!(unique_numbers_list, number)\n            push!(unique_numbers, number)\n\
    \        end\n    end\n    return unique_numbers_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphbwkbu58.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphbwkbu58.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbwkbu58.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbwkbu58.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    unique_numbers = Set(numbers)\n    return collect(unique_numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3n7xdbgv.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: [4, 2, 3, 1] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3n7xdbgv.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3n7xdbgv.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp3n7xdbgv.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: [5, 4, 2, 3, 1] == [1, 4, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3n7xdbgv.jl:17 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3n7xdbgv.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3n7xdbgv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = remove_duplicates;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkq6nbmhm.jl:14\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] remove_duplicates(numbers::Vector{Int64})\n  \
    \   @ Main /tmp/tmpkq6nbmhm.jl:8\n   [2] macro expansion\n     @ /tmp/tmpkq6nbmhm.jl:14\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkq6nbmhm.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpkq6nbmhm.jl:15\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] remove_duplicates(numbers::Vector{Int64})\n  \
    \   @ Main /tmp/tmpkq6nbmhm.jl:8\n   [2] macro expansion\n     @ /tmp/tmpkq6nbmhm.jl:15\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkq6nbmhm.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpkq6nbmhm.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 2, 4, 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkq6nbmhm.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = remove_duplicates;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp92k9lhan.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp92k9lhan.jl:16 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92k9lhan.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp92k9lhan.jl:17\n  Expression: candidate([1, 2, 3, 2, 4, 3,\
    \ 5]) == [1, 4, 5]\n   Evaluated: Int64[] == [1, 4, 5]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp92k9lhan.jl:17 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92k9lhan.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp92k9lhan.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" From a list of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = remove_duplicates;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps1wa09o4.jl:16\n  Expression: candidate([1,\
    \ 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps1wa09o4.jl:16 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps1wa09o4.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps1wa09o4.jl:11\n"
  exit_code: 1
  status: SyntaxError
