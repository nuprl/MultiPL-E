name: HumanEval_6_parse_nested_parens
language: julia
results:
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # Initialize a vector to store the maximum nesting level for each group\n\
    \    max_nesting = zeros(Int64, length(groups))\n    # Loop through each group\n\
    \    for i in 1:length(groups)\n        # Initialize a counter for the current\
    \ nesting level\n        curr_nesting = 0\n        # Initialize a counter for\
    \ the maximum nesting level\n        max_nesting[i] = 0\n        # Loop through\
    \ each character in the current group\n        for j in 1:length(groups[i])\n\
    \            # If the current character is an opening parenthesis, increment the\
    \ current nesting level\n            if groups[i][j] == '('\n                curr_nesting\
    \ += 1\n            # If the current character is a closing parenthesis, decrement\
    \ the current nesting level\n            elseif groups[i][j] == ')'\n        \
    \        curr_nesting -= 1\n            end\n            # If the current nesting\
    \ level is greater than the maximum nesting level, update the maximum nesting\
    \ level\n            if curr_nesting > max_nesting[i]\n                max_nesting[i]\
    \ = curr_nesting\n            end\n        end\n    end\n    # Return the maximum\
    \ nesting level for each group\n    return max_nesting\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in group\n            if paren == '('\n             \
    \   current_nesting_level += 1\n            elseif paren == ')'\n            \
    \    current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, group) in enumerate(paren_groups)\n     \
    \   max_nesting[i] = parse_nested_parens_helper(group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp5o2s8_cw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp5o2s8_cw.jl:12\n   [2] macro expansion\n     @ /tmp/tmp5o2s8_cw.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5o2s8_cw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5o2s8_cw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp5o2s8_cw.jl:12\n   [2] macro expansion\n     @ /tmp/tmp5o2s8_cw.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5o2s8_cw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5o2s8_cw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp5o2s8_cw.jl:12\n   [2] macro expansion\n     @ /tmp/tmp5o2s8_cw.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5o2s8_cw.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5o2s8_cw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = []\n   \
    \ for paren_group in paren_groups\n        paren_levels = [push!(paren_levels,\
    \ paren_level(paren_group))]\n    end\n    return paren_levels\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpbx4u0bq1.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ paren_level not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpbx4u0bq1.jl:12\n   [2] macro expansion\n     @ /tmp/tmpbx4u0bq1.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbx4u0bq1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbx4u0bq1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: paren_level\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpbx4u0bq1.jl:12\n   [2] macro expansion\n     @ /tmp/tmpbx4u0bq1.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbx4u0bq1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbx4u0bq1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: paren_level not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpbx4u0bq1.jl:12\n   [2] macro expansion\n     @ /tmp/tmpbx4u0bq1.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbx4u0bq1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbx4u0bq1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the result\n    result = Vector{Int64}()\n\
    \    # Split the string by spaces\n    paren_groups = split(paren_string, \" \"\
    )\n    # Loop through each group\n    for group in paren_groups\n        # Initialize\
    \ the maximum depth to zero\n        max_depth = 0\n        # Initialize the current\
    \ depth to zero\n        current_depth = 0\n        # Loop through each character\
    \ in the group\n        for char in group\n            # If the character is a\
    \ left parenthesis, increment the current depth\n            if char == '('\n\
    \                current_depth += 1\n            # If the character is a right\
    \ parenthesis, decrement the current depth\n            elseif char == ')'\n \
    \               current_depth -= 1\n            end\n            # Update the\
    \ maximum depth if the current depth is greater\n            if current_depth\
    \ > max_depth\n                max_depth = current_depth\n            end\n  \
    \      end\n        # Append the maximum depth to the result\n        push!(result,\
    \ max_depth)\n    end\n    # Return the result\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = parse_nested_parens_helper(paren_groups[i])\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp78ubw1wt.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp78ubw1wt.jl:12\n   [2] macro expansion\n     @ /tmp/tmp78ubw1wt.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp78ubw1wt.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp78ubw1wt.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp78ubw1wt.jl:12\n   [2] macro expansion\n     @ /tmp/tmp78ubw1wt.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp78ubw1wt.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp78ubw1wt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp78ubw1wt.jl:12\n   [2] macro expansion\n     @ /tmp/tmp78ubw1wt.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp78ubw1wt.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78ubw1wt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the output\n    output = Vector{Int64}()\n\
    \    # Split the string by spaces\n    paren_groups = split(paren_string, \" \"\
    )\n    # For each group, find the maximum level of nesting\n    for group in paren_groups\n\
    \        # Initialize a counter to keep track of the level of nesting\n      \
    \  counter = 0\n        # Initialize a variable to keep track of the maximum level\
    \ of nesting\n        max_counter = 0\n        # Loop through each character in\
    \ the group\n        for char in group\n            # If the character is an opening\
    \ parenthesis, increment the counter\n            if char == '('\n           \
    \     counter += 1\n            # If the character is a closing parenthesis, decrement\
    \ the counter\n            elseif char == ')'\n                counter -= 1\n\
    \            end\n            # Update the maximum level of nesting\n        \
    \    if counter > max_counter\n                max_counter = counter\n       \
    \     end\n        end\n        # Add the maximum level of nesting to the output\
    \ vector\n        push!(output, max_counter)\n    end\n    # Return the output\
    \ vector\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        paren_count = 0\n        max_nesting[i] = 0\n        for c in paren_group\n\
    \            if c == '('\n                paren_count += 1\n                max_nesting[i]\
    \ = max(max_nesting[i], paren_count)\n            elseif c == ')'\n          \
    \      paren_count -= 1\n            end\n        end\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_depth = []\n    for\
    \ paren_group in paren_groups\n        depth = 0\n        max_depth_in_group =\
    \ 0\n        for c in paren_group\n            if c == '('\n                depth\
    \ += 1\n            elseif c == ')'\n                depth -= 1\n            end\n\
    \            if depth > max_depth_in_group\n                max_depth_in_group\
    \ = depth\n            end\n        end\n        push!(max_depth, max_depth_in_group)\n\
    \    end\n    return max_depth\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        max_nesting_in_group = 0\n        current_nesting\
    \ = 0\n        for paren in group\n            if paren == '('\n             \
    \   current_nesting += 1\n            elseif paren == ')'\n                current_nesting\
    \ -= 1\n            end\n            if current_nesting > max_nesting_in_group\n\
    \                max_nesting_in_group = current_nesting\n            end\n   \
    \     end\n        push!(max_nesting, max_nesting_in_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = parse_nested_parens_helper(paren_group)\n    end\n \
    \   return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz_7o4gm8.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpz_7o4gm8.jl:12\n   [2] macro expansion\n     @ /tmp/tmpz_7o4gm8.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz_7o4gm8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz_7o4gm8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpz_7o4gm8.jl:12\n   [2] macro expansion\n     @ /tmp/tmpz_7o4gm8.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz_7o4gm8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpz_7o4gm8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpz_7o4gm8.jl:12\n   [2] macro expansion\n     @ /tmp/tmpz_7o4gm8.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz_7o4gm8.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_7o4gm8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren in paren_list\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for char in paren\n            if char == '('\n               \
    \ current_nesting_level += 1\n            elseif char == ')'\n               \
    \ current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    paren_list = map(x -> parse_parens(x),\
    \ paren_list)\n    return paren_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmmhf4qvv.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_parens not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmpmmhf4qvv.jl:10\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n     @ Base\
    \ ./array.jl:695\n   [4] collect_similar\n     @ ./array.jl:606 [inlined]\n  \
    \ [5] map\n     @ ./abstractarray.jl:2294 [inlined]\n   [6] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpmmhf4qvv.jl:10\n   [7] macro expansion\n     @ /tmp/tmpmmhf4qvv.jl:18\
    \ [inlined]\n   [8] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpmmhf4qvv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpmmhf4qvv.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_parens\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpmmhf4qvv.jl:10\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n     @ Base\
    \ ./array.jl:695\n   [4] collect_similar\n     @ ./array.jl:606 [inlined]\n  \
    \ [5] map\n     @ ./abstractarray.jl:2294 [inlined]\n   [6] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpmmhf4qvv.jl:10\n   [7] macro expansion\n     @ /tmp/tmpmmhf4qvv.jl:19\
    \ [inlined]\n   [8] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpmmhf4qvv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpmmhf4qvv.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarErro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmhf4qvv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \"()\", \"\")\n    paren_string\
    \ = replace(\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpafpkex2l.jl:40\nin expression starting at\
    \ /tmp/tmpafpkex2l.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        nesting = 0\n        max_nesting_group = 0\n\
    \        for paren in group\n            if paren == '('\n                nesting\
    \ += 1\n            elseif paren == ')'\n                nesting -= 1\n      \
    \      end\n            if nesting > max_nesting_group\n                max_nesting_group\
    \ = nesting\n            end\n        end\n        push!(max_nesting, max_nesting_group)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize an empty vector to store the depth of each group\n    depth_vector\
    \ = Int64[]\n    # Initialize a counter to keep track of the depth of the current\
    \ group\n    depth = 0\n    # Iterate through each character in the string\n \
    \   for c in paren_string\n        # If the character is an opening parenthesis,\
    \ increase the depth by 1\n        if c == '('\n            depth += 1\n     \
    \   # If the character is a closing parenthesis, decrease the depth by 1\n   \
    \     elseif c == ')'\n            depth -= 1\n        # If the character is a\
    \ space, append the current depth to the vector\n        elseif c == ' '\n   \
    \         push!(depth_vector, depth)\n        end\n    end\n    # Return the vector\
    \ of depths\n    return depth_vector\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsc90au9j.jl:34\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsc90au9j.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsc90au9j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsc90au9j.jl:35\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpsc90au9j.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsc90au9j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsc90au9j.jl:36\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsc90au9j.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsc90au9j.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsc90au9j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the result\n    result = Int64[]\n    #\
    \ Split the string by spaces\n    paren_groups = split(paren_string, \" \")\n\
    \    # Iterate through each group\n    for group in paren_groups\n        # Initialize\
    \ a counter to keep track of the current nesting level\n        counter = 0\n\
    \        # Initialize a variable to keep track of the maximum nesting level\n\
    \        max_counter = 0\n        # Iterate through each character in the group\n\
    \        for char in group\n            # If the character is an opening parenthesis,\
    \ increment the counter\n            if char == '('\n                counter +=\
    \ 1\n            # If the character is a closing parenthesis, decrement the counter\n\
    \            elseif char == ')'\n                counter -= 1\n            end\n\
    \            # Update the maximum nesting level if the current nesting level is\
    \ greater\n            if counter > max_counter\n                max_counter =\
    \ counter\n            end\n        end\n        # Append the maximum nesting\
    \ level to the result\n        push!(result, max_counter)\n    end\n    # Return\
    \ the result\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         nesting_level += 1\n            elseif paren == ')'\n              \
    \  nesting_level -= 1\n            end\n            if nesting_level > max_nesting_level\n\
    \                max_nesting_level = nesting_level\n            end\n        end\n\
    \        push!(max_nesting, max_nesting_level)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    paren_list = [strip(x) for\
    \ x in paren_list]\n    paren_list = [x for x in paren_list if x != \"\"]\n  \
    \  paren_list = [x for x in paren_list if x != \" \"]\n    paren_list = [x for\
    \ x in paren_list if x != \"()\"]\n    paren_list = [x for x in paren_list if\
    \ x != \"()()\"]\n    paren_list = [x for x in paren_list if x != \"()()()\"]\n\
    \    paren_list = [x for x in paren_list if x != \"()()()()\"]\n    paren_list\
    \ = [x for x in paren_list if x != \"()()()()()\"]\n    paren_list = [x for x\
    \ in paren_list if x != \"()()()()()()\"]\n    paren_list = [x for x in paren_list\
    \ if x != \"()()()()()()()\"]\n    paren_list = [x for x in paren_list if x !=\
    \ \"()()()()()()()()\"]\n    paren_list = [x for x in paren_list if x != \"()()()()()()()()()\"\
    ]\n    paren_list = [x for x in paren_list if x != \"()()()()()()()()()()\"]\n\
    \    paren_list = [x for x in paren_list if x != \"()()()()()()()()()()()\"]\n\
    \    paren_list = [x for x in paren_list if x != \"()()()()()()()()()()()()\"\
    ]\n    paren_list = [x for x in paren_list if x != \"()()()()()()()()()()()()()\"\
    ]\n    paren_list = [x for x in paren_list if x != \"()()()()()()()()()()()()()()\"\
    ]\n    paren_list = [x for x in paren_list if x != \"()()()()()()()()()()()()()()\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"()()()()()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpx6wh1go1.jl:33\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpx6wh1go1.jl:33\nin expression starting at /tmp/tmpx6wh1go1.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the results\n    result = Int64[]\n   \
    \ # Split the string into groups\n    groups = split(paren_string, \" \")\n  \
    \  # Iterate over each group\n    for group in groups\n        # Initialize a\
    \ counter\n        counter = 0\n        # Initialize a max counter\n        max_counter\
    \ = 0\n        # Iterate over each character in the group\n        for char in\
    \ group\n            # If the character is an open parenthesis, increment the\
    \ counter\n            if char == '('\n                counter += 1\n        \
    \    # If the character is a closed parenthesis, decrement the counter\n     \
    \       elseif char == ')'\n                counter -= 1\n            end\n  \
    \          # Update the max counter if the current counter is greater\n      \
    \      if counter > max_counter\n                max_counter = counter\n     \
    \       end\n        end\n        # Push the max counter to the result vector\n\
    \        push!(result, max_counter)\n    end\n    # Return the result vector\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        max_nesting_group = 0\n        current_nesting\
    \ = 0\n        for char in group\n            if char == '('\n               \
    \ current_nesting += 1\n            elseif char == ')'\n                current_nesting\
    \ -= 1\n            end\n            if current_nesting > max_nesting_group\n\
    \                max_nesting_group = current_nesting\n            end\n      \
    \  end\n        push!(max_nesting, max_nesting_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = get_max_nesting(paren_groups[i])\n    end\n    return max_nesting\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpwwgppzea.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpwwgppzea.jl:12\n   [2] macro expansion\n     @ /tmp/tmpwwgppzea.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwwgppzea.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpwwgppzea.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpwwgppzea.jl:12\n   [2] macro expansion\n     @ /tmp/tmpwwgppzea.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwwgppzea.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpwwgppzea.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_max_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpwwgppzea.jl:12\n   [2] macro expansion\n     @ /tmp/tmpwwgppzea.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwwgppzea.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwwgppzea.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = 0\n        current_nesting = 0\n        for paren in\
    \ paren_group\n            if paren == '('\n                current_nesting +=\
    \ 1\n            elseif paren == ')'\n                current_nesting -= 1\n \
    \           end\n            if current_nesting > max_nesting[i]\n           \
    \     max_nesting[i] = current_nesting\n            end\n        end\n    end\n\
    \    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting_level += 1\n            elseif paren == ')'\n      \
    \          current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = []\n   \
    \ for paren_group in paren_groups\n        paren_levels = [push!(paren_levels,\
    \ get_paren_level(paren_group))]\n    end\n    return paren_levels\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpqab34qzq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_paren_level not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpqab34qzq.jl:12\n   [2] macro expansion\n     @ /tmp/tmpqab34qzq.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqab34qzq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqab34qzq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_paren_level\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpqab34qzq.jl:12\n   [2] macro expansion\n     @ /tmp/tmpqab34qzq.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqab34qzq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqab34qzq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_paren_level not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpqab34qzq.jl:12\n   [2] macro expansion\n     @ /tmp/tmpqab34qzq.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqab34qzq.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqab34qzq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_in_group = 0\n        current_nesting\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting += 1\n            elseif paren == ')'\n            \
    \    current_nesting -= 1\n            end\n            if current_nesting > max_nesting_in_group\n\
    \                max_nesting_in_group = current_nesting\n            end\n   \
    \     end\n        push!(max_nesting, max_nesting_in_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \"((\", \"\")\n    paren_string\
    \ = replace(paren_string, \"))\", \"\")\n    paren_string = replace(paren_string,\
    \ \")\", \"\")\n    paren_string = replace(paren_string, \"(\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    return length.(split(paren_string,\
    \ \"\"))\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcr9ajwxf.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpcr9ajwxf.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpcr9ajwxf.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcr9ajwxf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpcr9ajwxf.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmpcr9ajwxf.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcr9ajwxf.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = parse_parens(paren_groups[i])\n    end\n    return max_nesting\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpyx6pbhhr.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpyx6pbhhr.jl:12\n   [2] macro expansion\n     @ /tmp/tmpyx6pbhhr.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyx6pbhhr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyx6pbhhr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpyx6pbhhr.jl:12\n   [2] macro expansion\n     @ /tmp/tmpyx6pbhhr.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyx6pbhhr.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyx6pbhhr.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_parens not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpyx6pbhhr.jl:12\n   [2] macro expansion\n     @ /tmp/tmpyx6pbhhr.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyx6pbhhr.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyx6pbhhr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the output\n    output = Vector{Int64}()\n\
    \    # Split the string by spaces\n    paren_groups = split(paren_string, \" \"\
    )\n    # For each of the groups,\n    for paren_group in paren_groups\n      \
    \  # Initialize a counter to keep track of the level of nesting\n        counter\
    \ = 0\n        # Initialize a maximum to keep track of the maximum level of nesting\n\
    \        max_counter = 0\n        # For each of the parentheses in the group,\n\
    \        for paren in paren_group\n            # If the parenthesis is an opening\
    \ one,\n            if paren == '('\n                # Increment the counter\n\
    \                counter += 1\n                # If the counter is greater than\
    \ the maximum,\n                if counter > max_counter\n                   \
    \ # Update the maximum\n                    max_counter = counter\n          \
    \      end\n            # If the parenthesis is a closing one,\n            elseif\
    \ paren == ')'\n                # Decrement the counter\n                counter\
    \ -= 1\n            end\n        end\n        # Append the maximum to the output\n\
    \        push!(output, max_counter)\n    end\n    # Return the output\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        paren_group\
    \ = paren_groups[i]\n        nesting_level = 0\n        max_nesting_level = 0\n\
    \        for j in 1:length(paren_group)\n            if paren_group[j] == '('\n\
    \                nesting_level += 1\n            elseif paren_group[j] == ')'\n\
    \                nesting_level -= 1\n            end\n            if nesting_level\
    \ > max_nesting_level\n                max_nesting_level = nesting_level\n   \
    \         end\n        end\n        max_nesting[i] = max_nesting_level\n    end\n\
    \    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")\", \"\")\n    paren_string\
    \ = replace(paren_string, \"(\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    return length.(split(paren_string, \"\"))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmph9unby0h.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmph9unby0h.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmph9unby0h.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph9unby0h.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmph9unby0h.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmph9unby0h.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmph9unby0h.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        paren_group\
    \ = paren_groups[i]\n        max_nesting[i] = 0\n        current_nesting = 0\n\
    \        for j in 1:length(paren_group)\n            if paren_group[j] == '('\n\
    \                current_nesting += 1\n            elseif paren_group[j] == ')'\n\
    \                current_nesting -= 1\n            end\n            if current_nesting\
    \ > max_nesting[i]\n                max_nesting[i] = current_nesting\n       \
    \     end\n        end\n    end\n    return max_nesting\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    paren_list = map(x -> x[2:end-1],\
    \ paren_list)\n    paren_list = map(x -> count(x, '('), paren_list)\n    return\
    \ paren_list\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgyiaf67e.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: objects of type SubString{String} are not callable\\\
    n  Stacktrace:\\n    [1] _simple_count(pred::SubString{String}, itr::Char, init::Int64)\\\
    n      @ Base ./reduce.jl:970\\n    [2] count(f::SubString{String}, itr::Char;\
    \ init::Int64)\\n      @ Base ./reduce.jl:965\\n    [3] count(f::SubString{String},\
    \ itr::Char)\\n      @ Base ./reduce.jl:965\\n    [4] (::var\"#2#4\")(x::SubString{String})\\\
    n      @ Main /tmp/tmpgyiaf67e.jl:11\\n    [5] iterate\\n      @ ./generator.jl:47\
    \ [inlined]\\n    [6] _collect\\n      @ ./array.jl:695 [inlined]\\n    [7] collect_similar\\\
    n      @ ./array.jl:606 [inlined]\\n    [8] map\\n      @ ./abstractarray.jl:2294\
    \ [inlined]\\n    [9] parse_nested_parens(paren_string::String)\\n      @ Main\
    \ /tmp/tmpgyiaf67e.jl:11\\n   [10] macro expansion\\n      @ /tmp/tmpgyiaf67e.jl:19\
    \ [inlined]\\n   [11] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [12] top-level scope\\n      @ /tmp/tmpgyiaf67e.jl:18\\ntest\
    \ set: Error During Test at /tmp/tmpgyiaf67e.jl:20\\n  Test threw exception\\\
    n  Expression: candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError:\
    \ objects of type SubString{String} are not callable\\n  Stacktrace:\\n    [1]\
    \ _simple_count(pred::SubString{String}, itr::Char, init::Int64)\\n      @ Base\
    \ ./reduce.jl:970\\n    [2] count(f::SubString{String}, itr::Char; init::Int64)\\\
    n      @ Base ./reduce.jl:965\\n    [3] count(f::SubString{String}, itr::Char)\\\
    n      @ Base ./reduce.jl:965\\n    [4] (::var\"#2#4\")(x::SubString{String})\\\
    n      @ Main /tmp/tmpgyiaf67e.jl:11\\n    [5] iterate\\n      @ ./generator.jl:47\
    \ [inlined]\\n    [6] _collect\\n      @ ./array.jl:695 [inlined]\\n    [7] collect_similar\\\
    n      @ ./array.jl:606 [inlined]\\n    [8] map\\n      @ ./abstractarray.jl:2294\
    \ [inlined]\\n    [9] parse_nested_parens(paren_string::String)\\n      @ Main\
    \ /tmp/tmpgyiaf67e.jl:11\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         nesting_level += 1\n            elseif paren == ')'\n              \
    \  nesting_level -= 1\n            end\n            if nesting_level > max_nesting_level\n\
    \                max_nesting_level = nesting_level\n            end\n        end\n\
    \        push!(max_nesting, max_nesting_level)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        paren_count = 0\n        max_nesting[i] = 0\n        for paren in paren_group\n\
    \            if paren == '('\n                paren_count += 1\n            elseif\
    \ paren == ')'\n                paren_count -= 1\n            end\n          \
    \  max_nesting[i] = max(max_nesting[i], paren_count)\n        end\n    end\n \
    \   return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = get_max_nesting(paren_groups[i])\n    end\n    return max_nesting\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpl01c9q19.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpl01c9q19.jl:12\n   [2] macro expansion\n     @ /tmp/tmpl01c9q19.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl01c9q19.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpl01c9q19.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpl01c9q19.jl:12\n   [2] macro expansion\n     @ /tmp/tmpl01c9q19.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl01c9q19.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpl01c9q19.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_max_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpl01c9q19.jl:12\n   [2] macro expansion\n     @ /tmp/tmpl01c9q19.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl01c9q19.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl01c9q19.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth = Vector{Int64}()\n\
    \    # Initialize a counter to keep track of the depth of the current group\n\
    \    count = 0\n    # Iterate through the string\n    for i in 1:length(paren_string)\n\
    \        # If the current character is an opening parenthesis, increment the counter\n\
    \        if paren_string[i] == '('\n            count += 1\n        # If the current\
    \ character is a closing parenthesis, decrement the counter\n        elseif paren_string[i]\
    \ == ')'\n            count -= 1\n        # If the current character is a space,\
    \ push the current depth to the vector and reset the counter\n        elseif paren_string[i]\
    \ == ' '\n            push!(depth, count)\n            count = 0\n        end\n\
    \    end\n    # Return the vector\n    return depth\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2j3pfzkp.jl:35\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2j3pfzkp.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2j3pfzkp.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2j3pfzkp.jl:36\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2j3pfzkp.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2j3pfzkp.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2j3pfzkp.jl:37\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp2j3pfzkp.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2j3pfzkp.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2j3pfzkp.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = split(paren_string, \" \")\n    max_depth = Vector{Int64}(undef,\
    \ length(paren_string))\n    for i in 1:length(paren_string)\n        depth =\
    \ 0\n        max_depth[i] = 0\n        for j in 1:length(paren_string[i])\n  \
    \          if paren_string[i][j] == '('\n                depth += 1\n        \
    \        if depth > max_depth[i]\n                    max_depth[i] = depth\n \
    \               end\n            elseif paren_string[i][j] == ')'\n          \
    \      depth -= 1\n            end\n        end\n    end\n    return max_depth\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = get_max_nesting(paren_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpx_0yn5_4.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpx_0yn5_4.jl:12\n   [2] macro expansion\n     @ /tmp/tmpx_0yn5_4.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpx_0yn5_4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx_0yn5_4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpx_0yn5_4.jl:12\n   [2] macro expansion\n     @ /tmp/tmpx_0yn5_4.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpx_0yn5_4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx_0yn5_4.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_max_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpx_0yn5_4.jl:12\n   [2] macro expansion\n     @ /tmp/tmpx_0yn5_4.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpx_0yn5_4.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_0yn5_4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        paren_group\
    \ = paren_groups[i]\n        max_nesting[i] = 0\n        current_nesting = 0\n\
    \        for j in 1:length(paren_group)\n            if paren_group[j] == '('\n\
    \                current_nesting += 1\n            elseif paren_group[j] == ')'\n\
    \                current_nesting -= 1\n            end\n            if current_nesting\
    \ > max_nesting[i]\n                max_nesting[i] = current_nesting\n       \
    \     end\n        end\n    end\n    return max_nesting\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = parse_nested_parens_helper(paren_groups[i])\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp7wtibttd.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp7wtibttd.jl:12\n   [2] macro expansion\n     @ /tmp/tmp7wtibttd.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7wtibttd.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7wtibttd.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp7wtibttd.jl:12\n   [2] macro expansion\n     @ /tmp/tmp7wtibttd.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7wtibttd.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7wtibttd.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp7wtibttd.jl:12\n   [2] macro expansion\n     @ /tmp/tmp7wtibttd.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7wtibttd.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wtibttd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_count = 0\n        nesting_count\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         nesting_count += 1\n            elseif paren == ')'\n              \
    \  nesting_count -= 1\n            end\n            if nesting_count > max_nesting_count\n\
    \                max_nesting_count = nesting_count\n            end\n        end\n\
    \        push!(max_nesting, max_nesting_count)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \" \")\n    paren_string = replace(paren_string,\
    \ \")\", \"\")\n    paren_string = replace(paren_string, \"(\", \"\")\n    return\
    \ parse.(Int64, split(paren_string, \" \"))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5b_tdqnl.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmp5b_tdqnl.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmp5b_tdqnl.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5b_tdqnl.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5b_tdqnl.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmp5b_tdqnl.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5b_tdqnl.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = get_max_nesting(paren_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpzdco15re.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpzdco15re.jl:12\n   [2] macro expansion\n     @ /tmp/tmpzdco15re.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzdco15re.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzdco15re.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpzdco15re.jl:12\n   [2] macro expansion\n     @ /tmp/tmpzdco15re.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzdco15re.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpzdco15re.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_max_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpzdco15re.jl:12\n   [2] macro expansion\n     @ /tmp/tmpzdco15re.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzdco15re.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzdco15re.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        nesting = 0\n        max_nesting_in_group\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         nesting += 1\n            elseif paren == ')'\n                nesting\
    \ -= 1\n            end\n            if nesting > max_nesting_in_group\n     \
    \           max_nesting_in_group = nesting\n            end\n        end\n   \
    \     push!(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_counts = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        paren_counts[i]\
    \ = parse_nested_parens_single(paren_groups[i])\n    end\n    return paren_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpfyc2nnqv.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_single not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpfyc2nnqv.jl:12\n   [2] macro expansion\n     @ /tmp/tmpfyc2nnqv.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfyc2nnqv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpfyc2nnqv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_single\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpfyc2nnqv.jl:12\n   [2] macro expansion\n     @ /tmp/tmpfyc2nnqv.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfyc2nnqv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpfyc2nnqv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_single\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpfyc2nnqv.jl:12\n   [2] macro expansion\n     @ /tmp/tmpfyc2nnqv.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfyc2nnqv.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyc2nnqv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")\", \"\")\n    paren_string = replace(paren_string, \"(\", \"\")\n    return\
    \ [length(x) for x in split(paren_string, \"\")]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphk1h33cx.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmphk1h33cx.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmphk1h33cx.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphk1h33cx.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmphk1h33cx.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmphk1h33cx.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmphk1h33cx.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # Initialize a vector to store the maximum depth of each group\n    max_depth\
    \ = zeros(Int64, length(groups))\n    # Iterate through each group\n    for i\
    \ in 1:length(groups)\n        # Initialize a counter to keep track of the depth\
    \ of the current group\n        depth = 0\n        # Initialize a counter to keep\
    \ track of the maximum depth of the current group\n        max_depth_curr = 0\n\
    \        # Iterate through each character in the current group\n        for j\
    \ in 1:length(groups[i])\n            # If the character is an opening parenthesis,\
    \ increment the depth counter\n            if groups[i][j] == '('\n          \
    \      depth += 1\n            # If the character is a closing parenthesis, decrement\
    \ the depth counter\n            elseif groups[i][j] == ')'\n                depth\
    \ -= 1\n            end\n            # If the depth counter is greater than the\
    \ maximum depth counter, update the maximum depth counter\n            if depth\
    \ > max_depth_curr\n                max_depth_curr = depth\n            end\n\
    \        end\n        # Update the maximum depth vector with the maximum depth\
    \ of the current group\n        max_depth[i] = max_depth_curr\n    end\n    #\
    \ Return the maximum depth vector\n    return max_depth\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize an empty vector to store the result\n    result = Int64[]\n\
    \    # Split the string by space to get individual groups\n    for group in split(paren_string,\
    \ \" \")\n        # Initialize a counter to keep track of the number of nested\
    \ parentheses\n        counter = 0\n        # Initialize a maximum counter to\
    \ keep track of the maximum number of nested parentheses\n        max_counter\
    \ = 0\n        # Iterate through each character in the group\n        for c in\
    \ group\n            # If the character is an opening parenthesis, increment the\
    \ counter\n            if c == '('\n                counter += 1\n           \
    \ # If the character is a closing parenthesis, decrement the counter\n       \
    \     elseif c == ')'\n                counter -= 1\n            end\n       \
    \     # Update the maximum counter if the current counter is greater than the\
    \ maximum counter\n            if counter > max_counter\n                max_counter\
    \ = counter\n            end\n        end\n        # Push the maximum counter\
    \ to the result vector\n        push!(result, max_counter)\n    end\n    # Return\
    \ the result vector\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_list))\n    for i in 1:length(paren_list)\n        paren_group\
    \ = paren_list[i]\n        max_nesting[i] = count_nesting(paren_group)\n    end\n\
    \    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp23rxwl5a.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  UndefVarError: count_nesting not defined\\n  Stacktrace:\\n   [1]\
    \ parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmp23rxwl5a.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmp23rxwl5a.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp23rxwl5a.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp23rxwl5a.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  UndefVarError: count_nesting\
    \ not defined\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmp23rxwl5a.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp23rxwl5a.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp23rxwl5a.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp23rxwl5a.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\\n  UndefVarError: count_nesting not defined\\\
    n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\n     @ Main\
    \ /tmp/tmp23rxwl5a.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp23rxwl5a.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp23rxwl5a.jl:21\\nTest Summary:\
    \ | Error  Total\\ntest set      |     3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        nesting = 0\n        max_nesting_in_group = 0\n\
    \        for char in group\n            if char == '('\n                nesting\
    \ += 1\n            elseif char == ')'\n                nesting -= 1\n       \
    \     end\n            if nesting > max_nesting_in_group\n                max_nesting_in_group\
    \ = nesting\n            end\n        end\n        push!(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_string))\n    for i in 1:length(paren_string)\n        paren_group\
    \ = paren_string[i]\n        paren_count = 0\n        for j in 1:length(paren_group)\n\
    \            if paren_group[j] == '('\n                paren_count += 1\n    \
    \        elseif paren_group[j] == ')'\n                paren_count -= 1\n    \
    \        end\n            max_nesting[i] = max(max_nesting[i], paren_count)\n\
    \        end\n    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")\", \"\")\n    paren_string = replace(paren_string, \"(\", \"\")\n    return\
    \ length.(split(paren_string, \"\"))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqcl77qn2.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpqcl77qn2.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpqcl77qn2.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqcl77qn2.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpqcl77qn2.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmpqcl77qn2.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqcl77qn2.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(\", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n   \
    \ paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2kb0e9ja.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2kb0e9ja.jl:1\n\
    in expression starting at /tmp/tmp2kb0e9ja.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0cybwest.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp0cybwest.jl:10\n   [2] macro expansion\n     @ /tmp/tmp0cybwest.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0cybwest.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0cybwest.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp0cybwest.jl:10\n   [2] macro expansion\n     @ /tmp/tmp0cybwest.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0cybwest.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0cybwest.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp0cybwest.jl:10\n   [2] macro expansion\n     @ /tmp/tmp0cybwest.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0cybwest.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0cybwest.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        level = 0\n        max_level = 0\n        for paren in paren_group\n\
    \            if paren == '('\n                level += 1\n            elseif paren\
    \ == ')'\n                level -= 1\n            end\n            max_level =\
    \ max(max_level, level)\n        end\n        max_nesting[i] = max_level\n   \
    \ end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, group) in enumerate(paren_groups)\n     \
    \   max_nesting[i] = parse_nested_parens_helper(group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpm_ud3tsg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpm_ud3tsg.jl:12\n   [2] macro expansion\n     @ /tmp/tmpm_ud3tsg.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm_ud3tsg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpm_ud3tsg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpm_ud3tsg.jl:12\n   [2] macro expansion\n     @ /tmp/tmpm_ud3tsg.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm_ud3tsg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpm_ud3tsg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpm_ud3tsg.jl:12\n   [2] macro expansion\n     @ /tmp/tmpm_ud3tsg.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm_ud3tsg.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_ud3tsg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(\", \"\")\n    paren_string = replace(paren_string, \"\", \" \")\n    paren_string\
    \ = replace(paren_string, \" \", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \" \")\n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \" \")\n    paren_string = replace(paren_string,\
    \ \" \", \"\")\n    paren_string = replace(paren_string, \"\", \" \")\n    paren_string\
    \ = replace(paren_string, \" \", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \" \")\n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \" \")\n    paren_string = replace(paren_string,\
    \ \" \", \"\")\n    paren_string = replace(paren_string, \"\", \" \")\n    paren_string\
    \ = replace(paren_string, \" \", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \" \")\n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \" \")\n    paren_string = replace(paren_string,\
    \ \" \", \"\")\n    paren_string = replace(paren_string, \"\", \" \")\n    paren_string\
    \ = replace(paren_string, \" \", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \" \")\n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \" \")\n    paren_string = replace(paren_string,\
    \ \" \", \"\")\n    paren_string = replace(paren_string, \"\", \" \")\n    paren_string\
    \ = replace(paren_string, \" \", \"\")\n    paren_string\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw4e_ljn3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw4e_ljn3.jl:1\n\
    in expression starting at /tmp/tmpw4e_ljn3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw7mnsuvz.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpw7mnsuvz.jl:10\n   [2] macro expansion\n     @ /tmp/tmpw7mnsuvz.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw7mnsuvz.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpw7mnsuvz.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpw7mnsuvz.jl:10\n   [2] macro expansion\n     @ /tmp/tmpw7mnsuvz.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw7mnsuvz.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpw7mnsuvz.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpw7mnsuvz.jl:10\n   [2] macro expansion\n     @ /tmp/tmpw7mnsuvz.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw7mnsuvz.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw7mnsuvz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Split the string into groups of parentheses\n    paren_groups = split(paren_string,\
    \ \" \")\n    # Initialize a vector to store the maximum nesting level for each\
    \ group\n    max_nesting_level = zeros(Int64, length(paren_groups))\n    # Loop\
    \ through each group\n    for i in 1:length(paren_groups)\n        # Initialize\
    \ a counter to keep track of the nesting level\n        nesting_level = 0\n  \
    \      # Initialize a variable to keep track of the maximum nesting level\n  \
    \      max_nesting_level[i] = 0\n        # Loop through each character in the\
    \ group\n        for c in paren_groups[i]\n            # If the character is an\
    \ opening parenthesis, increment the nesting level\n            if c == '('\n\
    \                nesting_level += 1\n            # If the character is a closing\
    \ parenthesis, decrement the nesting level\n            elseif c == ')'\n    \
    \            nesting_level -= 1\n            end\n            # Update the maximum\
    \ nesting level if the current nesting level is greater\n            if nesting_level\
    \ > max_nesting_level[i]\n                max_nesting_level[i] = nesting_level\n\
    \            end\n        end\n    end\n    # Return the maximum nesting level\
    \ for each group\n    return max_nesting_level\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = parse_nested_parens_helper(paren_group)\n    end\n \
    \   return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl0kjnzj7.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpl0kjnzj7.jl:12\n   [2] macro expansion\n     @ /tmp/tmpl0kjnzj7.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl0kjnzj7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpl0kjnzj7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpl0kjnzj7.jl:12\n   [2] macro expansion\n     @ /tmp/tmpl0kjnzj7.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl0kjnzj7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpl0kjnzj7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpl0kjnzj7.jl:12\n   [2] macro expansion\n     @ /tmp/tmpl0kjnzj7.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl0kjnzj7.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl0kjnzj7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bx600mm.jl:40\nin expression starting at\
    \ /tmp/tmp5bx600mm.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \"((\", \"\")\n    paren_string\
    \ = replace(paren_string, \"))\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(\", \"\")\n    paren_string = replace(paren_string, \")\", \"\")\n    paren_string\
    \ = replace(paren_string, \" \", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\",\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7x8x_t6b.jl:41\nin expression starting at\
    \ /tmp/tmp7x8x_t6b.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n   \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpunoce8r_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpunoce8r_.jl:1\n\
    in expression starting at /tmp/tmpunoce8r_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    max_nest_list = []\n    for\
    \ paren in paren_list\n        max_nest = 0\n        nest_count = 0\n        for\
    \ c in paren\n            if c == '('\n                nest_count += 1\n     \
    \       elseif c == ')'\n                nest_count -= 1\n            end\n  \
    \          if nest_count > max_nest\n                max_nest = nest_count\n \
    \           end\n        end\n        push!(max_nest_list, max_nest)\n    end\n\
    \    return max_nest_list\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = split(paren_string, \" \")\n    max_depth = Vector{Int64}(undef,\
    \ length(paren_string))\n    for i in 1:length(paren_string)\n        max_depth[i]\
    \ = 0\n        depth = 0\n        for j in 1:length(paren_string[i])\n       \
    \     if paren_string[i][j] == '('\n                depth += 1\n            elseif\
    \ paren_string[i][j] == ')'\n                depth -= 1\n            end\n   \
    \         if depth > max_depth[i]\n                max_depth[i] = depth\n    \
    \        end\n        end\n    end\n    return max_depth\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")(\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")(\", \"\")\n    paren_string\
    \ = replace(\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lmembpu.jl:40\nin expression starting at\
    \ /tmp/tmp6lmembpu.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptu8_slwx.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmptu8_slwx.jl:10\n   [2] macro expansion\n     @ /tmp/tmptu8_slwx.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptu8_slwx.jl:16\ntest set:\
    \ Error During Test at /tmp/tmptu8_slwx.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmptu8_slwx.jl:10\n   [2] macro expansion\n     @ /tmp/tmptu8_slwx.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptu8_slwx.jl:16\ntest set:\
    \ Error During Test at /tmp/tmptu8_slwx.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmptu8_slwx.jl:10\n   [2] macro expansion\n     @ /tmp/tmptu8_slwx.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptu8_slwx.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptu8_slwx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(\", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n   \
    \ paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplmgaxiss.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplmgaxiss.jl:1\n\
    in expression starting at /tmp/tmplmgaxiss.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of nesting for each group\n \
    \   depths = Vector{Int64}()\n    # Initialize a counter to keep track of the\
    \ depth of nesting\n    depth = 0\n    # Initialize a variable to keep track of\
    \ the start of a group\n    start = 1\n    # Loop through the string\n    for\
    \ i in 1:length(paren_string)\n        # If we encounter an opening parenthesis,\
    \ increment the depth\n        if paren_string[i] == '('\n            depth +=\
    \ 1\n        # If we encounter a closing parenthesis, decrement the depth\n  \
    \      elseif paren_string[i] == ')'\n            depth -= 1\n        # If we\
    \ encounter a space, we have reached the end of a group\n        elseif paren_string[i]\
    \ == ' '\n            # Append the depth of the group to the vector\n        \
    \    push!(depths, depth)\n            # Reset the depth counter\n           \
    \ depth = 0\n            # Reset the start of the group\n            start = i\
    \ + 1\n        end\n    end\n    # Return the vector\n    return depths\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp36wh9h6i.jl:41\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36wh9h6i.jl:41 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36wh9h6i.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp36wh9h6i.jl:42\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp36wh9h6i.jl:42 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36wh9h6i.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp36wh9h6i.jl:43\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp36wh9h6i.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36wh9h6i.jl:40\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36wh9h6i.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        paren_stack = []\n        max_depth = 0\n\
    \        for paren in paren_group\n            if paren == '('\n             \
    \   push!(paren_stack, paren)\n                max_depth = max(max_depth, length(paren_stack))\n\
    \            elseif paren == ')'\n                pop!(paren_stack)\n        \
    \    end\n        end\n        push!(max_nesting, max_depth)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")(\", \") (\")\n    paren_string = split(paren_string,\
    \ \" \")\n    paren_string = map(x -> count_parens(x), paren_string)\n    return\
    \ paren_string\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw4_v0iyb.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpw4_v0iyb.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpw4_v0iyb.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw4_v0iyb.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpw4_v0iyb.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmpw4_v0iyb.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw4_v0iyb.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # Initialize the output vector\n    output = Vector{Int64}(undef, length(groups))\n\
    \    # Iterate over the groups\n    for (i, group) in enumerate(groups)\n    \
    \    # Initialize the stack\n        stack = []\n        # Initialize the max\
    \ level\n        max_level = 0\n        # Iterate over the characters in the group\n\
    \        for c in group\n            # If the character is an opening parenthesis,\
    \ push it to the stack\n            if c == '('\n                push!(stack,\
    \ c)\n            # If the character is a closing parenthesis, pop the stack\n\
    \            elseif c == ')'\n                pop!(stack)\n            end\n \
    \           # Update the max level\n            max_level = max(max_level, length(stack))\n\
    \        end\n        # Save the max level\n        output[i] = max_level\n  \
    \  end\n    # Return the output\n    return output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = []\n   \
    \ for paren_group in paren_groups\n        paren_levels = push!(paren_levels,\
    \ parse_parens(paren_group))\n    end\n    return paren_levels\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpsfl11vgd.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpsfl11vgd.jl:12\n   [2] macro expansion\n     @ /tmp/tmpsfl11vgd.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsfl11vgd.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsfl11vgd.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpsfl11vgd.jl:12\n   [2] macro expansion\n     @ /tmp/tmpsfl11vgd.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsfl11vgd.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsfl11vgd.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_parens not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpsfl11vgd.jl:12\n   [2] macro expansion\n     @ /tmp/tmpsfl11vgd.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsfl11vgd.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfl11vgd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        nesting = 0\n        max_nesting_in_group = 0\n        for c in paren_group\n\
    \            if c == '('\n                nesting += 1\n            elseif c ==\
    \ ')'\n                nesting -= 1\n            end\n            max_nesting_in_group\
    \ = max(max_nesting_in_group, nesting)\n        end\n        max_nesting[i] =\
    \ max_nesting_in_group\n    end\n    return max_nesting\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        paren_group\
    \ = paren_groups[i]\n        paren_count = 0\n        max_count = 0\n        for\
    \ j in 1:length(paren_group)\n            if paren_group[j] == '('\n         \
    \       paren_count += 1\n            elseif paren_group[j] == ')'\n         \
    \       paren_count -= 1\n            end\n            if paren_count > max_count\n\
    \                max_count = paren_count\n            end\n        end\n     \
    \   max_nesting[i] = max_count\n    end\n    return max_nesting\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth = Vector{Int64}()\n\
    \    # Initialize a counter to keep track of the depth\n    count = 0\n    # Iterate\
    \ through each character in the string\n    for c in paren_string\n        # If\
    \ the character is an opening parenthesis, increment the counter\n        if c\
    \ == '('\n            count += 1\n        # If the character is a closing parenthesis,\
    \ decrement the counter\n        elseif c == ')'\n            count -= 1\n   \
    \     # If the character is a space, store the current depth and reset the counter\n\
    \        elseif c == ' '\n            push!(depth, count)\n            count =\
    \ 0\n        end\n    end\n    # Return the vector of depths\n    return depth\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyelc84qy.jl:35\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyelc84qy.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyelc84qy.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpyelc84qy.jl:36\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpyelc84qy.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyelc84qy.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpyelc84qy.jl:37\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyelc84qy.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyelc84qy.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyelc84qy.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        nesting = 0\n        max_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         nesting += 1\n            elseif paren == ')'\n                nesting\
    \ -= 1\n            end\n            if nesting > max_nesting_level\n        \
    \        max_nesting_level = nesting\n            end\n        end\n        push!(max_nesting,\
    \ max_nesting_level)\n    end\n    return max_nesting\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = parse_nested_parens_helper(paren_groups[i])\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp8zc6lfz7.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp8zc6lfz7.jl:12\n   [2] macro expansion\n     @ /tmp/tmp8zc6lfz7.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8zc6lfz7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8zc6lfz7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp8zc6lfz7.jl:12\n   [2] macro expansion\n     @ /tmp/tmp8zc6lfz7.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8zc6lfz7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8zc6lfz7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp8zc6lfz7.jl:12\n   [2] macro expansion\n     @ /tmp/tmp8zc6lfz7.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8zc6lfz7.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8zc6lfz7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # initialize a vector to store the depth of each group\n    depth_vector\
    \ = Vector{Int64}()\n    # initialize a variable to store the depth of the current\
    \ group\n    depth = 0\n    # loop through each character in the string\n    for\
    \ c in paren_string\n        # if the character is an opening parenthesis, increment\
    \ the depth\n        if c == '('\n            depth += 1\n        # if the character\
    \ is a closing parenthesis, decrement the depth\n        elseif c == ')'\n   \
    \         depth -= 1\n        # if the character is a space, append the current\
    \ depth to the vector and reset the depth to 0\n        elseif c == ' '\n    \
    \        push!(depth_vector, depth)\n            depth = 0\n        end\n    end\n\
    \    # return the vector\n    return depth_vector\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm6qmxotj.jl:35\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm6qmxotj.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm6qmxotj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm6qmxotj.jl:36\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpm6qmxotj.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm6qmxotj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm6qmxotj.jl:37\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm6qmxotj.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm6qmxotj.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm6qmxotj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # Initialize a vector to store the depth of each group\n    depth = Vector{Int64}(undef,\
    \ length(groups))\n    # Iterate over each group\n    for i in 1:length(groups)\n\
    \        # Initialize a counter to keep track of the depth\n        count = 0\n\
    \        # Iterate over each character in the group\n        for j in 1:length(groups[i])\n\
    \            # If the character is an opening parenthesis, increment the counter\n\
    \            if groups[i][j] == '('\n                count += 1\n            #\
    \ If the character is a closing parenthesis, decrement the counter\n         \
    \   elseif groups[i][j] == ')'\n                count -= 1\n            end\n\
    \        end\n        # Store the depth of the group\n        depth[i] = count\n\
    \    end\n    # Return the depth of each group\n    return depth\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgde3ojbv.jl:38\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0, 0] ==\
    \ [2, 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgde3ojbv.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgde3ojbv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgde3ojbv.jl:39\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgde3ojbv.jl:39 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgde3ojbv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgde3ojbv.jl:40\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: [0] == [4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgde3ojbv.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgde3ojbv.jl:37\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgde3ojbv.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return map(x -> count_nested_parens(x),\
    \ paren_groups)\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx_6_m_8k.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ count_nested_parens not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmpx_6_m_8k.jl:10\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n     @ Base\
    \ ./array.jl:695\n   [4] collect_similar\n     @ ./array.jl:606 [inlined]\n  \
    \ [5] map\n     @ ./abstractarray.jl:2294 [inlined]\n   [6] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpx_6_m_8k.jl:10\n   [7] macro expansion\n     @ /tmp/tmpx_6_m_8k.jl:17\
    \ [inlined]\n   [8] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpx_6_m_8k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpx_6_m_8k.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: count_nested_parens\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpx_6_m_8k.jl:10\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n     @ Base\
    \ ./array.jl:695\n   [4] collect_similar\n     @ ./array.jl:606 [inlined]\n  \
    \ [5] map\n     @ ./abstractarray.jl:2294 [inlined]\n   [6] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpx_6_m_8k.jl:10\n   [7] macro expansion\n     @ /tmp/tmpx_6_m_8k.jl:18\
    \ [inlined]\n   [8] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpx_6_m_8k.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpx_6_m_8k.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_6_m_8k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = count_nesting(paren_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp_sbknzh8.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ count_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp_sbknzh8.jl:12\n   [2] macro expansion\n     @ /tmp/tmp_sbknzh8.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_sbknzh8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_sbknzh8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: count_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp_sbknzh8.jl:12\n   [2] macro expansion\n     @ /tmp/tmp_sbknzh8.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_sbknzh8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_sbknzh8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: count_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmp_sbknzh8.jl:12\n   [2] macro expansion\n     @ /tmp/tmp_sbknzh8.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_sbknzh8.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_sbknzh8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for c in group\n            if c == '('\n                current_nesting_level\
    \ += 1\n            elseif c == ')'\n                current_nesting_level -=\
    \ 1\n            end\n            if current_nesting_level > max_nesting_level\n\
    \                max_nesting_level = current_nesting_level\n            end\n\
    \        end\n        push!(max_nesting, max_nesting_level)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_parens(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6ysckr7p.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp6ysckr7p.jl:10\n   [2] macro expansion\n     @ /tmp/tmp6ysckr7p.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6ysckr7p.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6ysckr7p.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp6ysckr7p.jl:10\n   [2] macro expansion\n     @ /tmp/tmp6ysckr7p.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6ysckr7p.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6ysckr7p.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_parens not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmp6ysckr7p.jl:10\n   [2] macro expansion\n     @ /tmp/tmp6ysckr7p.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6ysckr7p.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ysckr7p.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = max_nesting_depth(paren_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8ro8jtql.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_depth not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp8ro8jtql.jl:12\n   [2] macro expansion\n     @ /tmp/tmp8ro8jtql.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8ro8jtql.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8ro8jtql.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_depth\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp8ro8jtql.jl:12\n   [2] macro expansion\n     @ /tmp/tmp8ro8jtql.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8ro8jtql.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8ro8jtql.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_depth not\
    \ defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n \
    \    @ Main /tmp/tmp8ro8jtql.jl:12\n   [2] macro expansion\n     @ /tmp/tmp8ro8jtql.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8ro8jtql.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ro8jtql.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = get_max_nesting(paren_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpetp_fi2w.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpetp_fi2w.jl:12\n   [2] macro expansion\n     @ /tmp/tmpetp_fi2w.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpetp_fi2w.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpetp_fi2w.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpetp_fi2w.jl:12\n   [2] macro expansion\n     @ /tmp/tmpetp_fi2w.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpetp_fi2w.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpetp_fi2w.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_max_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpetp_fi2w.jl:12\n   [2] macro expansion\n     @ /tmp/tmpetp_fi2w.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpetp_fi2w.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetp_fi2w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting_level += 1\n            elseif paren == ')'\n      \
    \          current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")\", \"\")\n    paren_string\
    \ = replace(paren_string, \"(\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    return [length(x) for x in split(paren_string, \"\")]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmph_z4q81h.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmph_z4q81h.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmph_z4q81h.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph_z4q81h.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmph_z4q81h.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmph_z4q81h.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmph_z4q81h.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7rtg2q0w.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp7rtg2q0w.jl:10\n   [2] macro expansion\n     @ /tmp/tmp7rtg2q0w.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7rtg2q0w.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp7rtg2q0w.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp7rtg2q0w.jl:10\n   [2] macro expansion\n     @ /tmp/tmp7rtg2q0w.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7rtg2q0w.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp7rtg2q0w.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp7rtg2q0w.jl:10\n   [2] macro expansion\n     @ /tmp/tmp7rtg2q0w.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7rtg2q0w.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7rtg2q0w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        max_nesting = push!(max_nesting, find_max_nesting(group))\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9q1pjukg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ find_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9q1pjukg.jl:12\n   [2] macro expansion\n     @ /tmp/tmp9q1pjukg.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9q1pjukg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9q1pjukg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: find_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9q1pjukg.jl:12\n   [2] macro expansion\n     @ /tmp/tmp9q1pjukg.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9q1pjukg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9q1pjukg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: find_max_nesting not\
    \ defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n \
    \    @ Main /tmp/tmp9q1pjukg.jl:12\n   [2] macro expansion\n     @ /tmp/tmp9q1pjukg.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9q1pjukg.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9q1pjukg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting_level += 1\n            elseif paren == ')'\n      \
    \          current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_depth = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_depth[i]\
    \ = parse_parens(paren_groups[i])\n    end\n    return max_depth\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2druf6uq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp2druf6uq.jl:12\n   [2] macro expansion\n     @ /tmp/tmp2druf6uq.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2druf6uq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2druf6uq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp2druf6uq.jl:12\n   [2] macro expansion\n     @ /tmp/tmp2druf6uq.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2druf6uq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2druf6uq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_parens not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmp2druf6uq.jl:12\n   [2] macro expansion\n     @ /tmp/tmp2druf6uq.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2druf6uq.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2druf6uq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the result\n    result = Vector{Int64}()\n\
    \    # Split the string by spaces\n    groups = split(paren_string, \" \")\n \
    \   # Loop through each group\n    for group in groups\n        # Initialize a\
    \ counter for the current group\n        counter = 0\n        # Initialize a maximum\
    \ counter for the current group\n        max_counter = 0\n        # Loop through\
    \ each character in the current group\n        for char in group\n           \
    \ # If the character is an open parenthesis, increase the counter\n          \
    \  if char == '('\n                counter += 1\n            # If the character\
    \ is a closed parenthesis, decrease the counter\n            elseif char == ')'\n\
    \                counter -= 1\n            end\n            # Update the maximum\
    \ counter if the current counter is larger\n            if counter > max_counter\n\
    \                max_counter = counter\n            end\n        end\n       \
    \ # Append the maximum counter to the result\n        push!(result, max_counter)\n\
    \    end\n    # Return the result\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting_level += 1\n            elseif paren == ')'\n      \
    \          current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    paren_depth = []\n    for\
    \ paren in paren_list\n        depth = 0\n        max_depth = 0\n        for c\
    \ in paren\n            if c == '('\n                depth += 1\n            elseif\
    \ c == ')'\n                depth -= 1\n            end\n            if depth\
    \ > max_depth\n                max_depth = depth\n            end\n        end\n\
    \        push!(paren_depth, max_depth)\n    end\n    return paren_depth\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # Initialize a vector to store the maximum nesting level for each group\n\
    \    max_nesting = zeros(Int64, length(groups))\n    # Loop through each group\n\
    \    for i in 1:length(groups)\n        # Initialize a counter for the current\
    \ nesting level\n        curr_nesting = 0\n        # Initialize a counter for\
    \ the maximum nesting level\n        max_nesting[i] = 0\n        # Loop through\
    \ each character in the group\n        for j in 1:length(groups[i])\n        \
    \    # If the character is an opening parenthesis, increment the current nesting\
    \ level\n            if groups[i][j] == '('\n                curr_nesting += 1\n\
    \            # If the character is a closing parenthesis, decrement the current\
    \ nesting level\n            elseif groups[i][j] == ')'\n                curr_nesting\
    \ -= 1\n            end\n            # If the current nesting level is greater\
    \ than the maximum nesting level, update the maximum nesting level\n         \
    \   if curr_nesting > max_nesting[i]\n                max_nesting[i] = curr_nesting\n\
    \            end\n        end\n    end\n    # Return the maximum nesting level\
    \ for each group\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = get_max_nesting(paren_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp45xzrgyk.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp45xzrgyk.jl:12\n   [2] macro expansion\n     @ /tmp/tmp45xzrgyk.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp45xzrgyk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp45xzrgyk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp45xzrgyk.jl:12\n   [2] macro expansion\n     @ /tmp/tmp45xzrgyk.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp45xzrgyk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp45xzrgyk.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_max_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmp45xzrgyk.jl:12\n   [2] macro expansion\n     @ /tmp/tmp45xzrgyk.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp45xzrgyk.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45xzrgyk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = []\n   \
    \ for group in paren_groups\n        paren_levels = [push!(paren_levels, parse_parens(group))]\n\
    \    end\n    return paren_levels\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgzsmvqh9.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpgzsmvqh9.jl:12\n   [2] macro expansion\n     @ /tmp/tmpgzsmvqh9.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgzsmvqh9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgzsmvqh9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpgzsmvqh9.jl:12\n   [2] macro expansion\n     @ /tmp/tmpgzsmvqh9.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgzsmvqh9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgzsmvqh9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_parens not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpgzsmvqh9.jl:12\n   [2] macro expansion\n     @ /tmp/tmpgzsmvqh9.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgzsmvqh9.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgzsmvqh9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = max_nesting_in_paren_group(paren_group)\n    end\n \
    \   return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb1xe0j4_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_in_paren_group not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpb1xe0j4_.jl:12\n   [2] macro expansion\n     @ /tmp/tmpb1xe0j4_.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb1xe0j4_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpb1xe0j4_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_in_paren_group\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpb1xe0j4_.jl:12\n   [2] macro expansion\n     @ /tmp/tmpb1xe0j4_.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb1xe0j4_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpb1xe0j4_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_in_paren_group\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpb1xe0j4_.jl:12\n   [2] macro expansion\n     @ /tmp/tmpb1xe0j4_.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb1xe0j4_.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb1xe0j4_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depths = Int64[]\n\
    \    # Initialize a counter to keep track of the depth of the current group\n\
    \    depth = 0\n    # Initialize a variable to keep track of the start of the\
    \ current group\n    start = 0\n    # Loop through the string\n    for i in 1:length(paren_string)\n\
    \        # If the current character is an opening parenthesis, increment the depth\n\
    \        if paren_string[i] == '('\n            depth += 1\n        # If the current\
    \ character is a closing parenthesis, decrement the depth\n        elseif paren_string[i]\
    \ == ')'\n            depth -= 1\n        # If the current character is a space,\
    \ and the depth is zero, we have reached the end of a group\n        elseif paren_string[i]\
    \ == ' ' && depth == 0\n            # Append the depth of the current group to\
    \ the depths vector\n            push!(depths, depth)\n            # Reset the\
    \ depth counter\n            depth = 0\n            # Reset the start index\n\
    \            start = i + 1\n        end\n    end\n    # Return the depths vector\n\
    \    return depths\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg6c936rn.jl:41\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg6c936rn.jl:41 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg6c936rn.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpg6c936rn.jl:42\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpg6c936rn.jl:42 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg6c936rn.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpg6c936rn.jl:43\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpg6c936rn.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg6c936rn.jl:40\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6c936rn.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = parse_nested_parens_helper(paren_group)\n    end\n \
    \   return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprbhszi7p.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmprbhszi7p.jl:12\n   [2] macro expansion\n     @ /tmp/tmprbhszi7p.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprbhszi7p.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprbhszi7p.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmprbhszi7p.jl:12\n   [2] macro expansion\n     @ /tmp/tmprbhszi7p.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprbhszi7p.jl:20\ntest set:\
    \ Error During Test at /tmp/tmprbhszi7p.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmprbhszi7p.jl:12\n   [2] macro expansion\n     @ /tmp/tmprbhszi7p.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprbhszi7p.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprbhszi7p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = 0\n        current_nesting = 0\n        for paren in\
    \ paren_group\n            if paren == '('\n                current_nesting +=\
    \ 1\n            elseif paren == ')'\n                current_nesting -= 1\n \
    \           end\n            if current_nesting > max_nesting[i]\n           \
    \     max_nesting[i] = current_nesting\n            end\n        end\n    end\n\
    \    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting_level += 1\n            elseif paren == ')'\n      \
    \          current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplrzbnisn.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmplrzbnisn.jl:10\n   [2] macro expansion\n     @ /tmp/tmplrzbnisn.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplrzbnisn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmplrzbnisn.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmplrzbnisn.jl:10\n   [2] macro expansion\n     @ /tmp/tmplrzbnisn.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplrzbnisn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmplrzbnisn.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmplrzbnisn.jl:10\n   [2] macro expansion\n     @ /tmp/tmplrzbnisn.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplrzbnisn.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrzbnisn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # initialize an array to store the maximum nesting level for each group\n\
    \    max_nesting = zeros(Int64, length(groups))\n    # loop through each group\n\
    \    for i in 1:length(groups)\n        # initialize a counter to keep track of\
    \ the current nesting level\n        nesting_level = 0\n        # loop through\
    \ each character in the group\n        for j in 1:length(groups[i])\n        \
    \    # if the character is an opening parenthesis, increase the nesting level\
    \ by 1\n            if groups[i][j] == '('\n                nesting_level += 1\n\
    \            # if the character is a closing parenthesis, decrease the nesting\
    \ level by 1\n            elseif groups[i][j] == ')'\n                nesting_level\
    \ -= 1\n            end\n            # if the current nesting level is greater\
    \ than the maximum nesting level for this group,\n            # update the maximum\
    \ nesting level\n            if nesting_level > max_nesting[i]\n             \
    \   max_nesting[i] = nesting_level\n            end\n        end\n    end\n  \
    \  # return the maximum nesting level for each group\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        paren_stack = []\n        for c in paren_group\n            if c == '('\n\
    \                push!(paren_stack, c)\n            elseif c == ')'\n        \
    \        pop!(paren_stack)\n            end\n        end\n        max_nesting[i]\
    \ = length(paren_stack)\n    end\n    return max_nesting\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpg6akgo9i.jl:29\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0, 0] ==\
    \ [2, 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg6akgo9i.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg6akgo9i.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpg6akgo9i.jl:30\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpg6akgo9i.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg6akgo9i.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpg6akgo9i.jl:31\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: [0] == [4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg6akgo9i.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg6akgo9i.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6akgo9i.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the results\n    result = Vector{Int64}()\n\
    \    # Split the string by spaces\n    paren_groups = split(paren_string, \" \"\
    )\n    # For each group, calculate the maximum nesting level\n    for group in\
    \ paren_groups\n        # Initialize a counter to keep track of the nesting level\n\
    \        counter = 0\n        # Initialize a variable to keep track of the maximum\
    \ nesting level\n        max_level = 0\n        # For each character in the group\n\
    \        for char in group\n            # If the character is an opening parenthesis,\
    \ increment the counter\n            if char == '('\n                counter +=\
    \ 1\n            # If the character is a closing parenthesis, decrement the counter\n\
    \            elseif char == ')'\n                counter -= 1\n            end\n\
    \            # Update the maximum nesting level if the current nesting level is\
    \ greater than the current maximum\n            if counter > max_level\n     \
    \           max_level = counter\n            end\n        end\n        # Append\
    \ the maximum nesting level to the result vector\n        push!(result, max_level)\n\
    \    end\n    # Return the result vector\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depths of each group\n    depths =\
    \ Vector{Int64}()\n    # Initialize a counter to keep track of the current depth\n\
    \    depth = 0\n    # Loop through each character in the string\n    for c in\
    \ paren_string\n        # If the character is an open paren, increment the depth\n\
    \        if c == '('\n            depth += 1\n        # If the character is a\
    \ closed paren, decrement the depth\n        elseif c == ')'\n            depth\
    \ -= 1\n        # If the character is a space, add the current depth to the vector\
    \ and reset the depth to 0\n        elseif c == ' '\n            push!(depths,\
    \ depth)\n            depth = 0\n        end\n    end\n    # Return the vector\
    \ of depths\n    return depths\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkseou1dh.jl:35\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkseou1dh.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkseou1dh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkseou1dh.jl:36\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpkseou1dh.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkseou1dh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkseou1dh.jl:37\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpkseou1dh.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkseou1dh.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkseou1dh.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    result = Vector{Int64}()\n\
    \    for i in 1:length(paren_string)\n        if paren_string[i] == '('\n    \
    \        j = i\n            count = 0\n            while j <= length(paren_string)\
    \ && paren_string[j] != ')'\n                if paren_string[j] == '('\n     \
    \               count += 1\n                end\n                j += 1\n    \
    \        end\n            push!(result, count)\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqg8yilud.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpqg8yilud.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpqg8yilud.jl:31\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqg8yilud.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpqg8yilud.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmpqg8yilud.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqg8yilud.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = parse_nested_parens_helper(paren_groups[i])\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmplsf4emws.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmplsf4emws.jl:12\n   [2] macro expansion\n     @ /tmp/tmplsf4emws.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplsf4emws.jl:20\ntest set:\
    \ Error During Test at /tmp/tmplsf4emws.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmplsf4emws.jl:12\n   [2] macro expansion\n     @ /tmp/tmplsf4emws.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplsf4emws.jl:20\ntest set:\
    \ Error During Test at /tmp/tmplsf4emws.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmplsf4emws.jl:12\n   [2] macro expansion\n     @ /tmp/tmplsf4emws.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplsf4emws.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplsf4emws.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_single(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphmzs46_r.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_single not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmphmzs46_r.jl:10\n   [2] macro expansion\n     @ /tmp/tmphmzs46_r.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphmzs46_r.jl:16\ntest set:\
    \ Error During Test at /tmp/tmphmzs46_r.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_single\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmphmzs46_r.jl:10\n   [2] macro expansion\n     @ /tmp/tmphmzs46_r.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphmzs46_r.jl:16\ntest set:\
    \ Error During Test at /tmp/tmphmzs46_r.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_single\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmphmzs46_r.jl:10\n   [2] macro expansion\n     @ /tmp/tmphmzs46_r.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphmzs46_r.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphmzs46_r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")\", \"\")\n    paren_string\
    \ = replace(paren_string, \"(\", \"\")\n    return [length(x) for x in split(paren_string,\
    \ \"\")]\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfgijo53p.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\n\
    \    replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\n    ...\n  Stacktrace:\n\
    \   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpfgijo53p.jl:9\n\
    \   [2] macro expansion\n     @ /tmp/tmpfgijo53p.jl:21 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfgijo53p.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpfgijo53p.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\n  \
    \  replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\n    ...\n  Stacktrace:\n\
    \   [1] parse_nested_parens(paren_string::String)\n     @ Main /tmp/tmpfgijo53p.jl:9\n\
    \   [2] macro expansion\n     @ /tmp/tmpfgijo53p.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scop"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfgijo53p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        max_nesting = push!(max_nesting, count_nesting(group))\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm964ffiw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ count_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpm964ffiw.jl:12\n   [2] macro expansion\n     @ /tmp/tmpm964ffiw.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm964ffiw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpm964ffiw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: count_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpm964ffiw.jl:12\n   [2] macro expansion\n     @ /tmp/tmpm964ffiw.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm964ffiw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpm964ffiw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: count_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpm964ffiw.jl:12\n   [2] macro expansion\n     @ /tmp/tmpm964ffiw.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm964ffiw.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm964ffiw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = max_nesting_in_group(paren_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1wbcxxx9.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_in_group not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1wbcxxx9.jl:12\n   [2] macro expansion\n     @ /tmp/tmp1wbcxxx9.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1wbcxxx9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1wbcxxx9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_in_group\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1wbcxxx9.jl:12\n   [2] macro expansion\n     @ /tmp/tmp1wbcxxx9.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1wbcxxx9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1wbcxxx9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_in_group\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1wbcxxx9.jl:12\n   [2] macro expansion\n     @ /tmp/tmp1wbcxxx9.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1wbcxxx9.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1wbcxxx9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \"((\", \"\")\n    paren_string\
    \ = replace(paren_string, \"))\", \"\")\n    paren_string = replace(paren_string,\
    \ \")\", \"\")\n    paren_string = replace(paren_string, \"(\", \"\")\n    return\
    \ [length(x) for x in split(paren_string, \"\")]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwtp0sasy.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpwtp0sasy.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpwtp0sasy.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwtp0sasy.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpwtp0sasy.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmpwtp0sasy.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwtp0sasy.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = []\n   \
    \ for paren_group in paren_groups\n        paren_levels = [push!(paren_levels,\
    \ paren_level(paren_group))]\n    end\n    return paren_levels\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpj47r1ok0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ paren_level not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpj47r1ok0.jl:12\n   [2] macro expansion\n     @ /tmp/tmpj47r1ok0.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj47r1ok0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpj47r1ok0.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: paren_level\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpj47r1ok0.jl:12\n   [2] macro expansion\n     @ /tmp/tmpj47r1ok0.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj47r1ok0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpj47r1ok0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: paren_level not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpj47r1ok0.jl:12\n   [2] macro expansion\n     @ /tmp/tmpj47r1ok0.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj47r1ok0.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj47r1ok0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    paren_list = map(x -> x[2:end-1],\
    \ paren_list)\n    paren_list = map(x -> count(x, '('), paren_list)\n    return\
    \ paren_list\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq_1jmf2j.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: objects of type SubString{String} are not callable\\\
    n  Stacktrace:\\n    [1] _simple_count(pred::SubString{String}, itr::Char, init::Int64)\\\
    n      @ Base ./reduce.jl:970\\n    [2] count(f::SubString{String}, itr::Char;\
    \ init::Int64)\\n      @ Base ./reduce.jl:965\\n    [3] count(f::SubString{String},\
    \ itr::Char)\\n      @ Base ./reduce.jl:965\\n    [4] (::var\"#2#4\")(x::SubString{String})\\\
    n      @ Main /tmp/tmpq_1jmf2j.jl:11\\n    [5] iterate\\n      @ ./generator.jl:47\
    \ [inlined]\\n    [6] _collect\\n      @ ./array.jl:695 [inlined]\\n    [7] collect_similar\\\
    n      @ ./array.jl:606 [inlined]\\n    [8] map\\n      @ ./abstractarray.jl:2294\
    \ [inlined]\\n    [9] parse_nested_parens(paren_string::String)\\n      @ Main\
    \ /tmp/tmpq_1jmf2j.jl:11\\n   [10] macro expansion\\n      @ /tmp/tmpq_1jmf2j.jl:19\
    \ [inlined]\\n   [11] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [12] top-level scope\\n      @ /tmp/tmpq_1jmf2j.jl:18\\ntest\
    \ set: Error During Test at /tmp/tmpq_1jmf2j.jl:20\\n  Test threw exception\\\
    n  Expression: candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError:\
    \ objects of type SubString{String} are not callable\\n  Stacktrace:\\n    [1]\
    \ _simple_count(pred::SubString{String}, itr::Char, init::Int64)\\n      @ Base\
    \ ./reduce.jl:970\\n    [2] count(f::SubString{String}, itr::Char; init::Int64)\\\
    n      @ Base ./reduce.jl:965\\n    [3] count(f::SubString{String}, itr::Char)\\\
    n      @ Base ./reduce.jl:965\\n    [4] (::var\"#2#4\")(x::SubString{String})\\\
    n      @ Main /tmp/tmpq_1jmf2j.jl:11\\n    [5] iterate\\n      @ ./generator.jl:47\
    \ [inlined]\\n    [6] _collect\\n      @ ./array.jl:695 [inlined]\\n    [7] collect_similar\\\
    n      @ ./array.jl:606 [inlined]\\n    [8] map\\n      @ ./abstractarray.jl:2294\
    \ [inlined]\\n    [9] parse_nested_parens(paren_string::String)\\n      @ Main\
    \ /tmp/tmpq_1jmf2j.jl:11\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    paren_list = map(x -> x[2:end-1],\
    \ paren_list)\n    paren_list = map(x -> count_parens(x), paren_list)\n    return\
    \ paren_list\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1x_y4b3l.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ count_parens not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::SubString{String})\n\
    \     @ Main /tmp/tmp1x_y4b3l.jl:11\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#2#4\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n     @ Base\
    \ ./array.jl:695\n   [4] collect_similar\n     @ ./array.jl:606 [inlined]\n  \
    \ [5] map\n     @ ./abstractarray.jl:2294 [inlined]\n   [6] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1x_y4b3l.jl:11\n   [7] macro expansion\n     @ /tmp/tmp1x_y4b3l.jl:19\
    \ [inlined]\n   [8] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp1x_y4b3l.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1x_y4b3l.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: count_parens\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::SubString{String})\n \
    \    @ Main /tmp/tmp1x_y4b3l.jl:11\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#2#4\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n     @ Base\
    \ ./array.jl:695\n   [4] collect_similar\n     @ ./array.jl:606 [inlined]\n  \
    \ [5] map\n     @ ./abstractarray.jl:2294 [inlined]\n   [6] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1x_y4b3l.jl:11\n   [7] macro expansion\n     @ /tmp/tmp1x_y4b3l.jl:20\
    \ [inlined]\n   [8] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp1x_y4b3l.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1x_y4b3l.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarErro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1x_y4b3l.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the results\n    results = Vector{Int64}()\n\
    \    # Split the string by spaces\n    paren_groups = split(paren_string, \" \"\
    )\n    # Iterate through each group\n    for group in paren_groups\n        #\
    \ Initialize a counter to keep track of the current level of nesting\n       \
    \ current_level = 0\n        # Initialize a counter to keep track of the maximum\
    \ level of nesting\n        max_level = 0\n        # Iterate through each character\
    \ in the group\n        for char in group\n            # If the character is an\
    \ opening parenthesis, increment the current level\n            if char == '('\n\
    \                current_level += 1\n            # If the character is a closing\
    \ parenthesis, decrement the current level\n            elseif char == ')'\n \
    \               current_level -= 1\n            end\n            # If the current\
    \ level is greater than the maximum level, update the maximum level\n        \
    \    if current_level > max_level\n                max_level = current_level\n\
    \            end\n        end\n        # Append the maximum level to the results\
    \ vector\n        push!(results, max_level)\n    end\n    # Return the results\
    \ vector\n    return results\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth_vector\
    \ = Vector{Int64}()\n    # Initialize a counter to keep track of the depth\n \
    \   depth_counter = 0\n    # Initialize a string to store the current group\n\
    \    current_group = \"\"\n    # Loop through the string\n    for i in 1:length(paren_string)\n\
    \        # If the current character is a left parenthesis, increment the depth\
    \ counter\n        if paren_string[i] == '('\n            depth_counter += 1\n\
    \        # If the current character is a right parenthesis, decrement the depth\
    \ counter\n        elseif paren_string[i] == ')'\n            depth_counter -=\
    \ 1\n        # If the current character is a space, push the depth counter to\
    \ the depth vector\n        # and reset the depth counter and current group\n\
    \        elseif paren_string[i] == ' '\n            push!(depth_vector, depth_counter)\n\
    \            depth_counter = 0\n            current_group = \"\"\n        # If\
    \ the current character is not a parenthesis or a space, add it to the current\
    \ group\n        else\n            current_group = string(current_group, paren_string[i])\n\
    \        end\n    end\n    # Return the depth vector\n    return depth_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6_06b5e2.jl:42\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6_06b5e2.jl:42 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6_06b5e2.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp6_06b5e2.jl:43\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6_06b5e2.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6_06b5e2.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp6_06b5e2.jl:44\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6_06b5e2.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6_06b5e2.jl:41\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_06b5e2.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth_vector\
    \ = Int64[]\n    # Initialize a counter to keep track of the depth of the current\
    \ group\n    depth = 0\n    # Initialize a variable to keep track of the current\
    \ group\n    group = \"\"\n    # Loop through the string\n    for i in 1:length(paren_string)\n\
    \        # If we encounter an opening parenthesis, increment the depth counter\n\
    \        if paren_string[i] == '('\n            depth += 1\n        # If we encounter\
    \ a closing parenthesis, decrement the depth counter\n        elseif paren_string[i]\
    \ == ')'\n            depth -= 1\n        # If we encounter a space, we have reached\
    \ the end of a group\n        elseif paren_string[i] == ' '\n            # Push\
    \ the depth of the current group to the depth vector\n            push!(depth_vector,\
    \ depth)\n            # Reset the depth counter\n            depth = 0\n     \
    \       # Reset the current group\n            group = \"\"\n        # If we encounter\
    \ any other character, add it to the current group\n        else\n           \
    \ group = group * paren_string[i]\n        end\n    end\n    # Return the depth\
    \ vector\n    return depth_vector\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmej2qnj2.jl:44\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmej2qnj2.jl:44 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmej2qnj2.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpmej2qnj2.jl:45\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpmej2qnj2.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmej2qnj2.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpmej2qnj2.jl:46\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpmej2qnj2.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmej2qnj2.jl:43\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmej2qnj2.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = max_nesting_parens(paren_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyn92b6ey.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpyn92b6ey.jl:12\n   [2] macro expansion\n     @ /tmp/tmpyn92b6ey.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyn92b6ey.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyn92b6ey.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpyn92b6ey.jl:12\n   [2] macro expansion\n     @ /tmp/tmpyn92b6ey.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyn92b6ey.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyn92b6ey.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_parens not\
    \ defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n \
    \    @ Main /tmp/tmpyn92b6ey.jl:12\n   [2] macro expansion\n     @ /tmp/tmpyn92b6ey.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyn92b6ey.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyn92b6ey.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depths = Vector{Int64}()\n\
    \    # Initialize a variable to store the current depth\n    depth = 0\n    #\
    \ Initialize a variable to store the current group\n    group = \"\"\n    # Iterate\
    \ through the string\n    for c in paren_string\n        # If the character is\
    \ a space, then we have reached the end of a group\n        if c == ' '\n    \
    \        # Add the depth of the current group to the vector\n            push!(depths,\
    \ depth)\n            # Reset the depth and group variables\n            depth\
    \ = 0\n            group = \"\"\n        else\n            # If the character\
    \ is a left parenthesis, increment the depth\n            if c == '('\n      \
    \          depth += 1\n            # If the character is a right parenthesis,\
    \ decrement the depth\n            elseif c == ')'\n                depth -= 1\n\
    \            end\n            # Add the character to the current group\n     \
    \       group = string(group, c)\n        end\n    end\n    # Add the depth of\
    \ the last group to the vector\n    push!(depths, depth)\n    # Return the vector\
    \ of depths\n    return depths\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9pi4t6uc.jl:46\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0, 0] ==\
    \ [2, 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pi4t6uc.jl:46\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pi4t6uc.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp9pi4t6uc.jl:47\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9pi4t6uc.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pi4t6uc.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp9pi4t6uc.jl:48\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: [0] == [4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pi4t6uc.jl:48\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pi4t6uc.jl:45\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9pi4t6uc.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    open_parens = 0\n    max_open_parens = 0\n    max_open_parens_vec = Vector{Int64}()\n\
    \    for c in paren_string\n        if c == '('\n            open_parens += 1\n\
    \            if open_parens > max_open_parens\n                max_open_parens\
    \ = open_parens\n            end\n        elseif c == ')'\n            open_parens\
    \ -= 1\n        elseif c == ' '\n            push!(max_open_parens_vec, max_open_parens)\n\
    \            max_open_parens = 0\n        end\n    end\n    push!(max_open_parens_vec,\
    \ max_open_parens)\n    return max_open_parens_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = zeros(Int64,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        paren_stack = []\n        for c in paren_group\n            if c == '('\n\
    \                push!(paren_stack, c)\n            elseif c == ')'\n        \
    \        pop!(paren_stack)\n            end\n        end\n        max_nesting[i]\
    \ = length(paren_stack)\n    end\n    return max_nesting\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpltf76x9j.jl:29\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0, 0] ==\
    \ [2, 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpltf76x9j.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpltf76x9j.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpltf76x9j.jl:30\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpltf76x9j.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpltf76x9j.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpltf76x9j.jl:31\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: [0] == [4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpltf76x9j.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpltf76x9j.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltf76x9j.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the deepest level of nesting for each group\n\
    \    deepest_nesting = Vector{Int64}()\n    # Split the string into groups\n \
    \   groups = split(paren_string, \" \")\n    # Iterate through each group\n  \
    \  for group in groups\n        # Initialize a counter to keep track of the current\
    \ level of nesting\n        current_nesting = 0\n        # Initialize a counter\
    \ to keep track of the deepest level of nesting\n        max_nesting = 0\n   \
    \     # Iterate through each character in the group\n        for char in group\n\
    \            # If the character is an opening parenthesis, increment the current\
    \ level of nesting\n            if char == '('\n                current_nesting\
    \ += 1\n            # If the character is a closing parenthesis, decrement the\
    \ current level of nesting\n            elseif char == ')'\n                current_nesting\
    \ -= 1\n            end\n            # Update the deepest level of nesting if\
    \ the current level of nesting is deeper\n            if current_nesting > max_nesting\n\
    \                max_nesting = current_nesting\n            end\n        end\n\
    \        # Append the deepest level of nesting for the current group to the vector\n\
    \        push!(deepest_nesting, max_nesting)\n    end\n    # Return the vector\
    \ of deepest levels of nesting\n    return deepest_nesting\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return map(paren_groups)\
    \ do paren_group\n        paren_stack = []\n        max_depth = 0\n        for\
    \ i in 1:length(paren_group)\n            if paren_group[i] == '('\n         \
    \       push!(paren_stack, i)\n            elseif paren_group[i] == ')'\n    \
    \            if !isempty(paren_stack)\n                    pop!(paren_stack)\n\
    \                    max_depth = max(max_depth, length(paren_stack))\n       \
    \         end\n            end\n        end\n        max_depth\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8t5xf4t8.jl:31\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [1, 2, 0, 2] ==\
    \ [2, 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8t5xf4t8.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8t5xf4t8.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8t5xf4t8.jl:32\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 1, 2, 3] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8t5xf4t8.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8t5xf4t8.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8t5xf4t8.jl:33\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: [3] == [4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8t5xf4t8.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8t5xf4t8.jl:30\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8t5xf4t8.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        max_nesting_in_group = 0\n        current_nesting\
    \ = 0\n        for paren in group\n            if paren == '('\n             \
    \   current_nesting += 1\n            elseif paren == ')'\n                current_nesting\
    \ -= 1\n            end\n            if current_nesting > max_nesting_in_group\n\
    \                max_nesting_in_group = current_nesting\n            end\n   \
    \     end\n        push!(max_nesting, max_nesting_in_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the deepest level of nesting for each group\n\
    \    deepest_nesting = Vector{Int64}()\n    # Split the string by spaces to get\
    \ each group\n    groups = split(paren_string, \" \")\n    # For each group, find\
    \ the deepest level of nesting\n    for group in groups\n        # Initialize\
    \ a counter to keep track of the current level of nesting\n        current_nesting\
    \ = 0\n        # Initialize a counter to keep track of the deepest level of nesting\n\
    \        max_nesting = 0\n        # For each character in the group\n        for\
    \ char in group\n            # If the character is an opening parenthesis, increment\
    \ the current level of nesting\n            if char == '('\n                current_nesting\
    \ += 1\n            # If the character is a closing parenthesis, decrement the\
    \ current level of nesting\n            elseif char == ')'\n                current_nesting\
    \ -= 1\n            end\n            # If the current level of nesting is greater\
    \ than the deepest level of nesting, update the deepest level of nesting\n   \
    \         if current_nesting > max_nesting\n                max_nesting = current_nesting\n\
    \            end\n        end\n        # Append the deepest level of nesting for\
    \ the current group to the vector\n        push!(deepest_nesting, max_nesting)\n\
    \    end\n    # Return the vector of deepest levels of nesting\n    return deepest_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(\", \"\")\n    return [count(x) for x in paren_string]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeu3y4mqr.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpeu3y4mqr.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpeu3y4mqr.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeu3y4mqr.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpeu3y4mqr.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmpeu3y4mqr.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmpeu3y4mqr.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ group in paren_groups\n        nesting = 0\n        max_nesting_group = 0\n\
    \        for paren in group\n            if paren == '('\n                nesting\
    \ += 1\n            elseif paren == ')'\n                nesting -= 1\n      \
    \      end\n            if nesting > max_nesting_group\n                max_nesting_group\
    \ = nesting\n            end\n        end\n        push!(max_nesting, max_nesting_group)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # Initialize a vector to store the results\n    results = Vector{Int64}(undef,\
    \ length(groups))\n    # Iterate over each group\n    for i in 1:length(groups)\n\
    \        # Initialize a counter\n        counter = 0\n        # Initialize a maximum\
    \ counter\n        max_counter = 0\n        # Iterate over each character in the\
    \ group\n        for j in 1:length(groups[i])\n            # If the character\
    \ is an open parenthesis, increment the counter\n            if groups[i][j] ==\
    \ '('\n                counter += 1\n            # If the character is a closed\
    \ parenthesis, decrement the counter\n            elseif groups[i][j] == ')'\n\
    \                counter -= 1\n            end\n            # Update the maximum\
    \ counter if the current counter is greater\n            if counter > max_counter\n\
    \                max_counter = counter\n            end\n        end\n       \
    \ # Store the maximum counter in the results vector\n        results[i] = max_counter\n\
    \    end\n    # Return the results vector\n    return results\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth_vector\
    \ = Int64[]\n    # Initialize a counter to keep track of the depth of the current\
    \ group\n    depth = 0\n    # Initialize a counter to keep track of the current\
    \ group\n    group_counter = 0\n    # Initialize a boolean to keep track of whether\
    \ we are in a group\n    in_group = false\n    # Loop through each character in\
    \ the string\n    for i in 1:length(paren_string)\n        # If we encounter an\
    \ open parenthesis, increment the depth counter\n        if paren_string[i] ==\
    \ '('\n            depth += 1\n            # If we are not in a group, set the\
    \ in_group boolean to true\n            if !in_group\n                in_group\
    \ = true\n            end\n        # If we encounter a closed parenthesis, decrement\
    \ the depth counter\n        elseif paren_string[i] == ')'\n            depth\
    \ -= 1\n            # If we are at the end of a group, add the depth to the depth\
    \ vector\n            if depth == 0\n                push!(depth_vector, group_counter)\n\
    \                group_counter = 0\n                in_group = false\n       \
    \     end\n        # If we encounter a space, increment the group counter\n  \
    \      elseif paren_string[i] == ' '\n            group_counter += 1\n       \
    \ end\n    end\n    return depth_vector\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnn41dcys.jl:47\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 1, 1, 1] ==\
    \ [2, 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnn41dcys.jl:47\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnn41dcys.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpnn41dcys.jl:48\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 1, 1, 1] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpnn41dcys.jl:48 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnn41dcys.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpnn41dcys.jl:49\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: [0] == [4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnn41dcys.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnn41dcys.jl:46\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnn41dcys.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \")\", \"\")\n    paren_string\
    \ = replace(paren_string, \"(\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\n    paren_string = replace(paren_string, \"\", \"\")\n    paren_string\
    \ = replace(paren_string, \"\", \"\")\n    paren_string = replace(paren_string,\
    \ \"\", \"\")\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxsa5eyhc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxsa5eyhc.jl:1\n\
    in expression starting at /tmp/tmpxsa5eyhc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the deepest level of nesting for each group\n\
    \    deepest_level = Int64[]\n    # Split the string into groups\n    groups =\
    \ split(paren_string, \" \")\n    # For each group, find the deepest level of\
    \ nesting\n    for group in groups\n        # Initialize a counter to keep track\
    \ of the current level of nesting\n        current_level = 0\n        # Initialize\
    \ a variable to keep track of the deepest level of nesting\n        deepest_level_group\
    \ = 0\n        # For each character in the group\n        for char in group\n\
    \            # If the character is an opening parenthesis, increase the current\
    \ level of nesting\n            if char == '('\n                current_level\
    \ += 1\n            # If the character is a closing parenthesis, decrease the\
    \ current level of nesting\n            elseif char == ')'\n                current_level\
    \ -= 1\n            end\n            # If the current level of nesting is greater\
    \ than the deepest level of nesting for the group,\n            # update the deepest\
    \ level of nesting for the group\n            if current_level > deepest_level_group\n\
    \                deepest_level_group = current_level\n            end\n      \
    \  end\n        # Append the deepest level of nesting for the group to the vector\n\
    \        push!(deepest_level, deepest_level_group)\n    end\n    # Return the\
    \ vector\n    return deepest_level\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = zeros(Int64,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        paren_levels[i] = count_nested_parens(paren_group)\n    end\n    return\
    \ paren_levels\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppk7odb8o.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ count_nested_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmppk7odb8o.jl:12\n   [2] macro expansion\n     @ /tmp/tmppk7odb8o.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppk7odb8o.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppk7odb8o.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: count_nested_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmppk7odb8o.jl:12\n   [2] macro expansion\n     @ /tmp/tmppk7odb8o.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppk7odb8o.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppk7odb8o.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: count_nested_parens not\
    \ defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n \
    \    @ Main /tmp/tmppk7odb8o.jl:12\n   [2] macro expansion\n     @ /tmp/tmppk7odb8o.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppk7odb8o.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppk7odb8o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        paren_group\
    \ = paren_groups[i]\n        max_nesting[i] = 0\n        current_nesting = 0\n\
    \        for j in 1:length(paren_group)\n            if paren_group[j] == '('\n\
    \                current_nesting += 1\n            elseif paren_group[j] == ')'\n\
    \                current_nesting -= 1\n            end\n            if current_nesting\
    \ > max_nesting[i]\n                max_nesting[i] = current_nesting\n       \
    \     end\n        end\n    end\n    return max_nesting\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        paren_levels[i] = parse_nested_parens_single(paren_group)\n    end\n\
    \    return paren_levels\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr1u07gff.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_single not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpr1u07gff.jl:12\n   [2] macro expansion\n     @ /tmp/tmpr1u07gff.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpr1u07gff.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpr1u07gff.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_single\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpr1u07gff.jl:12\n   [2] macro expansion\n     @ /tmp/tmpr1u07gff.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpr1u07gff.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpr1u07gff.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_single\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpr1u07gff.jl:12\n   [2] macro expansion\n     @ /tmp/tmpr1u07gff.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpr1u07gff.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr1u07gff.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        nesting = 0\n        max_nesting_in_group\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         nesting += 1\n            elseif paren == ')'\n                nesting\
    \ -= 1\n            end\n            if nesting > max_nesting_in_group\n     \
    \           max_nesting_in_group = nesting\n            end\n        end\n   \
    \     push!(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting_level += 1\n            elseif paren == ')'\n      \
    \          current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren in paren_list\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for c in paren\n            if c == '('\n                current_nesting_level\
    \ += 1\n            elseif c == ')'\n                current_nesting_level -=\
    \ 1\n            end\n            if current_nesting_level > max_nesting_level\n\
    \                max_nesting_level = current_nesting_level\n            end\n\
    \        end\n        push!(max_nesting, max_nesting_level)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv5r8wgc_.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpv5r8wgc_.jl:10\n   [2] macro expansion\n     @ /tmp/tmpv5r8wgc_.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv5r8wgc_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpv5r8wgc_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpv5r8wgc_.jl:10\n   [2] macro expansion\n     @ /tmp/tmpv5r8wgc_.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv5r8wgc_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpv5r8wgc_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpv5r8wgc_.jl:10\n   [2] macro expansion\n     @ /tmp/tmpv5r8wgc_.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv5r8wgc_.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv5r8wgc_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = get_max_nesting(paren_group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2108_nuw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp2108_nuw.jl:12\n   [2] macro expansion\n     @ /tmp/tmp2108_nuw.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2108_nuw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2108_nuw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp2108_nuw.jl:12\n   [2] macro expansion\n     @ /tmp/tmp2108_nuw.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2108_nuw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2108_nuw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_max_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmp2108_nuw.jl:12\n   [2] macro expansion\n     @ /tmp/tmp2108_nuw.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2108_nuw.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2108_nuw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = parse_nested_parens_helper(paren_group)\n    end\n \
    \   return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjvd91dhq.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  UndefVarError: parse_nested_parens_helper not defined\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmpjvd91dhq.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjvd91dhq.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjvd91dhq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpjvd91dhq.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpjvd91dhq.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpjvd91dhq.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjvd91dhq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpjvd91dhq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpjvd91dhq.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpjvd91dhq.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjvd91dhq.jl:20\\nTest Summary:\
    \ | Error  Total\\ntest set      |     3      3\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpjvd91dhq.jl:18\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = split(paren_string, \" \")\n    max_depth = Vector{Int64}(undef,\
    \ length(paren_string))\n    for i in 1:length(paren_string)\n        depth =\
    \ 0\n        max_depth[i] = 0\n        for j in 1:length(paren_string[i])\n  \
    \          if paren_string[i][j] == '('\n                depth += 1\n        \
    \        if depth > max_depth[i]\n                    max_depth[i] = depth\n \
    \               end\n            elseif paren_string[i][j] == ')'\n          \
    \      depth -= 1\n            end\n        end\n    end\n    return max_depth\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = max_nesting_parens(paren_groups[i])\n    end\n    return max_nesting\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp_a3q7s19.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp_a3q7s19.jl:12\n   [2] macro expansion\n     @ /tmp/tmp_a3q7s19.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_a3q7s19.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_a3q7s19.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp_a3q7s19.jl:12\n   [2] macro expansion\n     @ /tmp/tmp_a3q7s19.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_a3q7s19.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_a3q7s19.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_parens not\
    \ defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n \
    \    @ Main /tmp/tmp_a3q7s19.jl:12\n   [2] macro expansion\n     @ /tmp/tmp_a3q7s19.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_a3q7s19.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_a3q7s19.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the results\n    result = Vector{Int64}()\n\
    \    # Split the string by spaces\n    paren_groups = split(paren_string, \" \"\
    )\n    # For each of the groups\n    for group in paren_groups\n        # Initialize\
    \ a counter\n        counter = 0\n        # Initialize a maximum counter\n   \
    \     max_counter = 0\n        # For each of the characters in the group\n   \
    \     for char in group\n            # If the character is an opening parenthesis\n\
    \            if char == '('\n                # Increment the counter\n       \
    \         counter += 1\n            # If the character is a closing parenthesis\n\
    \            elseif char == ')'\n                # Decrement the counter\n   \
    \             counter -= 1\n            end\n            # Update the maximum\
    \ counter\n            max_counter = max(max_counter, counter)\n        end\n\
    \        # Append the maximum counter to the result\n        push!(result, max_counter)\n\
    \    end\n    # Return the result\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")\", \" )\")\n    paren_string = replace(paren_string,\
    \ \"(\", \"( \")\n    paren_string = replace(paren_string, \")(\", \") (\")\n\
    \    paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n   \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsg_299dc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsg_299dc.jl:1\n\
    in expression starting at /tmp/tmpsg_299dc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, group) in enumerate(paren_groups)\n     \
    \   max_nesting[i] = max_nesting_in_group(group)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpgagct61_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_in_group not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpgagct61_.jl:12\n   [2] macro expansion\n     @ /tmp/tmpgagct61_.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgagct61_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgagct61_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_in_group\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpgagct61_.jl:12\n   [2] macro expansion\n     @ /tmp/tmpgagct61_.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgagct61_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgagct61_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_in_group\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpgagct61_.jl:12\n   [2] macro expansion\n     @ /tmp/tmpgagct61_.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgagct61_.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgagct61_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = max_nesting_parens(paren_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqg6am9bf.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpqg6am9bf.jl:12\n   [2] macro expansion\n     @ /tmp/tmpqg6am9bf.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqg6am9bf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqg6am9bf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpqg6am9bf.jl:12\n   [2] macro expansion\n     @ /tmp/tmpqg6am9bf.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqg6am9bf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqg6am9bf.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_parens not\
    \ defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n \
    \    @ Main /tmp/tmpqg6am9bf.jl:12\n   [2] macro expansion\n     @ /tmp/tmpqg6am9bf.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqg6am9bf.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqg6am9bf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth_vector\
    \ = Vector{Int64}()\n    # Initialize a counter to keep track of the depth of\
    \ the current group\n    depth_counter = 0\n    # Initialize a flag to keep track\
    \ of whether we are in a group or not\n    in_group = false\n    # Iterate through\
    \ the characters in the string\n    for char in paren_string\n        # If we\
    \ are in a group and we encounter an opening paren, increment the depth counter\n\
    \        if in_group && char == '('\n            depth_counter += 1\n        #\
    \ If we are in a group and we encounter a closing paren, decrement the depth counter\n\
    \        elseif in_group && char == ')'\n            depth_counter -= 1\n    \
    \    # If we are not in a group and we encounter an opening paren, set the in_group\
    \ flag to true\n        elseif !in_group && char == '('\n            in_group\
    \ = true\n        # If we are in a group and we encounter a closing paren, set\
    \ the in_group flag to false\n        elseif in_group && char == ')'\n       \
    \     in_group = false\n            # Push the current depth counter to the vector\
    \ and reset the counter\n            push!(depth_vector, depth_counter)\n    \
    \        depth_counter = 0\n        end\n    end\n    # Return the vector\n  \
    \  return depth_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnkbwgr44.jl:42\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: Int64[] == [2, 3,\
    \ 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnkbwgr44.jl:42 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnkbwgr44.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpnkbwgr44.jl:43\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: Int64[] == [1, 2, 3, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnkbwgr44.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnkbwgr44.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpnkbwgr44.jl:44\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpnkbwgr44.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnkbwgr44.jl:41\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnkbwgr44.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \"(\", \"\")\n    paren_string\
    \ = replace(paren_string, \")\", \"\")\n    return [length(x) for x in split(paren_string,\
    \ \"\")]\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw3z8s80y.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3]\\n  MethodError: no method matching replace(::String, ::String, ::String)\\\
    n  Closest candidates are:\\n    replace(!Matched::Union{Function, Type}, ::Any;\
    \ count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"#s75\", B}\
    \ where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\n    replace(::String,\
    \ !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_nested_parens(paren_string::String)\\\
    n     @ Main /tmp/tmpw3z8s80y.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpw3z8s80y.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw3z8s80y.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpw3z8s80y.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_nested_parens(paren_string::String)\\n     @ Main /tmp/tmpw3z8s80y.jl:9\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw3z8s80y.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = split(paren_string, \" \")\n    max_depth = Vector{Int64}(undef,\
    \ length(paren_string))\n    for (i, paren_group) in enumerate(paren_string)\n\
    \        depth = 0\n        max_depth[i] = 0\n        for paren in paren_group\n\
    \            if paren == '('\n                depth += 1\n            elseif paren\
    \ == ')'\n                depth -= 1\n            end\n            max_depth[i]\
    \ = max(max_depth[i], depth)\n        end\n    end\n    return max_depth\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting_level += 1\n            elseif paren == ')'\n      \
    \          current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize an empty vector to store the results\n    result = Int64[]\n\
    \    # Split the input string into groups\n    groups = split(paren_string, \"\
    \ \")\n    # Loop through each group\n    for group in groups\n        # Initialize\
    \ a counter to keep track of the nesting level\n        level = 0\n        # Initialize\
    \ a counter to keep track of the max nesting level\n        max_level = 0\n  \
    \      # Loop through each character in the group\n        for c in group\n  \
    \          # If the character is an open parenthesis, increment the level\n  \
    \          if c == '('\n                level += 1\n            # If the character\
    \ is a closed parenthesis, decrement the level\n            elseif c == ')'\n\
    \                level -= 1\n            end\n            # Update the max level\
    \ if the current level is greater than the max level\n            if level > max_level\n\
    \                max_level = level\n            end\n        end\n        # Push\
    \ the max level to the result vector\n        push!(result, max_level)\n    end\n\
    \    # Return the result vector\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # Initialize a vector to store the results\n    results = Vector{Int64}(undef,\
    \ length(groups))\n    # Loop through each group\n    for i in 1:length(groups)\n\
    \        # Initialize a counter\n        count = 0\n        # Initialize a maximum\
    \ counter\n        max_count = 0\n        # Loop through each character in the\
    \ group\n        for j in 1:length(groups[i])\n            # If the character\
    \ is an open parenthesis, increment the counter\n            if groups[i][j] ==\
    \ '('\n                count += 1\n            # If the character is a closed\
    \ parenthesis, decrement the counter\n            elseif groups[i][j] == ')'\n\
    \                count -= 1\n            end\n            # If the counter is\
    \ greater than the maximum counter, update the maximum counter\n            if\
    \ count > max_count\n                max_count = count\n            end\n    \
    \    end\n        # Store the maximum counter in the results vector\n        results[i]\
    \ = max_count\n    end\n    # Return the results vector\n    return results\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # split the string into groups\n    groups = split(paren_string, \" \"\
    )\n    # initialize a vector to store the output\n    output = Vector{Int64}(undef,\
    \ length(groups))\n    # for each group, find the maximum depth of nesting\n \
    \   for i in 1:length(groups)\n        group = groups[i]\n        depth = 0\n\
    \        max_depth = 0\n        for j in 1:length(group)\n            if group[j]\
    \ == '('\n                depth += 1\n            elseif group[j] == ')'\n   \
    \             depth -= 1\n            end\n            if depth > max_depth\n\
    \                max_depth = depth\n            end\n        end\n        output[i]\
    \ = max_depth\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize the vector to store the output\n    output = Vector{Int64}()\n\
    \    \n    # Split the string by space\n    paren_groups = split(paren_string,\
    \ \" \")\n    \n    # For each group of parentheses, find the maximum depth of\
    \ nesting\n    for group in paren_groups\n        max_depth = 0\n        depth\
    \ = 0\n        for paren in group\n            if paren == '('\n             \
    \   depth += 1\n            elseif paren == ')'\n                depth -= 1\n\
    \            end\n            max_depth = max(max_depth, depth)\n        end\n\
    \        push!(output, max_depth)\n    end\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3mn8oku_.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp3mn8oku_.jl:10\n   [2] macro expansion\n     @ /tmp/tmp3mn8oku_.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3mn8oku_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp3mn8oku_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp3mn8oku_.jl:10\n   [2] macro expansion\n     @ /tmp/tmp3mn8oku_.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3mn8oku_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp3mn8oku_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp3mn8oku_.jl:10\n   [2] macro expansion\n     @ /tmp/tmp3mn8oku_.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3mn8oku_.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3mn8oku_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")(\", \") (\")\n    paren_string = replace(paren_string,\
    \ \"()\", \"\")\n    paren_string = replace(paren_string, \")(\", \") (\")\n \
    \   paren_string = replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \") (\")\n    paren_string = replace(paren_string, \"()\", \"\")\n \
    \   paren_string = replace(paren_string, \")(\", \") (\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \") (\")\n    paren_string = replace(paren_string, \"()\", \"\")\n \
    \   paren_string = replace(paren_string, \")(\", \") (\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \") (\")\n    paren_string = replace(paren_string, \"()\", \"\")\n \
    \   paren_string = replace(paren_string, \")(\", \") (\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \") (\")\n    paren_string = replace(paren_string, \"()\", \"\")\n \
    \   paren_string = replace(paren_string, \")(\", \") (\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \") (\")\n    paren_string = replace(paren_string, \"()\", \"\")\n \
    \   paren_string = replace(paren_string, \")(\", \") (\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \") (\")\n    paren_string = replace(paren_string, \"()\", \"\")\n\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo5_aqch8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo5_aqch8.jl:1\n\
    in expression starting at /tmp/tmpo5_aqch8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         current_nesting_level += 1\n            elseif paren == ')'\n      \
    \          current_nesting_level -= 1\n            end\n            if current_nesting_level\
    \ > max_nesting_level\n                max_nesting_level = current_nesting_level\n\
    \            end\n        end\n        push!(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = max_nesting_in_parens(paren_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1xi0eh1k.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_in_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1xi0eh1k.jl:12\n   [2] macro expansion\n     @ /tmp/tmp1xi0eh1k.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1xi0eh1k.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1xi0eh1k.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_in_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1xi0eh1k.jl:12\n   [2] macro expansion\n     @ /tmp/tmp1xi0eh1k.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1xi0eh1k.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1xi0eh1k.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_in_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp1xi0eh1k.jl:12\n   [2] macro expansion\n     @ /tmp/tmp1xi0eh1k.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1xi0eh1k.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xi0eh1k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_parens(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9540l2m_.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_parens not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9540l2m_.jl:10\n   [2] macro expansion\n     @ /tmp/tmp9540l2m_.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9540l2m_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9540l2m_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_parens\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9540l2m_.jl:10\n   [2] macro expansion\n     @ /tmp/tmp9540l2m_.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9540l2m_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9540l2m_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_parens not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmp9540l2m_.jl:10\n   [2] macro expansion\n     @ /tmp/tmp9540l2m_.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9540l2m_.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9540l2m_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    paren_levels = []\n   \
    \ for paren_group in paren_groups\n        paren_levels = [parse_nested_parens_helper(paren_group)]\n\
    \    end\n    return paren_levels\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9jxyhprp.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9jxyhprp.jl:12\n   [2] macro expansion\n     @ /tmp/tmp9jxyhprp.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9jxyhprp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9jxyhprp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9jxyhprp.jl:12\n   [2] macro expansion\n     @ /tmp/tmp9jxyhprp.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9jxyhprp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9jxyhprp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9jxyhprp.jl:12\n   [2] macro expansion\n     @ /tmp/tmp9jxyhprp.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9jxyhprp.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9jxyhprp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [maximum(count_parens(group))\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5f1c_dwq.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ count_parens not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(group::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n \
    \    @ Base ./array.jl:681\n   [4] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp5f1c_dwq.jl:10\n   [5] macro expansion\n     @ /tmp/tmp5f1c_dwq.jl:17\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp5f1c_dwq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp5f1c_dwq.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: count_parens\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(group::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n \
    \    @ Base ./array.jl:681\n   [4] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp5f1c_dwq.jl:10\n   [5] macro expansion\n     @ /tmp/tmp5f1c_dwq.jl:18\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp5f1c_dwq.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp5f1c_dwq.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: count_parens not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(group::SubString{String})\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp5f1c_dwq.jl:10\n   [5] macro expansion\n     @ /tmp/tmp5f1c_dwq.jl:19\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5f1c_dwq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \"((\", \"\")\n    paren_string\
    \ = replace(paren_string, \"))\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(((\", \"\")\n    paren_string = replace(paren_string, \")))\", \"\")\n  \
    \  paren_string = replace(paren_string, \"((((\", \"\")\n    paren_string = replace(paren_string,\
    \ \")))))\", \"\")\n    paren_string = replace(paren_string, \"(((((\", \"\")\n\
    \    paren_string = replace(paren_string, \")))))))\", \"\")\n    paren_string\
    \ = replace(paren_string, \"((((((\", \"\")\n    paren_string = replace(paren_string,\
    \ \"))))))))\", \"\")\n    paren_string = replace(paren_string, \"(((((((\", \"\
    \")\n    paren_string = replace(paren_string, \"))))))))))\", \"\")\n    paren_string\
    \ = replace(paren_string, \"((((((((\", \"\")\n    paren_string = replace(paren_string,\
    \ \")))))))))))\", \"\")\n    paren_string = replace(paren_string, \"(((((((((\"\
    , \"\")\n    paren_string = replace(paren_string, \"))))))))))))\", \"\")\n  \
    \  paren_string = replace(paren_string, \"((((((((((\", \"\")\n    paren_string\
    \ = replace(paren_string, \")))))))))))))\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(((((((((((\", \"\")\n    paren_string = replace(paren_string, \"))))))))))))))\"\
    , \"\")\n    paren_string = replace(paren_string, \"((((((((((((\", \"\")\n  \
    \  paren_string = replace(paren_string, \")))))))))))))))\", \"\")\n    paren_string\
    \ = replace(paren_string, \"((\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"((\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpjsy1no22.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpjsy1no22.jl:40\nin expression starting at /tmp/tmpjsy1no22.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = parse_nested_parens_helper(paren_groups[i])\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpe42cqktg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpe42cqktg.jl:12\n   [2] macro expansion\n     @ /tmp/tmpe42cqktg.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe42cqktg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpe42cqktg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpe42cqktg.jl:12\n   [2] macro expansion\n     @ /tmp/tmpe42cqktg.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe42cqktg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpe42cqktg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpe42cqktg.jl:12\n   [2] macro expansion\n     @ /tmp/tmpe42cqktg.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe42cqktg.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe42cqktg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")\", \" )\")\n    paren_string = replace(paren_string,\
    \ \"(\", \"( \")\n    paren_string = replace(paren_string, \")(\", \") (\")\n\
    \    paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n    paren_string = replace(paren_string, \"  \", \" \")\n  \
    \  paren_string = replace(paren_string, \"  \", \" \")\n    paren_string = replace(paren_string,\
    \ \"  \", \" \")\n   \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg9z0w_7z.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg9z0w_7z.jl:1\n\
    in expression starting at /tmp/tmpg9z0w_7z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the maximum level of nesting for each group\n\
    \    max_nesting_levels = Int64[]\n    # Iterate through each group\n    for paren_group\
    \ in split(paren_string, \" \")\n        # Initialize a counter to keep track\
    \ of the current level of nesting\n        nesting_level = 0\n        # Initialize\
    \ a counter to keep track of the maximum level of nesting\n        max_nesting_level\
    \ = 0\n        # Iterate through each character in the group\n        for paren\
    \ in paren_group\n            # If the character is an opening parenthesis, increment\
    \ the nesting level\n            if paren == '('\n                nesting_level\
    \ += 1\n            # If the character is a closing parenthesis, decrement the\
    \ nesting level\n            elseif paren == ')'\n                nesting_level\
    \ -= 1\n            end\n            # If the current nesting level is greater\
    \ than the maximum nesting level, update the maximum nesting level\n         \
    \   if nesting_level > max_nesting_level\n                max_nesting_level =\
    \ nesting_level\n            end\n        end\n        # Push the maximum nesting\
    \ level for the current group to the vector\n        push!(max_nesting_levels,\
    \ max_nesting_level)\n    end\n    # Return the vector of maximum nesting levels\n\
    \    return max_nesting_levels\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth_vector\
    \ = Int64[]\n    # Initialize a counter to keep track of the depth of the current\
    \ group\n    depth = 0\n    # Initialize a variable to keep track of the current\
    \ group\n    current_group = \"\"\n    # Loop through the string\n    for i in\
    \ 1:length(paren_string)\n        # If the current character is a left parenthesis,\
    \ increase the depth by 1\n        if paren_string[i] == '('\n            depth\
    \ += 1\n        # If the current character is a right parenthesis, decrease the\
    \ depth by 1\n        elseif paren_string[i] == ')'\n            depth -= 1\n\
    \        # If the current character is a space, add the current group to the vector\
    \ and reset the current group\n        elseif paren_string[i] == ' '\n       \
    \     push!(depth_vector, depth)\n            current_group = \"\"\n        #\
    \ If the current character is not a parenthesis or a space, add it to the current\
    \ group\n        else\n            current_group = current_group * paren_string[i]\n\
    \        end\n    end\n    # Add the last group to the vector\n    push!(depth_vector,\
    \ depth)\n    # Return the vector\n    return depth_vector\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpr7pu4i72.jl:42\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0, 0] ==\
    \ [2, 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr7pu4i72.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7pu4i72.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpr7pu4i72.jl:43\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpr7pu4i72.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7pu4i72.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpr7pu4i72.jl:44\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: [0] == [4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr7pu4i72.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7pu4i72.jl:41\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr7pu4i72.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \"()\", \"\")\n    paren_string = replace(paren_string,\
    \ \")(\", \"\")\n    paren_string = replace(paren_string, \"((\", \"\")\n    paren_string\
    \ = replace(paren_string, \"))\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(((\", \"\")\n    paren_string = replace(paren_string, \")))\", \"\")\n  \
    \  paren_string = replace(paren_string, \"((((\", \"\")\n    paren_string = replace(paren_string,\
    \ \")))))\", \"\")\n    paren_string = replace(paren_string, \"(((((\", \"\")\n\
    \    paren_string = replace(paren_string, \")))))))\", \"\")\n    paren_string\
    \ = replace(paren_string, \"((((((\", \"\")\n    paren_string = replace(paren_string,\
    \ \"))))))))\", \"\")\n    paren_string = replace(paren_string, \"(((((((\", \"\
    \")\n    paren_string = replace(paren_string, \"))))))))))\", \"\")\n    paren_string\
    \ = replace(paren_string, \"((((((((\", \"\")\n    paren_string = replace(paren_string,\
    \ \")))))))))))\", \"\")\n    paren_string = replace(paren_string, \"(((((((((\"\
    , \"\")\n    paren_string = replace(paren_string, \"))))))))))))\", \"\")\n  \
    \  paren_string = replace(paren_string, \"((((((((((\", \"\")\n    paren_string\
    \ = replace(paren_string, \")))))))))))))\", \"\")\n    paren_string = replace(paren_string,\
    \ \"(((((((((((\", \"\")\n    paren_string = replace(paren_string, \"))))))))))))))\"\
    , \"\")\n    paren_string = replace(paren_string, \"((((((((((((\", \"\")\n  \
    \  paren_string = replace(paren_string, \")))))))))))))))\", \"\")\n    paren_string\
    \ = replace(paren_string, \"((\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"((\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpiqg3aors.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpiqg3aors.jl:40\nin expression starting at /tmp/tmpiqg3aors.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth = Vector{Int64}()\n\
    \    # Initialize a counter to keep track of the depth\n    counter = 0\n    #\
    \ Iterate through each character in the string\n    for c in paren_string\n  \
    \      # If the character is an opening parenthesis, increase the counter\n  \
    \      if c == '('\n            counter += 1\n        # If the character is a\
    \ closing parenthesis, decrease the counter\n        elseif c == ')'\n       \
    \     counter -= 1\n        # If the character is a space, push the current counter\
    \ value to the vector and reset the counter\n        elseif c == ' '\n       \
    \     push!(depth, counter)\n            counter = 0\n        end\n    end\n \
    \   # Return the vector\n    return depth\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcmle41eu.jl:35\n  Expression: candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n   Evaluated: [0, 0, 0] == [2,\
    \ 3, 1, 3]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcmle41eu.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcmle41eu.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcmle41eu.jl:36\n  Expression: candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4]\n   Evaluated: [0, 0, 0] == [1, 2, 3, 4]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpcmle41eu.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcmle41eu.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcmle41eu.jl:37\n  Expression: candidate(\"(()(())((())))\"\
    ) == [4]\n   Evaluated: Int64[] == [4]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpcmle41eu.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcmle41eu.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmle41eu.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the maximum nesting level for each group\n\
    \    max_nesting_level = Vector{Int64}()\n    # Initialize a variable to store\
    \ the current nesting level\n    current_nesting_level = 0\n    # Initialize a\
    \ variable to store the maximum nesting level for the current group\n    max_nesting_level_current_group\
    \ = 0\n    # Loop through each character in the string\n    for character in paren_string\n\
    \        # If the character is an opening parenthesis, increment the current nesting\
    \ level\n        if character == '('\n            current_nesting_level += 1\n\
    \        # If the character is a closing parenthesis, decrement the current nesting\
    \ level\n        elseif character == ')'\n            current_nesting_level -=\
    \ 1\n        # If the character is a space, store the maximum nesting level for\
    \ the current group\n        elseif character == ' '\n            push!(max_nesting_level,\
    \ max_nesting_level_current_group)\n            # Reset the maximum nesting level\
    \ for the current group\n            max_nesting_level_current_group = 0\n   \
    \     end\n        # Update the maximum nesting level for the current group if\
    \ necessary\n        if current_nesting_level > max_nesting_level_current_group\n\
    \            max_nesting_level_current_group = current_nesting_level\n       \
    \ end\n    end\n    # Store the maximum nesting level for the last group\n   \
    \ push!(max_nesting_level, max_nesting_level_current_group)\n    return max_nesting_level\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = max_nesting_level(paren_group)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplpf3dlt9.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ max_nesting_level not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmplpf3dlt9.jl:12\n   [2] macro expansion\n     @ /tmp/tmplpf3dlt9.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplpf3dlt9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmplpf3dlt9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: max_nesting_level\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmplpf3dlt9.jl:12\n   [2] macro expansion\n     @ /tmp/tmplpf3dlt9.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplpf3dlt9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmplpf3dlt9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: max_nesting_level not\
    \ defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n \
    \    @ Main /tmp/tmplpf3dlt9.jl:12\n   [2] macro expansion\n     @ /tmp/tmplpf3dlt9.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplpf3dlt9.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplpf3dlt9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe0t0udzn.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpe0t0udzn.jl:10\n   [2] macro expansion\n     @ /tmp/tmpe0t0udzn.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe0t0udzn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpe0t0udzn.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpe0t0udzn.jl:10\n   [2] macro expansion\n     @ /tmp/tmpe0t0udzn.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe0t0udzn.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpe0t0udzn.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpe0t0udzn.jl:10\n   [2] macro expansion\n     @ /tmp/tmpe0t0udzn.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe0t0udzn.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0t0udzn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    return [parse_nested_parens_helper(group)\
    \ for group in paren_groups]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9kb5kvd7.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9kb5kvd7.jl:10\n   [2] macro expansion\n     @ /tmp/tmp9kb5kvd7.jl:17\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9kb5kvd7.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9kb5kvd7.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9kb5kvd7.jl:10\n   [2] macro expansion\n     @ /tmp/tmp9kb5kvd7.jl:18\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9kb5kvd7.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9kb5kvd7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp9kb5kvd7.jl:10\n   [2] macro expansion\n     @ /tmp/tmp9kb5kvd7.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9kb5kvd7.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9kb5kvd7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = parse_nested_parens_helper(paren_groups[i])\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp3dwwzzlb.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp3dwwzzlb.jl:12\n   [2] macro expansion\n     @ /tmp/tmp3dwwzzlb.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3dwwzzlb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3dwwzzlb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp3dwwzzlb.jl:12\n   [2] macro expansion\n     @ /tmp/tmp3dwwzzlb.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3dwwzzlb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3dwwzzlb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmp3dwwzzlb.jl:12\n   [2] macro expansion\n     @ /tmp/tmp3dwwzzlb.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3dwwzzlb.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3dwwzzlb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_list = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren in paren_list\n        max_nesting_level = 0\n        current_nesting_level\
    \ = 0\n        for c in paren\n            if c == '('\n                current_nesting_level\
    \ += 1\n            elseif c == ')'\n                current_nesting_level -=\
    \ 1\n            end\n            if current_nesting_level > max_nesting_level\n\
    \                max_nesting_level = current_nesting_level\n            end\n\
    \        end\n        push!(max_nesting, max_nesting_level)\n    end\n    return\
    \ max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for i in 1:length(paren_groups)\n        max_nesting[i]\
    \ = get_max_nesting(paren_groups[i])\n    end\n    return max_nesting\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpnoeyq5xp.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ get_max_nesting not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpnoeyq5xp.jl:12\n   [2] macro expansion\n     @ /tmp/tmpnoeyq5xp.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnoeyq5xp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnoeyq5xp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: get_max_nesting\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpnoeyq5xp.jl:12\n   [2] macro expansion\n     @ /tmp/tmpnoeyq5xp.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnoeyq5xp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnoeyq5xp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: get_max_nesting not defined\n\
    \  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n     @ Main\
    \ /tmp/tmpnoeyq5xp.jl:12\n   [2] macro expansion\n     @ /tmp/tmpnoeyq5xp.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnoeyq5xp.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnoeyq5xp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = []\n    for\
    \ paren_group in paren_groups\n        max_nesting_level = 0\n        nesting_level\
    \ = 0\n        for paren in paren_group\n            if paren == '('\n       \
    \         nesting_level += 1\n            elseif paren == ')'\n              \
    \  nesting_level -= 1\n            end\n            if nesting_level > max_nesting_level\n\
    \                max_nesting_level = nesting_level\n            end\n        end\n\
    \        push!(max_nesting, max_nesting_level)\n    end\n    return max_nesting\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_levels = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        level = 0\n        max_level = 0\n        for c in paren_group\n    \
    \        if c == '('\n                level += 1\n            elseif c == ')'\n\
    \                level -= 1\n            end\n            max_level = max(max_level,\
    \ level)\n        end\n        max_levels[i] = max_level\n    end\n    return\
    \ max_levels\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    # Initialize a vector to store the depth of each group\n    depth_vector\
    \ = Vector{Int64}()\n    # Split the string into groups\n    groups = split(paren_string,\
    \ \" \")\n    # For each group, find the depth of nesting\n    for group in groups\n\
    \        depth = 0\n        max_depth = 0\n        for paren in group\n      \
    \      if paren == '('\n                depth += 1\n            elseif paren ==\
    \ ')'\n                depth -= 1\n            end\n            if depth > max_depth\n\
    \                max_depth = depth\n            end\n        end\n        push!(depth_vector,\
    \ max_depth)\n    end\n    return depth_vector\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = replace(paren_string, \" \", \"\")\n    paren_string =\
    \ replace(paren_string, \")\", \" )\")\n    paren_string = replace(paren_string,\
    \ \"(\", \"( \")\n    paren_string = split(paren_string, \" \")\n    paren_string\
    \ = filter(x -> x != \"\", paren_string)\n    paren_string = filter(x -> x !=\
    \ \" \", paren_string)\n    paren_string = filter(x -> x != \"\", paren_string)\n\
    \    paren_string = filter(x -> x != \" \", paren_string)\n    paren_string =\
    \ filter(x -> x != \"\", paren_string)\n    paren_string = filter(x -> x != \"\
    \ \", paren_string)\n    paren_string = filter(x -> x != \"\", paren_string)\n\
    \    paren_string = filter(x -> x != \" \", paren_string)\n    paren_string =\
    \ filter(x -> x != \"\", paren_string)\n    paren_string = filter(x -> x != \"\
    \ \", paren_string)\n    paren_string = filter(x -> x != \"\", paren_string)\n\
    \    paren_string = filter(x -> x != \" \", paren_string)\n    paren_string =\
    \ filter(x -> x != \"\", paren_string)\n    paren_string = filter(x -> x != \"\
    \ \", paren_string)\n    paren_string = filter(x -> x != \"\", paren_string)\n\
    \    paren_string = filter(x -> x != \" \", paren_string)\n    paren_string =\
    \ filter(x -> x != \"\", paren_string)\n    paren_string = filter(x -> x != \"\
    \ \", paren_string)\n    paren_string = filter(x -> x != \"\", paren_string)\n\
    \    paren_string = filter(x -> x != \" \", paren_string)\n    paren_string =\
    \ filter(x -> x != \"\", paren_string)\n    paren_string = filter(x -> x != \"\
    \ \", paren_string)\n    p\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmperwxl560.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmperwxl560.jl:1\n\
    in expression starting at /tmp/tmperwxl560.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = split(paren_string, \" \")\n    max_nesting = Vector{Int64}(undef,\
    \ length(paren_groups))\n    for (i, paren_group) in enumerate(paren_groups)\n\
    \        max_nesting[i] = parse_nested_parens_helper(paren_group)\n    end\n \
    \   return max_nesting\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfiufwjzo.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n  UndefVarError:\
    \ parse_nested_parens_helper not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpfiufwjzo.jl:12\n   [2] macro expansion\n     @ /tmp/tmpfiufwjzo.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfiufwjzo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpfiufwjzo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpfiufwjzo.jl:12\n   [2] macro expansion\n     @ /tmp/tmpfiufwjzo.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfiufwjzo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpfiufwjzo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"(()(())((())))\") == [4]\n  UndefVarError: parse_nested_parens_helper\
    \ not defined\n  Stacktrace:\n   [1] parse_nested_parens(paren_string::String)\n\
    \     @ Main /tmp/tmpfiufwjzo.jl:12\n   [2] macro expansion\n     @ /tmp/tmpfiufwjzo.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfiufwjzo.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfiufwjzo.jl:18\n"
  exit_code: 1
  status: SyntaxError
