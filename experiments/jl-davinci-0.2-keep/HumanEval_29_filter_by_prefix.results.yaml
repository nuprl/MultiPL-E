name: HumanEval_29_filter_by_prefix
language: julia
results:
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm98w3y0t.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm98w3y0t.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm98w3y0t.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm98w3y0t.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzml6rtd2.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzml6rtd2.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzml6rtd2.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzml6rtd2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbn54farw.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbn54farw.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbn54farw.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbn54farw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc_hrlin6.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc_hrlin6.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_hrlin6.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_hrlin6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5z031m27.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5z031m27.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5z031m27.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5z031m27.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzk5dxm61.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzk5dxm61.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzk5dxm61.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzk5dxm61.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqq8mft2e.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqq8mft2e.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqq8mft2e.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqq8mft2e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7z94e3g.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk7z94e3g.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk7z94e3g.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7z94e3g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr6xijgkj.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr6xijgkj.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6xijgkj.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6xijgkj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpglvst_6f.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpglvst_6f.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpglvst_6f.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpglvst_6f.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ibtgllb.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ibtgllb.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ibtgllb.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ibtgllb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi21dsczj.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi21dsczj.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi21dsczj.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi21dsczj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ string.startswith(prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyks5ho_g.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ startswith\n  Stacktrace:\n    [1] getproperty(x::String, f::Symbol)\n     \
    \ @ Base ./Base.jl:33\n    [2] (::var\"#1#2\"{String})(string::String)\n     \
    \ @ Main ./none:0\n    [3] iterate\n      @ ./iterators.jl:451 [inlined]\n   \
    \ [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n      @\
    \ ./array.jl:743 [inlined]\n    [6] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [7] filter_by_prefix(strings::Vector{String}, prefix::String)\n      @ Main\
    \ /tmp/tmpyks5ho_g.jl:8\n    [8] macro expansion\n      @ /tmp/tmpyks5ho_g.jl:16\
    \ [inlined]\n    [9] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpyks5ho_g.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyks5ho_g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdq2ziz6p.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdq2ziz6p.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdq2ziz6p.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdq2ziz6p.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo5zu5_yz.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo5zu5_yz.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo5zu5_yz.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5zu5_yz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprk08wht9.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprk08wht9.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprk08wht9.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprk08wht9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiq7sspj7.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiq7sspj7.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiq7sspj7.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiq7sspj7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprt2dwtwr.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprt2dwtwr.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprt2dwtwr.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprt2dwtwr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_a33t30b.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a33t30b.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a33t30b.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_a33t30b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    # TODO: implement this function\n    return\
    \ filter(x -> startswith(x, prefix), strings)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0f14d48i.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0f14d48i.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0f14d48i.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0f14d48i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl283tfav.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl283tfav.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl283tfav.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl283tfav.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ startswith(string, prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy0qx_z68.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy0qx_z68.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy0qx_z68.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0qx_z68.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgygupk4f.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgygupk4f.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgygupk4f.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgygupk4f.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8c78cpk5.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8c78cpk5.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8c78cpk5.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8c78cpk5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3urhhnm1.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3urhhnm1.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3urhhnm1.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3urhhnm1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8njlg9l3.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8njlg9l3.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8njlg9l3.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8njlg9l3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzkb_k8tr.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzkb_k8tr.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzkb_k8tr.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzkb_k8tr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwdhhggz8.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwdhhggz8.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwdhhggz8.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwdhhggz8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi7c50euk.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi7c50euk.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi7c50euk.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi7c50euk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2bzmt_qe.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2bzmt_qe.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2bzmt_qe.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bzmt_qe.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkveyq12z.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkveyq12z.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkveyq12z.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkveyq12z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjirj5pwg.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjirj5pwg.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjirj5pwg.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjirj5pwg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnbx7mbq3.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnbx7mbq3.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnbx7mbq3.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnbx7mbq3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppaywr61l.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppaywr61l.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppaywr61l.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppaywr61l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_j8x8ttb.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_j8x8ttb.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_j8x8ttb.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_j8x8ttb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp72n3qz3k.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp72n3qz3k.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72n3qz3k.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72n3qz3k.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp57s5bskq.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp57s5bskq.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57s5bskq.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57s5bskq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcyqg4gbu.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcyqg4gbu.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcyqg4gbu.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcyqg4gbu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ogl7ucp.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ogl7ucp.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ogl7ucp.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ogl7ucp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpliwwxmca.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpliwwxmca.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpliwwxmca.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpliwwxmca.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv9yyfx53.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv9yyfx53.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv9yyfx53.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv9yyfx53.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0og7g1m7.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0og7g1m7.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0og7g1m7.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0og7g1m7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdt4okpzx.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdt4okpzx.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdt4okpzx.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdt4okpzx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ckrmka3.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0ckrmka3.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ckrmka3.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ckrmka3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8sxlhyax.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sxlhyax.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sxlhyax.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sxlhyax.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcz_1whjm.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcz_1whjm.jl:16 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcz_1whjm.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcz_1whjm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
