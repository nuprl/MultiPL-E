name: HumanEval_86_anti_shuffle
language: julia
results:
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv3l9vpho.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv3l9vpho.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpv3l9vpho.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv3l9vpho.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpv3l9vpho.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpv3l9vpho.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpv3l9vpho.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv3l9vpho.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpv3l9vpho.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp78m4ox04.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp78m4ox04.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp78m4ox04.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp78m4ox04.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp78m4ox04.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp78m4ox04.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp78m4ox04.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp78m4ox04.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp78m4ox04.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # YOUR CODE HERE\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kkvwlx5.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8kkvwlx5.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8kkvwlx5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8kkvwlx5.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8kkvwlx5.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8kkvwlx5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8kkvwlx5.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8kkvwlx5.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8kkvwlx5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8kkvwlx5.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8kkvwlx5.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8kkvwlx5.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kkvwlx5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        word =\
    \ words[i]\n        word_chars = collect(word)\n        sort!(word_chars)\n  \
    \      words[i] = join(word_chars)\n    end\n    return join(words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       push!(new_words, join(sort(collect(word))))\n    end\n    return join(new_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2eof1jgp.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp2eof1jgp.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp2eof1jgp.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2eof1jgp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp2eof1jgp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp2eof1jgp.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp2eof1jgp.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2eof1jgp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp2eof1jgp.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0j4c7j8h.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0j4c7j8h.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0j4c7j8h.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0j4c7j8h.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp0j4c7j8h.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0j4c7j8h.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0j4c7j8h.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0j4c7j8h.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp0j4c7j8h.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(words[i])\n    end\n    return join(words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_9i2sg7w.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_9i2sg7w.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_9i2sg7w.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_9i2sg7w.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_9i2sg7w.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_9i2sg7w.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_9i2sg7w.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_9i2sg7w.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_9i2sg7w.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp9zdcwnw.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpp9zdcwnw.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpp9zdcwnw.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp9zdcwnw.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpp9zdcwnw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpp9zdcwnw.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpp9zdcwnw.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp9zdcwnw.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpp9zdcwnw.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxhj0rwm0.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxhj0rwm0.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxhj0rwm0.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxhj0rwm0.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpxhj0rwm0.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxhj0rwm0.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxhj0rwm0.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxhj0rwm0.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpxhj0rwm0.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp85fb_jkg.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp85fb_jkg.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp85fb_jkg.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp85fb_jkg.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp85fb_jkg.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp85fb_jkg.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp85fb_jkg.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp85fb_jkg.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp85fb_jkg.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxsplgw3y.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxsplgw3y.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpxsplgw3y.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxsplgw3y.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpxsplgw3y.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpxsplgw3y.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpxsplgw3y.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxsplgw3y.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpxsplgw3y.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s)\n    # create a new\
    \ array of strings\n    new_words = []\n    # loop through each word\n    for\
    \ word in words\n        # sort the characters in the word\n        sorted_word\
    \ = sort(collect(word))\n        # join the characters back into a word\n    \
    \    new_word = join(sorted_word)\n        # add the new word to the array\n \
    \       push!(new_words, new_word)\n    end\n    # join the words back into a\
    \ sentence\n    new_sentence = join(new_words)\n    # return the new sentence\n\
    \    return new_sentence\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobz93cqy.jl:41\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobz93cqy.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobz93cqy.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpobz93cqy.jl:43\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobz93cqy.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobz93cqy.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobz93cqy.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp818bzcdf.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp818bzcdf.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp818bzcdf.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp818bzcdf.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp818bzcdf.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp818bzcdf.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp818bzcdf.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp818bzcdf.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp818bzcdf.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string into words\n    words = split(s)\n    # sort each word\n\
    \    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n  \
    \  # join words back into string\n    return join(words)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsrip0zrb.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpsrip0zrb.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsrip0zrb.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsrip0zrb.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpsrip0zrb.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpsrip0zrb.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsrip0zrb.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsrip0zrb.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpsrip0zrb.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_split = split(s, \" \")\n    s_split_anti = []\n    for word in s_split\n\
    \        push!(s_split_anti, sort(collect(word)))\n    end\n    return join(s_split_anti,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj83vvnv_.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj83vvnv_.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj83vvnv_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpj83vvnv_.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpj83vvnv_.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj83vvnv_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpj83vvnv_.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj83vvnv_.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj83vvnv_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpj83vvnv_.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj83vvnv_.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj83vvnv_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpj83vvnv_.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', 'l', 'l', 'o'] ['!', '!',\
    \ '!', 'W', 'd', 'l', 'o', 'r']\" == \"Hello !!!Wdlor\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj83vvnv_.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj83vvnv_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpj83vvn"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj83vvnv_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxdtrxo7y.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxdtrxo7y.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpxdtrxo7y.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxdtrxo7y.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpxdtrxo7y.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpxdtrxo7y.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpxdtrxo7y.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxdtrxo7y.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpxdtrxo7y.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7_v1om_c.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp7_v1om_c.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp7_v1om_c.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7_v1om_c.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp7_v1om_c.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp7_v1om_c.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp7_v1om_c.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7_v1om_c.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp7_v1om_c.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       push!(new_words, sort(collect(word)))\n    end\n    return join(new_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptuy5tp6w.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptuy5tp6w.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptuy5tp6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptuy5tp6w.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptuy5tp6w.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptuy5tp6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptuy5tp6w.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptuy5tp6w.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptuy5tp6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptuy5tp6w.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptuy5tp6w.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptuy5tp6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptuy5tp6w.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', 'l', 'l', 'o'] ['!', '!',\
    \ '!', 'W', 'd', 'l', 'o', 'r']\" == \"Hello !!!Wdlor\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptuy5tp6w.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptuy5tp6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptuy5tp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptuy5tp6w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3avh46pk.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3avh46pk.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3avh46pk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3avh46pk.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3avh46pk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3avh46pk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3avh46pk.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3avh46pk.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3avh46pk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3avh46pk.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp3avh46pk.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3avh46pk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3avh46pk.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3avh46pk.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3avh46pk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3avh46pk.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3avh46pk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu0ppxv6c.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpu0ppxv6c.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpu0ppxv6c.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu0ppxv6c.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpu0ppxv6c.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpu0ppxv6c.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpu0ppxv6c.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu0ppxv6c.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpu0ppxv6c.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4sbpjkr_.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp4sbpjkr_.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp4sbpjkr_.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4sbpjkr_.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp4sbpjkr_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp4sbpjkr_.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp4sbpjkr_.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4sbpjkr_.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp4sbpjkr_.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_split = split(s)\n    for i in 1:length(s_split)\n        s_split[i]\
    \ = sort(s_split[i])\n    end\n    return join(s_split)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf16f5459.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpf16f5459.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf16f5459.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf16f5459.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpf16f5459.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpf16f5459.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf16f5459.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf16f5459.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpf16f5459.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp447vq7pq.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp447vq7pq.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp447vq7pq.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp447vq7pq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp447vq7pq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp447vq7pq.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp447vq7pq.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp447vq7pq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp447vq7pq.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprar6fw8u.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprar6fw8u.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmprar6fw8u.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprar6fw8u.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmprar6fw8u.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprar6fw8u.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmprar6fw8u.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprar6fw8u.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmprar6fw8u.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvdu4sioi.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpvdu4sioi.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpvdu4sioi.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvdu4sioi.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpvdu4sioi.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpvdu4sioi.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpvdu4sioi.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvdu4sioi.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpvdu4sioi.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s, \" \")\n    # Sort\
    \ the characters in each word\n    sorted_words = [sort(w) for w in words]\n \
    \   # Join the words back together\n    return join(sorted_words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx0670d14.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpx0670d14.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpx0670d14.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpx0670d14.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpx0670d14.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpx0670d14.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpx0670d14.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpx0670d14.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpx0670d14.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnqzqjc78.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnqzqjc78.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnqzqjc78.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnqzqjc78.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnqzqjc78.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnqzqjc78.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnqzqjc78.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnqzqjc78.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnqzqjc78.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnqzqjc78.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpnqzqjc78.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnqzqjc78.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnqzqjc78.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnqzqjc78.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnqzqjc78.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnqzqjc78.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnqzqjc78.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsu48u86n.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpsu48u86n.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpsu48u86n.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsu48u86n.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsu48u86n.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpsu48u86n.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpsu48u86n.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsu48u86n.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsu48u86n.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0htdy4sq.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0htdy4sq.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp0htdy4sq.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0htdy4sq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp0htdy4sq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp0htdy4sq.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp0htdy4sq.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0htdy4sq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp0htdy4sq.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn44zhye2.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpn44zhye2.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn44zhye2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn44zhye2.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn44zhye2.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn44zhye2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn44zhye2.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn44zhye2.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn44zhye2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn44zhye2.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn44zhye2.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn44zhye2.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn44zhye2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppmz96hsg.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppmz96hsg.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppmz96hsg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppmz96hsg.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppmz96hsg.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppmz96hsg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppmz96hsg.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppmz96hsg.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppmz96hsg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppmz96hsg.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppmz96hsg.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppmz96hsg.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmz96hsg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s, \" \")\n    # Create\
    \ an empty string\n    new_string = \"\"\n    # Loop through the words\n    for\
    \ word in words\n        # Sort the characters in each word\n        sorted_word\
    \ = sort(collect(word))\n        # Add the sorted word to the new string\n   \
    \     new_string = new_string * join(sorted_word) * \" \"\n    end\n    # Remove\
    \ the last space\n    new_string = new_string[1:end-1]\n    # Return the new string\n\
    \    return new_string\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = push!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgds770l7.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgds770l7.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgds770l7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgds770l7.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgds770l7.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgds770l7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgds770l7.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgds770l7.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgds770l7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgds770l7.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgds770l7.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgds770l7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgds770l7.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', 'l', 'l', 'o'] ['!', '!',\
    \ '!', 'W', 'd', 'l', 'o', 'r']\" == \"Hello !!!Wdlor\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgds770l7.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgds770l7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgds770"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgds770l7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # YOUR CODE HERE\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3pct_usi.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3pct_usi.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pct_usi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3pct_usi.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3pct_usi.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pct_usi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3pct_usi.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3pct_usi.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pct_usi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3pct_usi.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3pct_usi.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pct_usi.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3pct_usi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(words[i])\n    end\n    return join(words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu45q6umk.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpu45q6umk.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpu45q6umk.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu45q6umk.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpu45q6umk.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpu45q6umk.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpu45q6umk.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu45q6umk.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpu45q6umk.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpunehgpr1.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpunehgpr1.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpunehgpr1.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpunehgpr1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpunehgpr1.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpunehgpr1.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpunehgpr1.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpunehgpr1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpunehgpr1.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/bas"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s)\n    # sort each word\n\
    \    sorted_words = [sort(word) for word in words]\n    # join the words back\
    \ together\n    return join(sorted_words)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwzyzg_px.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpwzyzg_px.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpwzyzg_px.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpwzyzg_px.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpwzyzg_px.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpwzyzg_px.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpwzyzg_px.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpwzyzg_px.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpwzyzg_px.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(words[i])\n    end\n    return join(words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp12cmp16e.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp12cmp16e.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp12cmp16e.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp12cmp16e.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp12cmp16e.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp12cmp16e.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp12cmp16e.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp12cmp16e.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp12cmp16e.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string into words\n    words = split(s, \" \")\n    # sort each\
    \ word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n\
    \    # join words back into string\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpta_0cb57.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpta_0cb57.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpta_0cb57.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpta_0cb57.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpta_0cb57.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpta_0cb57.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpta_0cb57.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpta_0cb57.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpta_0cb57.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnkr9u4si.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnkr9u4si.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpnkr9u4si.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnkr9u4si.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpnkr9u4si.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpnkr9u4si.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpnkr9u4si.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnkr9u4si.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpnkr9u4si.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptc7h9s1b.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmptc7h9s1b.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmptc7h9s1b.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptc7h9s1b.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmptc7h9s1b.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmptc7h9s1b.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmptc7h9s1b.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptc7h9s1b.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmptc7h9s1b.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6mxlfd_b.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp6mxlfd_b.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6mxlfd_b.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6mxlfd_b.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6mxlfd_b.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp6mxlfd_b.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6mxlfd_b.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6mxlfd_b.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6mxlfd_b.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/bas"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_6tj4rty.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_6tj4rty.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp_6tj4rty.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_6tj4rty.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_6tj4rty.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_6tj4rty.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp_6tj4rty.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_6tj4rty.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_6tj4rty.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    new_words = []\n    for word in words\n        new_words\
    \ = append!(new_words, sort(word))\n    end\n    return join(new_words)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprfpcqx0i.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprfpcqx0i.jl:17\\\
    n   [2] macro expansion\\n     @ /tmp/tmprfpcqx0i.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprfpcqx0i.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmprfpcqx0i.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmprfpcqx0i.jl:17\\\
    n   [2] macro expansion\\n     @ /tmp/tmprfpcqx0i.jl:27 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprfpcqx0i.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmprfpcqx0i.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvcwgc8sb.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvcwgc8sb.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvcwgc8sb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvcwgc8sb.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvcwgc8sb.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvcwgc8sb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvcwgc8sb.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvcwgc8sb.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvcwgc8sb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvcwgc8sb.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvcwgc8sb.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvcwgc8sb.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvcwgc8sb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcu69cc97.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcu69cc97.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpcu69cc97.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcu69cc97.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpcu69cc97.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpcu69cc97.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpcu69cc97.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcu69cc97.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpcu69cc97.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s, \" \")\n    # sort\
    \ each word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    # join the words back together\n    return join(words, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpavgnf5d8.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpavgnf5d8.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpavgnf5d8.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpavgnf5d8.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpavgnf5d8.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpavgnf5d8.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpavgnf5d8.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpavgnf5d8.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpavgnf5d8.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqf9cgulg.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpqf9cgulg.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpqf9cgulg.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqf9cgulg.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpqf9cgulg.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpqf9cgulg.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpqf9cgulg.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqf9cgulg.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpqf9cgulg.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbgoz8o09.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpbgoz8o09.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpbgoz8o09.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbgoz8o09.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpbgoz8o09.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpbgoz8o09.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpbgoz8o09.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbgoz8o09.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpbgoz8o09.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnsgl8ah6.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnsgl8ah6.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpnsgl8ah6.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnsgl8ah6.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpnsgl8ah6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpnsgl8ah6.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpnsgl8ah6.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnsgl8ah6.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpnsgl8ah6.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpek713jtb.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpek713jtb.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpek713jtb.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpek713jtb.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpek713jtb.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpek713jtb.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpek713jtb.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpek713jtb.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpek713jtb.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpamal8my8.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpamal8my8.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpamal8my8.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpamal8my8.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpamal8my8.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpamal8my8.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpamal8my8.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpamal8my8.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpamal8my8.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnmsrrh77.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnmsrrh77.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpnmsrrh77.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnmsrrh77.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpnmsrrh77.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpnmsrrh77.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpnmsrrh77.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnmsrrh77.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s)\n    # Sort each word\n\
    \    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n  \
    \  # Join the words back together\n    return join(words)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx3y0d6b1.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpx3y0d6b1.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpx3y0d6b1.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx3y0d6b1.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpx3y0d6b1.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpx3y0d6b1.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpx3y0d6b1.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx3y0d6b1.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpx3y0d6b1.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string into words\n    words = split(s, \" \")\n    # sort each\
    \ word\n    sorted_words = [sort(word) for word in words]\n    # join sorted words\n\
    \    return join(sorted_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8xgkipgv.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp8xgkipgv.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmp8xgkipgv.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp8xgkipgv.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp8xgkipgv.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp8xgkipgv.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmp8xgkipgv.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp8xgkipgv.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp8xgkipgv.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw21ri1hk.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpw21ri1hk.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpw21ri1hk.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw21ri1hk.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpw21ri1hk.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpw21ri1hk.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpw21ri1hk.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw21ri1hk.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpw21ri1hk.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps66tu48h.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps66tu48h.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps66tu48h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps66tu48h.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps66tu48h.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps66tu48h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps66tu48h.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps66tu48h.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps66tu48h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps66tu48h.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmps66tu48h.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps66tu48h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps66tu48h.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps66tu48h.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps66tu48h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps66tu48h.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps66tu48h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj8ulcjdi.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpj8ulcjdi.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpj8ulcjdi.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj8ulcjdi.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpj8ulcjdi.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpj8ulcjdi.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpj8ulcjdi.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj8ulcjdi.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpj8ulcjdi.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoua1173a.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoua1173a.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoua1173a.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpoua1173a.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoua1173a.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoua1173a.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpoua1173a.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpoua1173a.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoua1173a.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpoua1173a.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpoua1173a.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoua1173a.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpoua1173a.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoua1173a.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoua1173a.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpoua1173a.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoua1173a.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxi6zzox_.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxi6zzox_.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxi6zzox_.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxi6zzox_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpxi6zzox_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxi6zzox_.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxi6zzox_.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxi6zzox_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpxi6zzox_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/bas"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb9d508zi.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpb9d508zi.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9d508zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb9d508zi.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb9d508zi.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9d508zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb9d508zi.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb9d508zi.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9d508zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb9d508zi.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb9d508zi.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9d508zi.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9d508zi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpul9mkk2m.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpul9mkk2m.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul9mkk2m.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpul9mkk2m.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpul9mkk2m.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul9mkk2m.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpul9mkk2m.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpul9mkk2m.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul9mkk2m.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpul9mkk2m.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpul9mkk2m.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul9mkk2m.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpul9mkk2m.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpul9mkk2m.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpul9mkk2m.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpul9mkk2m.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpul9mkk2m.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn9p7isyc.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpn9p7isyc.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpn9p7isyc.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn9p7isyc.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpn9p7isyc.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpn9p7isyc.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpn9p7isyc.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn9p7isyc.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpn9p7isyc.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0or1staq.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp0or1staq.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0or1staq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0or1staq.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0or1staq.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0or1staq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0or1staq.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0or1staq.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0or1staq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0or1staq.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0or1staq.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0or1staq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0or1staq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s)\n    # Sort the characters\
    \ in each word\n    sorted_words = [sort(w) for w in words]\n    # Join the words\
    \ back together\n    return join(sorted_words)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq_j3834h.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpq_j3834h.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpq_j3834h.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpq_j3834h.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpq_j3834h.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpq_j3834h.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpq_j3834h.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpq_j3834h.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpq_j3834h.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp83qrk5h4.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp83qrk5h4.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp83qrk5h4.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp83qrk5h4.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp83qrk5h4.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp83qrk5h4.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp83qrk5h4.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp83qrk5h4.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp83qrk5h4.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphfb1leua.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmphfb1leua.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmphfb1leua.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphfb1leua.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmphfb1leua.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmphfb1leua.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmphfb1leua.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphfb1leua.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmphfb1leua.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       push!(new_words, sort(collect(word)))\n    end\n    join(new_words, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsg1eoc7s.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsg1eoc7s.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg1eoc7s.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsg1eoc7s.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpsg1eoc7s.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg1eoc7s.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsg1eoc7s.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsg1eoc7s.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg1eoc7s.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsg1eoc7s.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsg1eoc7s.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg1eoc7s.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsg1eoc7s.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', 'l', 'l', 'o'] ['!', '!',\
    \ '!', 'W', 'd', 'l', 'o', 'r']\" == \"Hello !!!Wdlor\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsg1eoc7s.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg1eoc7s.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsg1eoc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsg1eoc7s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s)\n    # sort each word\n\
    \    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n  \
    \  # join the sorted words\n    return join(words)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpss7jmubm.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpss7jmubm.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpss7jmubm.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpss7jmubm.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpss7jmubm.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpss7jmubm.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpss7jmubm.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpss7jmubm.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpss7jmubm.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp25waczpx.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp25waczpx.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp25waczpx.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp25waczpx.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp25waczpx.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp25waczpx.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp25waczpx.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp25waczpx.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp25waczpx.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprigxay2_.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmprigxay2_.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmprigxay2_.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprigxay2_.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmprigxay2_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmprigxay2_.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmprigxay2_.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprigxay2_.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmprigxay2_.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(map(sort, split(s, \" \")), \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd7dk8y3m.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:695 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:606 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2294\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmpd7dk8y3m.jl:14\\\
    n   [6] macro expansion\\n     @ /tmp/tmpd7dk8y3m.jl:21 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpd7dk8y3m.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpd7dk8y3m.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:695 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:606 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2294\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmpd7dk8y3m.jl:14\\\
    n   [6] macro expansion\\n     @ /tmp/tmpd7dk8y3m.jl:22 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpubtt2gcb.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpubtt2gcb.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubtt2gcb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpubtt2gcb.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpubtt2gcb.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubtt2gcb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpubtt2gcb.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpubtt2gcb.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubtt2gcb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpubtt2gcb.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpubtt2gcb.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubtt2gcb.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpubtt2gcb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvmcwiyzo.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpvmcwiyzo.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpvmcwiyzo.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvmcwiyzo.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpvmcwiyzo.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpvmcwiyzo.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpvmcwiyzo.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvmcwiyzo.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpvmcwiyzo.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvmt7m9x2.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpvmt7m9x2.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpvmt7m9x2.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvmt7m9x2.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpvmt7m9x2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpvmt7m9x2.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpvmt7m9x2.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvmt7m9x2.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpvmt7m9x2.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_j8hp5a6.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_j8hp5a6.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp_j8hp5a6.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_j8hp5a6.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_j8hp5a6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_j8hp5a6.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp_j8hp5a6.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_j8hp5a6.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_j8hp5a6.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # YOUR CODE HERE\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi53zv70e.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpi53zv70e.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi53zv70e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi53zv70e.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi53zv70e.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi53zv70e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi53zv70e.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi53zv70e.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi53zv70e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi53zv70e.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi53zv70e.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi53zv70e.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi53zv70e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmxpv5co5.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpmxpv5co5.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpmxpv5co5.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmxpv5co5.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpmxpv5co5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpmxpv5co5.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpmxpv5co5.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmxpv5co5.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpmxpv5co5.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    #split the string into words\n    words = split(s, \" \")\n    #sort each\
    \ word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n\
    \    #join the words back together\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcs_99bq6.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcs_99bq6.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcs_99bq6.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcs_99bq6.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpcs_99bq6.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcs_99bq6.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcs_99bq6.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcs_99bq6.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpcs_99bq6.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdxdhzk41.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdxdhzk41.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxdhzk41.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdxdhzk41.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdxdhzk41.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxdhzk41.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdxdhzk41.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdxdhzk41.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxdhzk41.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdxdhzk41.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdxdhzk41.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxdhzk41.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdxdhzk41.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    new_words = []\n    for word in words\n        new_words\
    \ = append!(new_words, sort(collect(word)))\n    end\n    return join(new_words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxhf19e7g.jl:30\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxhf19e7g.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxhf19e7g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxhf19e7g.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxhf19e7g.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxhf19e7g.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxhf19e7g.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr__jorv_.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpr__jorv_.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpr__jorv_.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr__jorv_.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpr__jorv_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpr__jorv_.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpr__jorv_.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr__jorv_.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpr__jorv_.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmamehzit.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpmamehzit.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmamehzit.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmamehzit.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpmamehzit.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpmamehzit.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmamehzit.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmamehzit.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpmamehzit.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/bas"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6tkscnpr.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp6tkscnpr.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp6tkscnpr.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6tkscnpr.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp6tkscnpr.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp6tkscnpr.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp6tkscnpr.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6tkscnpr.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp6tkscnpr.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyujbiiz2.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpyujbiiz2.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpyujbiiz2.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyujbiiz2.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpyujbiiz2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpyujbiiz2.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpyujbiiz2.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyujbiiz2.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpyujbiiz2.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9rr6ffz.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd9rr6ffz.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9rr6ffz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpd9rr6ffz.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd9rr6ffz.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9rr6ffz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpd9rr6ffz.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpd9rr6ffz.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9rr6ffz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpd9rr6ffz.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpd9rr6ffz.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9rr6ffz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpd9rr6ffz.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd9rr6ffz.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9rr6ffz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpd9rr6ffz.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9rr6ffz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4ppvutwz.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp4ppvutwz.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp4ppvutwz.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4ppvutwz.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv_nmyw07.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv_nmyw07.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpv_nmyw07.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv_nmyw07.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpv_nmyw07.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpv_nmyw07.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpv_nmyw07.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv_nmyw07.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpv_nmyw07.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp69d68p0m.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp69d68p0m.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp69d68p0m.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp69d68p0m.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp69d68p0m.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp69d68p0m.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp69d68p0m.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp69d68p0m.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp69d68p0m.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s, \" \")\n    # Sort\
    \ each word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    # Join the words back together\n    return join(words, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpexn4xyr_.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpexn4xyr_.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpexn4xyr_.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpexn4xyr_.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpexn4xyr_.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpexn4xyr_.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpexn4xyr_.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpexn4xyr_.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpexn4xyr_.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string into words\n    words = split(s, \" \")\n    # sort each\
    \ word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n\
    \    # join words back into string\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2b_lhft9.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp2b_lhft9.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2b_lhft9.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2b_lhft9.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp2b_lhft9.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp2b_lhft9.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2b_lhft9.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2b_lhft9.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp2b_lhft9.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsez879j6.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpsez879j6.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpsez879j6.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsez879j6.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsez879j6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpsez879j6.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpsez879j6.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsez879j6.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsez879j6.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1zp0i6oq.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp1zp0i6oq.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp1zp0i6oq.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1zp0i6oq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp1zp0i6oq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp1zp0i6oq.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp1zp0i6oq.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1zp0i6oq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp1zp0i6oq.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzs889t57.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpzs889t57.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpzs889t57.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzs889t57.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpzs889t57.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpzs889t57.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpzs889t57.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzs889t57.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpzs889t57.jl:27\\n  Test threw exception\\n  Exp"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsxxw4020.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpsxxw4020.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpsxxw4020.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsxxw4020.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsxxw4020.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpsxxw4020.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpsxxw4020.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsxxw4020.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsxxw4020.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = join(sort(collect(words[i])))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfxi9totc.jl:29\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfxi9totc.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfxi9totc.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfxi9totc.jl:31\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfxi9totc.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfxi9totc.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfxi9totc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s, \" \")\n    # sort\
    \ the characters in each word\n    sorted_words = [sort(word) for word in words]\n\
    \    # join the words back into a string\n    return join(sorted_words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpalzjlk_y.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpalzjlk_y.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpalzjlk_y.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpalzjlk_y.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpalzjlk_y.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpalzjlk_y.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpalzjlk_y.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpalzjlk_y.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpalzjlk_y.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2gzxisax.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2gzxisax.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gzxisax.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2gzxisax.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2gzxisax.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gzxisax.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2gzxisax.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2gzxisax.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gzxisax.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2gzxisax.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2gzxisax.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gzxisax.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gzxisax.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuzyi9m_2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpuzyi9m_2.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuzyi9m_2.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuzyi9m_2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpuzyi9m_2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpuzyi9m_2.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuzyi9m_2.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuzyi9m_2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpuzyi9m_2.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/bas"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpju38eb7i.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpju38eb7i.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpju38eb7i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpju38eb7i.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpju38eb7i.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpju38eb7i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpju38eb7i.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpju38eb7i.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpju38eb7i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpju38eb7i.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpju38eb7i.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpju38eb7i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpju38eb7i.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpju38eb7i.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpju38eb7i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpju38eb7i.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpju38eb7i.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s, ' ')\n    # Sort each\
    \ word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n\
    \    # Join the words back together\n    return join(words, ' ')\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4a_r8lyy.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp4a_r8lyy.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4a_r8lyy.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4a_r8lyy.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp4a_r8lyy.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp4a_r8lyy.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4a_r8lyy.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4a_r8lyy.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp4a_r8lyy.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    new_words = []\n    for word in words\n\
    \        new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpczd84ton.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpczd84ton.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczd84ton.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpczd84ton.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpczd84ton.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczd84ton.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpczd84ton.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpczd84ton.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczd84ton.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpczd84ton.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpczd84ton.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczd84ton.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpczd84ton.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpczd84ton.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczd84ton.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpczd84ton.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpczd84ton.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string into words\n    words = split(s, \" \")\n    # sort each\
    \ word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n\
    \    # join words back into a string\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcy6w6jez.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcy6w6jez.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcy6w6jez.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcy6w6jez.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpcy6w6jez.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcy6w6jez.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcy6w6jez.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcy6w6jez.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpcy6w6jez.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiqrjyva3.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpiqrjyva3.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpiqrjyva3.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiqrjyva3.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpiqrjyva3.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpiqrjyva3.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpiqrjyva3.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiqrjyva3.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpiqrjyva3.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5p2yt3o4.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp5p2yt3o4.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp5p2yt3o4.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5p2yt3o4.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp5p2yt3o4.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp5p2yt3o4.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp5p2yt3o4.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5p2yt3o4.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp5p2yt3o4.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # YOUR CODE HERE\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppiwt13h5.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppiwt13h5.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppiwt13h5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppiwt13h5.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppiwt13h5.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppiwt13h5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppiwt13h5.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppiwt13h5.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppiwt13h5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppiwt13h5.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppiwt13h5.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppiwt13h5.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppiwt13h5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpot7nnzsu.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpot7nnzsu.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot7nnzsu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpot7nnzsu.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpot7nnzsu.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot7nnzsu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpot7nnzsu.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpot7nnzsu.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot7nnzsu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpot7nnzsu.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpot7nnzsu.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot7nnzsu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpot7nnzsu.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpot7nnzsu.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot7nnzsu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpot7nnzsu.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpot7nnzsu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp7m_9a2y.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpp7m_9a2y.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpp7m_9a2y.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp7m_9a2y.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpp7m_9a2y.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpp7m_9a2y.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpp7m_9a2y.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp7m_9a2y.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpp7m_9a2y.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppndpxbfi.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppndpxbfi.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppndpxbfi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppndpxbfi.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppndpxbfi.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppndpxbfi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppndpxbfi.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppndpxbfi.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppndpxbfi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppndpxbfi.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmppndpxbfi.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppndpxbfi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppndpxbfi.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppndpxbfi.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppndpxbfi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppndpxbfi.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppndpxbfi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuz2re3az.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpuz2re3az.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpuz2re3az.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuz2re3az.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpuz2re3az.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpuz2re3az.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpuz2re3az.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuz2re3az.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpuz2re3az.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s)\n    # Sort each word\n\
    \    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n  \
    \  # Join the words back together\n    return join(words)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1qdzodjb.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp1qdzodjb.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1qdzodjb.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1qdzodjb.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp1qdzodjb.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp1qdzodjb.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1qdzodjb.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1qdzodjb.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp1qdzodjb.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf6lcn39v.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpf6lcn39v.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpf6lcn39v.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpf6lcn39v.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpf6lcn39v.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpf6lcn39v.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpf6lcn39v.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpf6lcn39v.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpf6lcn39v.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s, \" \")\n    # sort\
    \ each word\n    sorted_words = [sort(word) for word in words]\n    # join the\
    \ words back together\n    return join(sorted_words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv4592ff9.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpv4592ff9.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpv4592ff9.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpv4592ff9.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpv4592ff9.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpv4592ff9.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpv4592ff9.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpv4592ff9.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpv4592ff9.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(words[i])\n    end\n    return join(words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq3lzpi91.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpq3lzpi91.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpq3lzpi91.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq3lzpi91.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpq3lzpi91.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpq3lzpi91.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpq3lzpi91.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq3lzpi91.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpq3lzpi91.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf71a0q74.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpf71a0q74.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpf71a0q74.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpf71a0q74.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpf71a0q74.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpf71a0q74.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpf71a0q74.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpf71a0q74.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpf71a0q74.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_r9oygmp.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_r9oygmp.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp_r9oygmp.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_r9oygmp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_r9oygmp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_r9oygmp.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp_r9oygmp.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_r9oygmp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_r9oygmp.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyri78txb.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpyri78txb.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpyri78txb.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyri78txb.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpyri78txb.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpyri78txb.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpyri78txb.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyri78txb.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpyri78txb.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s, \" \")\n    # Sort\
    \ the characters in each word\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    # Join the words back together\n   \
    \ return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpag8u_99n.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpag8u_99n.jl:18\\\
    n   [3] macro expansion\\n     @ /tmp/tmpag8u_99n.jl:28 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpag8u_99n.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpag8u_99n.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpag8u_99n.jl:18\\n   [3] macro expansion\\n     @ /tmp/tmpag8u_99n.jl:29\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpag8u_99n.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpag8u_99n.jl:30\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp82zyi7zd.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp82zyi7zd.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82zyi7zd.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp82zyi7zd.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp82zyi7zd.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82zyi7zd.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp82zyi7zd.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp82zyi7zd.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82zyi7zd.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp82zyi7zd.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp82zyi7zd.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82zyi7zd.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp82zyi7zd.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp82zyi7zd.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82zyi7zd.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp82zyi7zd.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82zyi7zd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = push!(new_words, join(sort(collect(word))))\n    end\n   \
    \ return join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp49p27lep.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp49p27lep.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp49p27lep.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp49p27lep.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp49p27lep.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp49p27lep.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp49p27lep.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp49p27lep.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp49p27lep.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp49p27lep.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp49p27lep.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp49p27lep.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49p27lep.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3w63d416.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp3w63d416.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp3w63d416.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3w63d416.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp3w63d416.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp3w63d416.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp3w63d416.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3w63d416.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp3w63d416.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuzgt537c.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpuzgt537c.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpuzgt537c.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuzgt537c.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpuzgt537c.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpuzgt537c.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpuzgt537c.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuzgt537c.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpuzgt537c.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    new_words = []\n    for word in words\n        new_words\
    \ = append!(new_words, sort(collect(word)))\n    end\n    return join(new_words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsucaz7qh.jl:30\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsucaz7qh.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsucaz7qh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsucaz7qh.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsucaz7qh.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsucaz7qh.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsucaz7qh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsdjvs6np.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpsdjvs6np.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdjvs6np.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsdjvs6np.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsdjvs6np.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdjvs6np.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsdjvs6np.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsdjvs6np.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdjvs6np.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsdjvs6np.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsdjvs6np.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdjvs6np.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsdjvs6np.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5ykd1nse.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp5ykd1nse.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp5ykd1nse.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5ykd1nse.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp5ykd1nse.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp5ykd1nse.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp5ykd1nse.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5ykd1nse.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp5ykd1nse.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    new_words = []\n    for word in words\n\
    \        new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_imzigtc.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_imzigtc.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_imzigtc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_imzigtc.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_imzigtc.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_imzigtc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_imzigtc.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_imzigtc.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_imzigtc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_imzigtc.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp_imzigtc.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_imzigtc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_imzigtc.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_imzigtc.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_imzigtc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_imzigtc.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_imzigtc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s, r\"\\s+\")\n    #\
    \ sort each word\n    sorted_words = [sort(word) for word in words]\n    # join\
    \ the words back together\n    return join(sorted_words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmzkogqgl.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpmzkogqgl.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpmzkogqgl.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpmzkogqgl.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpmzkogqgl.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpmzkogqgl.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpmzkogqgl.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpmzkogqgl.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpmzkogqgl.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_list = split(s, \" \")\n    for i in 1:length(s_list)\n        s_list[i]\
    \ = join(sort(collect(s_list[i])), \"\")\n    end\n    return join(s_list, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    join(words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp102_li_g.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp102_li_g.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp102_li_g.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp102_li_g.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp102_li_g.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp102_li_g.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp102_li_g.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp102_li_g.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp102_li_g.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    join(words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfl0ywp_r.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpfl0ywp_r.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpfl0ywp_r.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfl0ywp_r.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpfl0ywp_r.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpfl0ywp_r.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpfl0ywp_r.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfl0ywp_r.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpfl0ywp_r.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprtgz6b8x.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmprtgz6b8x.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmprtgz6b8x.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprtgz6b8x.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmprtgz6b8x.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmprtgz6b8x.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmprtgz6b8x.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprtgz6b8x.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmprtgz6b8x.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into a list of words\n    words = split(s)\n    # Create\
    \ a new list of words\n    new_words = []\n    # For each word in the list of\
    \ words\n    for word in words\n        # Sort the characters in the word\n  \
    \      sorted_word = sort(collect(word))\n        # Join the sorted characters\
    \ into a new word\n        new_word = join(sorted_word)\n        # Add the new\
    \ word to the list of new words\n        push!(new_words, new_word)\n    end\n\
    \    # Join the new words into a new string\n    new_string = join(new_words)\n\
    \    # Return the new string\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9v2wsyz3.jl:41\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9v2wsyz3.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9v2wsyz3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp9v2wsyz3.jl:43\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9v2wsyz3.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9v2wsyz3.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9v2wsyz3.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s)\n    # Sort each word\n\
    \    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n  \
    \  # Join the words back into a string\n    return join(words)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvb7obuwf.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::SubString{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\n    sort(!Matched::AbstractRange) at range.jl:1063\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpvb7obuwf.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpvb7obuwf.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvb7obuwf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvb7obuwf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\n\
    \    sort(!Matched::AbstractRange) at range.jl:1063\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpvb7obuwf.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpvb7obuwf.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvb7obuwf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvb7obuwf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\n\
    \    sort(!Matched::AbstractRange) at range.jl:1063\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) whe"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvb7obuwf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxip0ysfp.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxip0ysfp.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpxip0ysfp.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxip0ysfp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpxip0ysfp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpxip0ysfp.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpxip0ysfp.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxip0ysfp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpxip0ysfp.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string into words\n    words = split(s, r\"\\s+\")\n    # sort\
    \ each word\n    sorted_words = [sort(w) for w in words]\n    # join words back\
    \ together\n    return join(sorted_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb3vyjey7.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::SubString{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\n    sort(!Matched::AbstractRange) at range.jl:1063\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\n\
    \    ...\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [2] collect\n     @ ./array.jl:681 [inlined]\n   [3] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmpb3vyjey7.jl:17\n   [4] macro expansion\n     @ /tmp/tmpb3vyjey7.jl:26\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb3vyjey7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpb3vyjey7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\n\
    \    sort(!Matched::AbstractRange) at range.jl:1063\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\n\
    \    ...\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [2] collect\n     @ ./array.jl:681 [inlined]\n   [3] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmpb3vyjey7.jl:17\n   [4] macro expansion\n     @ /tmp/tmpb3vyjey7.jl:27\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb3vyjey7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpb3vyjey7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  C"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb3vyjey7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = join(sort(collect(words[i])))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqok082u6.jl:29\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqok082u6.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqok082u6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqok082u6.jl:31\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqok082u6.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqok082u6.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqok082u6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3uqlqoly.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp3uqlqoly.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp3uqlqoly.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3uqlqoly.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp3uqlqoly.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp3uqlqoly.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp3uqlqoly.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3uqlqoly.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp3uqlqoly.jl:27\\n  Test threw exception\\n  Exp"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    result = []\n    for word in words\n    \
    \    push!(result, join(sort(collect(word))))\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = push!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4oxtcxfe.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4oxtcxfe.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oxtcxfe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4oxtcxfe.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4oxtcxfe.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oxtcxfe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4oxtcxfe.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4oxtcxfe.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oxtcxfe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4oxtcxfe.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4oxtcxfe.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oxtcxfe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4oxtcxfe.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', 'l', 'l', 'o'] ['!', '!',\
    \ '!', 'W', 'd', 'l', 'o', 'r']\" == \"Hello !!!Wdlor\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4oxtcxfe.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oxtcxfe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4oxtcx"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4oxtcxfe.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string by space\n    words = split(s, \" \")\n    # sort each\
    \ word\n    sorted_words = [sort(word) for word in words]\n    # join words back\
    \ into a string\n    return join(sorted_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_an8w_do.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_an8w_do.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmp_an8w_do.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_an8w_do.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp_an8w_do.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_an8w_do.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmp_an8w_do.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_an8w_do.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp_an8w_do.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp_an8w_do.jl:23\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw1gac3ex.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpw1gac3ex.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpw1gac3ex.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw1gac3ex.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpw1gac3ex.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpw1gac3ex.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpw1gac3ex.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw1gac3ex.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpw1gac3ex.jl:27\\n  Test threw exception\\n  Exp"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptb_ri3ta.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmptb_ri3ta.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmptb_ri3ta.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptb_ri3ta.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmptb_ri3ta.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmptb_ri3ta.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmptb_ri3ta.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptb_ri3ta.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmptb_ri3ta.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s)\n    # sort each word\n\
    \    sorted_words = [sort(word) for word in words]\n    # join the words back\
    \ together\n    return join(sorted_words)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu7pt9un7.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpu7pt9un7.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpu7pt9un7.jl:26\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpu7pt9un7.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpu7pt9un7.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] collect\\n     @ ./array.jl:681 [inlined]\\n   [3] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpu7pt9un7.jl:17\\n   [4] macro expansion\\n     @ /tmp/tmpu7pt9un7.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpu7pt9un7.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpu7pt9un7.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1l4wxi_7.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp1l4wxi_7.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp1l4wxi_7.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1l4wxi_7.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp1l4wxi_7.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp1l4wxi_7.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp1l4wxi_7.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1l4wxi_7.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp1l4wxi_7.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s, \" \")\n    # Loop\
    \ through each word\n    for i in 1:length(words)\n        # Sort the characters\
    \ in each word\n        words[i] = sort(words[i])\n    end\n    # Join the words\
    \ back together\n    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp73danmjq.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp73danmjq.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmp73danmjq.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp73danmjq.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp73danmjq.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp73danmjq.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmp73danmjq.jl:30 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp73danmjq.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp73danmjq.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       push!(new_words, join(sort(collect(word))))\n    end\n    return join(new_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppw309y47.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmppw309y47.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmppw309y47.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppw309y47.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmppw309y47.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmppw309y47.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmppw309y47.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppw309y47.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmppw309y47.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphb4t7kd9.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmphb4t7kd9.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmphb4t7kd9.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphb4t7kd9.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmphb4t7kd9.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmphb4t7kd9.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmphb4t7kd9.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphb4t7kd9.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmphb4t7kd9.jl:27\\n  Test threw exception\\n  Exp"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words\n    words = split(s, \" \")\n    # Create\
    \ a new array of strings\n    new_words = []\n    # For each word in the array\
    \ of words\n    for word in words\n        # Sort the characters in the word\n\
    \        sorted_word = sort(collect(word))\n        # Join the characters back\
    \ into a string\n        new_word = join(sorted_word)\n        # Add the new word\
    \ to the array of new words\n        push!(new_words, new_word)\n    end\n   \
    \ # Join the new words back into a string\n    return join(new_words, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo0ly_jpw.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpo0ly_jpw.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpo0ly_jpw.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo0ly_jpw.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpo0ly_jpw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpo0ly_jpw.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpo0ly_jpw.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo0ly_jpw.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpo0ly_jpw.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbi1_7aoq.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpbi1_7aoq.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpbi1_7aoq.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbi1_7aoq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpbi1_7aoq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpbi1_7aoq.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpbi1_7aoq.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbi1_7aoq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpbi1_7aoq.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code goes here\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8oves28s.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8oves28s.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8oves28s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8oves28s.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8oves28s.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8oves28s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8oves28s.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8oves28s.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8oves28s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8oves28s.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8oves28s.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8oves28s.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8oves28s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph230i8bo.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmph230i8bo.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmph230i8bo.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmph230i8bo.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmph230i8bo.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmph230i8bo.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmph230i8bo.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmph230i8bo.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmph230i8bo.jl:27\\n  Test threw exception\\n  Exp"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsksqgvcm.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpsksqgvcm.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpsksqgvcm.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsksqgvcm.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsksqgvcm.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpsksqgvcm.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpsksqgvcm.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsksqgvcm.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsksqgvcm.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuf1myh53.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpuf1myh53.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpuf1myh53.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuf1myh53.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpuf1myh53.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpuf1myh53.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpuf1myh53.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuf1myh53.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpuf1myh53.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk3xd7tkk.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpk3xd7tkk.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3xd7tkk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpk3xd7tkk.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpk3xd7tkk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3xd7tkk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpk3xd7tkk.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpk3xd7tkk.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3xd7tkk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpk3xd7tkk.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpk3xd7tkk.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3xd7tkk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpk3xd7tkk.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk3xd7tkk.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3xd7tkk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpk3xd7tkk.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk3xd7tkk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s, r\"\\s+\")\n    #\
    \ sort the characters in each word\n    sorted_words = [sort(word) for word in\
    \ words]\n    # join the words back together\n    return join(sorted_words, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp418h908k.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::SubString{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\n    sort(!Matched::AbstractRange) at range.jl:1063\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\n\
    \    ...\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [2] collect\n     @ ./array.jl:681 [inlined]\n   [3] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmp418h908k.jl:17\n   [4] macro expansion\n     @ /tmp/tmp418h908k.jl:26\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp418h908k.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp418h908k.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\n\
    \    sort(!Matched::AbstractRange) at range.jl:1063\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\n\
    \    ...\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [2] collect\n     @ ./array.jl:681 [inlined]\n   [3] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmp418h908k.jl:17\n   [4] macro expansion\n     @ /tmp/tmp418h908k.jl:27\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp418h908k.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp418h908k.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  C"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp418h908k.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # YOUR CODE HERE\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xm7q28i.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4xm7q28i.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xm7q28i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4xm7q28i.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4xm7q28i.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xm7q28i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4xm7q28i.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4xm7q28i.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xm7q28i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4xm7q28i.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4xm7q28i.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xm7q28i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xm7q28i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    result = []\n    for word in words\n        push!(result,\
    \ join(sort(collect(word))))\n    end\n    return join(result)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ce9rimb.jl:30\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ce9rimb.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ce9rimb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6ce9rimb.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ce9rimb.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ce9rimb.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ce9rimb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(map(sort, split(s, \" \")), \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp44fy3ai8.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:695 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:606 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2294\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmp44fy3ai8.jl:14\\\
    n   [6] macro expansion\\n     @ /tmp/tmp44fy3ai8.jl:21 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp44fy3ai8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp44fy3ai8.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:695 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:606 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2294\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmp44fy3ai8.jl:14\\\
    n   [6] macro expansion\\n     @ /tmp/tmp44fy3ai8.jl:22 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = join(sort(collect(words[i])))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpea6q1pc1.jl:29\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpea6q1pc1.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpea6q1pc1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpea6q1pc1.jl:31\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpea6q1pc1.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpea6q1pc1.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpea6q1pc1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s = split(s)\n    for i in 1:length(s)\n        s[i] = sort(s[i])\n  \
    \  end\n    return join(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9odc879w.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9odc879w.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9odc879w.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9odc879w.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp9odc879w.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9odc879w.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9odc879w.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9odc879w.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp9odc879w.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_od1lx4e.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_od1lx4e.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp_od1lx4e.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_od1lx4e.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_od1lx4e.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp_od1lx4e.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp_od1lx4e.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_od1lx4e.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_od1lx4e.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string into words\n    words = split(s, \" \")\n    # sort each\
    \ word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n\
    \    # join words back together\n    return join(words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoyvw0emu.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpoyvw0emu.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpoyvw0emu.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoyvw0emu.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpoyvw0emu.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpoyvw0emu.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpoyvw0emu.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoyvw0emu.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpoyvw0emu.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa3ye9313.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpa3ye9313.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpa3ye9313.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpa3ye9313.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpa3ye9313.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpa3ye9313.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpa3ye9313.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpa3ye9313.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpa3ye9313.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9stoftjn.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9stoftjn.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp9stoftjn.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9stoftjn.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp9stoftjn.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp9stoftjn.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp9stoftjn.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9stoftjn.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp9stoftjn.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s, \" \")\n    # sort\
    \ each word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    # join the words back together\n    return join(words, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiczcmrg0.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpiczcmrg0.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpiczcmrg0.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiczcmrg0.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpiczcmrg0.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpiczcmrg0.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpiczcmrg0.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiczcmrg0.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpiczcmrg0.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphcok3lwh.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmphcok3lwh.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmphcok3lwh.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphcok3lwh.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmphcok3lwh.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmphcok3lwh.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmphcok3lwh.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphcok3lwh.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmphcok3lwh.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s, \" \")\n    # sort\
    \ each word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n\
    \    end\n    # join the words back together\n    return join(words, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfw8ozt0g.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpfw8ozt0g.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfw8ozt0g.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfw8ozt0g.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpfw8ozt0g.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpfw8ozt0g.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfw8ozt0g.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfw8ozt0g.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpfw8ozt0g.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc4dspyj0.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpc4dspyj0.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpc4dspyj0.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc4dspyj0.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpc4dspyj0.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpc4dspyj0.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpc4dspyj0.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc4dspyj0.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpc4dspyj0.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjh_o0p3t.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjh_o0p3t.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpjh_o0p3t.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjh_o0p3t.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpjh_o0p3t.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpjh_o0p3t.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpjh_o0p3t.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjh_o0p3t.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpjh_o0p3t.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1d55i81u.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1d55i81u.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1d55i81u.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1d55i81u.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1d55i81u.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1d55i81u.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1d55i81u.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1d55i81u.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1d55i81u.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1d55i81u.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp1d55i81u.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1d55i81u.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1d55i81u.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1d55i81u.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1d55i81u.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1d55i81u.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1d55i81u.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split string into words\n    words = split(s, \" \")\n    # sort each\
    \ word\n    for i in 1:length(words)\n        words[i] = sort(words[i])\n    end\n\
    \    # join words back into a string\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz0vi5m7f.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpz0vi5m7f.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpz0vi5m7f.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz0vi5m7f.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpz0vi5m7f.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpz0vi5m7f.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpz0vi5m7f.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz0vi5m7f.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpz0vi5m7f.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\\
    n    sort(!Matched::AbstractRange) at range.jl:1063\\n    sort(!Matched::S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        words[i] = sort(collect(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwjq3pu2d.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpwjq3pu2d.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmpwjq3pu2d.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwjq3pu2d.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpwjq3pu2d.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpwjq3pu2d.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmpwjq3pu2d.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwjq3pu2d.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpwjq3pu2d.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp31fh8bb0.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp31fh8bb0.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp31fh8bb0.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp31fh8bb0.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp31fh8bb0.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp31fh8bb0.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp31fh8bb0.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp31fh8bb0.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp31fh8bb0.jl:27\\n  Test threw exception\\n  Exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprz1b4t75.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprz1b4t75.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprz1b4t75.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprz1b4t75.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprz1b4t75.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprz1b4t75.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprz1b4t75.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprz1b4t75.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprz1b4t75.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprz1b4t75.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmprz1b4t75.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprz1b4t75.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprz1b4t75.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprz1b4t75.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprz1b4t75.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprz1b4t75.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprz1b4t75.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9zalj_gv.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9zalj_gv.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9zalj_gv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9zalj_gv.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9zalj_gv.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9zalj_gv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9zalj_gv.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9zalj_gv.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9zalj_gv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9zalj_gv.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp9zalj_gv.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9zalj_gv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9zalj_gv.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9zalj_gv.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9zalj_gv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9zalj_gv.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9zalj_gv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpge6df44b.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpge6df44b.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpge6df44b.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpge6df44b.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpge6df44b.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpge6df44b.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpge6df44b.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpge6df44b.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpge6df44b.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/bas"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp78n5ltdo.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp78n5ltdo.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp78n5ltdo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp78n5ltdo.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp78n5ltdo.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp78n5ltdo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp78n5ltdo.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp78n5ltdo.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp78n5ltdo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp78n5ltdo.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp78n5ltdo.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp78n5ltdo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp78n5ltdo.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp78n5ltdo.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp78n5ltdo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp78n5ltdo.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78n5ltdo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       new_words = append!(new_words, sort(collect(word)))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq22wpkl9.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq22wpkl9.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq22wpkl9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpq22wpkl9.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq22wpkl9.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq22wpkl9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpq22wpkl9.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq22wpkl9.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq22wpkl9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpq22wpkl9.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpq22wpkl9.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq22wpkl9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpq22wpkl9.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq22wpkl9.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq22wpkl9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpq22wpkl9.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq22wpkl9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = sort(collect(words[i]))\n    end\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3xovj2yp.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at strings/substring.jl:56\\n    convert(::Type{SubString{S}}, !Matched::AbstractString)\
    \ where S<:AbstractString at strings/substring.jl:54\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\\
    n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char}, i1::Int64)\\\
    n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp3xovj2yp.jl:16\\\
    n   [3] macro expansion\\n     @ /tmp/tmp3xovj2yp.jl:25 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3xovj2yp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp3xovj2yp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Char} to an object of type SubString{String}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString at strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at strings/substring.jl:54\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}},\
    \ x::Vector{Char}, i1::Int64)\\n     @ Base ./array.jl:843\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp3xovj2yp.jl:16\\n   [3] macro expansion\\n     @ /tmp/tmp3xovj2yp.jl:26\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3xovj2yp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp3xovj2yp.jl:27\\n  Test threw exception\\n  Exp"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
