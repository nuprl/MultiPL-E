name: HumanEval_22_filter_integers
language: julia
results:
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # TODO: implement this function\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprc55maxh.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] filter_integers(values::Vector{Any})\\n    \
    \ @ Main /tmp/tmprc55maxh.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmprc55maxh.jl:15\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprc55maxh.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmprc55maxh.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\\n  Closest\
    \ candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array\
    \ at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] filter_integers(values::Vector{Any})\\n    \
    \ @ Main /tmp/tmprc55maxh.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmprc55maxh.jl:16\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprc55maxh.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmprc55maxh.jl:17\\n  Test threw exception"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> x isa Int64, values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered_values = Int64[]\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(filtered_values, value)\n        end\n    end\n  \
    \  return filtered_values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp5b_49pl.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] filter_integers(values::Vector{Any})\\n    \
    \ @ Main /tmp/tmpp5b_49pl.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpp5b_49pl.jl:15\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp5b_49pl.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpp5b_49pl.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\\n  Closest\
    \ candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array\
    \ at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] filter_integers(values::Vector{Any})\\n    \
    \ @ Main /tmp/tmpp5b_49pl.jl:9\\n   [2] macro expansion\\n     @ /tmp/tmpp5b_49pl.jl:16\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp5b_49pl.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpp5b_49pl.jl:17\\n  Test threw exception"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if typeof(v) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
