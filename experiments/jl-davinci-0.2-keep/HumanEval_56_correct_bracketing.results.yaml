name: HumanEval_56_correct_bracketing
language: julia
results:
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_7wsb_hc.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_7wsb_hc.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7wsb_hc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_7wsb_hc.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7wsb_hc.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7wsb_hc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_7wsb_hc.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7wsb_hc.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7wsb_hc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_7wsb_hc.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7wsb_hc.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7wsb_hc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_7wsb_hc.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7wsb_hc.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7wsb_hc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_7wsb_hc.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7wsb_hc.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7wsb_hc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkeaofdjl.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkeaofdjl.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeaofdjl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkeaofdjl.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkeaofdjl.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeaofdjl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkeaofdjl.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkeaofdjl.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeaofdjl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkeaofdjl.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkeaofdjl.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeaofdjl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkeaofdjl.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkeaofdjl.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeaofdjl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkeaofdjl.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkeaofdjl.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkeaofdjl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_uj2srh4.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_uj2srh4.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_uj2srh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_uj2srh4.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_uj2srh4.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_uj2srh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_uj2srh4.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_uj2srh4.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_uj2srh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_uj2srh4.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_uj2srh4.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_uj2srh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_uj2srh4.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_uj2srh4.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_uj2srh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_uj2srh4.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_uj2srh4.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_uj2srh4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxvd58v7g.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxvd58v7g.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvd58v7g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxvd58v7g.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxvd58v7g.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvd58v7g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxvd58v7g.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxvd58v7g.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvd58v7g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxvd58v7g.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxvd58v7g.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvd58v7g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxvd58v7g.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxvd58v7g.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvd58v7g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxvd58v7g.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxvd58v7g.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvd58v7g.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqjzx3a01.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqjzx3a01.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqjzx3a01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqjzx3a01.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqjzx3a01.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqjzx3a01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqjzx3a01.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqjzx3a01.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqjzx3a01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqjzx3a01.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqjzx3a01.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqjzx3a01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqjzx3a01.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqjzx3a01.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqjzx3a01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqjzx3a01.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqjzx3a01.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqjzx3a01.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8qs4uxjp.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8qs4uxjp.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qs4uxjp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qs4uxjp.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8qs4uxjp.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qs4uxjp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qs4uxjp.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8qs4uxjp.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qs4uxjp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qs4uxjp.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8qs4uxjp.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qs4uxjp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qs4uxjp.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8qs4uxjp.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qs4uxjp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qs4uxjp.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8qs4uxjp.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qs4uxjp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptaqlyrxa.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptaqlyrxa.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaqlyrxa.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptaqlyrxa.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptaqlyrxa.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaqlyrxa.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptaqlyrxa.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptaqlyrxa.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaqlyrxa.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptaqlyrxa.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptaqlyrxa.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaqlyrxa.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptaqlyrxa.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptaqlyrxa.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaqlyrxa.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptaqlyrxa.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptaqlyrxa.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptaqlyrxa.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == '>'\n    \
    \    return false\n    end\n    if brackets[n] == '<'\n        return false\n\
    \    end\n    open_count = 0\n    for i in 1:n\n        if brackets[i] == '<'\n\
    \            open_count += 1\n        elseif brackets[i] == '>'\n            open_count\
    \ -= 1\n        end\n        if open_count < 0\n            return false\n   \
    \     end\n    end\n    return open_count == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '<'\n            n += 1\n \
    \       elseif brackets[i] == '>'\n            n -= 1\n        end\n        if\
    \ n < 0\n            return false\n        end\n    end\n    return n == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == '<'\n            n += 1\n        elseif i == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<' && brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpenahdhki.jl:30\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpenahdhki.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpenahdhki.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpenahdhki.jl:31\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpenahdhki.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpenahdhki.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpenahdhki.jl:32\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpenahdhki.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpenahdhki.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpenahdhki.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == \">\"\n        return false\n    elseif brackets[1]\
    \ == \"<\"\n        if brackets[2] == \">\"\n            return correct_bracketing(brackets[3:end])\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphm81xcs1.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"<>\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\n    \
    \ @ Main /tmp/tmphm81xcs1.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmphm81xcs1.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphm81xcs1.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmphm81xcs1.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<<><>>\") == true\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ correct_bracketing(brackets::String)\\n     @ Main /tmp/tmphm81xcs1.jl:24\\\
    n   [2] macro expansion\\n     @ /tmp/tmphm81xcs1.jl:34 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphm81xcs1.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmphm81xcs1.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\\n  Closest candidates are:\\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    conve"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgz4lbbic.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgz4lbbic.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz4lbbic.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgz4lbbic.jl:23\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgz4lbbic.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz4lbbic.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgz4lbbic.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgz4lbbic.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz4lbbic.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgz4lbbic.jl:25\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgz4lbbic.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz4lbbic.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgz4lbbic.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    for i in 1:n\n        if brackets[i]\
    \ == '<'\n            for j in i:n\n                if brackets[j] == '>'\n  \
    \                  return correct_bracketing(brackets[i+1:j-1])\n            \
    \    end\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmped85_6_x.jl:44\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmped85_6_x.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmped85_6_x.jl:42\ntest set: Test\
    \ Failed at /tmp/tmped85_6_x.jl:53\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmped85_6_x.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmped85_6_x.jl:42\ntest set: Test\
    \ Failed at /tmp/tmped85_6_x.jl:54\n  Expression: candidate(\"<><><<><>><>>><>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmped85_6_x.jl:54 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmped85_6_x.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmped85_6_x.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == '<'\n            n += 1\n        elseif i == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm572_fh4.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm572_fh4.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm572_fh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm572_fh4.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm572_fh4.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm572_fh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm572_fh4.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm572_fh4.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm572_fh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm572_fh4.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm572_fh4.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm572_fh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm572_fh4.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm572_fh4.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm572_fh4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm572_fh4.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm572_fh4.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm572_fh4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    count = 0\n    for i in brackets\n        if i == '<'\n            count\
    \ += 1\n        elseif i == '>'\n            count -= 1\n        end\n       \
    \ if count < 0\n            return false\n        end\n    end\n    if count ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_9dj1j4u.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_9dj1j4u.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_9dj1j4u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_9dj1j4u.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_9dj1j4u.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_9dj1j4u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_9dj1j4u.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_9dj1j4u.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_9dj1j4u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_9dj1j4u.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_9dj1j4u.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_9dj1j4u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_9dj1j4u.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_9dj1j4u.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_9dj1j4u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_9dj1j4u.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_9dj1j4u.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_9dj1j4u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpds959_al.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpds959_al.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpds959_al.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpds959_al.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpds959_al.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpds959_al.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpds959_al.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpds959_al.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpds959_al.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpds959_al.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpds959_al.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpds959_al.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpds959_al.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpds959_al.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpds959_al.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpds959_al.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpds959_al.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpds959_al.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpolmj0rzj.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpolmj0rzj.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpolmj0rzj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpolmj0rzj.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpolmj0rzj.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpolmj0rzj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpolmj0rzj.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpolmj0rzj.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpolmj0rzj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpolmj0rzj.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpolmj0rzj.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpolmj0rzj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpolmj0rzj.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpolmj0rzj.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpolmj0rzj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpolmj0rzj.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpolmj0rzj.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpolmj0rzj.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm78haarq.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm78haarq.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm78haarq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm78haarq.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm78haarq.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm78haarq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm78haarq.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm78haarq.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm78haarq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm78haarq.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm78haarq.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm78haarq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm78haarq.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm78haarq.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm78haarq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm78haarq.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm78haarq.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm78haarq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3io9k8fo.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3io9k8fo.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3io9k8fo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3io9k8fo.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3io9k8fo.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3io9k8fo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3io9k8fo.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp3io9k8fo.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3io9k8fo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3io9k8fo.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp3io9k8fo.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3io9k8fo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3io9k8fo.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3io9k8fo.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3io9k8fo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3io9k8fo.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3io9k8fo.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3io9k8fo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpstilsntu.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpstilsntu.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpstilsntu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpstilsntu.jl:23\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpstilsntu.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpstilsntu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpstilsntu.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpstilsntu.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpstilsntu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpstilsntu.jl:25\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpstilsntu.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpstilsntu.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpstilsntu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            bracket_count\
    \ += 1\n        elseif bracket == '>'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp1qfs14n.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp1qfs14n.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1qfs14n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp1qfs14n.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1qfs14n.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1qfs14n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp1qfs14n.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpp1qfs14n.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1qfs14n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp1qfs14n.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpp1qfs14n.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1qfs14n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp1qfs14n.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1qfs14n.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1qfs14n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp1qfs14n.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1qfs14n.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1qfs14n.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmp9f75a.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplmp9f75a.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmp9f75a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplmp9f75a.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplmp9f75a.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmp9f75a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplmp9f75a.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmplmp9f75a.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmp9f75a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplmp9f75a.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmplmp9f75a.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmp9f75a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplmp9f75a.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplmp9f75a.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmp9f75a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplmp9f75a.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplmp9f75a.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmp9f75a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0vi14fxp.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0vi14fxp.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0vi14fxp.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0vi14fxp.jl:35\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0vi14fxp.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0vi14fxp.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0vi14fxp.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0vi14fxp.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0vi14fxp.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0vi14fxp.jl:42\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0vi14fxp.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0vi14fxp.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0vi14fxp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0bsbprif.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0bsbprif.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bsbprif.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0bsbprif.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0bsbprif.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bsbprif.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0bsbprif.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0bsbprif.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bsbprif.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0bsbprif.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0bsbprif.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bsbprif.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0bsbprif.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0bsbprif.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bsbprif.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0bsbprif.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0bsbprif.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0bsbprif.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxd6fq9kz.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxd6fq9kz.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd6fq9kz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxd6fq9kz.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxd6fq9kz.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd6fq9kz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxd6fq9kz.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxd6fq9kz.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd6fq9kz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxd6fq9kz.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxd6fq9kz.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd6fq9kz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxd6fq9kz.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxd6fq9kz.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd6fq9kz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxd6fq9kz.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxd6fq9kz.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxd6fq9kz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe2w2fgha.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe2w2fgha.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2w2fgha.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe2w2fgha.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe2w2fgha.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2w2fgha.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe2w2fgha.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpe2w2fgha.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2w2fgha.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe2w2fgha.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpe2w2fgha.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2w2fgha.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe2w2fgha.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe2w2fgha.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2w2fgha.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe2w2fgha.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe2w2fgha.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe2w2fgha.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_count = 0\n    for i in 1:length(brackets)\n        if brackets[i] ==\
    \ '<'\n            open_count += 1\n        elseif brackets[i] == '>'\n      \
    \      open_count -= 1\n        end\n        if open_count < 0\n            return\
    \ false\n        end\n    end\n    if open_count == 0\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpptwzvlwm.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpptwzvlwm.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptwzvlwm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpptwzvlwm.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpptwzvlwm.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptwzvlwm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpptwzvlwm.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpptwzvlwm.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptwzvlwm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpptwzvlwm.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpptwzvlwm.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptwzvlwm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpptwzvlwm.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpptwzvlwm.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptwzvlwm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpptwzvlwm.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpptwzvlwm.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpptwzvlwm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    if brackets[1] == \"<\" && brackets[n]\
    \ == \">\"\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == \"<\" && brackets[n] != \">\"\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] != \"<\" && brackets[n] == \">\"\n        return\
    \ correct_bracketing(brackets[1:n-1])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1i73d9oj.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate(\"<>\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\n    \
    \ @ Main /tmp/tmp1i73d9oj.jl:34\\n   [2] macro expansion\\n     @ /tmp/tmp1i73d9oj.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1i73d9oj.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmp1i73d9oj.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<<><>>\") == true\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ correct_bracketing(brackets::String)\\n     @ Main /tmp/tmp1i73d9oj.jl:34\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1i73d9oj.jl:43 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1i73d9oj.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmp1i73d9oj.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\\n  Closest candidates are:\\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    conve"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzntlb0d8.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzntlb0d8.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzntlb0d8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzntlb0d8.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzntlb0d8.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzntlb0d8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzntlb0d8.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpzntlb0d8.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzntlb0d8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzntlb0d8.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpzntlb0d8.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzntlb0d8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzntlb0d8.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzntlb0d8.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzntlb0d8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzntlb0d8.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzntlb0d8.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzntlb0d8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    if open_brackets == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe7r772dv.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe7r772dv.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7r772dv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpe7r772dv.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7r772dv.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7r772dv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpe7r772dv.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7r772dv.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7r772dv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpe7r772dv.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7r772dv.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7r772dv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpe7r772dv.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7r772dv.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7r772dv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpe7r772dv.jl:38\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7r772dv.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7r772dv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open = 0\n \
    \   for c in brackets\n        if c == '<'\n            num_open += 1\n      \
    \  elseif c == '>'\n            num_open -= 1\n        end\n        if num_open\
    \ < 0\n            return false\n        end\n    end\n    return num_open ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpudf_ama0.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpudf_ama0.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudf_ama0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpudf_ama0.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudf_ama0.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudf_ama0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpudf_ama0.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpudf_ama0.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudf_ama0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpudf_ama0.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpudf_ama0.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudf_ama0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpudf_ama0.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudf_ama0.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudf_ama0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpudf_ama0.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpudf_ama0.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudf_ama0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1k9lsqst.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1k9lsqst.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k9lsqst.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1k9lsqst.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1k9lsqst.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k9lsqst.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1k9lsqst.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1k9lsqst.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k9lsqst.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1k9lsqst.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1k9lsqst.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k9lsqst.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1k9lsqst.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1k9lsqst.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k9lsqst.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1k9lsqst.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1k9lsqst.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1k9lsqst.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_sw6j89.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi_sw6j89.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_sw6j89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi_sw6j89.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_sw6j89.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_sw6j89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi_sw6j89.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_sw6j89.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_sw6j89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi_sw6j89.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_sw6j89.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_sw6j89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi_sw6j89.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_sw6j89.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_sw6j89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi_sw6j89.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_sw6j89.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_sw6j89.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02_il7qi.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp02_il7qi.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02_il7qi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp02_il7qi.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp02_il7qi.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02_il7qi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp02_il7qi.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp02_il7qi.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02_il7qi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp02_il7qi.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp02_il7qi.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02_il7qi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp02_il7qi.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp02_il7qi.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02_il7qi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp02_il7qi.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp02_il7qi.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02_il7qi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '<'\n            open_count\
    \ += 1\n        elseif brackets[i] == '>'\n            open_count -= 1\n     \
    \   end\n        if open_count < 0\n            return false\n        end\n  \
    \  end\n    return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for c in brackets\n        if c == '<'\n            open_count += 1\n   \
    \     elseif c == '>'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == \"<\"\n            bracket_count\
    \ += 1\n        elseif bracket == \">\"\n            bracket_count -= 1\n    \
    \    end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzmu78tt9.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzmu78tt9.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzmu78tt9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzmu78tt9.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzmu78tt9.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzmu78tt9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzmu78tt9.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzmu78tt9.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzmu78tt9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzmu78tt9.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzmu78tt9.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzmu78tt9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzmu78tt9.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzmu78tt9.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzmu78tt9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzmu78tt9.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzmu78tt9.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmu78tt9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6gm6w3wk.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6gm6w3wk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6gm6w3wk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6gm6w3wk.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6gm6w3wk.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6gm6w3wk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6gm6w3wk.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6gm6w3wk.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6gm6w3wk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6gm6w3wk.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6gm6w3wk.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6gm6w3wk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6gm6w3wk.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6gm6w3wk.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6gm6w3wk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6gm6w3wk.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6gm6w3wk.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6gm6w3wk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfde2htk.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwfde2htk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfde2htk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwfde2htk.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwfde2htk.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfde2htk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwfde2htk.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwfde2htk.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfde2htk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwfde2htk.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwfde2htk.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfde2htk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwfde2htk.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwfde2htk.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfde2htk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwfde2htk.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwfde2htk.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfde2htk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvjybwod6.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvjybwod6.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjybwod6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjybwod6.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjybwod6.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjybwod6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjybwod6.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvjybwod6.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjybwod6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjybwod6.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvjybwod6.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjybwod6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjybwod6.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjybwod6.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjybwod6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjybwod6.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjybwod6.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjybwod6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1eprwfgm.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1eprwfgm.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1eprwfgm.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1eprwfgm.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1eprwfgm.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1eprwfgm.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1eprwfgm.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1eprwfgm.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1eprwfgm.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1eprwfgm.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1eprwfgm.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1eprwfgm.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1eprwfgm.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1eprwfgm.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1eprwfgm.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1eprwfgm.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1eprwfgm.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1eprwfgm.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            bracket_count\
    \ += 1\n        elseif bracket == '>'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5cbmlisj.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5cbmlisj.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5cbmlisj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5cbmlisj.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5cbmlisj.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5cbmlisj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5cbmlisj.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp5cbmlisj.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5cbmlisj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5cbmlisj.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp5cbmlisj.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5cbmlisj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5cbmlisj.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5cbmlisj.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5cbmlisj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5cbmlisj.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5cbmlisj.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5cbmlisj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    i = 1\n    count = 0\n    while i <= n\n        if brackets[i] == '<'\n \
    \           count += 1\n        elseif brackets[i] == '>'\n            count -=\
    \ 1\n        end\n        if count < 0\n            return false\n        end\n\
    \        i += 1\n    end\n    return count == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz8j4no3m.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz8j4no3m.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz8j4no3m.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz8j4no3m.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz8j4no3m.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz8j4no3m.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz8j4no3m.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpz8j4no3m.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz8j4no3m.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz8j4no3m.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpz8j4no3m.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz8j4no3m.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz8j4no3m.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz8j4no3m.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz8j4no3m.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz8j4no3m.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz8j4no3m.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz8j4no3m.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjvxbicsf.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjvxbicsf.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvxbicsf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjvxbicsf.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjvxbicsf.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvxbicsf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjvxbicsf.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpjvxbicsf.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvxbicsf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjvxbicsf.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpjvxbicsf.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvxbicsf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjvxbicsf.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjvxbicsf.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvxbicsf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjvxbicsf.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjvxbicsf.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvxbicsf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == '>'\n    \
    \    return correct_bracketing(brackets[1:n-1])\n    end\n    if brackets[1] ==\
    \ '>'\n        return false\n    end\n    if brackets[n] == '<'\n        return\
    \ false\n    end\n    return correct_bracketing(brackets[2:n-1])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgq7tywk_.jl:46\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgq7tywk_.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgq7tywk_.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpgq7tywk_.jl:47\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgq7tywk_.jl:47\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgq7tywk_.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpgq7tywk_.jl:48\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgq7tywk_.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgq7tywk_.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpgq7tywk_.jl:49\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgq7tywk_.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgq7tywk_.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgq7tywk_.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdn3yf40v.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdn3yf40v.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdn3yf40v.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdn3yf40v.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdn3yf40v.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdn3yf40v.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdn3yf40v.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdn3yf40v.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdn3yf40v.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdn3yf40v.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdn3yf40v.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdn3yf40v.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdn3yf40v.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdn3yf40v.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdn3yf40v.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdn3yf40v.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdn3yf40v.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdn3yf40v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_wwkr9u.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa_wwkr9u.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_wwkr9u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa_wwkr9u.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa_wwkr9u.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_wwkr9u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa_wwkr9u.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa_wwkr9u.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_wwkr9u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa_wwkr9u.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa_wwkr9u.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_wwkr9u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa_wwkr9u.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa_wwkr9u.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_wwkr9u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa_wwkr9u.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa_wwkr9u.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_wwkr9u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1g6esh2a.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1g6esh2a.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6esh2a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1g6esh2a.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6esh2a.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6esh2a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1g6esh2a.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6esh2a.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6esh2a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1g6esh2a.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6esh2a.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6esh2a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1g6esh2a.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6esh2a.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6esh2a.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1g6esh2a.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6esh2a.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1g6esh2a.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0los6pa7.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0los6pa7.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0los6pa7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0los6pa7.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0los6pa7.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0los6pa7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0los6pa7.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0los6pa7.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0los6pa7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0los6pa7.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0los6pa7.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0los6pa7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0los6pa7.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0los6pa7.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0los6pa7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0los6pa7.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0los6pa7.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0los6pa7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr_xs60sm.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr_xs60sm.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr_xs60sm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr_xs60sm.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr_xs60sm.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr_xs60sm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr_xs60sm.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr_xs60sm.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr_xs60sm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr_xs60sm.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr_xs60sm.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr_xs60sm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr_xs60sm.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr_xs60sm.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr_xs60sm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr_xs60sm.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr_xs60sm.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr_xs60sm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2zjuuw5t.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2zjuuw5t.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zjuuw5t.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2zjuuw5t.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2zjuuw5t.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zjuuw5t.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2zjuuw5t.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp2zjuuw5t.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zjuuw5t.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2zjuuw5t.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp2zjuuw5t.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zjuuw5t.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2zjuuw5t.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2zjuuw5t.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zjuuw5t.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2zjuuw5t.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2zjuuw5t.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zjuuw5t.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp85wkwtv4.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp85wkwtv4.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85wkwtv4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp85wkwtv4.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85wkwtv4.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85wkwtv4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp85wkwtv4.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85wkwtv4.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85wkwtv4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp85wkwtv4.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85wkwtv4.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85wkwtv4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp85wkwtv4.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85wkwtv4.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85wkwtv4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp85wkwtv4.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85wkwtv4.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp85wkwtv4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp37yvd8g_.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp37yvd8g_.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37yvd8g_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp37yvd8g_.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp37yvd8g_.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37yvd8g_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp37yvd8g_.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp37yvd8g_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37yvd8g_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp37yvd8g_.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp37yvd8g_.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37yvd8g_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp37yvd8g_.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp37yvd8g_.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37yvd8g_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp37yvd8g_.jl:38\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp37yvd8g_.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp37yvd8g_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz4_pe45q.jl:26\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz4_pe45q.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4_pe45q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz4_pe45q.jl:27\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4_pe45q.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4_pe45q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz4_pe45q.jl:28\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4_pe45q.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4_pe45q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz4_pe45q.jl:29\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4_pe45q.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4_pe45q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz4_pe45q.jl:30\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4_pe45q.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4_pe45q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz4_pe45q.jl:31\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4_pe45q.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4_pe45q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyqt35wts.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyqt35wts.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyqt35wts.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyqt35wts.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyqt35wts.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyqt35wts.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyqt35wts.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyqt35wts.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyqt35wts.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyqt35wts.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyqt35wts.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyqt35wts.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyqt35wts.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyqt35wts.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyqt35wts.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyqt35wts.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyqt35wts.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyqt35wts.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_count = 0\n    for i in brackets\n        if i == '<'\n            open_count\
    \ += 1\n        elseif i == '>'\n            open_count -= 1\n        end\n  \
    \      if open_count < 0\n            return false\n        end\n    end\n   \
    \ return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == '<'\n            n += 1\n        elseif i == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3i8us391.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3i8us391.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i8us391.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3i8us391.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3i8us391.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i8us391.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3i8us391.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp3i8us391.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i8us391.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3i8us391.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp3i8us391.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i8us391.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3i8us391.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3i8us391.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i8us391.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3i8us391.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3i8us391.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3i8us391.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            count += 1\n   \
    \     elseif bracket == '>'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ []\n    for bracket in brackets\n        if bracket == \"<\"\n            push!(bracket_stack,\
    \ \"<\")\n        elseif bracket == \">\"\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return isempty(bracket_stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt_l7c96r.jl:37\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt_l7c96r.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_l7c96r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt_l7c96r.jl:38\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_l7c96r.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_l7c96r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt_l7c96r.jl:39\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_l7c96r.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_l7c96r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt_l7c96r.jl:40\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_l7c96r.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_l7c96r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt_l7c96r.jl:41\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_l7c96r.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt_l7c96r.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt_l7c96r.jl:42\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt_l7c96r.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt_l7c96r.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return false\n        elseif brackets[2] == '>'\n        \
    \    return correct_bracketing(brackets[3:end])\n        else\n            return\
    \ correct_bracketing(brackets[2:end])\n        end\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo9b_ezn4.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo9b_ezn4.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9b_ezn4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpo9b_ezn4.jl:35\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo9b_ezn4.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9b_ezn4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpo9b_ezn4.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo9b_ezn4.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9b_ezn4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpo9b_ezn4.jl:42\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo9b_ezn4.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9b_ezn4.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo9b_ezn4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ifkjhs0.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5ifkjhs0.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ifkjhs0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5ifkjhs0.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ifkjhs0.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ifkjhs0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5ifkjhs0.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp5ifkjhs0.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ifkjhs0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5ifkjhs0.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp5ifkjhs0.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ifkjhs0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5ifkjhs0.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ifkjhs0.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ifkjhs0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5ifkjhs0.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ifkjhs0.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ifkjhs0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0zpiw4b3.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0zpiw4b3.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0zpiw4b3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0zpiw4b3.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0zpiw4b3.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0zpiw4b3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0zpiw4b3.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0zpiw4b3.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0zpiw4b3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0zpiw4b3.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0zpiw4b3.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0zpiw4b3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0zpiw4b3.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0zpiw4b3.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0zpiw4b3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp0zpiw4b3.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0zpiw4b3.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zpiw4b3.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == \"<\"\n            push!(stack, i)\n    \
    \    elseif i == \">\"\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    if isempty(stack)\n        return true\n    else\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphs1nf08n.jl:41\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphs1nf08n.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphs1nf08n.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphs1nf08n.jl:42\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphs1nf08n.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphs1nf08n.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphs1nf08n.jl:43\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphs1nf08n.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphs1nf08n.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphs1nf08n.jl:44\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphs1nf08n.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphs1nf08n.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphs1nf08n.jl:45\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphs1nf08n.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphs1nf08n.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphs1nf08n.jl:46\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphs1nf08n.jl:46\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphs1nf08n.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == '>'\n    \
    \    return correct_bracketing(brackets[1:n-1])\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpidtpjv7q.jl:40\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpidtpjv7q.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpidtpjv7q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpidtpjv7q.jl:41\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpidtpjv7q.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpidtpjv7q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpidtpjv7q.jl:42\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpidtpjv7q.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpidtpjv7q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpidtpjv7q.jl:43\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpidtpjv7q.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpidtpjv7q.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidtpjv7q.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<'\n        if brackets[end] == '>'\n    \
    \        return correct_bracketing(brackets[2:end-1])\n        else\n        \
    \    return false\n        end\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprz73eskj.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprz73eskj.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprz73eskj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprz73eskj.jl:35\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmprz73eskj.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprz73eskj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprz73eskj.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmprz73eskj.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprz73eskj.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprz73eskj.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    if brackets[1] == \"<\" && brackets[n]\
    \ == \">\"\n        return correct_bracketing(brackets[2:n-1])\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy5byqc3x.jl:37\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy5byqc3x.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5byqc3x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy5byqc3x.jl:38\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy5byqc3x.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5byqc3x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy5byqc3x.jl:39\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpy5byqc3x.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5byqc3x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy5byqc3x.jl:40\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpy5byqc3x.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5byqc3x.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5byqc3x.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return false\n        elseif brackets[end] == '>'\n      \
    \      return correct_bracketing(brackets[2:end-1])\n        else\n          \
    \  return false\n        end\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmhqhb39k.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmhqhb39k.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmhqhb39k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmhqhb39k.jl:35\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpmhqhb39k.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmhqhb39k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmhqhb39k.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpmhqhb39k.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmhqhb39k.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhqhb39k.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == \"<\"\n            bracket_count\
    \ += 1\n        elseif bracket == \">\"\n            bracket_count -= 1\n    \
    \    end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2urjevz.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa2urjevz.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2urjevz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa2urjevz.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2urjevz.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2urjevz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa2urjevz.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2urjevz.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2urjevz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa2urjevz.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2urjevz.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2urjevz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa2urjevz.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2urjevz.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2urjevz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa2urjevz.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2urjevz.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2urjevz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpra84k46g.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpra84k46g.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpra84k46g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpra84k46g.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpra84k46g.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpra84k46g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpra84k46g.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpra84k46g.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpra84k46g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpra84k46g.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpra84k46g.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpra84k46g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpra84k46g.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpra84k46g.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpra84k46g.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpra84k46g.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpra84k46g.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpra84k46g.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptsr11fce.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptsr11fce.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsr11fce.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptsr11fce.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptsr11fce.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsr11fce.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptsr11fce.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptsr11fce.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsr11fce.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptsr11fce.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptsr11fce.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsr11fce.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptsr11fce.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptsr11fce.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsr11fce.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptsr11fce.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptsr11fce.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptsr11fce.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8dp0tcl.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm8dp0tcl.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8dp0tcl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm8dp0tcl.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8dp0tcl.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8dp0tcl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm8dp0tcl.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm8dp0tcl.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8dp0tcl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm8dp0tcl.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm8dp0tcl.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8dp0tcl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm8dp0tcl.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8dp0tcl.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8dp0tcl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm8dp0tcl.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8dp0tcl.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8dp0tcl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_brackets = 0\n    for i in brackets\n        if i == '<'\n         \
    \   open_brackets += 1\n        elseif i == '>'\n            open_brackets -=\
    \ 1\n        end\n        if open_brackets < 0\n            return false\n   \
    \     end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwckzt4il.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwckzt4il.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwckzt4il.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwckzt4il.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwckzt4il.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwckzt4il.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwckzt4il.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwckzt4il.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwckzt4il.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwckzt4il.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwckzt4il.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwckzt4il.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwckzt4il.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwckzt4il.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwckzt4il.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwckzt4il.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwckzt4il.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwckzt4il.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwroamyec.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwroamyec.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwroamyec.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwroamyec.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwroamyec.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwroamyec.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwroamyec.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwroamyec.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwroamyec.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwroamyec.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwroamyec.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwroamyec.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwroamyec.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwroamyec.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwroamyec.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwroamyec.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwroamyec.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwroamyec.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpouwo1c6_.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpouwo1c6_.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouwo1c6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpouwo1c6_.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpouwo1c6_.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouwo1c6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpouwo1c6_.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpouwo1c6_.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouwo1c6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpouwo1c6_.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpouwo1c6_.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouwo1c6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpouwo1c6_.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpouwo1c6_.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouwo1c6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpouwo1c6_.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpouwo1c6_.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpouwo1c6_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8xwln5x.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo8xwln5x.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8xwln5x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo8xwln5x.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo8xwln5x.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8xwln5x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo8xwln5x.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo8xwln5x.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8xwln5x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo8xwln5x.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo8xwln5x.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8xwln5x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo8xwln5x.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo8xwln5x.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8xwln5x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo8xwln5x.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo8xwln5x.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8xwln5x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcob6z77n.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcob6z77n.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcob6z77n.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcob6z77n.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcob6z77n.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcob6z77n.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcob6z77n.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcob6z77n.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcob6z77n.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcob6z77n.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcob6z77n.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcob6z77n.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcob6z77n.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcob6z77n.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcob6z77n.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcob6z77n.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcob6z77n.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcob6z77n.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == \">\"\n        return false\n    elseif brackets[end]\
    \ == \"<\"\n        return false\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9jscgyko.jl:36\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9jscgyko.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9jscgyko.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9jscgyko.jl:38\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9jscgyko.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9jscgyko.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9jscgyko.jl:41\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp9jscgyko.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9jscgyko.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9jscgyko.jl:42\n  Expression: candidate(\"<><><<><>><>>><>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp9jscgyko.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9jscgyko.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9jscgyko.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '<'\n            n += 1\n \
    \       elseif brackets[i] == '>'\n            n -= 1\n        end\n        if\
    \ n < 0\n            return false\n        end\n    end\n    return n == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<' && brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi27w7bwx.jl:30\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi27w7bwx.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi27w7bwx.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi27w7bwx.jl:31\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpi27w7bwx.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi27w7bwx.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi27w7bwx.jl:32\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpi27w7bwx.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi27w7bwx.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi27w7bwx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpff37pl5c.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpff37pl5c.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpff37pl5c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpff37pl5c.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpff37pl5c.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpff37pl5c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpff37pl5c.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpff37pl5c.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpff37pl5c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpff37pl5c.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpff37pl5c.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpff37pl5c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpff37pl5c.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpff37pl5c.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpff37pl5c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpff37pl5c.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpff37pl5c.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpff37pl5c.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvjcc4lik.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvjcc4lik.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjcc4lik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjcc4lik.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjcc4lik.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjcc4lik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjcc4lik.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvjcc4lik.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjcc4lik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjcc4lik.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvjcc4lik.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjcc4lik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjcc4lik.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjcc4lik.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjcc4lik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvjcc4lik.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjcc4lik.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjcc4lik.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpppk9x8xg.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpppk9x8xg.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpppk9x8xg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpppk9x8xg.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpppk9x8xg.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpppk9x8xg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpppk9x8xg.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpppk9x8xg.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpppk9x8xg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpppk9x8xg.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpppk9x8xg.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpppk9x8xg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpppk9x8xg.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpppk9x8xg.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpppk9x8xg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpppk9x8xg.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpppk9x8xg.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpppk9x8xg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp89hkpc_a.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp89hkpc_a.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89hkpc_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp89hkpc_a.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp89hkpc_a.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89hkpc_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp89hkpc_a.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp89hkpc_a.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89hkpc_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp89hkpc_a.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp89hkpc_a.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89hkpc_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp89hkpc_a.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp89hkpc_a.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89hkpc_a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp89hkpc_a.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp89hkpc_a.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp89hkpc_a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1kkd6nh.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy1kkd6nh.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1kkd6nh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy1kkd6nh.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1kkd6nh.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1kkd6nh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy1kkd6nh.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1kkd6nh.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1kkd6nh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy1kkd6nh.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1kkd6nh.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1kkd6nh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy1kkd6nh.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1kkd6nh.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1kkd6nh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy1kkd6nh.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1kkd6nh.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1kkd6nh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcaxubquu.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcaxubquu.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaxubquu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcaxubquu.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcaxubquu.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaxubquu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcaxubquu.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpcaxubquu.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaxubquu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcaxubquu.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpcaxubquu.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaxubquu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcaxubquu.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcaxubquu.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaxubquu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcaxubquu.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcaxubquu.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcaxubquu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgxh4sjp2.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgxh4sjp2.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxh4sjp2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpgxh4sjp2.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgxh4sjp2.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxh4sjp2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpgxh4sjp2.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgxh4sjp2.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxh4sjp2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpgxh4sjp2.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgxh4sjp2.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxh4sjp2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpgxh4sjp2.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgxh4sjp2.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxh4sjp2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpgxh4sjp2.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgxh4sjp2.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgxh4sjp2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq5qdy8z7.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq5qdy8z7.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq5qdy8z7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq5qdy8z7.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq5qdy8z7.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq5qdy8z7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq5qdy8z7.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq5qdy8z7.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq5qdy8z7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq5qdy8z7.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq5qdy8z7.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq5qdy8z7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq5qdy8z7.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq5qdy8z7.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq5qdy8z7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq5qdy8z7.jl:45\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq5qdy8z7.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq5qdy8z7.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxs6db_z5.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxs6db_z5.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxs6db_z5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxs6db_z5.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxs6db_z5.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxs6db_z5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxs6db_z5.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpxs6db_z5.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxs6db_z5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxs6db_z5.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpxs6db_z5.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxs6db_z5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxs6db_z5.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxs6db_z5.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxs6db_z5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxs6db_z5.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxs6db_z5.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxs6db_z5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf6i8a_ri.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf6i8a_ri.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6i8a_ri.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf6i8a_ri.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf6i8a_ri.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6i8a_ri.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf6i8a_ri.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpf6i8a_ri.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6i8a_ri.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf6i8a_ri.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpf6i8a_ri.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6i8a_ri.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf6i8a_ri.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf6i8a_ri.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6i8a_ri.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf6i8a_ri.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf6i8a_ri.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf6i8a_ri.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_srj5u6_.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_srj5u6_.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_srj5u6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_srj5u6_.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_srj5u6_.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_srj5u6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_srj5u6_.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_srj5u6_.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_srj5u6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_srj5u6_.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_srj5u6_.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_srj5u6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_srj5u6_.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_srj5u6_.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_srj5u6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_srj5u6_.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_srj5u6_.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_srj5u6_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpujjc08d4.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpujjc08d4.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujjc08d4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpujjc08d4.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpujjc08d4.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujjc08d4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpujjc08d4.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpujjc08d4.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujjc08d4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpujjc08d4.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpujjc08d4.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujjc08d4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpujjc08d4.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpujjc08d4.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujjc08d4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpujjc08d4.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpujjc08d4.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujjc08d4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzipj8mpr.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzipj8mpr.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzipj8mpr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzipj8mpr.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzipj8mpr.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzipj8mpr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzipj8mpr.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpzipj8mpr.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzipj8mpr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzipj8mpr.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpzipj8mpr.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzipj8mpr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzipj8mpr.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzipj8mpr.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzipj8mpr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzipj8mpr.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzipj8mpr.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzipj8mpr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppcaps82y.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppcaps82y.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcaps82y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppcaps82y.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppcaps82y.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcaps82y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppcaps82y.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppcaps82y.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcaps82y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppcaps82y.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppcaps82y.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcaps82y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppcaps82y.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppcaps82y.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcaps82y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppcaps82y.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppcaps82y.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppcaps82y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6dr0n8jv.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6dr0n8jv.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dr0n8jv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6dr0n8jv.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6dr0n8jv.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dr0n8jv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6dr0n8jv.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6dr0n8jv.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dr0n8jv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6dr0n8jv.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6dr0n8jv.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dr0n8jv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6dr0n8jv.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6dr0n8jv.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dr0n8jv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6dr0n8jv.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6dr0n8jv.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6dr0n8jv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3242n2x.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq3242n2x.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3242n2x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq3242n2x.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq3242n2x.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3242n2x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq3242n2x.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpq3242n2x.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3242n2x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq3242n2x.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpq3242n2x.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3242n2x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq3242n2x.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq3242n2x.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3242n2x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq3242n2x.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq3242n2x.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3242n2x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb2jlpulp.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb2jlpulp.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2jlpulp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2jlpulp.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb2jlpulp.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2jlpulp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2jlpulp.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpb2jlpulp.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2jlpulp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2jlpulp.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpb2jlpulp.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2jlpulp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2jlpulp.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb2jlpulp.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2jlpulp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2jlpulp.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb2jlpulp.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2jlpulp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp020zx9vr.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp020zx9vr.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp020zx9vr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp020zx9vr.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp020zx9vr.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp020zx9vr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp020zx9vr.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp020zx9vr.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp020zx9vr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp020zx9vr.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp020zx9vr.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp020zx9vr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp020zx9vr.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp020zx9vr.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp020zx9vr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp020zx9vr.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp020zx9vr.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp020zx9vr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9d8gavzc.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9d8gavzc.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9d8gavzc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9d8gavzc.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9d8gavzc.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9d8gavzc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9d8gavzc.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp9d8gavzc.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9d8gavzc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9d8gavzc.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp9d8gavzc.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9d8gavzc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9d8gavzc.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9d8gavzc.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9d8gavzc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9d8gavzc.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9d8gavzc.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9d8gavzc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1o1lc9oz.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1o1lc9oz.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o1lc9oz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1o1lc9oz.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1o1lc9oz.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o1lc9oz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1o1lc9oz.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1o1lc9oz.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o1lc9oz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1o1lc9oz.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1o1lc9oz.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o1lc9oz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1o1lc9oz.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1o1lc9oz.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o1lc9oz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1o1lc9oz.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1o1lc9oz.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1o1lc9oz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_al3wlk.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo_al3wlk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_al3wlk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo_al3wlk.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo_al3wlk.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_al3wlk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo_al3wlk.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo_al3wlk.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_al3wlk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo_al3wlk.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo_al3wlk.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_al3wlk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo_al3wlk.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo_al3wlk.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_al3wlk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo_al3wlk.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo_al3wlk.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_al3wlk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7_2ruled.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7_2ruled.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_2ruled.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_2ruled.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_2ruled.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_2ruled.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_2ruled.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_2ruled.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_2ruled.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_2ruled.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_2ruled.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_2ruled.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_2ruled.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_2ruled.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_2ruled.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_2ruled.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_2ruled.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_2ruled.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpowppjf12.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpowppjf12.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpowppjf12.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpowppjf12.jl:33\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpowppjf12.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpowppjf12.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpowppjf12.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpowppjf12.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpowppjf12.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpowppjf12.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2zt2u3i.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph2zt2u3i.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2zt2u3i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph2zt2u3i.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph2zt2u3i.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2zt2u3i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph2zt2u3i.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmph2zt2u3i.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2zt2u3i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph2zt2u3i.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmph2zt2u3i.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2zt2u3i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph2zt2u3i.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph2zt2u3i.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2zt2u3i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph2zt2u3i.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph2zt2u3i.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2zt2u3i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsnp1kcx5.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsnp1kcx5.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsnp1kcx5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsnp1kcx5.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsnp1kcx5.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsnp1kcx5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsnp1kcx5.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsnp1kcx5.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsnp1kcx5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsnp1kcx5.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsnp1kcx5.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsnp1kcx5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsnp1kcx5.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsnp1kcx5.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsnp1kcx5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsnp1kcx5.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsnp1kcx5.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsnp1kcx5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    else\n        if brackets[1] == \"<\"\n            if brackets[end]\
    \ == \">\"\n                return correct_bracketing(brackets[2:end-1])\n   \
    \         else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphtvs5fxw.jl:35\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphtvs5fxw.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtvs5fxw.jl:34\ntest set: Test\
    \ Failed at /tmp/tmphtvs5fxw.jl:36\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphtvs5fxw.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtvs5fxw.jl:34\ntest set: Test\
    \ Failed at /tmp/tmphtvs5fxw.jl:37\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphtvs5fxw.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtvs5fxw.jl:34\ntest set: Test\
    \ Failed at /tmp/tmphtvs5fxw.jl:38\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphtvs5fxw.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtvs5fxw.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphtvs5fxw.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for b\
    \ in brackets\n        if b == '<'\n            n += 1\n        elseif b == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvq018pzj.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvq018pzj.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvq018pzj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvq018pzj.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvq018pzj.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvq018pzj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvq018pzj.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvq018pzj.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvq018pzj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvq018pzj.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvq018pzj.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvq018pzj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvq018pzj.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvq018pzj.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvq018pzj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvq018pzj.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvq018pzj.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvq018pzj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpphd_nc96.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpphd_nc96.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpphd_nc96.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpphd_nc96.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpphd_nc96.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpphd_nc96.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpphd_nc96.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpphd_nc96.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpphd_nc96.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpphd_nc96.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpphd_nc96.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpphd_nc96.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpphd_nc96.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpphd_nc96.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpphd_nc96.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpphd_nc96.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpphd_nc96.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpphd_nc96.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpns793mo_.jl:26\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpns793mo_.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpns793mo_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpns793mo_.jl:27\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpns793mo_.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpns793mo_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpns793mo_.jl:28\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpns793mo_.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpns793mo_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpns793mo_.jl:29\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpns793mo_.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpns793mo_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpns793mo_.jl:30\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpns793mo_.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpns793mo_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpns793mo_.jl:31\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpns793mo_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpns793mo_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaoyth9tr.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaoyth9tr.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaoyth9tr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpaoyth9tr.jl:33\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpaoyth9tr.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaoyth9tr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpaoyth9tr.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpaoyth9tr.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaoyth9tr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpaoyth9tr.jl:40\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaoyth9tr.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaoyth9tr.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaoyth9tr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[end]\
    \ == '<'\n        return false\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplqhujycd.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplqhujycd.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqhujycd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplqhujycd.jl:33\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmplqhujycd.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqhujycd.jl:30\ntest set: Test\
    \ Failed at /tmp/tmplqhujycd.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmplqhujycd.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqhujycd.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqhujycd.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ Stack()\n    for bracket in brackets\n        if bracket == \"<\"\n        \
    \    push!(bracket_stack, bracket)\n        elseif bracket == \">\"\n        \
    \    if isempty(bracket_stack)\n                return false\n            else\n\
    \                pop!(bracket_stack)\n            end\n        end\n    end\n\
    \    return isempty(bracket_stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprq_5tvq3.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"<>\") == true\\n  UndefVarError: Stack\
    \ not defined\\n  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\\
    n     @ Main /tmp/tmprq_5tvq3.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmprq_5tvq3.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprq_5tvq3.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmprq_5tvq3.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<<><>>\") == true\\n  UndefVarError: Stack not defined\\n  Stacktrace:\\\
    n   [1] correct_bracketing(brackets::String)\\n     @ Main /tmp/tmprq_5tvq3.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmprq_5tvq3.jl:34 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprq_5tvq3.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmprq_5tvq3.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\\n  UndefVarError: Stack not defined\\n\
    \  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\n     @ Main /tmp/tmprq_5tvq3.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmprq_5tvq3.jl:35 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprq_5tvq3.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmprq_5tvq3.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n  UndefVarError: Stack not\
    \ defined\\n  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\n   \
    \  @ Main /tmp/tmprq_5tvq3.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmprq_5tvq3.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprq_5tvq3"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpijiwrj0v.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpijiwrj0v.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijiwrj0v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpijiwrj0v.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpijiwrj0v.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijiwrj0v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpijiwrj0v.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpijiwrj0v.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijiwrj0v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpijiwrj0v.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpijiwrj0v.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijiwrj0v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpijiwrj0v.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpijiwrj0v.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijiwrj0v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpijiwrj0v.jl:38\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpijiwrj0v.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpijiwrj0v.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsa7s0ic7.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsa7s0ic7.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsa7s0ic7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsa7s0ic7.jl:23\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsa7s0ic7.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsa7s0ic7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsa7s0ic7.jl:24\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsa7s0ic7.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsa7s0ic7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsa7s0ic7.jl:25\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsa7s0ic7.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsa7s0ic7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsa7s0ic7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[end]\
    \ == '<'\n        return false\n    elseif brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[1:end-1])\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsj5sd6qm.jl:35\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsj5sd6qm.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsj5sd6qm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsj5sd6qm.jl:36\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsj5sd6qm.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsj5sd6qm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsj5sd6qm.jl:37\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsj5sd6qm.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsj5sd6qm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsj5sd6qm.jl:38\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsj5sd6qm.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsj5sd6qm.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsj5sd6qm.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4abwrat4.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4abwrat4.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4abwrat4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4abwrat4.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4abwrat4.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4abwrat4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4abwrat4.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4abwrat4.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4abwrat4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4abwrat4.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4abwrat4.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4abwrat4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4abwrat4.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4abwrat4.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4abwrat4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4abwrat4.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4abwrat4.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4abwrat4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxy65po8l.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxy65po8l.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxy65po8l.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxy65po8l.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxy65po8l.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxy65po8l.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxy65po8l.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxy65po8l.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxy65po8l.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxy65po8l.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxy65po8l.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxy65po8l.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxy65po8l.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxy65po8l.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxy65po8l.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxy65po8l.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxy65po8l.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxy65po8l.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpboe5zzpl.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpboe5zzpl.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpboe5zzpl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpboe5zzpl.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpboe5zzpl.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpboe5zzpl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpboe5zzpl.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpboe5zzpl.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpboe5zzpl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpboe5zzpl.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpboe5zzpl.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpboe5zzpl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpboe5zzpl.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpboe5zzpl.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpboe5zzpl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpboe5zzpl.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpboe5zzpl.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpboe5zzpl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            bracket_count\
    \ += 1\n        elseif bracket == '>'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == \"<\"\n            push!(stack, i)\n    \
    \    elseif i == \">\"\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpthhu7g2u.jl:37\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpthhu7g2u.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthhu7g2u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpthhu7g2u.jl:38\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthhu7g2u.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthhu7g2u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpthhu7g2u.jl:39\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthhu7g2u.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthhu7g2u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpthhu7g2u.jl:40\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthhu7g2u.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthhu7g2u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpthhu7g2u.jl:41\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthhu7g2u.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthhu7g2u.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpthhu7g2u.jl:42\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthhu7g2u.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthhu7g2u.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left_bracket_count\
    \ = 0\n    right_bracket_count = 0\n    for bracket in brackets\n        if bracket\
    \ == \"<\"\n            left_bracket_count += 1\n        elseif bracket == \"\
    >\"\n            right_bracket_count += 1\n        end\n    end\n    return left_bracket_count\
    \ == right_bracket_count\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfniqsior.jl:34\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfniqsior.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfniqsior.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfniqsior.jl:35\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfniqsior.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfniqsior.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfniqsior.jl:36\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfniqsior.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfniqsior.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfniqsior.jl:37\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfniqsior.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfniqsior.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfniqsior.jl:38\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfniqsior.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfniqsior.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfniqsior.jl:39\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfniqsior.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfniqsior.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqu3suu1.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkqu3suu1.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqu3suu1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkqu3suu1.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkqu3suu1.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqu3suu1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkqu3suu1.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkqu3suu1.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqu3suu1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkqu3suu1.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkqu3suu1.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqu3suu1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkqu3suu1.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkqu3suu1.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqu3suu1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkqu3suu1.jl:41\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkqu3suu1.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworke"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqu3suu1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdeqruxpj.jl:36\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdeqruxpj.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdeqruxpj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdeqruxpj.jl:37\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdeqruxpj.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdeqruxpj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdeqruxpj.jl:38\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdeqruxpj.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdeqruxpj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdeqruxpj.jl:44\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdeqruxpj.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdeqruxpj.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdeqruxpj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n % 2 != 0\n        return\
    \ false\n    end\n    if brackets[1] == \">\"\n        return false\n    end\n\
    \    if brackets[n] == \"<\"\n        return false\n    end\n    i = 1\n    while\
    \ i < n\n        if brackets[i] == \"<\"\n            if brackets[i+1] == \">\"\
    \n                brackets = brackets[1:i-1] * brackets[i+2:n]\n             \
    \   n = length(brackets)\n                i = 1\n            else\n          \
    \      i += 1\n            end\n        else\n            i += 1\n        end\n\
    \    end\n    if length(brackets) == 0\n        return true\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpilxq2q7j.jl:52\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpilxq2q7j.jl:52 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpilxq2q7j.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpilxq2q7j.jl:53\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpilxq2q7j.jl:53\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpilxq2q7j.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpilxq2q7j.jl:54\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpilxq2q7j.jl:54 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpilxq2q7j.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpilxq2q7j.jl:55\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpilxq2q7j.jl:55 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpilxq2q7j.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpilxq2q7j.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppju6awfq.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppju6awfq.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppju6awfq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppju6awfq.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppju6awfq.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppju6awfq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppju6awfq.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmppju6awfq.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppju6awfq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppju6awfq.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmppju6awfq.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppju6awfq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppju6awfq.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppju6awfq.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppju6awfq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppju6awfq.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppju6awfq.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppju6awfq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphny9g362.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphny9g362.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphny9g362.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphny9g362.jl:28\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphny9g362.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphny9g362.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphny9g362.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphny9g362.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphny9g362.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphny9g362.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphny9g362.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphny9g362.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphny9g362.jl:33\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphny9g362.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphny9g362.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphny9g362.jl:34\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphny9g362.jl:34\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphny9g362.jl:24\n"
  exit_code: 1
  status: SyntaxError
