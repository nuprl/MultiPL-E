name: HumanEval_56_correct_bracketing
language: julia
results:
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe28f9zu4.jl:36\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpe28f9zu4.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe28f9zu4.jl:31\\ntest set: Test Failed at /tmp/tmpe28f9zu4.jl:37\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe28f9zu4.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe28f9zu4.jl:31\\ntest set: Test Failed at /tmp/tmpe28f9zu4.jl:38\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe28f9zu4.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe28f9zu4.jl:31\\ntest set: Test Failed at /tmp/tmpe28f9zu4.jl:39\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe28f9zu4.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe28f9zu4.jl:31\\ntest set: Test Failed at /tmp/tmpe28f9zu4.jl:40\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe28f9zu4.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe28f9zu4.jl:31\\ntest set: Test Failed at /tmp/tmpe28f9zu4.jl:41\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe28f9zu4.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe28f9zu4.jl:31\\ntest set: Test Failed at /tmp/tmpe28f9zu4.jl:42\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpe28f9zu4.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe28f9zu4.jl:31\\ntest set: Test Failed at /tmp/tmpe28f9zu4.jl:43\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpe28f9zu4.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe28f9zu4.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx3p1cnms.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx3p1cnms.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx3p1cnms.jl:31\ntest set: Test Failed at /tmp/tmpx3p1cnms.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx3p1cnms.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx3p1cnms.jl:31\ntest set: Test Failed at /tmp/tmpx3p1cnms.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx3p1cnms.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx3p1cnms.jl:31\ntest set: Test Failed at /tmp/tmpx3p1cnms.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx3p1cnms.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx3p1cnms.jl:31\ntest set: Test Failed at /tmp/tmpx3p1cnms.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx3p1cnms.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx3p1cnms.jl:31\ntest set: Test Failed at /tmp/tmpx3p1cnms.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx3p1cnms.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx3p1cnms.jl:31\ntest set: Test Failed at /tmp/tmpx3p1cnms.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpx3p1cnms.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx3p1cnms.jl:31\ntest set: Test Failed at /tmp/tmpx3p1cnms.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpx3p1cnms.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx3p1cnms.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx3p1cnms.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzheprdza.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpzheprdza.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzheprdza.jl:26\ntest set: Test Failed at /tmp/tmpzheprdza.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzheprdza.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzheprdza.jl:26\ntest set: Test Failed at /tmp/tmpzheprdza.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzheprdza.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzheprdza.jl:26\ntest set: Test Failed at /tmp/tmpzheprdza.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpzheprdza.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzheprdza.jl:26\ntest set: Test Failed at /tmp/tmpzheprdza.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzheprdza.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzheprdza.jl:26\ntest set: Test Failed at /tmp/tmpzheprdza.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzheprdza.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzheprdza.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzheprdza.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0inbz3ff.jl:40\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp0inbz3ff.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0inbz3ff.jl:35\\ntest set: Test Failed at /tmp/tmp0inbz3ff.jl:41\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0inbz3ff.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0inbz3ff.jl:35\\ntest set: Test Failed at /tmp/tmp0inbz3ff.jl:42\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0inbz3ff.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0inbz3ff.jl:35\\ntest set: Test Failed at /tmp/tmp0inbz3ff.jl:43\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0inbz3ff.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0inbz3ff.jl:35\\ntest set: Test Failed at /tmp/tmp0inbz3ff.jl:44\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0inbz3ff.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0inbz3ff.jl:35\\ntest set: Test Failed at /tmp/tmp0inbz3ff.jl:45\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0inbz3ff.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0inbz3ff.jl:35\\ntest set: Test Failed at /tmp/tmp0inbz3ff.jl:46\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0inbz3ff.jl:46\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0inbz3ff.jl:35\\ntest set: Test Failed at /tmp/tmp0inbz3ff.jl:47\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0inbz3ff.jl:47\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0inbz3ff.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0fa2ymau.jl:36\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp0fa2ymau.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0fa2ymau.jl:31\\ntest set: Test Failed at /tmp/tmp0fa2ymau.jl:37\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0fa2ymau.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0fa2ymau.jl:31\\ntest set: Test Failed at /tmp/tmp0fa2ymau.jl:38\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0fa2ymau.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0fa2ymau.jl:31\\ntest set: Test Failed at /tmp/tmp0fa2ymau.jl:39\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0fa2ymau.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0fa2ymau.jl:31\\ntest set: Test Failed at /tmp/tmp0fa2ymau.jl:40\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0fa2ymau.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0fa2ymau.jl:31\\ntest set: Test Failed at /tmp/tmp0fa2ymau.jl:41\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0fa2ymau.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0fa2ymau.jl:31\\ntest set: Test Failed at /tmp/tmp0fa2ymau.jl:42\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0fa2ymau.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0fa2ymau.jl:31\\ntest set: Test Failed at /tmp/tmp0fa2ymau.jl:43\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0fa2ymau.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0fa2ymau.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwvdqhawq.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwvdqhawq.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvdqhawq.jl:31\ntest set: Test Failed at /tmp/tmpwvdqhawq.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwvdqhawq.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvdqhawq.jl:31\ntest set: Test Failed at /tmp/tmpwvdqhawq.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwvdqhawq.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvdqhawq.jl:31\ntest set: Test Failed at /tmp/tmpwvdqhawq.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwvdqhawq.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvdqhawq.jl:31\ntest set: Test Failed at /tmp/tmpwvdqhawq.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwvdqhawq.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvdqhawq.jl:31\ntest set: Test Failed at /tmp/tmpwvdqhawq.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwvdqhawq.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvdqhawq.jl:31\ntest set: Test Failed at /tmp/tmpwvdqhawq.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpwvdqhawq.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvdqhawq.jl:31\ntest set: Test Failed at /tmp/tmpwvdqhawq.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpwvdqhawq.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvdqhawq.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvdqhawq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9i5xn0qv.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9i5xn0qv.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9i5xn0qv.jl:26\ntest set: Test Failed at /tmp/tmp9i5xn0qv.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9i5xn0qv.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9i5xn0qv.jl:26\ntest set: Test Failed at /tmp/tmp9i5xn0qv.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9i5xn0qv.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9i5xn0qv.jl:26\ntest set: Test Failed at /tmp/tmp9i5xn0qv.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp9i5xn0qv.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9i5xn0qv.jl:26\ntest set: Test Failed at /tmp/tmp9i5xn0qv.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9i5xn0qv.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9i5xn0qv.jl:26\ntest set: Test Failed at /tmp/tmp9i5xn0qv.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9i5xn0qv.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9i5xn0qv.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9i5xn0qv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == '>'\n    \
    \    return false\n    end\n    if brackets[n] == '<'\n        return false\n\
    \    end\n    open_count = 0\n    for i in 1:n\n        if brackets[i] == '<'\n\
    \            open_count += 1\n        elseif brackets[i] == '>'\n            open_count\
    \ -= 1\n        end\n        if open_count < 0\n            return false\n   \
    \     end\n    end\n    return open_count == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '<'\n            n += 1\n \
    \       elseif brackets[i] == '>'\n            n -= 1\n        end\n        if\
    \ n < 0\n            return false\n        end\n    end\n    return n == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == '<'\n            n += 1\n        elseif i == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<' && brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe76y8089.jl:30\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpe76y8089.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe76y8089.jl:28\ntest set: Test Failed at /tmp/tmpe76y8089.jl:31\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe76y8089.jl:31\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe76y8089.jl:28\ntest set: Test Failed at /tmp/tmpe76y8089.jl:32\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpe76y8089.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe76y8089.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe76y8089.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == \">\"\n        return false\n    elseif brackets[1]\
    \ == \"<\"\n        if brackets[2] == \">\"\n            return correct_bracketing(brackets[3:end])\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd9ikhmcg.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"<>\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\\n    ...\\\
    n  Stacktrace:\\n   [1] correct_bracketing(::String) at /tmp/tmpd9ikhmcg.jl:24\\\
    n   [2] top-level scope at /tmp/tmpd9ikhmcg.jl:33\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpd9ikhmcg.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpd9ikhmcg.jl:34\\n  Test threw exception\\n  Expression: candidate(\"\
    <<><>>\") == true\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpd9ikhmcg.jl:24\\n   [2] top-level scope at /tmp/tmpd9ikhmcg.jl:34\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpd9ikhmcg.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpd9ikhmcg.jl:35\\n  Test threw exception\\n  Expression: candidate(\"\
    <><><<><>><>\") == true\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpd9ikhmcg.jl:24\\n   [2] top-level scope at /tmp/tmpd9ikhmcg.jl:35\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpd9ikhmcg.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpd9ikhmcg.jl:36\\n  Test threw exception\\n  Expression: candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\\n  Closest candidates are:\\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpd9ikhmcg.jl:24\\n   [2] top-level scope at /tmp/tmpd9ikhmcg.jl:36\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpd9ikhmcg.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpd9ikhmcg.jl:37\\n  Test threw exception\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpd9ikhmcg.jl:24\\n   [2] top-level scope at /tmp/tmpd9ikhmcg.jl:37\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpd9ikhmcg.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpd9ikhmcg.jl:38\\n  Test threw exception\\n  Expression: candidate(\"\
    ><<>\") == false\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpd9ikhmcg.jl:24\\n   [2] top-level scope at /tmp/tmpd9ikhmcg.jl:38\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpd9ikhmcg.jl:32\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeyq_9v0y.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpeyq_9v0y.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeyq_9v0y.jl:21\ntest set: Test Failed at /tmp/tmpeyq_9v0y.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeyq_9v0y.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeyq_9v0y.jl:21\ntest set: Test Failed at /tmp/tmpeyq_9v0y.jl:24\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeyq_9v0y.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeyq_9v0y.jl:21\ntest set: Test Failed at /tmp/tmpeyq_9v0y.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpeyq_9v0y.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeyq_9v0y.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyq_9v0y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    for i in 1:n\n        if brackets[i]\
    \ == '<'\n            for j in i:n\n                if brackets[j] == '>'\n  \
    \                  return correct_bracketing(brackets[i+1:j-1])\n            \
    \    end\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbdn_mtsc.jl:44\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpbdn_mtsc.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbdn_mtsc.jl:42\ntest set: Test Failed at /tmp/tmpbdn_mtsc.jl:53\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpbdn_mtsc.jl:53\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbdn_mtsc.jl:42\ntest set: Test Failed at /tmp/tmpbdn_mtsc.jl:54\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpbdn_mtsc.jl:54\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbdn_mtsc.jl:42\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbdn_mtsc.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == '<'\n            n += 1\n        elseif i == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp891b2rjr.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp891b2rjr.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp891b2rjr.jl:26\\ntest set: Test Failed at /tmp/tmp891b2rjr.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp891b2rjr.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp891b2rjr.jl:26\\ntest set: Test Failed at /tmp/tmp891b2rjr.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp891b2rjr.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp891b2rjr.jl:26\\ntest set: Test Failed at /tmp/tmp891b2rjr.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp891b2rjr.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp891b2rjr.jl:26\\ntest set: Test Failed at /tmp/tmp891b2rjr.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp891b2rjr.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp891b2rjr.jl:26\\ntest set: Test Failed at /tmp/tmp891b2rjr.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp891b2rjr.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp891b2rjr.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp891b2rjr.jl:24\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    count = 0\n    for i in brackets\n        if i == '<'\n            count\
    \ += 1\n        elseif i == '>'\n            count -= 1\n        end\n       \
    \ if count < 0\n            return false\n        end\n    end\n    if count ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7mcd220z.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp7mcd220z.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7mcd220z.jl:26\ntest set: Test Failed at /tmp/tmp7mcd220z.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mcd220z.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7mcd220z.jl:26\ntest set: Test Failed at /tmp/tmp7mcd220z.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7mcd220z.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7mcd220z.jl:26\ntest set: Test Failed at /tmp/tmp7mcd220z.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp7mcd220z.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7mcd220z.jl:26\ntest set: Test Failed at /tmp/tmp7mcd220z.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mcd220z.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7mcd220z.jl:26\ntest set: Test Failed at /tmp/tmp7mcd220z.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mcd220z.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7mcd220z.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7mcd220z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmk1mcpno.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmk1mcpno.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmk1mcpno.jl:26\ntest set: Test Failed at /tmp/tmpmk1mcpno.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmk1mcpno.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmk1mcpno.jl:26\ntest set: Test Failed at /tmp/tmpmk1mcpno.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmk1mcpno.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmk1mcpno.jl:26\ntest set: Test Failed at /tmp/tmpmk1mcpno.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpmk1mcpno.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmk1mcpno.jl:26\ntest set: Test Failed at /tmp/tmpmk1mcpno.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmk1mcpno.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmk1mcpno.jl:26\ntest set: Test Failed at /tmp/tmpmk1mcpno.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmk1mcpno.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmk1mcpno.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmk1mcpno.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplso1dwxx.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplso1dwxx.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplso1dwxx.jl:35\ntest set: Test Failed at /tmp/tmplso1dwxx.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplso1dwxx.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplso1dwxx.jl:35\ntest set: Test Failed at /tmp/tmplso1dwxx.jl:42\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplso1dwxx.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplso1dwxx.jl:35\ntest set: Test Failed at /tmp/tmplso1dwxx.jl:43\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplso1dwxx.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplso1dwxx.jl:35\ntest set: Test Failed at /tmp/tmplso1dwxx.jl:44\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplso1dwxx.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplso1dwxx.jl:35\ntest set: Test Failed at /tmp/tmplso1dwxx.jl:45\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplso1dwxx.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplso1dwxx.jl:35\ntest set: Test Failed at /tmp/tmplso1dwxx.jl:46\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmplso1dwxx.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplso1dwxx.jl:35\ntest set: Test Failed at /tmp/tmplso1dwxx.jl:47\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmplso1dwxx.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplso1dwxx.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplso1dwxx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9sp550rs.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9sp550rs.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9sp550rs.jl:31\ntest set: Test Failed at /tmp/tmp9sp550rs.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sp550rs.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9sp550rs.jl:31\ntest set: Test Failed at /tmp/tmp9sp550rs.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sp550rs.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9sp550rs.jl:31\ntest set: Test Failed at /tmp/tmp9sp550rs.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sp550rs.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9sp550rs.jl:31\ntest set: Test Failed at /tmp/tmp9sp550rs.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sp550rs.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9sp550rs.jl:31\ntest set: Test Failed at /tmp/tmp9sp550rs.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sp550rs.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9sp550rs.jl:31\ntest set: Test Failed at /tmp/tmp9sp550rs.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp9sp550rs.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9sp550rs.jl:31\ntest set: Test Failed at /tmp/tmp9sp550rs.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp9sp550rs.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9sp550rs.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9sp550rs.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsl1rxifp.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpsl1rxifp.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsl1rxifp.jl:26\\ntest set: Test Failed at /tmp/tmpsl1rxifp.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpsl1rxifp.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsl1rxifp.jl:26\\ntest set: Test Failed at /tmp/tmpsl1rxifp.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpsl1rxifp.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsl1rxifp.jl:26\\ntest set: Test Failed at /tmp/tmpsl1rxifp.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsl1rxifp.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsl1rxifp.jl:26\\ntest set: Test Failed at /tmp/tmpsl1rxifp.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpsl1rxifp.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsl1rxifp.jl:26\\ntest set: Test Failed at /tmp/tmpsl1rxifp.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpsl1rxifp.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsl1rxifp.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5buuz7j.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpr5buuz7j.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr5buuz7j.jl:21\ntest set: Test Failed at /tmp/tmpr5buuz7j.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr5buuz7j.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr5buuz7j.jl:21\ntest set: Test Failed at /tmp/tmpr5buuz7j.jl:24\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr5buuz7j.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr5buuz7j.jl:21\ntest set: Test Failed at /tmp/tmpr5buuz7j.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpr5buuz7j.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr5buuz7j.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5buuz7j.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            bracket_count\
    \ += 1\n        elseif bracket == '>'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgto35sr9.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpgto35sr9.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgto35sr9.jl:26\ntest set: Test Failed at /tmp/tmpgto35sr9.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgto35sr9.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgto35sr9.jl:26\ntest set: Test Failed at /tmp/tmpgto35sr9.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgto35sr9.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgto35sr9.jl:26\ntest set: Test Failed at /tmp/tmpgto35sr9.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpgto35sr9.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgto35sr9.jl:26\ntest set: Test Failed at /tmp/tmpgto35sr9.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgto35sr9.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgto35sr9.jl:26\ntest set: Test Failed at /tmp/tmpgto35sr9.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgto35sr9.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgto35sr9.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgto35sr9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcv9n0ymd.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpcv9n0ymd.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcv9n0ymd.jl:26\ntest set: Test Failed at /tmp/tmpcv9n0ymd.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcv9n0ymd.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcv9n0ymd.jl:26\ntest set: Test Failed at /tmp/tmpcv9n0ymd.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcv9n0ymd.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcv9n0ymd.jl:26\ntest set: Test Failed at /tmp/tmpcv9n0ymd.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpcv9n0ymd.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcv9n0ymd.jl:26\ntest set: Test Failed at /tmp/tmpcv9n0ymd.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcv9n0ymd.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcv9n0ymd.jl:26\ntest set: Test Failed at /tmp/tmpcv9n0ymd.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcv9n0ymd.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcv9n0ymd.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcv9n0ymd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3a4ajr4a.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp3a4ajr4a.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a4ajr4a.jl:32\ntest set: Test Failed at /tmp/tmp3a4ajr4a.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3a4ajr4a.jl:35\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a4ajr4a.jl:32\ntest set: Test Failed at /tmp/tmp3a4ajr4a.jl:36\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp3a4ajr4a.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a4ajr4a.jl:32\ntest set: Test Failed at /tmp/tmp3a4ajr4a.jl:42\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3a4ajr4a.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3a4ajr4a.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3a4ajr4a.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9nyl3f00.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9nyl3f00.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nyl3f00.jl:26\ntest set: Test Failed at /tmp/tmp9nyl3f00.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9nyl3f00.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nyl3f00.jl:26\ntest set: Test Failed at /tmp/tmp9nyl3f00.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9nyl3f00.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nyl3f00.jl:26\ntest set: Test Failed at /tmp/tmp9nyl3f00.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp9nyl3f00.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nyl3f00.jl:26\ntest set: Test Failed at /tmp/tmp9nyl3f00.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9nyl3f00.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nyl3f00.jl:26\ntest set: Test Failed at /tmp/tmp9nyl3f00.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9nyl3f00.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nyl3f00.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9nyl3f00.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpucvcokmg.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpucvcokmg.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucvcokmg.jl:35\ntest set: Test Failed at /tmp/tmpucvcokmg.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucvcokmg.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucvcokmg.jl:35\ntest set: Test Failed at /tmp/tmpucvcokmg.jl:42\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucvcokmg.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucvcokmg.jl:35\ntest set: Test Failed at /tmp/tmpucvcokmg.jl:43\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucvcokmg.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucvcokmg.jl:35\ntest set: Test Failed at /tmp/tmpucvcokmg.jl:44\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucvcokmg.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucvcokmg.jl:35\ntest set: Test Failed at /tmp/tmpucvcokmg.jl:45\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucvcokmg.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucvcokmg.jl:35\ntest set: Test Failed at /tmp/tmpucvcokmg.jl:46\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpucvcokmg.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucvcokmg.jl:35\ntest set: Test Failed at /tmp/tmpucvcokmg.jl:47\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpucvcokmg.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucvcokmg.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpucvcokmg.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2cq3ge8u.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp2cq3ge8u.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2cq3ge8u.jl:26\\ntest set: Test Failed at /tmp/tmp2cq3ge8u.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp2cq3ge8u.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2cq3ge8u.jl:26\\ntest set: Test Failed at /tmp/tmp2cq3ge8u.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp2cq3ge8u.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2cq3ge8u.jl:26\\ntest set: Test Failed at /tmp/tmp2cq3ge8u.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp2cq3ge8u.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2cq3ge8u.jl:26\\ntest set: Test Failed at /tmp/tmp2cq3ge8u.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp2cq3ge8u.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2cq3ge8u.jl:26\\ntest set: Test Failed at /tmp/tmp2cq3ge8u.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp2cq3ge8u.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2cq3ge8u.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp2cq3ge8u.jl:24\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_count = 0\n    for i in 1:length(brackets)\n        if brackets[i] ==\
    \ '<'\n            open_count += 1\n        elseif brackets[i] == '>'\n      \
    \      open_count -= 1\n        end\n        if open_count < 0\n            return\
    \ false\n        end\n    end\n    if open_count == 0\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphspiya_x.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmphspiya_x.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphspiya_x.jl:26\ntest set: Test Failed at /tmp/tmphspiya_x.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphspiya_x.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphspiya_x.jl:26\ntest set: Test Failed at /tmp/tmphspiya_x.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphspiya_x.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphspiya_x.jl:26\ntest set: Test Failed at /tmp/tmphspiya_x.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmphspiya_x.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphspiya_x.jl:26\ntest set: Test Failed at /tmp/tmphspiya_x.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphspiya_x.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphspiya_x.jl:26\ntest set: Test Failed at /tmp/tmphspiya_x.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphspiya_x.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphspiya_x.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphspiya_x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    if brackets[1] == \"<\" && brackets[n]\
    \ == \">\"\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == \"<\" && brackets[n] != \">\"\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] != \"<\" && brackets[n] == \">\"\n        return\
    \ correct_bracketing(brackets[1:n-1])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwn4llyw9.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:42\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:43\n  Test threw exception\n  Expression: candidate(\"\
    <<><>>\") == true\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:43\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:44\n  Test threw exception\n  Expression: candidate(\"\
    <><><<><>><>\") == true\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:44\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:45\n  Test threw exception\n  Expression: candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:46\n  Test threw exception\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:46\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:47\n  Test threw exception\n  Expression: candidate(\"\
    ><<>\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:47\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:49\n  Test threw exception\n  Expression: candidate(\"\
    <<<<\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:49\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:51\n  Test threw exception\n  Expression: candidate(\"\
    <<>\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:51\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:52\n  Test threw exception\n  Expression: candidate(\"\
    <><><<><>><>><<>\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:52\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpwn4llyw9.jl:53\n  Test threw exception\n  Expression: candidate(\"\
    <><><<><>><>>><>\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpwn4llyw9.jl:34\n   [2] top-level scope at /tmp/tmpwn4llyw9.jl:53\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwn4llyw9.jl:41\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    2     10     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwn4llyw9.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwwuizmfp.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpwwuizmfp.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwwuizmfp.jl:26\\ntest set: Test Failed at /tmp/tmpwwuizmfp.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwwuizmfp.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwwuizmfp.jl:26\\ntest set: Test Failed at /tmp/tmpwwuizmfp.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpwwuizmfp.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwwuizmfp.jl:26\\ntest set: Test Failed at /tmp/tmpwwuizmfp.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpwwuizmfp.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwwuizmfp.jl:26\\ntest set: Test Failed at /tmp/tmpwwuizmfp.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwwuizmfp.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwwuizmfp.jl:26\\ntest set: Test Failed at /tmp/tmpwwuizmfp.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwwuizmfp.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwwuizmfp.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    if open_brackets == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppda76vxl.jl:33\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmppda76vxl.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppda76vxl.jl:28\\ntest set: Test Failed at /tmp/tmppda76vxl.jl:34\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppda76vxl.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppda76vxl.jl:28\\ntest set: Test Failed at /tmp/tmppda76vxl.jl:35\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppda76vxl.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppda76vxl.jl:28\\ntest set: Test Failed at /tmp/tmppda76vxl.jl:36\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppda76vxl.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppda76vxl.jl:28\\ntest set: Test Failed at /tmp/tmppda76vxl.jl:37\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppda76vxl.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppda76vxl.jl:28\\ntest set: Test Failed at /tmp/tmppda76vxl.jl:38\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppda76vxl.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppda76vxl.jl:28\\ntest set: Test Failed at /tmp/tmppda76vxl.jl:39\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmppda76vxl.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppda76vxl.jl:28\\ntest set: Test Failed at /tmp/tmppda76vxl.jl:40\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmppda76vxl.jl:40\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppda76vxl.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open = 0\n \
    \   for c in brackets\n        if c == '<'\n            num_open += 1\n      \
    \  elseif c == '>'\n            num_open -= 1\n        end\n        if num_open\
    \ < 0\n            return false\n        end\n    end\n    return num_open ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9vr2vfzw.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp9vr2vfzw.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9vr2vfzw.jl:26\\ntest set: Test Failed at /tmp/tmp9vr2vfzw.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9vr2vfzw.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9vr2vfzw.jl:26\\ntest set: Test Failed at /tmp/tmp9vr2vfzw.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp9vr2vfzw.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9vr2vfzw.jl:26\\ntest set: Test Failed at /tmp/tmp9vr2vfzw.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9vr2vfzw.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9vr2vfzw.jl:26\\ntest set: Test Failed at /tmp/tmp9vr2vfzw.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9vr2vfzw.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9vr2vfzw.jl:26\\ntest set: Test Failed at /tmp/tmp9vr2vfzw.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9vr2vfzw.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9vr2vfzw.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpag_z33f4.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpag_z33f4.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpag_z33f4.jl:26\ntest set: Test Failed at /tmp/tmpag_z33f4.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpag_z33f4.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpag_z33f4.jl:26\ntest set: Test Failed at /tmp/tmpag_z33f4.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpag_z33f4.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpag_z33f4.jl:26\ntest set: Test Failed at /tmp/tmpag_z33f4.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpag_z33f4.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpag_z33f4.jl:26\ntest set: Test Failed at /tmp/tmpag_z33f4.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpag_z33f4.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpag_z33f4.jl:26\ntest set: Test Failed at /tmp/tmpag_z33f4.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpag_z33f4.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpag_z33f4.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpag_z33f4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpabkjkmxz.jl:36\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpabkjkmxz.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpabkjkmxz.jl:31\\ntest set: Test Failed at /tmp/tmpabkjkmxz.jl:37\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpabkjkmxz.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpabkjkmxz.jl:31\\ntest set: Test Failed at /tmp/tmpabkjkmxz.jl:38\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpabkjkmxz.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpabkjkmxz.jl:31\\ntest set: Test Failed at /tmp/tmpabkjkmxz.jl:39\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpabkjkmxz.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpabkjkmxz.jl:31\\ntest set: Test Failed at /tmp/tmpabkjkmxz.jl:40\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpabkjkmxz.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpabkjkmxz.jl:31\\ntest set: Test Failed at /tmp/tmpabkjkmxz.jl:41\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpabkjkmxz.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpabkjkmxz.jl:31\\ntest set: Test Failed at /tmp/tmpabkjkmxz.jl:42\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpabkjkmxz.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpabkjkmxz.jl:31\\ntest set: Test Failed at /tmp/tmpabkjkmxz.jl:43\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpabkjkmxz.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpabkjkmxz.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6siqzmsy.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6siqzmsy.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6siqzmsy.jl:26\ntest set: Test Failed at /tmp/tmp6siqzmsy.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6siqzmsy.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6siqzmsy.jl:26\ntest set: Test Failed at /tmp/tmp6siqzmsy.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6siqzmsy.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6siqzmsy.jl:26\ntest set: Test Failed at /tmp/tmp6siqzmsy.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp6siqzmsy.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6siqzmsy.jl:26\ntest set: Test Failed at /tmp/tmp6siqzmsy.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6siqzmsy.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6siqzmsy.jl:26\ntest set: Test Failed at /tmp/tmp6siqzmsy.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6siqzmsy.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6siqzmsy.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6siqzmsy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '<'\n            open_count\
    \ += 1\n        elseif brackets[i] == '>'\n            open_count -= 1\n     \
    \   end\n        if open_count < 0\n            return false\n        end\n  \
    \  end\n    return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for c in brackets\n        if c == '<'\n            open_count += 1\n   \
    \     elseif c == '>'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == \"<\"\n            bracket_count\
    \ += 1\n        elseif bracket == \">\"\n            bracket_count -= 1\n    \
    \    end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpts4fwqgr.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpts4fwqgr.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpts4fwqgr.jl:31\ntest set: Test Failed at /tmp/tmpts4fwqgr.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpts4fwqgr.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpts4fwqgr.jl:31\ntest set: Test Failed at /tmp/tmpts4fwqgr.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpts4fwqgr.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpts4fwqgr.jl:31\ntest set: Test Failed at /tmp/tmpts4fwqgr.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpts4fwqgr.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpts4fwqgr.jl:31\ntest set: Test Failed at /tmp/tmpts4fwqgr.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpts4fwqgr.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpts4fwqgr.jl:31\ntest set: Test Failed at /tmp/tmpts4fwqgr.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpts4fwqgr.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpts4fwqgr.jl:31\ntest set: Test Failed at /tmp/tmpts4fwqgr.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpts4fwqgr.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpts4fwqgr.jl:31\ntest set: Test Failed at /tmp/tmpts4fwqgr.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpts4fwqgr.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpts4fwqgr.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpts4fwqgr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplaac01t6.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmplaac01t6.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplaac01t6.jl:26\ntest set: Test Failed at /tmp/tmplaac01t6.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplaac01t6.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplaac01t6.jl:26\ntest set: Test Failed at /tmp/tmplaac01t6.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplaac01t6.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplaac01t6.jl:26\ntest set: Test Failed at /tmp/tmplaac01t6.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmplaac01t6.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplaac01t6.jl:26\ntest set: Test Failed at /tmp/tmplaac01t6.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplaac01t6.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplaac01t6.jl:26\ntest set: Test Failed at /tmp/tmplaac01t6.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplaac01t6.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplaac01t6.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplaac01t6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptm8mip79.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmptm8mip79.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptm8mip79.jl:26\ntest set: Test Failed at /tmp/tmptm8mip79.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptm8mip79.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptm8mip79.jl:26\ntest set: Test Failed at /tmp/tmptm8mip79.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptm8mip79.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptm8mip79.jl:26\ntest set: Test Failed at /tmp/tmptm8mip79.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmptm8mip79.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptm8mip79.jl:26\ntest set: Test Failed at /tmp/tmptm8mip79.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptm8mip79.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptm8mip79.jl:26\ntest set: Test Failed at /tmp/tmptm8mip79.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptm8mip79.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptm8mip79.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptm8mip79.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6rc6z6a_.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6rc6z6a_.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6rc6z6a_.jl:26\ntest set: Test Failed at /tmp/tmp6rc6z6a_.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6rc6z6a_.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6rc6z6a_.jl:26\ntest set: Test Failed at /tmp/tmp6rc6z6a_.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6rc6z6a_.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6rc6z6a_.jl:26\ntest set: Test Failed at /tmp/tmp6rc6z6a_.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp6rc6z6a_.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6rc6z6a_.jl:26\ntest set: Test Failed at /tmp/tmp6rc6z6a_.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6rc6z6a_.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6rc6z6a_.jl:26\ntest set: Test Failed at /tmp/tmp6rc6z6a_.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6rc6z6a_.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6rc6z6a_.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6rc6z6a_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplhmgexmd.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplhmgexmd.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhmgexmd.jl:35\ntest set: Test Failed at /tmp/tmplhmgexmd.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhmgexmd.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhmgexmd.jl:35\ntest set: Test Failed at /tmp/tmplhmgexmd.jl:42\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhmgexmd.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhmgexmd.jl:35\ntest set: Test Failed at /tmp/tmplhmgexmd.jl:43\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhmgexmd.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhmgexmd.jl:35\ntest set: Test Failed at /tmp/tmplhmgexmd.jl:44\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhmgexmd.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhmgexmd.jl:35\ntest set: Test Failed at /tmp/tmplhmgexmd.jl:45\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhmgexmd.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhmgexmd.jl:35\ntest set: Test Failed at /tmp/tmplhmgexmd.jl:46\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmplhmgexmd.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhmgexmd.jl:35\ntest set: Test Failed at /tmp/tmplhmgexmd.jl:47\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmplhmgexmd.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhmgexmd.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplhmgexmd.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            bracket_count\
    \ += 1\n        elseif bracket == '>'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpww7_6a2q.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpww7_6a2q.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpww7_6a2q.jl:26\ntest set: Test Failed at /tmp/tmpww7_6a2q.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpww7_6a2q.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpww7_6a2q.jl:26\ntest set: Test Failed at /tmp/tmpww7_6a2q.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpww7_6a2q.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpww7_6a2q.jl:26\ntest set: Test Failed at /tmp/tmpww7_6a2q.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpww7_6a2q.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpww7_6a2q.jl:26\ntest set: Test Failed at /tmp/tmpww7_6a2q.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpww7_6a2q.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpww7_6a2q.jl:26\ntest set: Test Failed at /tmp/tmpww7_6a2q.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpww7_6a2q.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpww7_6a2q.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpww7_6a2q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    i = 1\n    count = 0\n    while i <= n\n        if brackets[i] == '<'\n \
    \           count += 1\n        elseif brackets[i] == '>'\n            count -=\
    \ 1\n        end\n        if count < 0\n            return false\n        end\n\
    \        i += 1\n    end\n    return count == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe3lvkx6s.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpe3lvkx6s.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe3lvkx6s.jl:26\ntest set: Test Failed at /tmp/tmpe3lvkx6s.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe3lvkx6s.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe3lvkx6s.jl:26\ntest set: Test Failed at /tmp/tmpe3lvkx6s.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe3lvkx6s.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe3lvkx6s.jl:26\ntest set: Test Failed at /tmp/tmpe3lvkx6s.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpe3lvkx6s.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe3lvkx6s.jl:26\ntest set: Test Failed at /tmp/tmpe3lvkx6s.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe3lvkx6s.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe3lvkx6s.jl:26\ntest set: Test Failed at /tmp/tmpe3lvkx6s.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe3lvkx6s.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe3lvkx6s.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe3lvkx6s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_r90oii.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp2_r90oii.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_r90oii.jl:26\ntest set: Test Failed at /tmp/tmp2_r90oii.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_r90oii.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_r90oii.jl:26\ntest set: Test Failed at /tmp/tmp2_r90oii.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2_r90oii.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_r90oii.jl:26\ntest set: Test Failed at /tmp/tmp2_r90oii.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp2_r90oii.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_r90oii.jl:26\ntest set: Test Failed at /tmp/tmp2_r90oii.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_r90oii.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_r90oii.jl:26\ntest set: Test Failed at /tmp/tmp2_r90oii.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_r90oii.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_r90oii.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_r90oii.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == '>'\n    \
    \    return correct_bracketing(brackets[1:n-1])\n    end\n    if brackets[1] ==\
    \ '>'\n        return false\n    end\n    if brackets[n] == '<'\n        return\
    \ false\n    end\n    return correct_bracketing(brackets[2:n-1])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3c9mdtq9.jl:46\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp3c9mdtq9.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3c9mdtq9.jl:45\\ntest set: Test Failed at /tmp/tmp3c9mdtq9.jl:47\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp3c9mdtq9.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3c9mdtq9.jl:45\\ntest set: Test Failed at /tmp/tmp3c9mdtq9.jl:48\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp3c9mdtq9.jl:48\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3c9mdtq9.jl:45\\ntest set: Test Failed at /tmp/tmp3c9mdtq9.jl:49\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp3c9mdtq9.jl:49\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3c9mdtq9.jl:45\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9kqofqk5.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp9kqofqk5.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9kqofqk5.jl:26\\ntest set: Test Failed at /tmp/tmp9kqofqk5.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9kqofqk5.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9kqofqk5.jl:26\\ntest set: Test Failed at /tmp/tmp9kqofqk5.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp9kqofqk5.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9kqofqk5.jl:26\\ntest set: Test Failed at /tmp/tmp9kqofqk5.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9kqofqk5.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9kqofqk5.jl:26\\ntest set: Test Failed at /tmp/tmp9kqofqk5.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9kqofqk5.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9kqofqk5.jl:26\\ntest set: Test Failed at /tmp/tmp9kqofqk5.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9kqofqk5.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9kqofqk5.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw_dsra28.jl:36\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpw_dsra28.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw_dsra28.jl:31\\ntest set: Test Failed at /tmp/tmpw_dsra28.jl:37\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw_dsra28.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw_dsra28.jl:31\\ntest set: Test Failed at /tmp/tmpw_dsra28.jl:38\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw_dsra28.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw_dsra28.jl:31\\ntest set: Test Failed at /tmp/tmpw_dsra28.jl:39\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw_dsra28.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw_dsra28.jl:31\\ntest set: Test Failed at /tmp/tmpw_dsra28.jl:40\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw_dsra28.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw_dsra28.jl:31\\ntest set: Test Failed at /tmp/tmpw_dsra28.jl:41\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw_dsra28.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw_dsra28.jl:31\\ntest set: Test Failed at /tmp/tmpw_dsra28.jl:42\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw_dsra28.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw_dsra28.jl:31\\ntest set: Test Failed at /tmp/tmpw_dsra28.jl:43\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw_dsra28.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw_dsra28.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4jy7r7rm.jl:36\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp4jy7r7rm.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4jy7r7rm.jl:31\\ntest set: Test Failed at /tmp/tmp4jy7r7rm.jl:37\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4jy7r7rm.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4jy7r7rm.jl:31\\ntest set: Test Failed at /tmp/tmp4jy7r7rm.jl:38\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4jy7r7rm.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4jy7r7rm.jl:31\\ntest set: Test Failed at /tmp/tmp4jy7r7rm.jl:39\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4jy7r7rm.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4jy7r7rm.jl:31\\ntest set: Test Failed at /tmp/tmp4jy7r7rm.jl:40\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4jy7r7rm.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4jy7r7rm.jl:31\\ntest set: Test Failed at /tmp/tmp4jy7r7rm.jl:41\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4jy7r7rm.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4jy7r7rm.jl:31\\ntest set: Test Failed at /tmp/tmp4jy7r7rm.jl:42\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4jy7r7rm.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4jy7r7rm.jl:31\\ntest set: Test Failed at /tmp/tmp4jy7r7rm.jl:43\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4jy7r7rm.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4jy7r7rm.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp4jy7r7rm.jl:29\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvheetqqo.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpvheetqqo.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvheetqqo.jl:26\ntest set: Test Failed at /tmp/tmpvheetqqo.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvheetqqo.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvheetqqo.jl:26\ntest set: Test Failed at /tmp/tmpvheetqqo.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvheetqqo.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvheetqqo.jl:26\ntest set: Test Failed at /tmp/tmpvheetqqo.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpvheetqqo.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvheetqqo.jl:26\ntest set: Test Failed at /tmp/tmpvheetqqo.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvheetqqo.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvheetqqo.jl:26\ntest set: Test Failed at /tmp/tmpvheetqqo.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvheetqqo.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvheetqqo.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvheetqqo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptgbb_ncc.jl:36\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmptgbb_ncc.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptgbb_ncc.jl:31\\ntest set: Test Failed at /tmp/tmptgbb_ncc.jl:37\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptgbb_ncc.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptgbb_ncc.jl:31\\ntest set: Test Failed at /tmp/tmptgbb_ncc.jl:38\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptgbb_ncc.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptgbb_ncc.jl:31\\ntest set: Test Failed at /tmp/tmptgbb_ncc.jl:39\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptgbb_ncc.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptgbb_ncc.jl:31\\ntest set: Test Failed at /tmp/tmptgbb_ncc.jl:40\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptgbb_ncc.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptgbb_ncc.jl:31\\ntest set: Test Failed at /tmp/tmptgbb_ncc.jl:41\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptgbb_ncc.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptgbb_ncc.jl:31\\ntest set: Test Failed at /tmp/tmptgbb_ncc.jl:42\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmptgbb_ncc.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptgbb_ncc.jl:31\\ntest set: Test Failed at /tmp/tmptgbb_ncc.jl:43\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmptgbb_ncc.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptgbb_ncc.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnu6mqgu3.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpnu6mqgu3.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu6mqgu3.jl:26\\ntest set: Test Failed at /tmp/tmpnu6mqgu3.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnu6mqgu3.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu6mqgu3.jl:26\\ntest set: Test Failed at /tmp/tmpnu6mqgu3.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpnu6mqgu3.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu6mqgu3.jl:26\\ntest set: Test Failed at /tmp/tmpnu6mqgu3.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnu6mqgu3.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu6mqgu3.jl:26\\ntest set: Test Failed at /tmp/tmpnu6mqgu3.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnu6mqgu3.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu6mqgu3.jl:26\\ntest set: Test Failed at /tmp/tmpnu6mqgu3.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnu6mqgu3.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu6mqgu3.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ye0_xqx.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0ye0_xqx.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ye0_xqx.jl:35\ntest set: Test Failed at /tmp/tmp0ye0_xqx.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ye0_xqx.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ye0_xqx.jl:35\ntest set: Test Failed at /tmp/tmp0ye0_xqx.jl:42\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ye0_xqx.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ye0_xqx.jl:35\ntest set: Test Failed at /tmp/tmp0ye0_xqx.jl:43\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ye0_xqx.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ye0_xqx.jl:35\ntest set: Test Failed at /tmp/tmp0ye0_xqx.jl:44\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ye0_xqx.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ye0_xqx.jl:35\ntest set: Test Failed at /tmp/tmp0ye0_xqx.jl:45\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ye0_xqx.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ye0_xqx.jl:35\ntest set: Test Failed at /tmp/tmp0ye0_xqx.jl:46\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp0ye0_xqx.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ye0_xqx.jl:35\ntest set: Test Failed at /tmp/tmp0ye0_xqx.jl:47\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp0ye0_xqx.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ye0_xqx.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ye0_xqx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3cgxqet5.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3cgxqet5.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3cgxqet5.jl:28\ntest set: Test Failed at /tmp/tmp3cgxqet5.jl:34\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3cgxqet5.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3cgxqet5.jl:28\ntest set: Test Failed at /tmp/tmp3cgxqet5.jl:35\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3cgxqet5.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3cgxqet5.jl:28\ntest set: Test Failed at /tmp/tmp3cgxqet5.jl:36\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3cgxqet5.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3cgxqet5.jl:28\ntest set: Test Failed at /tmp/tmp3cgxqet5.jl:37\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3cgxqet5.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3cgxqet5.jl:28\ntest set: Test Failed at /tmp/tmp3cgxqet5.jl:38\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3cgxqet5.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3cgxqet5.jl:28\ntest set: Test Failed at /tmp/tmp3cgxqet5.jl:39\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp3cgxqet5.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3cgxqet5.jl:28\ntest set: Test Failed at /tmp/tmp3cgxqet5.jl:40\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp3cgxqet5.jl:40\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3cgxqet5.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3cgxqet5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8_6np97a.jl:26\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8_6np97a.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_6np97a.jl:21\ntest set: Test Failed at /tmp/tmp8_6np97a.jl:27\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_6np97a.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_6np97a.jl:21\ntest set: Test Failed at /tmp/tmp8_6np97a.jl:28\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_6np97a.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_6np97a.jl:21\ntest set: Test Failed at /tmp/tmp8_6np97a.jl:29\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_6np97a.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_6np97a.jl:21\ntest set: Test Failed at /tmp/tmp8_6np97a.jl:30\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_6np97a.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_6np97a.jl:21\ntest set: Test Failed at /tmp/tmp8_6np97a.jl:31\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_6np97a.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_6np97a.jl:21\ntest set: Test Failed at /tmp/tmp8_6np97a.jl:32\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp8_6np97a.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_6np97a.jl:21\ntest set: Test Failed at /tmp/tmp8_6np97a.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp8_6np97a.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8_6np97a.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_6np97a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ck9w_de.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp3ck9w_de.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ck9w_de.jl:26\ntest set: Test Failed at /tmp/tmp3ck9w_de.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ck9w_de.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ck9w_de.jl:26\ntest set: Test Failed at /tmp/tmp3ck9w_de.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3ck9w_de.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ck9w_de.jl:26\ntest set: Test Failed at /tmp/tmp3ck9w_de.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp3ck9w_de.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ck9w_de.jl:26\ntest set: Test Failed at /tmp/tmp3ck9w_de.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ck9w_de.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ck9w_de.jl:26\ntest set: Test Failed at /tmp/tmp3ck9w_de.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ck9w_de.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ck9w_de.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ck9w_de.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_count = 0\n    for i in brackets\n        if i == '<'\n            open_count\
    \ += 1\n        elseif i == '>'\n            open_count -= 1\n        end\n  \
    \      if open_count < 0\n            return false\n        end\n    end\n   \
    \ return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == '<'\n            n += 1\n        elseif i == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv8w_nsnp.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpv8w_nsnp.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv8w_nsnp.jl:26\ntest set: Test Failed at /tmp/tmpv8w_nsnp.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv8w_nsnp.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv8w_nsnp.jl:26\ntest set: Test Failed at /tmp/tmpv8w_nsnp.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv8w_nsnp.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv8w_nsnp.jl:26\ntest set: Test Failed at /tmp/tmpv8w_nsnp.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpv8w_nsnp.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv8w_nsnp.jl:26\ntest set: Test Failed at /tmp/tmpv8w_nsnp.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv8w_nsnp.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv8w_nsnp.jl:26\ntest set: Test Failed at /tmp/tmpv8w_nsnp.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv8w_nsnp.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv8w_nsnp.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv8w_nsnp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            count += 1\n   \
    \     elseif bracket == '>'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ []\n    for bracket in brackets\n        if bracket == \"<\"\n            push!(bracket_stack,\
    \ \"<\")\n        elseif bracket == \">\"\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return isempty(bracket_stack)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpujphtyqd.jl:37\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpujphtyqd.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujphtyqd.jl:32\ntest set: Test Failed at /tmp/tmpujphtyqd.jl:38\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujphtyqd.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujphtyqd.jl:32\ntest set: Test Failed at /tmp/tmpujphtyqd.jl:39\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujphtyqd.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujphtyqd.jl:32\ntest set: Test Failed at /tmp/tmpujphtyqd.jl:40\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujphtyqd.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujphtyqd.jl:32\ntest set: Test Failed at /tmp/tmpujphtyqd.jl:41\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujphtyqd.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujphtyqd.jl:32\ntest set: Test Failed at /tmp/tmpujphtyqd.jl:42\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujphtyqd.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujphtyqd.jl:32\ntest set: Test Failed at /tmp/tmpujphtyqd.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpujphtyqd.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujphtyqd.jl:32\ntest set: Test Failed at /tmp/tmpujphtyqd.jl:44\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpujphtyqd.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujphtyqd.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujphtyqd.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return false\n        elseif brackets[2] == '>'\n        \
    \    return correct_bracketing(brackets[3:end])\n        else\n            return\
    \ correct_bracketing(brackets[2:end])\n        end\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplhlri3s1.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmplhlri3s1.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhlri3s1.jl:32\ntest set: Test Failed at /tmp/tmplhlri3s1.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplhlri3s1.jl:35\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhlri3s1.jl:32\ntest set: Test Failed at /tmp/tmplhlri3s1.jl:36\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmplhlri3s1.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhlri3s1.jl:32\ntest set: Test Failed at /tmp/tmplhlri3s1.jl:42\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhlri3s1.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplhlri3s1.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplhlri3s1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfi097pow.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpfi097pow.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfi097pow.jl:26\\ntest set: Test Failed at /tmp/tmpfi097pow.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfi097pow.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfi097pow.jl:26\\ntest set: Test Failed at /tmp/tmpfi097pow.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpfi097pow.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfi097pow.jl:26\\ntest set: Test Failed at /tmp/tmpfi097pow.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpfi097pow.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfi097pow.jl:26\\ntest set: Test Failed at /tmp/tmpfi097pow.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfi097pow.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfi097pow.jl:26\\ntest set: Test Failed at /tmp/tmpfi097pow.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfi097pow.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfi097pow.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjj6xuqg4.jl:40\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpjj6xuqg4.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjj6xuqg4.jl:35\\ntest set: Test Failed at /tmp/tmpjj6xuqg4.jl:41\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjj6xuqg4.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjj6xuqg4.jl:35\\ntest set: Test Failed at /tmp/tmpjj6xuqg4.jl:42\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjj6xuqg4.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjj6xuqg4.jl:35\\ntest set: Test Failed at /tmp/tmpjj6xuqg4.jl:43\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjj6xuqg4.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjj6xuqg4.jl:35\\ntest set: Test Failed at /tmp/tmpjj6xuqg4.jl:44\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjj6xuqg4.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjj6xuqg4.jl:35\\ntest set: Test Failed at /tmp/tmpjj6xuqg4.jl:45\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjj6xuqg4.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjj6xuqg4.jl:35\\ntest set: Test Failed at /tmp/tmpjj6xuqg4.jl:46\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjj6xuqg4.jl:46\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjj6xuqg4.jl:35\\ntest set: Test Failed at /tmp/tmpjj6xuqg4.jl:47\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjj6xuqg4.jl:47\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjj6xuqg4.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpjj6xuqg4.jl:33\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == \"<\"\n            push!(stack, i)\n    \
    \    elseif i == \">\"\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    if isempty(stack)\n        return true\n    else\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg2jnz7z8.jl:41\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpg2jnz7z8.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg2jnz7z8.jl:36\ntest set: Test Failed at /tmp/tmpg2jnz7z8.jl:42\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2jnz7z8.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg2jnz7z8.jl:36\ntest set: Test Failed at /tmp/tmpg2jnz7z8.jl:43\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2jnz7z8.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg2jnz7z8.jl:36\ntest set: Test Failed at /tmp/tmpg2jnz7z8.jl:44\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2jnz7z8.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg2jnz7z8.jl:36\ntest set: Test Failed at /tmp/tmpg2jnz7z8.jl:45\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2jnz7z8.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg2jnz7z8.jl:36\ntest set: Test Failed at /tmp/tmpg2jnz7z8.jl:46\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2jnz7z8.jl:46\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg2jnz7z8.jl:36\ntest set: Test Failed at /tmp/tmpg2jnz7z8.jl:47\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpg2jnz7z8.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg2jnz7z8.jl:36\ntest set: Test Failed at /tmp/tmpg2jnz7z8.jl:48\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpg2jnz7z8.jl:48\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg2jnz7z8.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg2jnz7z8.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == '>'\n    \
    \    return correct_bracketing(brackets[1:n-1])\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmowhx0m5.jl:40\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmowhx0m5.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmowhx0m5.jl:39\ntest set: Test Failed at /tmp/tmpmowhx0m5.jl:41\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmowhx0m5.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmowhx0m5.jl:39\ntest set: Test Failed at /tmp/tmpmowhx0m5.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmowhx0m5.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmowhx0m5.jl:39\ntest set: Test Failed at /tmp/tmpmowhx0m5.jl:43\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpmowhx0m5.jl:43\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmowhx0m5.jl:39\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmowhx0m5.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<'\n        if brackets[end] == '>'\n    \
    \        return correct_bracketing(brackets[2:end-1])\n        else\n        \
    \    return false\n        end\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9b3r1hr6.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9b3r1hr6.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b3r1hr6.jl:32\ntest set: Test Failed at /tmp/tmp9b3r1hr6.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9b3r1hr6.jl:35\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b3r1hr6.jl:32\ntest set: Test Failed at /tmp/tmp9b3r1hr6.jl:36\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp9b3r1hr6.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b3r1hr6.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9b3r1hr6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    if brackets[1] == \"<\" && brackets[n]\
    \ == \">\"\n        return correct_bracketing(brackets[2:n-1])\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1nshssz6.jl:37\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp1nshssz6.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1nshssz6.jl:36\\ntest set: Test Failed at /tmp/tmp1nshssz6.jl:38\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp1nshssz6.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1nshssz6.jl:36\\ntest set: Test Failed at /tmp/tmp1nshssz6.jl:39\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp1nshssz6.jl:39\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1nshssz6.jl:36\\ntest set: Test Failed at /tmp/tmp1nshssz6.jl:40\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1nshssz6.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1nshssz6.jl:36\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     4     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return false\n        elseif brackets[end] == '>'\n      \
    \      return correct_bracketing(brackets[2:end-1])\n        else\n          \
    \  return false\n        end\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpik_tr5vb.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpik_tr5vb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpik_tr5vb.jl:32\ntest set: Test Failed at /tmp/tmpik_tr5vb.jl:35\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpik_tr5vb.jl:35\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpik_tr5vb.jl:32\ntest set: Test Failed at /tmp/tmpik_tr5vb.jl:36\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpik_tr5vb.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpik_tr5vb.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpik_tr5vb.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == \"<\"\n            bracket_count\
    \ += 1\n        elseif bracket == \">\"\n            bracket_count -= 1\n    \
    \    end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz63kjdo4.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpz63kjdo4.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz63kjdo4.jl:31\ntest set: Test Failed at /tmp/tmpz63kjdo4.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz63kjdo4.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz63kjdo4.jl:31\ntest set: Test Failed at /tmp/tmpz63kjdo4.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz63kjdo4.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz63kjdo4.jl:31\ntest set: Test Failed at /tmp/tmpz63kjdo4.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz63kjdo4.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz63kjdo4.jl:31\ntest set: Test Failed at /tmp/tmpz63kjdo4.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz63kjdo4.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz63kjdo4.jl:31\ntest set: Test Failed at /tmp/tmpz63kjdo4.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz63kjdo4.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz63kjdo4.jl:31\ntest set: Test Failed at /tmp/tmpz63kjdo4.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpz63kjdo4.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz63kjdo4.jl:31\ntest set: Test Failed at /tmp/tmpz63kjdo4.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpz63kjdo4.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz63kjdo4.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz63kjdo4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk28z54k2.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpk28z54k2.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk28z54k2.jl:35\ntest set: Test Failed at /tmp/tmpk28z54k2.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk28z54k2.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk28z54k2.jl:35\ntest set: Test Failed at /tmp/tmpk28z54k2.jl:42\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk28z54k2.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk28z54k2.jl:35\ntest set: Test Failed at /tmp/tmpk28z54k2.jl:43\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk28z54k2.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk28z54k2.jl:35\ntest set: Test Failed at /tmp/tmpk28z54k2.jl:44\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk28z54k2.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk28z54k2.jl:35\ntest set: Test Failed at /tmp/tmpk28z54k2.jl:45\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk28z54k2.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk28z54k2.jl:35\ntest set: Test Failed at /tmp/tmpk28z54k2.jl:46\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpk28z54k2.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk28z54k2.jl:35\ntest set: Test Failed at /tmp/tmpk28z54k2.jl:47\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpk28z54k2.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk28z54k2.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk28z54k2.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnepejr4p.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpnepejr4p.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnepejr4p.jl:26\ntest set: Test Failed at /tmp/tmpnepejr4p.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnepejr4p.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnepejr4p.jl:26\ntest set: Test Failed at /tmp/tmpnepejr4p.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnepejr4p.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnepejr4p.jl:26\ntest set: Test Failed at /tmp/tmpnepejr4p.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpnepejr4p.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnepejr4p.jl:26\ntest set: Test Failed at /tmp/tmpnepejr4p.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnepejr4p.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnepejr4p.jl:26\ntest set: Test Failed at /tmp/tmpnepejr4p.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnepejr4p.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnepejr4p.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnepejr4p.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoto9qln0.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpoto9qln0.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoto9qln0.jl:26\ntest set: Test Failed at /tmp/tmpoto9qln0.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoto9qln0.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoto9qln0.jl:26\ntest set: Test Failed at /tmp/tmpoto9qln0.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoto9qln0.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoto9qln0.jl:26\ntest set: Test Failed at /tmp/tmpoto9qln0.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpoto9qln0.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoto9qln0.jl:26\ntest set: Test Failed at /tmp/tmpoto9qln0.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoto9qln0.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoto9qln0.jl:26\ntest set: Test Failed at /tmp/tmpoto9qln0.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoto9qln0.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoto9qln0.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoto9qln0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    open_brackets = 0\n    for i in brackets\n        if i == '<'\n         \
    \   open_brackets += 1\n        elseif i == '>'\n            open_brackets -=\
    \ 1\n        end\n        if open_brackets < 0\n            return false\n   \
    \     end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxxx9rkns.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpxxx9rkns.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxx9rkns.jl:26\ntest set: Test Failed at /tmp/tmpxxx9rkns.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxxx9rkns.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxx9rkns.jl:26\ntest set: Test Failed at /tmp/tmpxxx9rkns.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxxx9rkns.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxx9rkns.jl:26\ntest set: Test Failed at /tmp/tmpxxx9rkns.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpxxx9rkns.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxx9rkns.jl:26\ntest set: Test Failed at /tmp/tmpxxx9rkns.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxxx9rkns.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxx9rkns.jl:26\ntest set: Test Failed at /tmp/tmpxxx9rkns.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxxx9rkns.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxx9rkns.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxx9rkns.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp74it53lf.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp74it53lf.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74it53lf.jl:26\ntest set: Test Failed at /tmp/tmp74it53lf.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74it53lf.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74it53lf.jl:26\ntest set: Test Failed at /tmp/tmp74it53lf.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp74it53lf.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74it53lf.jl:26\ntest set: Test Failed at /tmp/tmp74it53lf.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp74it53lf.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74it53lf.jl:26\ntest set: Test Failed at /tmp/tmp74it53lf.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74it53lf.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74it53lf.jl:26\ntest set: Test Failed at /tmp/tmp74it53lf.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74it53lf.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74it53lf.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp74it53lf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5ss3281_.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp5ss3281_.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ss3281_.jl:26\\ntest set: Test Failed at /tmp/tmp5ss3281_.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5ss3281_.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ss3281_.jl:26\\ntest set: Test Failed at /tmp/tmp5ss3281_.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp5ss3281_.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ss3281_.jl:26\\ntest set: Test Failed at /tmp/tmp5ss3281_.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5ss3281_.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ss3281_.jl:26\\ntest set: Test Failed at /tmp/tmp5ss3281_.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5ss3281_.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ss3281_.jl:26\\ntest set: Test Failed at /tmp/tmp5ss3281_.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5ss3281_.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ss3281_.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpky9yk26e.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpky9yk26e.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpky9yk26e.jl:26\ntest set: Test Failed at /tmp/tmpky9yk26e.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpky9yk26e.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpky9yk26e.jl:26\ntest set: Test Failed at /tmp/tmpky9yk26e.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpky9yk26e.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpky9yk26e.jl:26\ntest set: Test Failed at /tmp/tmpky9yk26e.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpky9yk26e.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpky9yk26e.jl:26\ntest set: Test Failed at /tmp/tmpky9yk26e.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpky9yk26e.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpky9yk26e.jl:26\ntest set: Test Failed at /tmp/tmpky9yk26e.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpky9yk26e.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpky9yk26e.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpky9yk26e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjjxpy1jo.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjjxpy1jo.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjxpy1jo.jl:31\ntest set: Test Failed at /tmp/tmpjjxpy1jo.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjjxpy1jo.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjxpy1jo.jl:31\ntest set: Test Failed at /tmp/tmpjjxpy1jo.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjjxpy1jo.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjxpy1jo.jl:31\ntest set: Test Failed at /tmp/tmpjjxpy1jo.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjjxpy1jo.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjxpy1jo.jl:31\ntest set: Test Failed at /tmp/tmpjjxpy1jo.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjjxpy1jo.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjxpy1jo.jl:31\ntest set: Test Failed at /tmp/tmpjjxpy1jo.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjjxpy1jo.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjxpy1jo.jl:31\ntest set: Test Failed at /tmp/tmpjjxpy1jo.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpjjxpy1jo.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjxpy1jo.jl:31\ntest set: Test Failed at /tmp/tmpjjxpy1jo.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpjjxpy1jo.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjxpy1jo.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjxpy1jo.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == \">\"\n        return false\n    elseif brackets[end]\
    \ == \"<\"\n        return false\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4rylzbcp.jl:36\\n  Expression: candidate(\"\
    ><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp4rylzbcp.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4rylzbcp.jl:30\\ntest set: Test Failed at /tmp/tmp4rylzbcp.jl:38\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4rylzbcp.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4rylzbcp.jl:30\\ntest set: Test Failed at /tmp/tmp4rylzbcp.jl:41\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4rylzbcp.jl:41\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4rylzbcp.jl:30\\ntest set: Test Failed at /tmp/tmp4rylzbcp.jl:42\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4rylzbcp.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4rylzbcp.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '<'\n            n += 1\n \
    \       elseif brackets[i] == '>'\n            n -= 1\n        end\n        if\
    \ n < 0\n            return false\n        end\n    end\n    return n == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '<' && brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzqnqce90.jl:30\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpzqnqce90.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzqnqce90.jl:28\ntest set: Test Failed at /tmp/tmpzqnqce90.jl:31\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzqnqce90.jl:31\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzqnqce90.jl:28\ntest set: Test Failed at /tmp/tmpzqnqce90.jl:32\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpzqnqce90.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzqnqce90.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzqnqce90.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg77vg2za.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpg77vg2za.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg77vg2za.jl:31\ntest set: Test Failed at /tmp/tmpg77vg2za.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg77vg2za.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg77vg2za.jl:31\ntest set: Test Failed at /tmp/tmpg77vg2za.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg77vg2za.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg77vg2za.jl:31\ntest set: Test Failed at /tmp/tmpg77vg2za.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg77vg2za.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg77vg2za.jl:31\ntest set: Test Failed at /tmp/tmpg77vg2za.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg77vg2za.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg77vg2za.jl:31\ntest set: Test Failed at /tmp/tmpg77vg2za.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg77vg2za.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg77vg2za.jl:31\ntest set: Test Failed at /tmp/tmpg77vg2za.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpg77vg2za.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg77vg2za.jl:31\ntest set: Test Failed at /tmp/tmpg77vg2za.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpg77vg2za.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg77vg2za.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg77vg2za.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6ps1ewbj.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp6ps1ewbj.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ps1ewbj.jl:26\\ntest set: Test Failed at /tmp/tmp6ps1ewbj.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6ps1ewbj.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ps1ewbj.jl:26\\ntest set: Test Failed at /tmp/tmp6ps1ewbj.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp6ps1ewbj.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ps1ewbj.jl:26\\ntest set: Test Failed at /tmp/tmp6ps1ewbj.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6ps1ewbj.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ps1ewbj.jl:26\\ntest set: Test Failed at /tmp/tmp6ps1ewbj.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6ps1ewbj.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ps1ewbj.jl:26\\ntest set: Test Failed at /tmp/tmp6ps1ewbj.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6ps1ewbj.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ps1ewbj.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8h3pc9p6.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp8h3pc9p6.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h3pc9p6.jl:26\\ntest set: Test Failed at /tmp/tmp8h3pc9p6.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8h3pc9p6.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h3pc9p6.jl:26\\ntest set: Test Failed at /tmp/tmp8h3pc9p6.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp8h3pc9p6.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h3pc9p6.jl:26\\ntest set: Test Failed at /tmp/tmp8h3pc9p6.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8h3pc9p6.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h3pc9p6.jl:26\\ntest set: Test Failed at /tmp/tmp8h3pc9p6.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8h3pc9p6.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h3pc9p6.jl:26\\ntest set: Test Failed at /tmp/tmp8h3pc9p6.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8h3pc9p6.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h3pc9p6.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcg41iz6j.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpcg41iz6j.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcg41iz6j.jl:26\ntest set: Test Failed at /tmp/tmpcg41iz6j.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcg41iz6j.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcg41iz6j.jl:26\ntest set: Test Failed at /tmp/tmpcg41iz6j.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcg41iz6j.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcg41iz6j.jl:26\ntest set: Test Failed at /tmp/tmpcg41iz6j.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpcg41iz6j.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcg41iz6j.jl:26\ntest set: Test Failed at /tmp/tmpcg41iz6j.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcg41iz6j.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcg41iz6j.jl:26\ntest set: Test Failed at /tmp/tmpcg41iz6j.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcg41iz6j.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcg41iz6j.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcg41iz6j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbj14p0ec.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbj14p0ec.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbj14p0ec.jl:35\ntest set: Test Failed at /tmp/tmpbj14p0ec.jl:41\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbj14p0ec.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbj14p0ec.jl:35\ntest set: Test Failed at /tmp/tmpbj14p0ec.jl:42\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbj14p0ec.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbj14p0ec.jl:35\ntest set: Test Failed at /tmp/tmpbj14p0ec.jl:43\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbj14p0ec.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbj14p0ec.jl:35\ntest set: Test Failed at /tmp/tmpbj14p0ec.jl:44\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbj14p0ec.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbj14p0ec.jl:35\ntest set: Test Failed at /tmp/tmpbj14p0ec.jl:45\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbj14p0ec.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbj14p0ec.jl:35\ntest set: Test Failed at /tmp/tmpbj14p0ec.jl:46\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpbj14p0ec.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbj14p0ec.jl:35\ntest set: Test Failed at /tmp/tmpbj14p0ec.jl:47\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpbj14p0ec.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbj14p0ec.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbj14p0ec.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2qr0bszz.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp2qr0bszz.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2qr0bszz.jl:26\ntest set: Test Failed at /tmp/tmp2qr0bszz.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2qr0bszz.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2qr0bszz.jl:26\ntest set: Test Failed at /tmp/tmp2qr0bszz.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2qr0bszz.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2qr0bszz.jl:26\ntest set: Test Failed at /tmp/tmp2qr0bszz.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp2qr0bszz.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2qr0bszz.jl:26\ntest set: Test Failed at /tmp/tmp2qr0bszz.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2qr0bszz.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2qr0bszz.jl:26\ntest set: Test Failed at /tmp/tmp2qr0bszz.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2qr0bszz.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2qr0bszz.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2qr0bszz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdinpr4cq.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpdinpr4cq.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdinpr4cq.jl:26\ntest set: Test Failed at /tmp/tmpdinpr4cq.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdinpr4cq.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdinpr4cq.jl:26\ntest set: Test Failed at /tmp/tmpdinpr4cq.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdinpr4cq.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdinpr4cq.jl:26\ntest set: Test Failed at /tmp/tmpdinpr4cq.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpdinpr4cq.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdinpr4cq.jl:26\ntest set: Test Failed at /tmp/tmpdinpr4cq.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdinpr4cq.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdinpr4cq.jl:26\ntest set: Test Failed at /tmp/tmpdinpr4cq.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdinpr4cq.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdinpr4cq.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdinpr4cq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpghlbl85y.jl:40\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpghlbl85y.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpghlbl85y.jl:35\\ntest set: Test Failed at /tmp/tmpghlbl85y.jl:41\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpghlbl85y.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpghlbl85y.jl:35\\ntest set: Test Failed at /tmp/tmpghlbl85y.jl:42\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpghlbl85y.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpghlbl85y.jl:35\\ntest set: Test Failed at /tmp/tmpghlbl85y.jl:43\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpghlbl85y.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpghlbl85y.jl:35\\ntest set: Test Failed at /tmp/tmpghlbl85y.jl:44\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpghlbl85y.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpghlbl85y.jl:35\\ntest set: Test Failed at /tmp/tmpghlbl85y.jl:45\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpghlbl85y.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpghlbl85y.jl:35\\ntest set: Test Failed at /tmp/tmpghlbl85y.jl:46\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpghlbl85y.jl:46\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpghlbl85y.jl:35\\ntest set: Test Failed at /tmp/tmpghlbl85y.jl:47\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpghlbl85y.jl:47\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpghlbl85y.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5l2m9plj.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp5l2m9plj.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5l2m9plj.jl:26\ntest set: Test Failed at /tmp/tmp5l2m9plj.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5l2m9plj.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5l2m9plj.jl:26\ntest set: Test Failed at /tmp/tmp5l2m9plj.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5l2m9plj.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5l2m9plj.jl:26\ntest set: Test Failed at /tmp/tmp5l2m9plj.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp5l2m9plj.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5l2m9plj.jl:26\ntest set: Test Failed at /tmp/tmp5l2m9plj.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5l2m9plj.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5l2m9plj.jl:26\ntest set: Test Failed at /tmp/tmp5l2m9plj.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5l2m9plj.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5l2m9plj.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5l2m9plj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxuos435_.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpxuos435_.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxuos435_.jl:26\ntest set: Test Failed at /tmp/tmpxuos435_.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxuos435_.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxuos435_.jl:26\ntest set: Test Failed at /tmp/tmpxuos435_.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxuos435_.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxuos435_.jl:26\ntest set: Test Failed at /tmp/tmpxuos435_.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpxuos435_.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxuos435_.jl:26\ntest set: Test Failed at /tmp/tmpxuos435_.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxuos435_.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxuos435_.jl:26\ntest set: Test Failed at /tmp/tmpxuos435_.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxuos435_.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxuos435_.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxuos435_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmparqj0h2p.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmparqj0h2p.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparqj0h2p.jl:26\ntest set: Test Failed at /tmp/tmparqj0h2p.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparqj0h2p.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparqj0h2p.jl:26\ntest set: Test Failed at /tmp/tmparqj0h2p.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmparqj0h2p.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparqj0h2p.jl:26\ntest set: Test Failed at /tmp/tmparqj0h2p.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmparqj0h2p.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparqj0h2p.jl:26\ntest set: Test Failed at /tmp/tmparqj0h2p.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparqj0h2p.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparqj0h2p.jl:26\ntest set: Test Failed at /tmp/tmparqj0h2p.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparqj0h2p.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparqj0h2p.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmparqj0h2p.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnpomfhl1.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnpomfhl1.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnpomfhl1.jl:31\ntest set: Test Failed at /tmp/tmpnpomfhl1.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnpomfhl1.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnpomfhl1.jl:31\ntest set: Test Failed at /tmp/tmpnpomfhl1.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnpomfhl1.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnpomfhl1.jl:31\ntest set: Test Failed at /tmp/tmpnpomfhl1.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnpomfhl1.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnpomfhl1.jl:31\ntest set: Test Failed at /tmp/tmpnpomfhl1.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnpomfhl1.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnpomfhl1.jl:31\ntest set: Test Failed at /tmp/tmpnpomfhl1.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnpomfhl1.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnpomfhl1.jl:31\ntest set: Test Failed at /tmp/tmpnpomfhl1.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpnpomfhl1.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnpomfhl1.jl:31\ntest set: Test Failed at /tmp/tmpnpomfhl1.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpnpomfhl1.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnpomfhl1.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnpomfhl1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy7w2ud3k.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpy7w2ud3k.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy7w2ud3k.jl:26\ntest set: Test Failed at /tmp/tmpy7w2ud3k.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7w2ud3k.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy7w2ud3k.jl:26\ntest set: Test Failed at /tmp/tmpy7w2ud3k.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy7w2ud3k.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy7w2ud3k.jl:26\ntest set: Test Failed at /tmp/tmpy7w2ud3k.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpy7w2ud3k.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy7w2ud3k.jl:26\ntest set: Test Failed at /tmp/tmpy7w2ud3k.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7w2ud3k.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy7w2ud3k.jl:26\ntest set: Test Failed at /tmp/tmpy7w2ud3k.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7w2ud3k.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy7w2ud3k.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy7w2ud3k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_kvqnmkb.jl:36\\n  Expression: candidate(\"\
    <<<><>>>>\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp_kvqnmkb.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_kvqnmkb.jl:31\\ntest set: Test Failed at /tmp/tmp_kvqnmkb.jl:37\\\
    n  Expression: candidate(\"><<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_kvqnmkb.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_kvqnmkb.jl:31\\ntest set: Test Failed at /tmp/tmp_kvqnmkb.jl:38\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_kvqnmkb.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_kvqnmkb.jl:31\\ntest set: Test Failed at /tmp/tmp_kvqnmkb.jl:39\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_kvqnmkb.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_kvqnmkb.jl:31\\ntest set: Test Failed at /tmp/tmp_kvqnmkb.jl:40\\\
    n  Expression: candidate(\">\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_kvqnmkb.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_kvqnmkb.jl:31\\ntest set: Test Failed at /tmp/tmp_kvqnmkb.jl:41\\\
    n  Expression: candidate(\"<<>\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_kvqnmkb.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_kvqnmkb.jl:31\\ntest set: Test Failed at /tmp/tmp_kvqnmkb.jl:42\\\
    n  Expression: candidate(\"<><><<><>><>><<>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_kvqnmkb.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_kvqnmkb.jl:31\\ntest set: Test Failed at /tmp/tmp_kvqnmkb.jl:43\\\
    n  Expression: candidate(\"<><><<><>><>>><>\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_kvqnmkb.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_kvqnmkb.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprq0po0ks.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmprq0po0ks.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprq0po0ks.jl:26\ntest set: Test Failed at /tmp/tmprq0po0ks.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprq0po0ks.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprq0po0ks.jl:26\ntest set: Test Failed at /tmp/tmprq0po0ks.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprq0po0ks.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprq0po0ks.jl:26\ntest set: Test Failed at /tmp/tmprq0po0ks.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmprq0po0ks.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprq0po0ks.jl:26\ntest set: Test Failed at /tmp/tmprq0po0ks.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprq0po0ks.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprq0po0ks.jl:26\ntest set: Test Failed at /tmp/tmprq0po0ks.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprq0po0ks.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprq0po0ks.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprq0po0ks.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmps8kujjjs.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmps8kujjjs.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps8kujjjs.jl:26\\ntest set: Test Failed at /tmp/tmps8kujjjs.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmps8kujjjs.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps8kujjjs.jl:26\\ntest set: Test Failed at /tmp/tmps8kujjjs.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmps8kujjjs.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps8kujjjs.jl:26\\ntest set: Test Failed at /tmp/tmps8kujjjs.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmps8kujjjs.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps8kujjjs.jl:26\\ntest set: Test Failed at /tmp/tmps8kujjjs.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmps8kujjjs.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps8kujjjs.jl:26\\ntest set: Test Failed at /tmp/tmps8kujjjs.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmps8kujjjs.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps8kujjjs.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0aifmftb.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp0aifmftb.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0aifmftb.jl:26\ntest set: Test Failed at /tmp/tmp0aifmftb.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0aifmftb.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0aifmftb.jl:26\ntest set: Test Failed at /tmp/tmp0aifmftb.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0aifmftb.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0aifmftb.jl:26\ntest set: Test Failed at /tmp/tmp0aifmftb.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp0aifmftb.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0aifmftb.jl:26\ntest set: Test Failed at /tmp/tmp0aifmftb.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0aifmftb.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0aifmftb.jl:26\ntest set: Test Failed at /tmp/tmp0aifmftb.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0aifmftb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0aifmftb.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0aifmftb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkfbahj0o.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpkfbahj0o.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfbahj0o.jl:26\ntest set: Test Failed at /tmp/tmpkfbahj0o.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkfbahj0o.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfbahj0o.jl:26\ntest set: Test Failed at /tmp/tmpkfbahj0o.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkfbahj0o.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfbahj0o.jl:26\ntest set: Test Failed at /tmp/tmpkfbahj0o.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpkfbahj0o.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfbahj0o.jl:26\ntest set: Test Failed at /tmp/tmpkfbahj0o.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkfbahj0o.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfbahj0o.jl:26\ntest set: Test Failed at /tmp/tmpkfbahj0o.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkfbahj0o.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfbahj0o.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkfbahj0o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpy92o39l7.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpy92o39l7.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy92o39l7.jl:26\\ntest set: Test Failed at /tmp/tmpy92o39l7.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpy92o39l7.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy92o39l7.jl:26\\ntest set: Test Failed at /tmp/tmpy92o39l7.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpy92o39l7.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy92o39l7.jl:26\\ntest set: Test Failed at /tmp/tmpy92o39l7.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpy92o39l7.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy92o39l7.jl:26\\ntest set: Test Failed at /tmp/tmpy92o39l7.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpy92o39l7.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy92o39l7.jl:26\\ntest set: Test Failed at /tmp/tmpy92o39l7.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpy92o39l7.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy92o39l7.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_n0eifg.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpi_n0eifg.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_n0eifg.jl:26\ntest set: Test Failed at /tmp/tmpi_n0eifg.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_n0eifg.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_n0eifg.jl:26\ntest set: Test Failed at /tmp/tmpi_n0eifg.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi_n0eifg.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_n0eifg.jl:26\ntest set: Test Failed at /tmp/tmpi_n0eifg.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpi_n0eifg.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_n0eifg.jl:26\ntest set: Test Failed at /tmp/tmpi_n0eifg.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_n0eifg.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_n0eifg.jl:26\ntest set: Test Failed at /tmp/tmpi_n0eifg.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_n0eifg.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_n0eifg.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_n0eifg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxnwzsk7p.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpxnwzsk7p.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxnwzsk7p.jl:26\\ntest set: Test Failed at /tmp/tmpxnwzsk7p.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxnwzsk7p.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxnwzsk7p.jl:26\\ntest set: Test Failed at /tmp/tmpxnwzsk7p.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpxnwzsk7p.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxnwzsk7p.jl:26\\ntest set: Test Failed at /tmp/tmpxnwzsk7p.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxnwzsk7p.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxnwzsk7p.jl:26\\ntest set: Test Failed at /tmp/tmpxnwzsk7p.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxnwzsk7p.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxnwzsk7p.jl:26\\ntest set: Test Failed at /tmp/tmpxnwzsk7p.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxnwzsk7p.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxnwzsk7p.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ok1meqy.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7ok1meqy.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7ok1meqy.jl:31\ntest set: Test Failed at /tmp/tmp7ok1meqy.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ok1meqy.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7ok1meqy.jl:31\ntest set: Test Failed at /tmp/tmp7ok1meqy.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ok1meqy.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7ok1meqy.jl:31\ntest set: Test Failed at /tmp/tmp7ok1meqy.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ok1meqy.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7ok1meqy.jl:31\ntest set: Test Failed at /tmp/tmp7ok1meqy.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ok1meqy.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7ok1meqy.jl:31\ntest set: Test Failed at /tmp/tmp7ok1meqy.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ok1meqy.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7ok1meqy.jl:31\ntest set: Test Failed at /tmp/tmp7ok1meqy.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp7ok1meqy.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7ok1meqy.jl:31\ntest set: Test Failed at /tmp/tmp7ok1meqy.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp7ok1meqy.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7ok1meqy.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ok1meqy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi_dv_lmt.jl:32\\n  Expression: candidate(\"\
    <<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpi_dv_lmt.jl:32\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_dv_lmt.jl:30\\ntest set: Test Failed at /tmp/tmpi_dv_lmt.jl:33\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpi_dv_lmt.jl:33\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_dv_lmt.jl:30\\ntest set: Test Failed at /tmp/tmpi_dv_lmt.jl:34\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi_dv_lmt.jl:34\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_dv_lmt.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpb9yy13mm.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpb9yy13mm.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb9yy13mm.jl:26\\ntest set: Test Failed at /tmp/tmpb9yy13mm.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpb9yy13mm.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb9yy13mm.jl:26\\ntest set: Test Failed at /tmp/tmpb9yy13mm.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpb9yy13mm.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb9yy13mm.jl:26\\ntest set: Test Failed at /tmp/tmpb9yy13mm.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpb9yy13mm.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb9yy13mm.jl:26\\ntest set: Test Failed at /tmp/tmpb9yy13mm.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpb9yy13mm.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb9yy13mm.jl:26\\ntest set: Test Failed at /tmp/tmpb9yy13mm.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpb9yy13mm.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb9yy13mm.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn5waw1_w.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpn5waw1_w.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn5waw1_w.jl:26\ntest set: Test Failed at /tmp/tmpn5waw1_w.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn5waw1_w.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn5waw1_w.jl:26\ntest set: Test Failed at /tmp/tmpn5waw1_w.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn5waw1_w.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn5waw1_w.jl:26\ntest set: Test Failed at /tmp/tmpn5waw1_w.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpn5waw1_w.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn5waw1_w.jl:26\ntest set: Test Failed at /tmp/tmpn5waw1_w.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn5waw1_w.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn5waw1_w.jl:26\ntest set: Test Failed at /tmp/tmpn5waw1_w.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn5waw1_w.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn5waw1_w.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5waw1_w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    else\n        if brackets[1] == \"<\"\n            if brackets[end]\
    \ == \">\"\n                return correct_bracketing(brackets[2:end-1])\n   \
    \         else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpni91t2ji.jl:35\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpni91t2ji.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpni91t2ji.jl:34\\ntest set: Test Failed at /tmp/tmpni91t2ji.jl:36\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpni91t2ji.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpni91t2ji.jl:34\\ntest set: Test Failed at /tmp/tmpni91t2ji.jl:37\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpni91t2ji.jl:37\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpni91t2ji.jl:34\\ntest set: Test Failed at /tmp/tmpni91t2ji.jl:38\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpni91t2ji.jl:38\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpni91t2ji.jl:34\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     4     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for b\
    \ in brackets\n        if b == '<'\n            n += 1\n        elseif b == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzmkjwp8l.jl:27\\n  Expression: candidate(\"\
    <>\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpzmkjwp8l.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzmkjwp8l.jl:26\\ntest set: Test Failed at /tmp/tmpzmkjwp8l.jl:28\\\
    n  Expression: candidate(\"<<><>>\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzmkjwp8l.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzmkjwp8l.jl:26\\ntest set: Test Failed at /tmp/tmpzmkjwp8l.jl:29\\\
    n  Expression: candidate(\"<><><<><>><>\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpzmkjwp8l.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzmkjwp8l.jl:26\\ntest set: Test Failed at /tmp/tmpzmkjwp8l.jl:30\\\
    n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzmkjwp8l.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzmkjwp8l.jl:26\\ntest set: Test Failed at /tmp/tmpzmkjwp8l.jl:33\\\
    n  Expression: candidate(\"<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzmkjwp8l.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzmkjwp8l.jl:26\\ntest set: Test Failed at /tmp/tmpzmkjwp8l.jl:34\\\
    n  Expression: candidate(\"<<<<\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzmkjwp8l.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzmkjwp8l.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphav06b4_.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmphav06b4_.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphav06b4_.jl:26\ntest set: Test Failed at /tmp/tmphav06b4_.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphav06b4_.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphav06b4_.jl:26\ntest set: Test Failed at /tmp/tmphav06b4_.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphav06b4_.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphav06b4_.jl:26\ntest set: Test Failed at /tmp/tmphav06b4_.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmphav06b4_.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphav06b4_.jl:26\ntest set: Test Failed at /tmp/tmphav06b4_.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphav06b4_.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphav06b4_.jl:26\ntest set: Test Failed at /tmp/tmphav06b4_.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphav06b4_.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphav06b4_.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphav06b4_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkwypxanl.jl:26\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkwypxanl.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkwypxanl.jl:21\ntest set: Test Failed at /tmp/tmpkwypxanl.jl:27\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkwypxanl.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkwypxanl.jl:21\ntest set: Test Failed at /tmp/tmpkwypxanl.jl:28\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkwypxanl.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkwypxanl.jl:21\ntest set: Test Failed at /tmp/tmpkwypxanl.jl:29\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkwypxanl.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkwypxanl.jl:21\ntest set: Test Failed at /tmp/tmpkwypxanl.jl:30\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkwypxanl.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkwypxanl.jl:21\ntest set: Test Failed at /tmp/tmpkwypxanl.jl:31\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkwypxanl.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkwypxanl.jl:21\ntest set: Test Failed at /tmp/tmpkwypxanl.jl:32\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpkwypxanl.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkwypxanl.jl:21\ntest set: Test Failed at /tmp/tmpkwypxanl.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpkwypxanl.jl:33\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkwypxanl.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkwypxanl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps3vrir2l.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmps3vrir2l.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps3vrir2l.jl:30\ntest set: Test Failed at /tmp/tmps3vrir2l.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps3vrir2l.jl:33\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps3vrir2l.jl:30\ntest set: Test Failed at /tmp/tmps3vrir2l.jl:34\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmps3vrir2l.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps3vrir2l.jl:30\ntest set: Test Failed at /tmp/tmps3vrir2l.jl:40\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps3vrir2l.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps3vrir2l.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps3vrir2l.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[end]\
    \ == '<'\n        return false\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqf1nzcap.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpqf1nzcap.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqf1nzcap.jl:30\ntest set: Test Failed at /tmp/tmpqf1nzcap.jl:33\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqf1nzcap.jl:33\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqf1nzcap.jl:30\ntest set: Test Failed at /tmp/tmpqf1nzcap.jl:34\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpqf1nzcap.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqf1nzcap.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqf1nzcap.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ Stack()\n    for bracket in brackets\n        if bracket == \"<\"\n        \
    \    push!(bracket_stack, bracket)\n        elseif bracket == \">\"\n        \
    \    if isempty(bracket_stack)\n                return false\n            else\n\
    \                pop!(bracket_stack)\n            end\n        end\n    end\n\
    \    return isempty(bracket_stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp10fn8str.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(::String) at /tmp/tmp10fn8str.jl:14\n\
    \   [2] top-level scope at /tmp/tmp10fn8str.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    <<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp10fn8str.jl:14\n   [2] top-level scope at /tmp/tmp10fn8str.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    <><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n \
    \  [1] correct_bracketing(::String) at /tmp/tmp10fn8str.jl:14\n   [2] top-level\
    \ scope at /tmp/tmp10fn8str.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(::String) at /tmp/tmp10fn8str.jl:14\n   [2] top-level\
    \ scope at /tmp/tmp10fn8str.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n   [1]\
    \ correct_bracketing(::String) at /tmp/tmp10fn8str.jl:14\n   [2] top-level scope\
    \ at /tmp/tmp10fn8str.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    ><<>\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp10fn8str.jl:14\n   [2] top-level scope at /tmp/tmp10fn8str.jl:38\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    <\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp10fn8str.jl:14\n   [2] top-level scope at /tmp/tmp10fn8str.jl:39\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    <<<<\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp10fn8str.jl:14\n   [2] top-level scope at /tmp/tmp10fn8str.jl:40\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    >\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp10fn8str.jl:14\n   [2] top-level scope at /tmp/tmp10fn8str.jl:41\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:42\n  Test threw exception\n  Expression: candidate(\"\
    <<>\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp10fn8str.jl:14\n   [2] top-level scope at /tmp/tmp10fn8str.jl:42\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:43\n  Test threw exception\n  Expression: candidate(\"\
    <><><<><>><>><<>\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(::String) at /tmp/tmp10fn8str.jl:14\n   [2] top-level\
    \ scope at /tmp/tmp10fn8str.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp10fn8str.jl:44\n  Test threw exception\n  Expression: candidate(\"\
    <><><<><>><>>><>\") == false\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(::String) at /tmp/tmp10fn8str.jl:14\n   [2] top-level\
    \ scope at /tmp/tmp10fn8str.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp10fn8str.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |    12     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp10fn8str.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjzf4e8um.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjzf4e8um.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjzf4e8um.jl:28\ntest set: Test Failed at /tmp/tmpjzf4e8um.jl:34\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjzf4e8um.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjzf4e8um.jl:28\ntest set: Test Failed at /tmp/tmpjzf4e8um.jl:35\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjzf4e8um.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjzf4e8um.jl:28\ntest set: Test Failed at /tmp/tmpjzf4e8um.jl:36\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjzf4e8um.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjzf4e8um.jl:28\ntest set: Test Failed at /tmp/tmpjzf4e8um.jl:37\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjzf4e8um.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjzf4e8um.jl:28\ntest set: Test Failed at /tmp/tmpjzf4e8um.jl:38\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjzf4e8um.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjzf4e8um.jl:28\ntest set: Test Failed at /tmp/tmpjzf4e8um.jl:39\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpjzf4e8um.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjzf4e8um.jl:28\ntest set: Test Failed at /tmp/tmpjzf4e8um.jl:40\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpjzf4e8um.jl:40\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjzf4e8um.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzf4e8um.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoqesxm_f.jl:22\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpoqesxm_f.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqesxm_f.jl:21\ntest set: Test Failed at /tmp/tmpoqesxm_f.jl:23\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoqesxm_f.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqesxm_f.jl:21\ntest set: Test Failed at /tmp/tmpoqesxm_f.jl:24\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoqesxm_f.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqesxm_f.jl:21\ntest set: Test Failed at /tmp/tmpoqesxm_f.jl:25\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpoqesxm_f.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqesxm_f.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoqesxm_f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[end]\
    \ == '<'\n        return false\n    elseif brackets[end] == '>'\n        return\
    \ correct_bracketing(brackets[1:end-1])\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb6er367a.jl:35\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpb6er367a.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb6er367a.jl:34\ntest set: Test Failed at /tmp/tmpb6er367a.jl:36\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb6er367a.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb6er367a.jl:34\ntest set: Test Failed at /tmp/tmpb6er367a.jl:37\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb6er367a.jl:37\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb6er367a.jl:34\ntest set: Test Failed at /tmp/tmpb6er367a.jl:38\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpb6er367a.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb6er367a.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb6er367a.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpec68lt_4.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpec68lt_4.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpec68lt_4.jl:26\ntest set: Test Failed at /tmp/tmpec68lt_4.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpec68lt_4.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpec68lt_4.jl:26\ntest set: Test Failed at /tmp/tmpec68lt_4.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpec68lt_4.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpec68lt_4.jl:26\ntest set: Test Failed at /tmp/tmpec68lt_4.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpec68lt_4.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpec68lt_4.jl:26\ntest set: Test Failed at /tmp/tmpec68lt_4.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpec68lt_4.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpec68lt_4.jl:26\ntest set: Test Failed at /tmp/tmpec68lt_4.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpec68lt_4.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpec68lt_4.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpec68lt_4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpulto9z9p.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpulto9z9p.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulto9z9p.jl:31\ntest set: Test Failed at /tmp/tmpulto9z9p.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpulto9z9p.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulto9z9p.jl:31\ntest set: Test Failed at /tmp/tmpulto9z9p.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpulto9z9p.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulto9z9p.jl:31\ntest set: Test Failed at /tmp/tmpulto9z9p.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpulto9z9p.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulto9z9p.jl:31\ntest set: Test Failed at /tmp/tmpulto9z9p.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpulto9z9p.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulto9z9p.jl:31\ntest set: Test Failed at /tmp/tmpulto9z9p.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpulto9z9p.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulto9z9p.jl:31\ntest set: Test Failed at /tmp/tmpulto9z9p.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpulto9z9p.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulto9z9p.jl:31\ntest set: Test Failed at /tmp/tmpulto9z9p.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpulto9z9p.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulto9z9p.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpulto9z9p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp38c2hecm.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp38c2hecm.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38c2hecm.jl:26\ntest set: Test Failed at /tmp/tmp38c2hecm.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp38c2hecm.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38c2hecm.jl:26\ntest set: Test Failed at /tmp/tmp38c2hecm.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp38c2hecm.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38c2hecm.jl:26\ntest set: Test Failed at /tmp/tmp38c2hecm.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp38c2hecm.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38c2hecm.jl:26\ntest set: Test Failed at /tmp/tmp38c2hecm.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp38c2hecm.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38c2hecm.jl:26\ntest set: Test Failed at /tmp/tmp38c2hecm.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp38c2hecm.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38c2hecm.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp38c2hecm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            bracket_count\
    \ += 1\n        elseif bracket == '>'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == \"<\"\n            push!(stack, i)\n    \
    \    elseif i == \">\"\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnx0adce9.jl:37\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnx0adce9.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnx0adce9.jl:32\ntest set: Test Failed at /tmp/tmpnx0adce9.jl:38\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnx0adce9.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnx0adce9.jl:32\ntest set: Test Failed at /tmp/tmpnx0adce9.jl:39\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnx0adce9.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnx0adce9.jl:32\ntest set: Test Failed at /tmp/tmpnx0adce9.jl:40\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnx0adce9.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnx0adce9.jl:32\ntest set: Test Failed at /tmp/tmpnx0adce9.jl:41\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnx0adce9.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnx0adce9.jl:32\ntest set: Test Failed at /tmp/tmpnx0adce9.jl:42\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnx0adce9.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnx0adce9.jl:32\ntest set: Test Failed at /tmp/tmpnx0adce9.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpnx0adce9.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnx0adce9.jl:32\ntest set: Test Failed at /tmp/tmpnx0adce9.jl:44\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpnx0adce9.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnx0adce9.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnx0adce9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left_bracket_count\
    \ = 0\n    right_bracket_count = 0\n    for bracket in brackets\n        if bracket\
    \ == \"<\"\n            left_bracket_count += 1\n        elseif bracket == \"\
    >\"\n            right_bracket_count += 1\n        end\n    end\n    return left_bracket_count\
    \ == right_bracket_count\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbcmz71bx.jl:34\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbcmz71bx.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcmz71bx.jl:29\ntest set: Test Failed at /tmp/tmpbcmz71bx.jl:35\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbcmz71bx.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcmz71bx.jl:29\ntest set: Test Failed at /tmp/tmpbcmz71bx.jl:36\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbcmz71bx.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcmz71bx.jl:29\ntest set: Test Failed at /tmp/tmpbcmz71bx.jl:37\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbcmz71bx.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcmz71bx.jl:29\ntest set: Test Failed at /tmp/tmpbcmz71bx.jl:38\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbcmz71bx.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcmz71bx.jl:29\ntest set: Test Failed at /tmp/tmpbcmz71bx.jl:39\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbcmz71bx.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcmz71bx.jl:29\ntest set: Test Failed at /tmp/tmpbcmz71bx.jl:40\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpbcmz71bx.jl:40\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcmz71bx.jl:29\ntest set: Test Failed at /tmp/tmpbcmz71bx.jl:41\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpbcmz71bx.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcmz71bx.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcmz71bx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"<\"\n            count += 1\n        elseif\
    \ i == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjwgtmwz8.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjwgtmwz8.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjwgtmwz8.jl:31\ntest set: Test Failed at /tmp/tmpjwgtmwz8.jl:37\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjwgtmwz8.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjwgtmwz8.jl:31\ntest set: Test Failed at /tmp/tmpjwgtmwz8.jl:38\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjwgtmwz8.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjwgtmwz8.jl:31\ntest set: Test Failed at /tmp/tmpjwgtmwz8.jl:39\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjwgtmwz8.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjwgtmwz8.jl:31\ntest set: Test Failed at /tmp/tmpjwgtmwz8.jl:40\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjwgtmwz8.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjwgtmwz8.jl:31\ntest set: Test Failed at /tmp/tmpjwgtmwz8.jl:41\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjwgtmwz8.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjwgtmwz8.jl:31\ntest set: Test Failed at /tmp/tmpjwgtmwz8.jl:42\n\
    \  Expression: candidate(\"<><><<><>><>><<>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpjwgtmwz8.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjwgtmwz8.jl:31\ntest set: Test Failed at /tmp/tmpjwgtmwz8.jl:43\n\
    \  Expression: candidate(\"<><><<><>><>>><>\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpjwgtmwz8.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjwgtmwz8.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjwgtmwz8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6wd5a399.jl:36\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6wd5a399.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6wd5a399.jl:34\ntest set: Test Failed at /tmp/tmp6wd5a399.jl:37\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6wd5a399.jl:37\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6wd5a399.jl:34\ntest set: Test Failed at /tmp/tmp6wd5a399.jl:38\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp6wd5a399.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6wd5a399.jl:34\ntest set: Test Failed at /tmp/tmp6wd5a399.jl:44\n\
    \  Expression: candidate(\"<<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6wd5a399.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6wd5a399.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6wd5a399.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n % 2 != 0\n        return\
    \ false\n    end\n    if brackets[1] == \">\"\n        return false\n    end\n\
    \    if brackets[n] == \"<\"\n        return false\n    end\n    i = 1\n    while\
    \ i < n\n        if brackets[i] == \"<\"\n            if brackets[i+1] == \">\"\
    \n                brackets = brackets[1:i-1] * brackets[i+2:n]\n             \
    \   n = length(brackets)\n                i = 1\n            else\n          \
    \      i += 1\n            end\n        else\n            i += 1\n        end\n\
    \    end\n    if length(brackets) == 0\n        return true\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy5ymuczs.jl:52\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpy5ymuczs.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5ymuczs.jl:51\ntest set: Test Failed at /tmp/tmpy5ymuczs.jl:53\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy5ymuczs.jl:53\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5ymuczs.jl:51\ntest set: Test Failed at /tmp/tmpy5ymuczs.jl:54\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy5ymuczs.jl:54\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5ymuczs.jl:51\ntest set: Test Failed at /tmp/tmpy5ymuczs.jl:55\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpy5ymuczs.jl:55\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5ymuczs.jl:51\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5ymuczs.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn9kqn7pw.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpn9kqn7pw.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9kqn7pw.jl:26\ntest set: Test Failed at /tmp/tmpn9kqn7pw.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn9kqn7pw.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9kqn7pw.jl:26\ntest set: Test Failed at /tmp/tmpn9kqn7pw.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn9kqn7pw.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9kqn7pw.jl:26\ntest set: Test Failed at /tmp/tmpn9kqn7pw.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpn9kqn7pw.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9kqn7pw.jl:26\ntest set: Test Failed at /tmp/tmpn9kqn7pw.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn9kqn7pw.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9kqn7pw.jl:26\ntest set: Test Failed at /tmp/tmpn9kqn7pw.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn9kqn7pw.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9kqn7pw.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn9kqn7pw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2nqu0ne3.jl:27\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp2nqu0ne3.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2nqu0ne3.jl:26\ntest set: Test Failed at /tmp/tmp2nqu0ne3.jl:28\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2nqu0ne3.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2nqu0ne3.jl:26\ntest set: Test Failed at /tmp/tmp2nqu0ne3.jl:29\n\
    \  Expression: candidate(\"<><><<><>><>\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2nqu0ne3.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2nqu0ne3.jl:26\ntest set: Test Failed at /tmp/tmp2nqu0ne3.jl:30\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp2nqu0ne3.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2nqu0ne3.jl:26\ntest set: Test Failed at /tmp/tmp2nqu0ne3.jl:33\n\
    \  Expression: candidate(\"<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2nqu0ne3.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2nqu0ne3.jl:26\ntest set: Test Failed at /tmp/tmp2nqu0ne3.jl:34\n\
    \  Expression: candidate(\"<<<<\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2nqu0ne3.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2nqu0ne3.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nqu0ne3.jl:24\n"
  exit_code: 1
  status: SyntaxError
