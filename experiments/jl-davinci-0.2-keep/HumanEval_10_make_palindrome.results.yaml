name: HumanEval_10_make_palindrome
language: julia
results:
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    if string == reverse(string)\n\
    \        return string\n    end\n    # Find the longest palindromic suffix\n \
    \   suffix = \"\"\n    for i in 1:length(string)\n        if string[end-i+1:end]\
    \ == reverse(string[1:i])\n            suffix = string[end-i+1:end]\n        end\n\
    \    end\n    # Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4bwp1r88.jl:36\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4bwp1r88.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4bwp1r88.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4bwp1r88.jl:38\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4bwp1r88.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4bwp1r88.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4bwp1r88.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix of supplied string that is a palindrome.\n   \
    \ # The longest postfix that is a palindrome is the longest prefix that is a palindrome.\n\
    \    # The longest prefix that is a palindrome is the longest suffix that is a\
    \ palindrome.\n    # The longest suffix that is a palindrome is the longest postfix\
    \ that is a palindrome.\n    # The longest postfix that is a palindrome is the\
    \ longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome\
    \ is the longest suffix that is a palindrome.\n    # The longest suffix that is\
    \ a palindrome is the longest postfix that is a palindrome.\n    # The longest\
    \ postfix that is a palindrome is the longest prefix that is a palindrome.\n \
    \   # The longest prefix that is a palindrome is the longest suffix that is a\
    \ palindrome.\n    # The longest suffix that is a palindrome is the longest postfix\
    \ that is a palindrome.\n    # The longest postfix that is a palindrome is the\
    \ longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome\
    \ is the longest suffix that is a palindrome.\n    # The longest suffix that is\
    \ a palindrome is the longest postfix that is a palindrome.\n    # The longest\
    \ postfix that is a palindrome is the longest prefix that is a palindrome.\n \
    \   # The longest prefix that is a palindrome is the longest suffix that is a\
    \ palindrome.\n    # The longest suffix that is a palindrome is the longest postfix\
    \ that is a palindrome.\n    # The longest postfix that is a palindrome is the\
    \ longest prefix that is a palindrome.\n    # The longest prefix that is a palindrome\
    \ is the longest suffix that is a palindrome.\n    # The longest suffix that is\
    \ a palindrome is the longest postfix that is a palindrome.\n    # The longest\
    \ postfix that is a palindrome is the longest prefix that is a palindrome.\n \
    \   # The longest prefix that is a palindrome is the longest suffix that is a\
    \ palindrome.\n    # The longest suffix that is a palindrome is the longest postfix\
    \ that is a pal\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc61o5d27.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc61o5d27.jl:1\n\
    in expression starting at /tmp/tmpc61o5d27.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string\n    palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    # Reverse the string prefix that comes before the palindromic suffix\n  \
    \  string_prefix = reverse(string[1:end-length(palindrome_suffix)])\n    # Append\
    \ the reversed prefix to the end of the string\n    return string * string_prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgnedr28q.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgnedr28q.jl:17\n   [2] macro expansion\n     @ /tmp/tmpgnedr28q.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgnedr28q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgnedr28q.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgnedr28q.jl:17\n   [2] macro expansion\n     @ /tmp/tmpgnedr28q.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgnedr28q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgnedr28q.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgnedr28q.jl:17\n   [2] macro expansion\n     @ /tmp/tmpgnedr28q.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgnedr28q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgnedr28q.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgnedr28q.jl:17\n   [2] macro expansion\n     @ /tmp/tmpgnedr28q.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgnedr28q.jl:27\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgnedr28q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # This is the same as finding the longest palindromic\
    \ prefix of the string reversed.\n    longest_palindromic_suffix = longest_palindromic_prefix(reverse(string))\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string * reverse(string[1:end-length(longest_palindromic_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz1cuczi6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz1cuczi6.jl:18\n   [2] macro expansion\n     @ /tmp/tmpz1cuczi6.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz1cuczi6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpz1cuczi6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz1cuczi6.jl:18\n   [2] macro expansion\n     @ /tmp/tmpz1cuczi6.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz1cuczi6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpz1cuczi6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_prefix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz1cuczi6.jl:18\n   [2] macro expansion\n     @ /tmp/tmpz1cuczi6.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz1cuczi6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpz1cuczi6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz1cuczi6.jl:18\n   [2] macro expansion\n     @ /tmp/tmpz1cuczi6.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz1cuczi6.jl:26\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1cuczi6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2nx0f2t7.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2nx0f2t7.jl:16\n   [2] macro expansion\n     @ /tmp/tmp2nx0f2t7.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2nx0f2t7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2nx0f2t7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2nx0f2t7.jl:16\n   [2] macro expansion\n     @ /tmp/tmp2nx0f2t7.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2nx0f2t7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2nx0f2t7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2nx0f2t7.jl:16\n   [2] macro expansion\n     @ /tmp/tmp2nx0f2t7.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2nx0f2t7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2nx0f2t7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2nx0f2t7.jl:16\n   [2] macro expansion\n     @ /tmp/tmp2nx0f2t7.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2nx0f"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nx0f2t7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix\n    for i in 1:length(string)\n  \
    \      if is_palindrome(string[end-i+1:end])\n            return string * reverse(string[1:end-i+1])\n\
    \        end\n    end\n    # If no palindromic suffix found, return the string\
    \ itself\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp689wjlx6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp689wjlx6.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmp689wjlx6.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp689wjlx6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp689wjlx6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp689wjlx6.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmp689wjlx6.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp689wjlx6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp689wjlx6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp689wjlx6.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmp689wjlx6.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp689wjlx6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp689wjlx6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp689wjlx6.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmp689wjlx6.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp689wjlx6.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp689wjlx6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3nqyxmdr.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3nqyxmdr.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3nqyxmdr.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3nqyxmdr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3nqyxmdr.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3nqyxmdr.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3nqyxmdr.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3nqyxmdr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3nqyxmdr.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3nqyxmdr.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3nqyxmdr.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3nqyxmdr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3nqyxmdr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3nqyxmdr.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3nqyxmdr.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3nqyx"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nqyxmdr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    for i in 1:length(string)\n        if is_palindrome(string[end-i+1:end])\n\
    \            return string * reverse(string[1:end-i])\n        end\n    end\n\
    \    # If no postfix is a palindrome, the whole string is a palindrome.\n    return\
    \ string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprh0mfe_t.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprh0mfe_t.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmprh0mfe_t.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprh0mfe_t.jl:29\ntest set:\
    \ Error During Test at /tmp/tmprh0mfe_t.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprh0mfe_t.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmprh0mfe_t.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprh0mfe_t.jl:29\ntest set:\
    \ Error During Test at /tmp/tmprh0mfe_t.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprh0mfe_t.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmprh0mfe_t.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprh0mfe_t.jl:29\ntest set:\
    \ Error During Test at /tmp/tmprh0mfe_t.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmprh0mfe_t.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmprh0mfe_t.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprh0mfe_t.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprh0mfe_t.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    # This is done by finding the longest common prefix\
    \ and suffix of the string.\n    # This can be done in O(n) time by using Z-algorithm.\n\
    \    # https://en.wikipedia.org/wiki/Z-algorithm\n    # https://www.youtube.com/watch?v=CpZh4eF8QBw\n\
    \    z_array = z_algorithm(string)\n    # Find the longest palindromic suffix.\n\
    \    longest_palindromic_suffix = find_longest_palindromic_suffix(z_array)\n \
    \   # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string * string[1:longest_palindromic_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmbia_a30.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmbia_a30.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpmbia_a30.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmbia_a30.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpmbia_a30.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmbia_a30.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpmbia_a30.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmbia_a30.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpmbia_a30.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: z_algorithm not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmbia_a30.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpmbia_a30.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmbia_a30.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpmbia_a30.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmbia_a30.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpmbia_a30.jl:36 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmbia_a30.jl:31\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      4    "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmbia_a30.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4lpgi3su.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4lpgi3su.jl:16\n   [2] macro expansion\n     @ /tmp/tmp4lpgi3su.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4lpgi3su.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4lpgi3su.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4lpgi3su.jl:16\n   [2] macro expansion\n     @ /tmp/tmp4lpgi3su.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4lpgi3su.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4lpgi3su.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4lpgi3su.jl:16\n   [2] macro expansion\n     @ /tmp/tmp4lpgi3su.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4lpgi3su.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4lpgi3su.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4lpgi3su.jl:16\n   [2] macro expansion\n     @ /tmp/tmp4lpgi3su.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4lpgi"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4lpgi3su.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgbovvhrc.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgbovvhrc.jl:16\n   [2] macro expansion\n     @ /tmp/tmpgbovvhrc.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgbovvhrc.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpgbovvhrc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgbovvhrc.jl:16\n   [2] macro expansion\n     @ /tmp/tmpgbovvhrc.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgbovvhrc.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpgbovvhrc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgbovvhrc.jl:16\n   [2] macro expansion\n     @ /tmp/tmpgbovvhrc.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgbovvhrc.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpgbovvhrc.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgbovvhrc.jl:16\n   [2] macro expansion\n     @ /tmp/tmpgbovvhrc.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgbovv"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbovvhrc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # find the longest palindromic suffix\n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \    # reverse the prefix that comes before the palindromic suffix\n    prefix_to_append\
    \ = reverse(string[1:end-length(longest_palindromic_suffix)])\n    # append the\
    \ reversed prefix to the end of the string\n    return string * prefix_to_append\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbuy2is3z.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbuy2is3z.jl:14\n   [2] macro expansion\n     @ /tmp/tmpbuy2is3z.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbuy2is3z.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbuy2is3z.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbuy2is3z.jl:14\n   [2] macro expansion\n     @ /tmp/tmpbuy2is3z.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbuy2is3z.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbuy2is3z.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbuy2is3z.jl:14\n   [2] macro expansion\n     @ /tmp/tmpbuy2is3z.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbuy2is3z.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbuy2is3z.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbuy2is3z.jl:14\n   [2] macro expansion\n     @ /tmp/tmpbuy2is3z.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbuy2is3z.jl:24\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbuy2is3z.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp49rdjaax.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp49rdjaax.jl:16\n   [2] macro expansion\n     @ /tmp/tmp49rdjaax.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp49rdjaax.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp49rdjaax.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp49rdjaax.jl:16\n   [2] macro expansion\n     @ /tmp/tmp49rdjaax.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp49rdjaax.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp49rdjaax.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp49rdjaax.jl:16\n   [2] macro expansion\n     @ /tmp/tmp49rdjaax.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp49rdjaax.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp49rdjaax.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp49rdjaax.jl:16\n   [2] macro expansion\n     @ /tmp/tmp49rdjaax.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp49rdj"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49rdjaax.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbwtmtts_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbwtmtts_.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbwtmtts_.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbwtmtts_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbwtmtts_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbwtmtts_.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbwtmtts_.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbwtmtts_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbwtmtts_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbwtmtts_.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbwtmtts_.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbwtmtts_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbwtmtts_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbwtmtts_.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbwtmtts_.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbwtmt"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwtmtts_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcalan3w9.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcalan3w9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpcalan3w9.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcalan3w9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcalan3w9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcalan3w9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpcalan3w9.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcalan3w9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcalan3w9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcalan3w9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpcalan3w9.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcalan3w9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcalan3w9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcalan3w9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpcalan3w9.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcalan3w9.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcalan3w9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk4zzjeu9.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk4zzjeu9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpk4zzjeu9.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk4zzjeu9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpk4zzjeu9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk4zzjeu9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpk4zzjeu9.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk4zzjeu9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpk4zzjeu9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk4zzjeu9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpk4zzjeu9.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk4zzjeu9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpk4zzjeu9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk4zzjeu9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpk4zzjeu9.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk4zzj"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4zzjeu9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjpt_pn27.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjpt_pn27.jl:16\n   [2] macro expansion\n     @ /tmp/tmpjpt_pn27.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjpt_pn27.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjpt_pn27.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjpt_pn27.jl:16\n   [2] macro expansion\n     @ /tmp/tmpjpt_pn27.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjpt_pn27.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjpt_pn27.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjpt_pn27.jl:16\n   [2] macro expansion\n     @ /tmp/tmpjpt_pn27.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjpt_pn27.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjpt_pn27.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjpt_pn27.jl:16\n   [2] macro expansion\n     @ /tmp/tmpjpt_pn27.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjpt_p"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjpt_pn27.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt6ah7vim.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt6ah7vim.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt6ah7vim.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt6ah7vim.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt6ah7vim.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt6ah7vim.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt6ah7vim.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt6ah7vim.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt6ah7vim.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt6ah7vim.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt6ah7vim.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt6ah7vim.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt6ah7vim.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt6ah7vim.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt6ah7vim.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt6ah7vim.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt6ah7vim.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    len = length(string)\n    for i in 1:len\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\n  \
    \  return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppv5smouz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppv5smouz.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmppv5smouz.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppv5smouz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmppv5smouz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppv5smouz.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmppv5smouz.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppv5smouz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmppv5smouz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppv5smouz.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmppv5smouz.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppv5smouz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmppv5smouz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmppv5smouz.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmppv5smouz.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppv5smouz.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppv5smouz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1is3m10n.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1is3m10n.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1is3m10n.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1is3m10n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1is3m10n.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1is3m10n.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1is3m10n.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1is3m10n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1is3m10n.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1is3m10n.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1is3m10n.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1is3m10n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1is3m10n.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1is3m10n.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1is3m10n.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1is3m"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1is3m10n.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprb9aa900.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprb9aa900.jl:16\n   [2] macro expansion\n     @ /tmp/tmprb9aa900.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprb9aa900.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprb9aa900.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprb9aa900.jl:16\n   [2] macro expansion\n     @ /tmp/tmprb9aa900.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprb9aa900.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprb9aa900.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprb9aa900.jl:16\n   [2] macro expansion\n     @ /tmp/tmprb9aa900.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprb9aa900.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprb9aa900.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprb9aa900.jl:16\n   [2] macro expansion\n     @ /tmp/tmprb9aa900.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprb9aa900.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprb9aa900.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if n == 0\n        return \"\"\n    end\n    # Find\
    \ the longest palindromic suffix\n    suffix_length = 0\n    for i in 1:n\n  \
    \      if is_palindrome(string[i:n])\n            suffix_length = n - i\n    \
    \        break\n        end\n    end\n    # Append reverse of the prefix to the\
    \ end of the string\n    return string * string[1:n-suffix_length]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1y9i7sv6.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1y9i7sv6.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp1y9i7sv6.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1y9i7sv6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1y9i7sv6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1y9i7sv6.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp1y9i7sv6.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1y9i7sv6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1y9i7sv6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1y9i7sv6.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp1y9i7sv6.jl:36 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1y9i7sv6.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp1y9i7sv6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1y9i7sv6.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp1y9i7sv6.jl:37 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1y9i7sv6.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1y9i7sv6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # The longest palindromic suffix is the longest palindromic\
    \ substring that ends at the last character of the string.\n    # The longest\
    \ palindromic suffix is also the longest palindromic substring that starts at\
    \ the first character of the string.\n    # The longest palindromic suffix is\
    \ also the longest palindromic substring of the string.\n    # The longest palindromic\
    \ suffix is also the longest palindromic substring of the reverse of the string.\n\
    \    # The longest palindromic suffix is also the longest common prefix of the\
    \ string and the reverse of the string.\n    # The longest palindromic suffix\
    \ is also the longest common prefix of the string and the reverse of the string.\n\
    \    # The longest palindromic suffix is also the longest common prefix of the\
    \ string and the reverse of the string.\n    # The longest palindromic suffix\
    \ is also the longest common prefix of the string and the reverse of the string.\n\
    \    # The longest palindromic suffix is also the longest common prefix of the\
    \ string and the reverse of the string.\n    # The longest palindromic suffix\
    \ is also the longest common prefix of the string and the reverse of the string.\n\
    \    # The longest palindromic suffix is also the longest common prefix of the\
    \ string and the reverse of the string.\n    # The longest palindromic suffix\
    \ is also the longest common prefix of the string and the reverse of the string.\n\
    \    # The longest palindromic suffix is also the longest common prefix of the\
    \ string and the reverse of the string.\n    # The longest palindromic suffix\
    \ is also the longest common prefix of the string and the reverse of the string.\n\
    \    # The longest palindromic suffix is also the longest common prefix of the\
    \ string and the reverse of the string.\n    # The longest palindromic suffix\
    \ is also the longest common prefix of the string and the reverse of the string.\n\
    \    # The longest palindromic suffix is also the longest common prefix of the\
    \ string and the reverse of the string.\n    # The longest palindromic suffix\
    \ is also the longest common prefix of the string and the reverse of the string.\n\
    \    # The longest palindromic suffix\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpghu_w9_7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpghu_w9_7.jl:1\n\
    in expression starting at /tmp/tmpghu_w9_7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwn5hr0fo.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpwn5hr0fo.jl:16\n   [2] macro expansion\n     @ /tmp/tmpwn5hr0fo.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwn5hr0fo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwn5hr0fo.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpwn5hr0fo.jl:16\n   [2] macro expansion\n     @ /tmp/tmpwn5hr0fo.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwn5hr0fo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwn5hr0fo.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpwn5hr0fo.jl:16\n   [2] macro expansion\n     @ /tmp/tmpwn5hr0fo.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwn5hr0fo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwn5hr0fo.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpwn5hr0fo.jl:16\n   [2] macro expansion\n     @ /tmp/tmpwn5hr0fo.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwn5hr0fo.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwn5hr0fo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp53f8uyd2.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53f8uyd2.jl:16\n   [2] macro expansion\n     @ /tmp/tmp53f8uyd2.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp53f8uyd2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp53f8uyd2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53f8uyd2.jl:16\n   [2] macro expansion\n     @ /tmp/tmp53f8uyd2.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp53f8uyd2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp53f8uyd2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53f8uyd2.jl:16\n   [2] macro expansion\n     @ /tmp/tmp53f8uyd2.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp53f8uyd2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp53f8uyd2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53f8uyd2.jl:16\n   [2] macro expansion\n     @ /tmp/tmp53f8uyd2.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp53f8u"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53f8uyd2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(longest_palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp35fbqd1p.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp35fbqd1p.jl:16\n   [2] macro expansion\n     @ /tmp/tmp35fbqd1p.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp35fbqd1p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp35fbqd1p.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp35fbqd1p.jl:16\n   [2] macro expansion\n     @ /tmp/tmp35fbqd1p.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp35fbqd1p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp35fbqd1p.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp35fbqd1p.jl:16\n   [2] macro expansion\n     @ /tmp/tmp35fbqd1p.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp35fbqd1p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp35fbqd1p.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp35fbqd1p.jl:16\n   [2] macro expansion\n     @ /tmp/tmp35fbqd1p.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp35fbq"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp35fbqd1p.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\n  \
    \  # If no palindromic suffix found, then the whole string is a palindrome.\n\
    \    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzaoyxo23.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzaoyxo23.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpzaoyxo23.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzaoyxo23.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpzaoyxo23.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzaoyxo23.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpzaoyxo23.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzaoyxo23.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpzaoyxo23.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzaoyxo23.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpzaoyxo23.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzaoyxo23.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpzaoyxo23.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzaoyxo23.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpzaoyxo23.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzaoyxo23.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzaoyxo23.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2cw5gfc9.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2cw5gfc9.jl:16\n   [2] macro expansion\n     @ /tmp/tmp2cw5gfc9.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2cw5gfc9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2cw5gfc9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2cw5gfc9.jl:16\n   [2] macro expansion\n     @ /tmp/tmp2cw5gfc9.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2cw5gfc9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2cw5gfc9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2cw5gfc9.jl:16\n   [2] macro expansion\n     @ /tmp/tmp2cw5gfc9.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2cw5gfc9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2cw5gfc9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2cw5gfc9.jl:16\n   [2] macro expansion\n     @ /tmp/tmp2cw5gfc9.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2cw5g"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2cw5gfc9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9qtqj6q1.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp9qtqj6q1.jl:16\n   [2] macro expansion\n     @ /tmp/tmp9qtqj6q1.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9qtqj6q1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9qtqj6q1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp9qtqj6q1.jl:16\n   [2] macro expansion\n     @ /tmp/tmp9qtqj6q1.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9qtqj6q1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9qtqj6q1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp9qtqj6q1.jl:16\n   [2] macro expansion\n     @ /tmp/tmp9qtqj6q1.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9qtqj6q1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9qtqj6q1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp9qtqj6q1.jl:16\n   [2] macro expansion\n     @ /tmp/tmp9qtqj6q1.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9qtqj"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qtqj6q1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcpefdda8.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcpefdda8.jl:16\n   [2] macro expansion\n     @ /tmp/tmpcpefdda8.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcpefdda8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcpefdda8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcpefdda8.jl:16\n   [2] macro expansion\n     @ /tmp/tmpcpefdda8.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcpefdda8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcpefdda8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcpefdda8.jl:16\n   [2] macro expansion\n     @ /tmp/tmpcpefdda8.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcpefdda8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpcpefdda8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcpefdda8.jl:16\n   [2] macro expansion\n     @ /tmp/tmpcpefdda8.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcpefdda8.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcpefdda8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = \"\"\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            suffix = string[i:end]\n            break\n        end\n    end\n\
    \    # Append reverse of the prefix to the end of the string\n    return string\
    \ * reverse(string[1:end-length(suffix)])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpojdtzgtc.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpojdtzgtc.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpojdtzgtc.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojdtzgtc.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpojdtzgtc.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpojdtzgtc.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpojdtzgtc.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojdtzgtc.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpojdtzgtc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpojdtzgtc.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpojdtzgtc.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojdtzgtc.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpojdtzgtc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpojdtzgtc.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpojdtzgtc.jl:36 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojdtzgtc.jl:31\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpojdtzgtc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix of the string that comes before the palindromic suffix.\n\
    \    prefix = reverse(string[1:end-length(longest_palindromic_suffix)])\n    #\
    \ Append the reversed prefix to the end of the string.\n    return string * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpykcsilm8.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpykcsilm8.jl:17\n   [2] macro expansion\n     @ /tmp/tmpykcsilm8.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpykcsilm8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpykcsilm8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpykcsilm8.jl:17\n   [2] macro expansion\n     @ /tmp/tmpykcsilm8.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpykcsilm8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpykcsilm8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpykcsilm8.jl:17\n   [2] macro expansion\n     @ /tmp/tmpykcsilm8.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpykcsilm8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpykcsilm8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpykcsilm8.jl:17\n   [2] macro expansion\n     @ /tmp/tmpykcsilm8.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpy"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykcsilm8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix\n    suffix = find_longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix\n    prefix = reverse(string[1:end-length(suffix)])\n\
    \    # Append the reversed prefix to the end of the string\n    return string\
    \ * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjvsy7svj.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjvsy7svj.jl:14\n   [2] macro expansion\n     @ /tmp/tmpjvsy7svj.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjvsy7svj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjvsy7svj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjvsy7svj.jl:14\n   [2] macro expansion\n     @ /tmp/tmpjvsy7svj.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjvsy7svj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjvsy7svj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjvsy7svj.jl:14\n   [2] macro expansion\n     @ /tmp/tmpjvsy7svj.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjvsy7svj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjvsy7svj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpjvsy7svj.jl:14\n   [2] macro expansion\n     @ /tmp/tmpjvsy7svj.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjvsy7svj.jl:24\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvsy7svj.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpinxzb8vg.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpinxzb8vg.jl:16\n   [2] macro expansion\n     @ /tmp/tmpinxzb8vg.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpinxzb8vg.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpinxzb8vg.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpinxzb8vg.jl:16\n   [2] macro expansion\n     @ /tmp/tmpinxzb8vg.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpinxzb8vg.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpinxzb8vg.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpinxzb8vg.jl:16\n   [2] macro expansion\n     @ /tmp/tmpinxzb8vg.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpinxzb8vg.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpinxzb8vg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpinxzb8vg.jl:16\n   [2] macro expansion\n     @ /tmp/tmpinxzb8vg.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpinxzb"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinxzb8vg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    suffix = longest_palindromic_suffix(string)\n   \
    \ # Reverse the prefix of the string that comes before the palindromic suffix.\n\
    \    prefix = reverse(string[1:end-length(suffix)])\n    # Append the reversed\
    \ prefix to the end of the string.\n    return string * prefix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxau25z0m.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxau25z0m.jl:17\n   [2] macro expansion\n     @ /tmp/tmpxau25z0m.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxau25z0m.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxau25z0m.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxau25z0m.jl:17\n   [2] macro expansion\n     @ /tmp/tmpxau25z0m.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxau25z0m.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxau25z0m.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxau25z0m.jl:17\n   [2] macro expansion\n     @ /tmp/tmpxau25z0m.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxau25z0m.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxau25z0m.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxau25z0m.jl:17\n   [2] macro expansion\n     @ /tmp/tmpxau25z0m.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxau25z0m.jl:27\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxau25z0m.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix of supplied string that is a palindrome.\n   \
    \ # We do this by finding the longest prefix of the reversed string that is a\
    \ palindrome.\n    # This is done by finding the longest common prefix of the\
    \ string and its reverse.\n    # This is done by finding the longest common prefix\
    \ of the string and its reverse.\n    # This is done by finding the longest common\
    \ prefix of the string and its reverse.\n    # This is done by finding the longest\
    \ common prefix of the string and its reverse.\n    # This is done by finding\
    \ the longest common prefix of the string and its reverse.\n    # This is done\
    \ by finding the longest common prefix of the string and its reverse.\n    # This\
    \ is done by finding the longest common prefix of the string and its reverse.\n\
    \    # This is done by finding the longest common prefix of the string and its\
    \ reverse.\n    # This is done by finding the longest common prefix of the string\
    \ and its reverse.\n    # This is done by finding the longest common prefix of\
    \ the string and its reverse.\n    # This is done by finding the longest common\
    \ prefix of the string and its reverse.\n    # This is done by finding the longest\
    \ common prefix of the string and its reverse.\n    # This is done by finding\
    \ the longest common prefix of the string and its reverse.\n    # This is done\
    \ by finding the longest common prefix of the string and its reverse.\n    # This\
    \ is done by finding the longest common prefix of the string and its reverse.\n\
    \    # This is done by finding the longest common prefix of the string and its\
    \ reverse.\n    # This is done by finding the longest common prefix of the string\
    \ and its reverse.\n    # This is done by finding the longest common prefix of\
    \ the string and its reverse.\n    # This is done by finding the longest common\
    \ prefix of the string and its reverse.\n    # This is done by finding the longest\
    \ common prefix of the string and its reverse.\n    # This is done by finding\
    \ the longest common prefix of the string and its reverse.\n    # This is done\
    \ by finding the longest common prefix of the string and its reverse.\n    # This\
    \ is done by finding the longest common prefix of the string and its reverse.\n\
    \    # This is done by finding the longest common prefix of the string and its\
    \ reverse.\n    # This is done by finding the longest common prefix of the string\
    \ and\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5j2meurm.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5j2meurm.jl:1\n\
    in expression starting at /tmp/tmp5j2meurm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm66ppipy.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm66ppipy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm66ppipy.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm66ppipy.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm66ppipy.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm66ppipy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm66ppipy.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm66ppipy.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm66ppipy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm66ppipy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm66ppipy.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm66ppipy.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm66ppipy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm66ppipy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm66ppipy.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm66pp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm66ppipy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkyl7isfi.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkyl7isfi.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkyl7isfi.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkyl7isfi.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkyl7isfi.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkyl7isfi.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkyl7isfi.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkyl7isfi.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkyl7isfi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkyl7isfi.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkyl7isfi.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkyl7isfi.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkyl7isfi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkyl7isfi.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkyl7isfi.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkyl7i"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkyl7isfi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzqzr6uxw.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzqzr6uxw.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzqzr6uxw.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzqzr6uxw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzqzr6uxw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzqzr6uxw.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzqzr6uxw.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzqzr6uxw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzqzr6uxw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzqzr6uxw.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzqzr6uxw.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzqzr6uxw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzqzr6uxw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzqzr6uxw.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzqzr6uxw.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzqzr6"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzqzr6uxw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp73g2ysof.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp73g2ysof.jl:16\n   [2] macro expansion\n     @ /tmp/tmp73g2ysof.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp73g2ysof.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp73g2ysof.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp73g2ysof.jl:16\n   [2] macro expansion\n     @ /tmp/tmp73g2ysof.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp73g2ysof.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp73g2ysof.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp73g2ysof.jl:16\n   [2] macro expansion\n     @ /tmp/tmp73g2ysof.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp73g2ysof.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp73g2ysof.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp73g2ysof.jl:16\n   [2] macro expansion\n     @ /tmp/tmp73g2ysof.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp73g2y"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73g2ysof.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    # Note that we don't need to check the whole string, just the half\
    \ of it\n    # because if a string is a palindrome, then its reverse is also a\
    \ palindrome\n    # and we can just append the reverse of the prefix to the end\
    \ of the string\n    # to get a palindrome.\n    # For example, if we have a string\
    \ 'cata', then its reverse is 'atac'\n    # and we can see that 'atac' is a palindrome.\n\
    \    # So, we can just append 'at' to the end of the string 'cata' to get a palindrome.\n\
    \    # If we have a string 'cat', then its reverse is 'tac'\n    # and we can\
    \ see that 'tac' is not a palindrome.\n    # So, we need to find the longest palindromic\
    \ suffix of the string 'cat'\n    # which is 't' and append 'at' to the end of\
    \ the string 'cat' to get a palindrome.\n    # Note that we don't need to check\
    \ the whole string, just the half of it\n    # because if a string is a palindrome,\
    \ then its reverse is also a palindrome\n    # and we can just append the reverse\
    \ of the prefix to the end of the string\n    # to get a palindrome.\n    # For\
    \ example, if we have a string 'cata', then its reverse is 'atac'\n    # and we\
    \ can see that 'atac' is a palindrome.\n    # So, we can just append 'at' to the\
    \ end of the string 'cata' to get a palindrome.\n    # If we have a string 'cat',\
    \ then its reverse is 'tac'\n    # and we can see that 'tac' is not a palindrome.\n\
    \    # So, we need to find the longest palindromic suffix of the string 'cat'\n\
    \    # which is 't' and append 'at' to the end of the string 'cat' to get a palindrome.\n\
    \    # Note that we don't need to check the whole string, just the half of it\n\
    \    # because if a string is\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp212j9jv9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp212j9jv9.jl:1\n\
    in expression starting at /tmp/tmp212j9jv9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(longest_palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ndxeaax.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1ndxeaax.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1ndxeaax.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ndxeaax.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1ndxeaax.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1ndxeaax.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1ndxeaax.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ndxeaax.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1ndxeaax.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1ndxeaax.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1ndxeaax.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ndxeaax.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1ndxeaax.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1ndxeaax.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1ndxeaax.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ndxe"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ndxeaax.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix of supplied string that is a palindrome.\n   \
    \ # This is done by finding the longest common prefix of the string and its reverse.\n\
    \    # This is done by finding the longest common prefix of the string and its\
    \ reverse.\n    # This is done by finding the longest common prefix of the string\
    \ and its reverse.\n    # This is done by finding the longest common prefix of\
    \ the string and its reverse.\n    # This is done by finding the longest common\
    \ prefix of the string and its reverse.\n    # This is done by finding the longest\
    \ common prefix of the string and its reverse.\n    # This is done by finding\
    \ the longest common prefix of the string and its reverse.\n    # This is done\
    \ by finding the longest common prefix of the string and its reverse.\n    # This\
    \ is done by finding the longest common prefix of the string and its reverse.\n\
    \    # This is done by finding the longest common prefix of the string and its\
    \ reverse.\n    # This is done by finding the longest common prefix of the string\
    \ and its reverse.\n    # This is done by finding the longest common prefix of\
    \ the string and its reverse.\n    # This is done by finding the longest common\
    \ prefix of the string and its reverse.\n    # This is done by finding the longest\
    \ common prefix of the string and its reverse.\n    # This is done by finding\
    \ the longest common prefix of the string and its reverse.\n    # This is done\
    \ by finding the longest common prefix of the string and its reverse.\n    # This\
    \ is done by finding the longest common prefix of the string and its reverse.\n\
    \    # This is done by finding the longest common prefix of the string and its\
    \ reverse.\n    # This is done by finding the longest common prefix of the string\
    \ and its reverse.\n    # This is done by finding the longest common prefix of\
    \ the string and its reverse.\n    # This is done by finding the longest common\
    \ prefix of the string and its reverse.\n    # This is done by finding the longest\
    \ common prefix of the string and its reverse.\n    # This is done by finding\
    \ the longest common prefix of the string and its reverse.\n    # This is done\
    \ by finding the longest common prefix of the string and its reverse.\n    # This\
    \ is done by finding the longest common prefix of the string and its reverse.\n\
    \    # This is done by finding the longest common prefix of the string and its\
    \ reverse.\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbf9ohbyy.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbf9ohbyy.jl:1\n\
    in expression starting at /tmp/tmpbf9ohbyy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkszaz4x3.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkszaz4x3.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkszaz4x3.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkszaz4x3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkszaz4x3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkszaz4x3.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkszaz4x3.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkszaz4x3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkszaz4x3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkszaz4x3.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkszaz4x3.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkszaz4x3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkszaz4x3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkszaz4x3.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkszaz4x3.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkszaz"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkszaz4x3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix.\n    for i in 1:length(string)\n        if is_palindrome(string[end-i+1:end])\n\
    \            return string * reverse(string[1:end-i])\n        end\n    end\n\
    \    # If we got here, the whole string is a palindrome.\n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo0_tjkqs.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpo0_tjkqs.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpo0_tjkqs.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo0_tjkqs.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpo0_tjkqs.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpo0_tjkqs.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpo0_tjkqs.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo0_tjkqs.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpo0_tjkqs.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpo0_tjkqs.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpo0_tjkqs.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo0_tjkqs.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpo0_tjkqs.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpo0_tjkqs.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpo0_tjkqs.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo0_tjkqs.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0_tjkqs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqaxe557s.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqaxe557s.jl:16\n   [2] macro expansion\n     @ /tmp/tmpqaxe557s.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqaxe557s.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqaxe557s.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqaxe557s.jl:16\n   [2] macro expansion\n     @ /tmp/tmpqaxe557s.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqaxe557s.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqaxe557s.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqaxe557s.jl:16\n   [2] macro expansion\n     @ /tmp/tmpqaxe557s.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqaxe557s.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqaxe557s.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqaxe557s.jl:16\n   [2] macro expansion\n     @ /tmp/tmpqaxe557s.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqaxe5"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqaxe557s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph7ojvnv4.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph7ojvnv4.jl:16\n   [2] macro expansion\n     @ /tmp/tmph7ojvnv4.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph7ojvnv4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph7ojvnv4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph7ojvnv4.jl:16\n   [2] macro expansion\n     @ /tmp/tmph7ojvnv4.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph7ojvnv4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph7ojvnv4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph7ojvnv4.jl:16\n   [2] macro expansion\n     @ /tmp/tmph7ojvnv4.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph7ojvnv4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph7ojvnv4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph7ojvnv4.jl:16\n   [2] macro expansion\n     @ /tmp/tmph7ojvnv4.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph7ojvnv4.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph7ojvnv4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyve515d9.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyve515d9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpyve515d9.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyve515d9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyve515d9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyve515d9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpyve515d9.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyve515d9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyve515d9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyve515d9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpyve515d9.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyve515d9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyve515d9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyve515d9.jl:16\n   [2] macro expansion\n     @ /tmp/tmpyve515d9.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyve51"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyve515d9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # Note that we don't need to check the whole string,\n\
    \    # because if the string is a palindrome, then the whole string is the longest\
    \ palindromic suffix.\n    # So, we only need to check the first half of the string.\n\
    \    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n    \
    \        return string * reverse(string[1:i-1])\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6_czk68g.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6_czk68g.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmp6_czk68g.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6_czk68g.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6_czk68g.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6_czk68g.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmp6_czk68g.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6_czk68g.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6_czk68g.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6_czk68g.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmp6_czk68g.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6_czk68g.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp6_czk68g.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6_czk68g.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmp6_czk68g.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6_czk68g.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_czk68g.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    if string == reverse(string)\n\
    \        return string\n    end\n    # Find the longest palindromic suffix\n \
    \   for i in 1:length(string)\n        if string[1:i] == reverse(string[end-i+1:end])\n\
    \            return string * reverse(string[1:end-i])\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq27d1dvt.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"xyz\") == \"xyzyx\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n     @ Main\
    \ /tmp/tmpq27d1dvt.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmpq27d1dvt.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq27d1dvt.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpq27d1dvt.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n     @ Main\
    \ /tmp/tmpq27d1dvt.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmpq27d1dvt.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq27d1dvt.jl:30\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    3      2      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\n  \
    \  # If no palindromic suffix found, return the reverse of the string\n    return\
    \ string * reverse(string[1:end])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxwxs2jvl.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxwxs2jvl.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpxwxs2jvl.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxwxs2jvl.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxwxs2jvl.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxwxs2jvl.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpxwxs2jvl.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxwxs2jvl.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxwxs2jvl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxwxs2jvl.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpxwxs2jvl.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxwxs2jvl.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxwxs2jvl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxwxs2jvl.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpxwxs2jvl.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxwxs2jvl.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwxs2jvl.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd5pwmf_0.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd5pwmf_0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpd5pwmf_0.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd5pwmf_0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd5pwmf_0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd5pwmf_0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpd5pwmf_0.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd5pwmf_0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd5pwmf_0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd5pwmf_0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpd5pwmf_0.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd5pwmf_0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd5pwmf_0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd5pwmf_0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpd5pwmf_0.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd5pwm"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5pwmf_0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    return string * reverse(string[1:end-length(suffix)])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpazeyeuhp.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpazeyeuhp.jl:17\n   [2] macro expansion\n     @ /tmp/tmpazeyeuhp.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpazeyeuhp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpazeyeuhp.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpazeyeuhp.jl:17\n   [2] macro expansion\n     @ /tmp/tmpazeyeuhp.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpazeyeuhp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpazeyeuhp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpazeyeuhp.jl:17\n   [2] macro expansion\n     @ /tmp/tmpazeyeuhp.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpazeyeuhp.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpazeyeuhp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpazeyeuhp.jl:17\n   [2] macro expansion\n     @ /tmp/tmpazeyeuhp.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpazeyeuhp.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpazeyeuhp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    palindrome_suffix =\
    \ longest_palindrome_suffix(string)\n    return string * palindrome_suffix\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8wo610j2.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8wo610j2.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8wo610j2.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8wo610j2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8wo610j2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8wo610j2.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8wo610j2.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8wo610j2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8wo610j2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8wo610j2.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8wo610j2.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8wo610j2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8wo610j2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8wo610j2.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8wo610j2.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8wo610j2.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8wo610j2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1_7ho0yn.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1_7ho0yn.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1_7ho0yn.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1_7ho0yn.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1_7ho0yn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1_7ho0yn.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1_7ho0yn.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1_7ho0yn.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1_7ho0yn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1_7ho0yn.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1_7ho0yn.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1_7ho0yn.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1_7ho0yn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1_7ho0yn.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1_7ho0yn.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1_7ho0yn.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_7ho0yn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    for i in 1:length(string)\n        if is_palindrome(string[end-i+1:end])\n\
    \            return string * reverse(string[1:end-i])\n        end\n    end\n\
    \    # If we got here, the whole string is a palindrome.\n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvgud27tk.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvgud27tk.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpvgud27tk.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvgud27tk.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvgud27tk.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvgud27tk.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpvgud27tk.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvgud27tk.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvgud27tk.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvgud27tk.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpvgud27tk.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvgud27tk.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvgud27tk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvgud27tk.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpvgud27tk.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvgud27tk.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvgud27tk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphaa98tao.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphaa98tao.jl:16\n   [2] macro expansion\n     @ /tmp/tmphaa98tao.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphaa98tao.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphaa98tao.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphaa98tao.jl:16\n   [2] macro expansion\n     @ /tmp/tmphaa98tao.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphaa98tao.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphaa98tao.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphaa98tao.jl:16\n   [2] macro expansion\n     @ /tmp/tmphaa98tao.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphaa98tao.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphaa98tao.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphaa98tao.jl:16\n   [2] macro expansion\n     @ /tmp/tmphaa98tao.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphaa98tao.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphaa98tao.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # This is the same as finding the longest palindromic\
    \ prefix of the string reversed.\n    longest_palindromic_suffix = longest_palindromic_prefix(reverse(string))\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string * reverse(string[1:end-length(longest_palindromic_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptycfow3n.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptycfow3n.jl:18\n   [2] macro expansion\n     @ /tmp/tmptycfow3n.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptycfow3n.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptycfow3n.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptycfow3n.jl:18\n   [2] macro expansion\n     @ /tmp/tmptycfow3n.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptycfow3n.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptycfow3n.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_prefix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptycfow3n.jl:18\n   [2] macro expansion\n     @ /tmp/tmptycfow3n.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptycfow3n.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptycfow3n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptycfow3n.jl:18\n   [2] macro expansion\n     @ /tmp/tmptycfow3n.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptycfow3n.jl:26\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptycfow3n.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # This is the longest palindrome that ends with the\
    \ last character of the string.\n    # We only need to find the longest palindrome\
    \ that ends with the last character of the string\n    # because we will append\
    \ the reverse of the prefix that comes before the palindromic suffix.\n    # This\
    \ will make the whole string a palindrome.\n    longest_palindromic_suffix = longest_palindromic_suffix(string)\n\
    \    # Find the prefix that comes before the palindromic suffix.\n    prefix =\
    \ string[1:end-length(longest_palindromic_suffix)]\n    # Append the reverse of\
    \ the prefix to the end of the string.\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz0dap7t6.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz0dap7t6.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz0dap7t6.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz0dap7t6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz0dap7t6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz0dap7t6.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz0dap7t6.jl:34\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz0dap7t6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz0dap7t6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz0dap7t6.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz0dap7t6.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz0dap7t6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz0dap7t6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz0dap7t6.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz0dap7t6.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz0dap7t6.jl:31\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0dap7t6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(longest_palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps6ld3z1b.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps6ld3z1b.jl:16\n   [2] macro expansion\n     @ /tmp/tmps6ld3z1b.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps6ld3z1b.jl:24\ntest set:\
    \ Error During Test at /tmp/tmps6ld3z1b.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps6ld3z1b.jl:16\n   [2] macro expansion\n     @ /tmp/tmps6ld3z1b.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps6ld3z1b.jl:24\ntest set:\
    \ Error During Test at /tmp/tmps6ld3z1b.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps6ld3z1b.jl:16\n   [2] macro expansion\n     @ /tmp/tmps6ld3z1b.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps6ld3z1b.jl:24\ntest set:\
    \ Error During Test at /tmp/tmps6ld3z1b.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps6ld3z1b.jl:16\n   [2] macro expansion\n     @ /tmp/tmps6ld3z1b.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps6ld3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6ld3z1b.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    palindrome_suffix =\
    \ find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbe5vjjy6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbe5vjjy6.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbe5vjjy6.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbe5vjjy6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbe5vjjy6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbe5vjjy6.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbe5vjjy6.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbe5vjjy6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbe5vjjy6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbe5vjjy6.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbe5vjjy6.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbe5vjjy6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbe5vjjy6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbe5vjjy6.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbe5vjjy6.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbe5vj"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbe5vjjy6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    if is_palindrome(string)\n\
    \        return string\n    end\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ikzvmhz.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ikzvmhz.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp1ikzvmhz.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ikzvmhz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1ikzvmhz.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ikzvmhz.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp1ikzvmhz.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ikzvmhz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1ikzvmhz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ikzvmhz.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp1ikzvmhz.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ikzvmhz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1ikzvmhz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ikzvmhz.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp1ikzvmhz.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ikzvmhz.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ikzvmhz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3m9yifox.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3m9yifox.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3m9yifox.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3m9yifox.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3m9yifox.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3m9yifox.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3m9yifox.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3m9yifox.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3m9yifox.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3m9yifox.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3m9yifox.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3m9yifox.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3m9yifox.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3m9yifox.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3m9yifox.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3m9yi"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3m9yifox.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj6591mqd.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj6591mqd.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj6591mqd.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj6591mqd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj6591mqd.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj6591mqd.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj6591mqd.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj6591mqd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj6591mqd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj6591mqd.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj6591mqd.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj6591mqd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj6591mqd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj6591mqd.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj6591mqd.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj6591mqd.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj6591mqd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd0ssknqp.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd0ssknqp.jl:16\n   [2] macro expansion\n     @ /tmp/tmpd0ssknqp.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd0ssknqp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd0ssknqp.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd0ssknqp.jl:16\n   [2] macro expansion\n     @ /tmp/tmpd0ssknqp.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd0ssknqp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd0ssknqp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd0ssknqp.jl:16\n   [2] macro expansion\n     @ /tmp/tmpd0ssknqp.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd0ssknqp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd0ssknqp.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd0ssknqp.jl:16\n   [2] macro expansion\n     @ /tmp/tmpd0ssknqp.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd0ssk"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd0ssknqp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    return string * reverse(string[1:end-length(suffix)])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0oo7qiwb.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp0oo7qiwb.jl:17\n   [2] macro expansion\n     @ /tmp/tmp0oo7qiwb.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0oo7qiwb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0oo7qiwb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp0oo7qiwb.jl:17\n   [2] macro expansion\n     @ /tmp/tmp0oo7qiwb.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0oo7qiwb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0oo7qiwb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp0oo7qiwb.jl:17\n   [2] macro expansion\n     @ /tmp/tmp0oo7qiwb.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0oo7qiwb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0oo7qiwb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp0oo7qiwb.jl:17\n   [2] macro expansion\n     @ /tmp/tmp0oo7qiwb.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0oo7qiwb.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0oo7qiwb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(longest_palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt4ss5k6j.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt4ss5k6j.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt4ss5k6j.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt4ss5k6j.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpt4ss5k6j.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt4ss5k6j.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt4ss5k6j.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt4ss5k6j.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpt4ss5k6j.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt4ss5k6j.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt4ss5k6j.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt4ss5k6j.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpt4ss5k6j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt4ss5k6j.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt4ss5k6j.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt4ss5"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt4ss5k6j.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6y_z9f64.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6y_z9f64.jl:16\n   [2] macro expansion\n     @ /tmp/tmp6y_z9f64.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6y_z9f64.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6y_z9f64.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6y_z9f64.jl:16\n   [2] macro expansion\n     @ /tmp/tmp6y_z9f64.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6y_z9f64.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6y_z9f64.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6y_z9f64.jl:16\n   [2] macro expansion\n     @ /tmp/tmp6y_z9f64.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6y_z9f64.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6y_z9f64.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6y_z9f64.jl:16\n   [2] macro expansion\n     @ /tmp/tmp6y_z9f64.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6y_z9f64.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6y_z9f64.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # This is done by finding the longest common prefix\
    \ of the string and its reverse.\n    # The longest common prefix of a string\
    \ and its reverse is the longest palindromic suffix.\n    # This is because the\
    \ longest common prefix of a string and its reverse is the longest\n    # palindromic\
    \ suffix of the string.\n    # Example:\n    # string = \"cata\"\n    # string_reverse\
    \ = \"atac\"\n    # longest_common_prefix = \"a\"\n    # longest_palindromic_suffix\
    \ = \"a\"\n    # string_prefix = \"cat\"\n    # string_prefix_reverse = \"tac\"\
    \n    # string_palindrome = \"catac\"\n    string_reverse = reverse(string)\n\
    \    longest_common_prefix = lcp(string, string_reverse)\n    string_prefix =\
    \ string[1:end-length(longest_common_prefix)]\n    string_prefix_reverse = reverse(string_prefix)\n\
    \    return string * string_prefix_reverse\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp15h0cbzs.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: lcp not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp15h0cbzs.jl:30\n\
    \   [2] macro expansion\n     @ /tmp/tmp15h0cbzs.jl:41 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp15h0cbzs.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp15h0cbzs.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: lcp not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp15h0cbzs.jl:30\n\
    \   [2] macro expansion\n     @ /tmp/tmp15h0cbzs.jl:42 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp15h0cbzs.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp15h0cbzs.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: lcp not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp15h0cbzs.jl:30\n\
    \   [2] macro expansion\n     @ /tmp/tmp15h0cbzs.jl:43 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp15h0cbzs.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp15h0cbzs.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: lcp not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp15h0cbzs.jl:30\n\
    \   [2] macro expansion\n     @ /tmp/tmp15h0cbzs.jl:44 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp15h0cbzs.jl:39\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15h0cbzs.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    palindrome_suffix =\
    \ longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt55cfq0y.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt55cfq0y.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt55cfq0y.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt55cfq0y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt55cfq0y.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt55cfq0y.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt55cfq0y.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt55cfq0y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt55cfq0y.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt55cfq0y.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt55cfq0y.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt55cfq0y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt55cfq0y.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt55cfq0y.jl:16\n   [2] macro expansion\n     @ /tmp/tmpt55cfq0y.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt55cfq0y.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt55cfq0y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix that is a palindrome\n    # This is the same as\
    \ finding the longest prefix that is a palindrome\n    # because the string is\
    \ symmetric\n    palindrome_length = longest_palindrome_prefix(string)\n    #\
    \ Reverse the prefix that comes before the palindrome\n    # and append it to\
    \ the end of the string\n    return string * string[1:palindrome_length]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxmqjeztq.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxmqjeztq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxmqjeztq.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxmqjeztq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpxmqjeztq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_prefix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpxmqjeztq.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpxmqjeztq.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxmqjeztq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpxmqjeztq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxmqjeztq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxmqjeztq.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxmqjeztq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpxmqjeztq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_prefix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxmqjeztq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxmqjeztq.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxmqjeztq.jl:25\ntest set:\
    \ Error During T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxmqjeztq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \    # Reverse the string prefix that comes before the palindromic suffix.\n \
    \   reversed_prefix = reverse(string[1:end-length(longest_palindromic_suffix)])\n\
    \    # Append the reversed prefix to the end of the string.\n    return string\
    \ * reversed_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg6mzjjq6.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpg6mzjjq6.jl:17\n   [2] macro expansion\n     @ /tmp/tmpg6mzjjq6.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg6mzjjq6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg6mzjjq6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpg6mzjjq6.jl:17\n   [2] macro expansion\n     @ /tmp/tmpg6mzjjq6.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg6mzjjq6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg6mzjjq6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpg6mzjjq6.jl:17\n   [2] macro expansion\n     @ /tmp/tmpg6mzjjq6.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg6mzjjq6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg6mzjjq6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpg6mzjjq6.jl:17\n   [2] macro expansion\n     @ /tmp/tmpg6mzjjq6.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6mzjjq6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu84khc_j.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu84khc_j.jl:16\n   [2] macro expansion\n     @ /tmp/tmpu84khc_j.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu84khc_j.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpu84khc_j.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu84khc_j.jl:16\n   [2] macro expansion\n     @ /tmp/tmpu84khc_j.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu84khc_j.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpu84khc_j.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu84khc_j.jl:16\n   [2] macro expansion\n     @ /tmp/tmpu84khc_j.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu84khc_j.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpu84khc_j.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu84khc_j.jl:16\n   [2] macro expansion\n     @ /tmp/tmpu84khc_j.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu84kh"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu84khc_j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix of supplied string that is a palindrome.\n   \
    \ # This is done by finding the longest common substring of the string and its\
    \ reverse.\n    # This is done in O(n) time using the suffix tree.\n    #\n  \
    \  # The suffix tree is constructed using the Ukkonen algorithm.\n    # The algorithm\
    \ is described in the paper:\n    # Ukkonen, Esko. \"On-line construction of suffix\
    \ trees.\" Algorithmica 14.3 (1995): 249-260.\n    #\n    # The suffix tree is\
    \ a trie of all suffixes of the string.\n    # The longest common substring is\
    \ the deepest node in the suffix tree that is a leaf.\n    #\n    # The suffix\
    \ tree is constructed in O(n) time and O(n) space.\n    #\n    # The suffix tree\
    \ is a trie of all suffixes of the string.\n    # The longest common substring\
    \ is the deepest node in the suffix tree that is a leaf.\n    #\n    # The suffix\
    \ tree is constructed in O(n) time and O(n) space.\n    #\n    # The suffix tree\
    \ is a trie of all suffixes of the string.\n    # The longest common substring\
    \ is the deepest node in the suffix tree that is a leaf.\n    #\n    # The suffix\
    \ tree is constructed in O(n) time and O(n) space.\n    #\n    # The suffix tree\
    \ is a trie of all suffixes of the string.\n    # The longest common substring\
    \ is the deepest node in the suffix tree that is a leaf.\n    #\n    # The suffix\
    \ tree is constructed in O(n) time and O(n) space.\n    #\n    # The suffix tree\
    \ is a trie of all suffixes of the string.\n    # The longest common substring\
    \ is the deepest node in the suffix tree that is a leaf.\n    #\n    # The suffix\
    \ tree is constructed in O(n) time and O(n) space.\n    #\n    # The suffix tree\
    \ is a trie of all suffixes of the string.\n    # The longest common substring\
    \ is the deepest node in the suffix tree that is a leaf.\n    #\n    # The suffix\
    \ tree is constructed in O(n) time and O(n) space.\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjwjy0x8t.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjwjy0x8t.jl:1\n\
    in expression starting at /tmp/tmpjwjy0x8t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8_y9jhos.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8_y9jhos.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8_y9jhos.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8_y9jhos.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8_y9jhos.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8_y9jhos.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8_y9jhos.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8_y9jhos.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8_y9jhos.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8_y9jhos.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8_y9jhos.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8_y9jhos.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8_y9jhos.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8_y9jhos.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8_y9jhos.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8_y9jhos.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_y9jhos.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string\n    longest_palindromic_suffix = longest_palindromic_suffix(string)\n\
    \    # Find the prefix that comes before the palindromic suffix\n    prefix =\
    \ string[1:end-length(longest_palindromic_suffix)]\n    # Append to the end of\
    \ the string reverse of the prefix\n    return string * reverse(prefix)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq1h9evxw.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpq1h9evxw.jl:17\n   [2] macro expansion\n     @ /tmp/tmpq1h9evxw.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpq1h9evxw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpq1h9evxw.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpq1h9evxw.jl:17\n   [2] macro expansion\n     @ /tmp/tmpq1h9evxw.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpq1h9evxw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpq1h9evxw.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpq1h9evxw.jl:17\n   [2] macro expansion\n     @ /tmp/tmpq1h9evxw.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpq1h9evxw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpq1h9evxw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpq1h9evxw.jl:17\n   [2] macro expansion\n     @ /tmp/tmpq1h9evxw.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpq1h9evxw.jl:27\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq1h9evxw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Append reverse\
    \ of the prefix to the end of the string\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyyq9f0zb.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyyq9f0zb.jl:17\n   [2] macro expansion\n     @ /tmp/tmpyyq9f0zb.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyyq9f0zb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpyyq9f0zb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyyq9f0zb.jl:17\n   [2] macro expansion\n     @ /tmp/tmpyyq9f0zb.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyyq9f0zb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpyyq9f0zb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyyq9f0zb.jl:17\n   [2] macro expansion\n     @ /tmp/tmpyyq9f0zb.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyyq9f0zb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpyyq9f0zb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyyq9f0zb.jl:17\n   [2] macro expansion\n     @ /tmp/tmpyyq9f0zb.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyyq9f0zb.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyyq9f0zb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3ds_pmar.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3ds_pmar.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3ds_pmar.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3ds_pmar.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3ds_pmar.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3ds_pmar.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3ds_pmar.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3ds_pmar.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3ds_pmar.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3ds_pmar.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3ds_pmar.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3ds_pmar.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3ds_pmar.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3ds_pmar.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3ds_pmar.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3ds_p"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ds_pmar.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string\n    # and the length of the prefix that comes before it.\n\
    \    longest_palindrome_suffix_length = 0\n    for i in 1:length(string)\n   \
    \     if is_palindrome(string[i:end])\n            longest_palindrome_suffix_length\
    \ = i - 1\n            break\n        end\n    end\n    # Append to the end of\
    \ the string reverse of the prefix that comes before the palindromic suffix.\n\
    \    return string * string[1:longest_palindrome_suffix_length]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdl_771fc.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdl_771fc.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpdl_771fc.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdl_771fc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdl_771fc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdl_771fc.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpdl_771fc.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdl_771fc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdl_771fc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdl_771fc.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpdl_771fc.jl:36 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdl_771fc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpdl_771fc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdl_771fc.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpdl_771fc.jl:37 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdl_771fc.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdl_771fc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpreqp6j9d.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpreqp6j9d.jl:16\n   [2] macro expansion\n     @ /tmp/tmpreqp6j9d.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpreqp6j9d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpreqp6j9d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpreqp6j9d.jl:16\n   [2] macro expansion\n     @ /tmp/tmpreqp6j9d.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpreqp6j9d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpreqp6j9d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpreqp6j9d.jl:16\n   [2] macro expansion\n     @ /tmp/tmpreqp6j9d.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpreqp6j9d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpreqp6j9d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpreqp6j9d.jl:16\n   [2] macro expansion\n     @ /tmp/tmpreqp6j9d.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpreqp6"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpreqp6j9d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp9az8q0c.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp9az8q0c.jl:16\n   [2] macro expansion\n     @ /tmp/tmpp9az8q0c.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp9az8q0c.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp9az8q0c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp9az8q0c.jl:16\n   [2] macro expansion\n     @ /tmp/tmpp9az8q0c.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp9az8q0c.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp9az8q0c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp9az8q0c.jl:16\n   [2] macro expansion\n     @ /tmp/tmpp9az8q0c.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp9az8q0c.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp9az8q0c.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp9az8q0c.jl:16\n   [2] macro expansion\n     @ /tmp/tmpp9az8q0c.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp9az8"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp9az8q0c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return \"\"\n    end\n    # Find the longest\
    \ palindromic suffix\n    suffix = longest_palindromic_suffix(string)\n    # Reverse\
    \ the prefix that comes before the palindromic suffix\n    prefix = reverse(string[1:end-length(suffix)])\n\
    \    return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmponj2ffjg.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmponj2ffjg.jl:17\n   [2] macro expansion\n     @ /tmp/tmponj2ffjg.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmponj2ffjg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmponj2ffjg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmponj2ffjg.jl:17\n   [2] macro expansion\n     @ /tmp/tmponj2ffjg.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmponj2ffjg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmponj2ffjg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmponj2ffjg.jl:17\n   [2] macro expansion\n     @ /tmp/tmponj2ffjg.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmponj2ffjg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmponj2ffjg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmponj2ffjg.jl:17\n   [2] macro expansion\n     @ /tmp/tmponj2ffjg.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmponj2ffjg.jl:26\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponj2ffjg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(longest_palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6jowvxdr.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6jowvxdr.jl:16\n   [2] macro expansion\n     @ /tmp/tmp6jowvxdr.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6jowvxdr.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6jowvxdr.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6jowvxdr.jl:16\n   [2] macro expansion\n     @ /tmp/tmp6jowvxdr.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6jowvxdr.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6jowvxdr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6jowvxdr.jl:16\n   [2] macro expansion\n     @ /tmp/tmp6jowvxdr.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6jowvxdr.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6jowvxdr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6jowvxdr.jl:16\n   [2] macro expansion\n     @ /tmp/tmp6jowvxdr.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6jowv"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6jowvxdr.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(longest_palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfpyqs7gy.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfpyqs7gy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpfpyqs7gy.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfpyqs7gy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfpyqs7gy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfpyqs7gy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpfpyqs7gy.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfpyqs7gy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfpyqs7gy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfpyqs7gy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpfpyqs7gy.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfpyqs7gy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfpyqs7gy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfpyqs7gy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpfpyqs7gy.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfpyqs"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpyqs7gy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu_oip8x6.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu_oip8x6.jl:16\n   [2] macro expansion\n     @ /tmp/tmpu_oip8x6.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu_oip8x6.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpu_oip8x6.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu_oip8x6.jl:16\n   [2] macro expansion\n     @ /tmp/tmpu_oip8x6.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu_oip8x6.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpu_oip8x6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu_oip8x6.jl:16\n   [2] macro expansion\n     @ /tmp/tmpu_oip8x6.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu_oip8x6.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpu_oip8x6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu_oip8x6.jl:16\n   [2] macro expansion\n     @ /tmp/tmpu_oip8x6.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu_oip"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_oip8x6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix.\n    # Note that we don't need to find the longest palindromic prefix,\n\
    \    # because we know that it is the same as the longest palindromic suffix.\n\
    \    # We just need to know the length of the longest palindromic suffix.\n  \
    \  #\n    # The longest palindromic suffix is the longest palindromic substring\n\
    \    # that ends at the end of the string.\n    #\n    # We can find the longest\
    \ palindromic suffix using Manacher's algorithm.\n    #\n    # We need to find\
    \ the longest palindromic suffix, not the longest palindromic substring.\n   \
    \ # This means that we need to find the longest palindromic substring that ends\
    \ at the end of the string.\n    #\n    # We can do this by reversing the string\
    \ and finding the longest palindromic substring that starts at the beginning of\
    \ the string.\n    #\n    # We can find the longest palindromic substring that\
    \ starts at the beginning of the string using Manacher's algorithm.\n    #\n \
    \   # We can find the longest palindromic substring that starts at the beginning\
    \ of the string by reversing the string and finding the longest palindromic substring\
    \ that ends at the end of the string.\n    #\n    # We can find the longest palindromic\
    \ substring that ends at the end of the string by reversing the string and finding\
    \ the longest palindromic substring that starts at the beginning of the string.\n\
    \    #\n    # We can find the longest palindromic substring that starts at the\
    \ beginning of the string by reversing the string and finding the longest palindromic\
    \ substring that ends at the end of the string.\n    #\n    # We can find the\
    \ longest palindromic substring that ends at the end of the string by reversing\
    \ the string and finding the longest palindromic substring that starts at the\
    \ beginning of the string.\n    #\n    # We can find the longest palindromic substring\
    \ that starts at the beginning of the string by reversing the string and finding\
    \ the longest palindromic substring that ends at the end of the string.\n    #\n\
    \    # We can find the longest palindrom\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp91ljuxld.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp91ljuxld.jl:1\n\
    in expression starting at /tmp/tmp91ljuxld.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Reverse the prefix\
    \ that comes before the suffix\n    prefix = reverse(string[1:end-length(suffix)])\n\
    \    # Append the prefix to the end of the string\n    return string * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvfv7y_nm.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvfv7y_nm.jl:17\n   [2] macro expansion\n     @ /tmp/tmpvfv7y_nm.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvfv7y_nm.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvfv7y_nm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvfv7y_nm.jl:17\n   [2] macro expansion\n     @ /tmp/tmpvfv7y_nm.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvfv7y_nm.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvfv7y_nm.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvfv7y_nm.jl:17\n   [2] macro expansion\n     @ /tmp/tmpvfv7y_nm.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvfv7y_nm.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvfv7y_nm.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvfv7y_nm.jl:17\n   [2] macro expansion\n     @ /tmp/tmpvfv7y_nm.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvfv7y_nm.jl:27\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfv7y_nm.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmx10b8wk.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmx10b8wk.jl:16\n   [2] macro expansion\n     @ /tmp/tmpmx10b8wk.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmx10b8wk.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmx10b8wk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmx10b8wk.jl:16\n   [2] macro expansion\n     @ /tmp/tmpmx10b8wk.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmx10b8wk.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmx10b8wk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmx10b8wk.jl:16\n   [2] macro expansion\n     @ /tmp/tmpmx10b8wk.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmx10b8wk.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmx10b8wk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmx10b8wk.jl:16\n   [2] macro expansion\n     @ /tmp/tmpmx10b8wk.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmx10b"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmx10b8wk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # This is done by finding the longest common prefix\
    \ and suffix of the string and its reverse.\n    # The longest common prefix and\
    \ suffix of the string and its reverse is the same as the longest common prefix\
    \ of the string and its reverse.\n    # The longest common prefix of the string\
    \ and its reverse is the same as the longest palindromic suffix of the string.\n\
    \    # The longest common prefix of the string and its reverse is the same as\
    \ the longest common prefix of the string and its reverse.\n    # The longest\
    \ common prefix of the string and its reverse is the same as the longest palindromic\
    \ suffix of the string.\n    # The longest common prefix of the string and its\
    \ reverse is the same as the longest palindromic suffix of the string.\n    #\
    \ The longest common prefix of the string and its reverse is the same as the longest\
    \ palindromic suffix of the string.\n    # The longest common prefix of the string\
    \ and its reverse is the same as the longest palindromic suffix of the string.\n\
    \    # The longest common prefix of the string and its reverse is the same as\
    \ the longest palindromic suffix of the string.\n    # The longest common prefix\
    \ of the string and its reverse is the same as the longest palindromic suffix\
    \ of the string.\n    # The longest common prefix of the string and its reverse\
    \ is the same as the longest palindromic suffix of the string.\n    # The longest\
    \ common prefix of the string and its reverse is the same as the longest palindromic\
    \ suffix of the string.\n    # The longest common prefix of the string and its\
    \ reverse is the same as the longest palindromic suffix of the string.\n    #\
    \ The longest common prefix of the string and its reverse is the same as the longest\
    \ palindromic suffix of the string.\n    # The longest common prefix of the string\
    \ and its reverse is the same as the longest palindromic suffix of the string.\n\
    \    # The longest common prefix of the string and its reverse is the same as\
    \ the longest palindromic suffix of the string.\n    # The longest common prefix\
    \ of the string and its reverse is the same as the longest palindromic suffix\
    \ of the string.\n    # The longest common prefix of the string and its reverse\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65c9qd_7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65c9qd_7.jl:1\n\
    in expression starting at /tmp/tmp65c9qd_7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm5n4ebiq.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm5n4ebiq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm5n4ebiq.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm5n4ebiq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm5n4ebiq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm5n4ebiq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm5n4ebiq.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm5n4ebiq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm5n4ebiq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm5n4ebiq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm5n4ebiq.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm5n4ebiq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm5n4ebiq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm5n4ebiq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm5n4ebiq.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm5n4e"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5n4ebiq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdklwsc8g.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdklwsc8g.jl:16\n   [2] macro expansion\n     @ /tmp/tmpdklwsc8g.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdklwsc8g.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdklwsc8g.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdklwsc8g.jl:16\n   [2] macro expansion\n     @ /tmp/tmpdklwsc8g.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdklwsc8g.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdklwsc8g.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdklwsc8g.jl:16\n   [2] macro expansion\n     @ /tmp/tmpdklwsc8g.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdklwsc8g.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdklwsc8g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdklwsc8g.jl:16\n   [2] macro expansion\n     @ /tmp/tmpdklwsc8g.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdklwsc8g.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdklwsc8g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    # This is done by finding the longest common prefix\
    \ and suffix of the string.\n    # The longest common prefix and suffix are the\
    \ same for a palindrome.\n    # The longest common prefix and suffix are found\
    \ using the KMP algorithm.\n    # The KMP algorithm is used to find the longest\
    \ common prefix and suffix\n    # because it is linear in time.\n    # The KMP\
    \ algorithm is described in detail here:\n    # http://www.inf.fh-flensburg.de/lang/algorithmen/pattern/kmpen.htm\n\
    \    # The KMP algorithm is implemented in the function kmp_prefix_suffix.\n \
    \   # The function kmp_prefix_suffix returns a vector of integers.\n    # The\
    \ integer at index i in the vector is the length of the longest common prefix\
    \ and suffix of the string\n    # that ends at index i.\n    # The length of the\
    \ longest common prefix and suffix of the entire string is the last element in\
    \ the vector.\n    # This is the length of the longest palindromic suffix of the\
    \ string.\n    # The longest palindromic suffix of the string is the string from\
    \ index 0 to index (length of longest palindromic suffix - 1).\n    # The string\
    \ prefix that comes before the palindromic suffix is the string from index (length\
    \ of longest palindromic suffix) to the end.\n    # The string prefix that comes\
    \ before the palindromic suffix is reversed and appended to the end of the string.\n\
    \    # The result is the shortest palindrome that begins with the supplied string.\n\
    \    return string * \" \" * reverse(string[kmp_prefix_suffix(string)[end] + 1:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkn0lrxdh.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: kmp_prefix_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkn0lrxdh.jl:34\n   [2] macro expansion\n     @ /tmp/tmpkn0lrxdh.jl:42\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkn0lrxdh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkn0lrxdh.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: kmp_prefix_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpkn0lrxdh.jl:34\n\
    \   [2] macro expansion\n     @ /tmp/tmpkn0lrxdh.jl:43 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkn0lrxdh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkn0lrxdh.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: kmp_prefix_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpkn0lrxdh.jl:34\n\
    \   [2] macro expansion\n     @ /tmp/tmpkn0lrxdh.jl:44 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkn0lrxdh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkn0lrxdh.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: kmp_prefix_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkn0lrxdh.jl:34\n   [2] macro expansion\n     @ /tmp/tmpkn0lrxdh.jl:45\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkn0lrxdh.jl:40\nTest Summary:\
    \ | Pass  Error  Total\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkn0lrxdh.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix.\n    suffix = longest_palindromic_suffix(string)\n    # Reverse the\
    \ prefix that comes before the palindromic suffix.\n    prefix = reverse(string[1:end-length(suffix)])\n\
    \    # Append the reversed prefix to the end of the string.\n    return string\
    \ * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb_n69umf.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpb_n69umf.jl:17\n   [2] macro expansion\n     @ /tmp/tmpb_n69umf.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb_n69umf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpb_n69umf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpb_n69umf.jl:17\n   [2] macro expansion\n     @ /tmp/tmpb_n69umf.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb_n69umf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpb_n69umf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpb_n69umf.jl:17\n   [2] macro expansion\n     @ /tmp/tmpb_n69umf.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb_n69umf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpb_n69umf.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpb_n69umf.jl:17\n   [2] macro expansion\n     @ /tmp/tmpb_n69umf.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb_n69umf.jl:27\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_n69umf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7sfznvon.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp7sfznvon.jl:16\n   [2] macro expansion\n     @ /tmp/tmp7sfznvon.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7sfznvon.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp7sfznvon.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp7sfznvon.jl:16\n   [2] macro expansion\n     @ /tmp/tmp7sfznvon.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7sfznvon.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp7sfznvon.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp7sfznvon.jl:16\n   [2] macro expansion\n     @ /tmp/tmp7sfznvon.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7sfznvon.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp7sfznvon.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp7sfznvon.jl:16\n   [2] macro expansion\n     @ /tmp/tmp7sfznvon.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7sfzn"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7sfznvon.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Reverse the prefix\
    \ and append it to the end of the string\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk6lsv3ad.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk6lsv3ad.jl:17\n   [2] macro expansion\n     @ /tmp/tmpk6lsv3ad.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk6lsv3ad.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpk6lsv3ad.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk6lsv3ad.jl:17\n   [2] macro expansion\n     @ /tmp/tmpk6lsv3ad.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk6lsv3ad.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpk6lsv3ad.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk6lsv3ad.jl:17\n   [2] macro expansion\n     @ /tmp/tmpk6lsv3ad.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk6lsv3ad.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpk6lsv3ad.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpk6lsv3ad.jl:17\n   [2] macro expansion\n     @ /tmp/tmpk6lsv3ad.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk6lsv3ad.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk6lsv3ad.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw4h9kfgf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpw4h9kfgf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpw4h9kfgf.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw4h9kfgf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw4h9kfgf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpw4h9kfgf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpw4h9kfgf.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw4h9kfgf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw4h9kfgf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpw4h9kfgf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpw4h9kfgf.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw4h9kfgf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw4h9kfgf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpw4h9kfgf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpw4h9kfgf.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw4h9k"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4h9kfgf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string\n    suffix = longest_palindromic_suffix(string)\n    #\
    \ Reverse the string prefix that comes before the palindromic suffix\n    prefix\
    \ = reverse(string[1:end-length(suffix)])\n    # Append the reversed prefix to\
    \ the end of the string\n    return string * prefix\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkh39atq8.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkh39atq8.jl:17\n   [2] macro expansion\n     @ /tmp/tmpkh39atq8.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkh39atq8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkh39atq8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkh39atq8.jl:17\n   [2] macro expansion\n     @ /tmp/tmpkh39atq8.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkh39atq8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkh39atq8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkh39atq8.jl:17\n   [2] macro expansion\n     @ /tmp/tmpkh39atq8.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkh39atq8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkh39atq8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkh39atq8.jl:17\n   [2] macro expansion\n     @ /tmp/tmpkh39atq8.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkh39atq8.jl:27\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkh39atq8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    for i in length(string):-1:1\n\
    \        if is_palindrome(string[i:end])\n            return string * reverse(string[1:i])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm48gq57j.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm48gq57j.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpm48gq57j.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm48gq57j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm48gq57j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm48gq57j.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpm48gq57j.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm48gq57j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm48gq57j.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm48gq57j.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpm48gq57j.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm48gq57j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm48gq57j.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm48gq57j.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpm48gq57j.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm48gq57j.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm48gq57j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprrtkoo1y.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprrtkoo1y.jl:16\n   [2] macro expansion\n     @ /tmp/tmprrtkoo1y.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprrtkoo1y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprrtkoo1y.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprrtkoo1y.jl:16\n   [2] macro expansion\n     @ /tmp/tmprrtkoo1y.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprrtkoo1y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprrtkoo1y.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprrtkoo1y.jl:16\n   [2] macro expansion\n     @ /tmp/tmprrtkoo1y.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprrtkoo1y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprrtkoo1y.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprrtkoo1y.jl:16\n   [2] macro expansion\n     @ /tmp/tmprrtkoo1y.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprrtko"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprrtkoo1y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn2yzjzfa.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn2yzjzfa.jl:16\n   [2] macro expansion\n     @ /tmp/tmpn2yzjzfa.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn2yzjzfa.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpn2yzjzfa.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn2yzjzfa.jl:16\n   [2] macro expansion\n     @ /tmp/tmpn2yzjzfa.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn2yzjzfa.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpn2yzjzfa.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn2yzjzfa.jl:16\n   [2] macro expansion\n     @ /tmp/tmpn2yzjzfa.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn2yzjzfa.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpn2yzjzfa.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn2yzjzfa.jl:16\n   [2] macro expansion\n     @ /tmp/tmpn2yzjzfa.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn2yzjzfa.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2yzjzfa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Reverse the prefix\
    \ that comes before the palindromic suffix\n    prefix = reverse(string[1:end-length(suffix)])\n\
    \    # Append the prefix to the end of the string\n    return string * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpto574jhq.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpto574jhq.jl:17\n   [2] macro expansion\n     @ /tmp/tmpto574jhq.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpto574jhq.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpto574jhq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpto574jhq.jl:17\n   [2] macro expansion\n     @ /tmp/tmpto574jhq.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpto574jhq.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpto574jhq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpto574jhq.jl:17\n   [2] macro expansion\n     @ /tmp/tmpto574jhq.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpto574jhq.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpto574jhq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpto574jhq.jl:17\n   [2] macro expansion\n     @ /tmp/tmpto574jhq.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpto574jhq.jl:27\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpto574jhq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4icn61ng.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4icn61ng.jl:16\n   [2] macro expansion\n     @ /tmp/tmp4icn61ng.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4icn61ng.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4icn61ng.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4icn61ng.jl:16\n   [2] macro expansion\n     @ /tmp/tmp4icn61ng.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4icn61ng.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4icn61ng.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4icn61ng.jl:16\n   [2] macro expansion\n     @ /tmp/tmp4icn61ng.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4icn61ng.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4icn61ng.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4icn61ng.jl:16\n   [2] macro expansion\n     @ /tmp/tmp4icn61ng.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4icn61ng.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4icn61ng.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome\n    # (i.e. the longest suffix that is also a prefix)\n\
    \    # This is done by finding the longest common prefix and suffix\n    # of\
    \ the string and its reverse.\n    # The longest common prefix and suffix are\
    \ the same,\n    # so we can use either one.\n    # The longest common prefix\
    \ is found by the KMP algorithm.\n    # The longest common suffix is found by\
    \ the KMP algorithm\n    # applied to the reverse of the string.\n    # The longest\
    \ common suffix is the same as the longest common prefix\n    # of the reverse\
    \ of the string.\n    # The reverse of the string is the same as the string with\
    \ the characters\n    # in reverse order.\n    # The reverse of the string is\
    \ the same as the string with the characters\n    # in reverse order.\n    # The\
    \ reverse of the string is the same as the string with the characters\n    # in\
    \ reverse order.\n    # The reverse of the string is the same as the string with\
    \ the characters\n    # in reverse order.\n    # The reverse of the string is\
    \ the same as the string with the characters\n    # in reverse order.\n    # The\
    \ reverse of the string is the same as the string with the characters\n    # in\
    \ reverse order.\n    # The reverse of the string is the same as the string with\
    \ the characters\n    # in reverse order.\n    # The reverse of the string is\
    \ the same as the string with the characters\n    # in reverse order.\n    # The\
    \ reverse of the string is the same as the string with the characters\n    # in\
    \ reverse order.\n    # The reverse of the string is the same as the string with\
    \ the characters\n    # in reverse order.\n    # The reverse of the string is\
    \ the same as the string with the characters\n    # in reverse order.\n    # The\
    \ reverse of the string is the same as the string with the characters\n    # in\
    \ reverse order.\n    # The reverse of the string is the same as the string with\
    \ the characters\n    # in reverse order.\n    # The reverse of the string is\
    \ the same as the string with the characters\n    # in reverse order.\n    # The\
    \ reverse of the string is the same as the string with the characters\n    #\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiwgxcttv.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiwgxcttv.jl:1\n\
    in expression starting at /tmp/tmpiwgxcttv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # Note that we can use the same function as for finding\
    \ the longest palindromic substring.\n    # The only difference is that we need\
    \ to pass the whole string as a parameter.\n    palindromic_suffix = longest_palindromic_substring(string)\n\
    \    # Find the prefix that comes before the palindromic suffix.\n    prefix =\
    \ string[1:end-length(palindromic_suffix)]\n    # Reverse the prefix and append\
    \ it to the end of the string.\n    return string * reverse(prefix)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpehpqqzmi.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_substring\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpehpqqzmi.jl:19\n   [2] macro expansion\n     @ /tmp/tmpehpqqzmi.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpehpqqzmi.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpehpqqzmi.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_substring\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpehpqqzmi.jl:19\n   [2] macro expansion\n     @ /tmp/tmpehpqqzmi.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpehpqqzmi.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpehpqqzmi.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_substring\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpehpqqzmi.jl:19\n   [2] macro expansion\n     @ /tmp/tmpehpqqzmi.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpehpqqzmi.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpehpqqzmi.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_substring\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpehpqqzmi.jl:19\n   [2] macro expansion\n     @ /tmp/tmpehpqqzmi.jl:34\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpehpqqzmi."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpehpqqzmi.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(longest_palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbm51x8vy.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbm51x8vy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbm51x8vy.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbm51x8vy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbm51x8vy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbm51x8vy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbm51x8vy.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbm51x8vy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbm51x8vy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbm51x8vy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbm51x8vy.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbm51x8vy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbm51x8vy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbm51x8vy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpbm51x8vy.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbm51x"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbm51x8vy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    suffix = longest_palindromic_suffix(string)\n   \
    \ # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpalpsvobo.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpalpsvobo.jl:17\n   [2] macro expansion\n     @ /tmp/tmpalpsvobo.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpalpsvobo.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpalpsvobo.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpalpsvobo.jl:17\n   [2] macro expansion\n     @ /tmp/tmpalpsvobo.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpalpsvobo.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpalpsvobo.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpalpsvobo.jl:17\n   [2] macro expansion\n     @ /tmp/tmpalpsvobo.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpalpsvobo.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpalpsvobo.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpalpsvobo.jl:17\n   [2] macro expansion\n     @ /tmp/tmpalpsvobo.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpalpsvobo.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpalpsvobo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    if string == reverse(string)\n\
    \        return string\n    end\n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    prefix = string[1:end-length(longest_palindrome_suffix)]\n    return string\
    \ * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu11d7af3.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu11d7af3.jl:19\n   [2] macro expansion\n     @ /tmp/tmpu11d7af3.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu11d7af3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpu11d7af3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpu11d7af3.jl:19\n   [2] macro expansion\n     @ /tmp/tmpu11d7af3.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu11d7af3.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu11d7af3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\n  \
    \  # If no palindromic suffix is found, the whole string is a palindrome\n   \
    \ return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_jenjql4.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_jenjql4.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp_jenjql4.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_jenjql4.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_jenjql4.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_jenjql4.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp_jenjql4.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_jenjql4.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_jenjql4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_jenjql4.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp_jenjql4.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_jenjql4.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_jenjql4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_jenjql4.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp_jenjql4.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_jenjql4.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_jenjql4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix that comes before the palindromic suffix\n    prefix\
    \ = reverse(string[1:end-length(longest_palindromic_suffix)])\n    return string\
    \ * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8jdecq89.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8jdecq89.jl:17\n   [2] macro expansion\n     @ /tmp/tmp8jdecq89.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8jdecq89.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8jdecq89.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8jdecq89.jl:17\n   [2] macro expansion\n     @ /tmp/tmp8jdecq89.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8jdecq89.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8jdecq89.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8jdecq89.jl:17\n   [2] macro expansion\n     @ /tmp/tmp8jdecq89.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8jdecq89.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8jdecq89.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8jdecq89.jl:17\n   [2] macro expansion\n     @ /tmp/tmp8jdecq89.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8jdecq89.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprr8l5a73.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprr8l5a73.jl:16\n   [2] macro expansion\n     @ /tmp/tmprr8l5a73.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprr8l5a73.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprr8l5a73.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprr8l5a73.jl:16\n   [2] macro expansion\n     @ /tmp/tmprr8l5a73.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprr8l5a73.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprr8l5a73.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprr8l5a73.jl:16\n   [2] macro expansion\n     @ /tmp/tmprr8l5a73.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprr8l5a73.jl:23\ntest set:\
    \ Error During Test at /tmp/tmprr8l5a73.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprr8l5a73.jl:16\n   [2] macro expansion\n     @ /tmp/tmprr8l5a73.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprr8l5"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprr8l5a73.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix of supplied string that is a palindrome.\n   \
    \ # This is the same as finding the longest prefix of the reversed string that\
    \ is a palindrome.\n    # We can do this by finding the longest common prefix\
    \ of the string and its reverse.\n    # This is a linear time algorithm.\n   \
    \ # See https://en.wikipedia.org/wiki/Longest_common_prefix_problem\n    # Note\
    \ that we can use the same algorithm to find the longest common prefix of two\
    \ strings.\n    # This is because the longest common prefix of two strings is\
    \ the same as the longest common prefix of the first string and the reverse of\
    \ the second string.\n    # This is because the longest common prefix of two strings\
    \ is the same as the longest common prefix of the first string and the reverse\
    \ of the second string.\n    # This is because the longest common prefix of two\
    \ strings is the same as the longest common prefix of the first string and the\
    \ reverse of the second string.\n    # This is because the longest common prefix\
    \ of two strings is the same as the longest common prefix of the first string\
    \ and the reverse of the second string.\n    # This is because the longest common\
    \ prefix of two strings is the same as the longest common prefix of the first\
    \ string and the reverse of the second string.\n    # This is because the longest\
    \ common prefix of two strings is the same as the longest common prefix of the\
    \ first string and the reverse of the second string.\n    # This is because the\
    \ longest common prefix of two strings is the same as the longest common prefix\
    \ of the first string and the reverse of the second string.\n    # This is because\
    \ the longest common prefix of two strings is the same as the longest common prefix\
    \ of the first string and the reverse of the second string.\n    # This is because\
    \ the longest common prefix of two strings is the same as the longest common prefix\
    \ of the first string and the reverse of the second string.\n    # This is because\
    \ the longest common prefix of two strings is the same as the longest common prefix\
    \ of the first string and the reverse of the second string.\n    # This is because\
    \ the longest common prefix of two strings is the same as the longest common prefix\
    \ of the first string and the reverse of the second string.\n    # This is because\
    \ the longest common prefix of two strings is the same as the longest common prefix\
    \ of the first string and the reverse of the second string.\n   \nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpms9mxa7h.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpms9mxa7h.jl:1\n\
    in expression starting at /tmp/tmpms9mxa7h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm603yref.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm603yref.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm603yref.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm603yref.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm603yref.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm603yref.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm603yref.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm603yref.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm603yref.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm603yref.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm603yref.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm603yref.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm603yref.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm603yref.jl:16\n   [2] macro expansion\n     @ /tmp/tmpm603yref.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm603y"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm603yref.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    suffix_length = longest_palindromic_suffix(string)\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string * string[1:end-suffix_length]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzn8ypm5v.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzn8ypm5v.jl:17\n   [2] macro expansion\n     @ /tmp/tmpzn8ypm5v.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzn8ypm5v.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzn8ypm5v.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzn8ypm5v.jl:17\n   [2] macro expansion\n     @ /tmp/tmpzn8ypm5v.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzn8ypm5v.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzn8ypm5v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzn8ypm5v.jl:17\n   [2] macro expansion\n     @ /tmp/tmpzn8ypm5v.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzn8ypm5v.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzn8ypm5v.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzn8ypm5v.jl:17\n   [2] macro expansion\n     @ /tmp/tmpzn8ypm5v.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzn8ypm5v.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzn8ypm5v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    longest_palindromic_suffix = \"\"\n    for i in 1:length(string)\n\
    \        if is_palindrome(string[i:end])\n            longest_palindromic_suffix\
    \ = string[i:end]\n            break\n        end\n    end\n    # Append reverse\
    \ of the prefix to the end of the string\n    return string * reverse(string[1:length(string)\
    \ - length(longest_palindromic_suffix)])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7nmz_kza.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7nmz_kza.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp7nmz_kza.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7nmz_kza.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp7nmz_kza.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7nmz_kza.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp7nmz_kza.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7nmz_kza.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp7nmz_kza.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7nmz_kza.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp7nmz_kza.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7nmz_kza.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp7nmz_kza.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7nmz_kza.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp7nmz_kza.jl:36 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7nmz_kza.jl:31\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7nmz_kza.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    suffix_length = find_longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix of the string that comes before the palindromic suffix.\n\
    \    prefix = reverse(string[1:end-suffix_length])\n    # Append the reversed\
    \ prefix to the end of the string.\n    return string * prefix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpac9j6nqw.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpac9j6nqw.jl:17\n   [2] macro expansion\n     @ /tmp/tmpac9j6nqw.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpac9j6nqw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpac9j6nqw.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpac9j6nqw.jl:17\n   [2] macro expansion\n     @ /tmp/tmpac9j6nqw.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpac9j6nqw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpac9j6nqw.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpac9j6nqw.jl:17\n   [2] macro expansion\n     @ /tmp/tmpac9j6nqw.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpac9j6nqw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpac9j6nqw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpac9j6nqw.jl:17\n   [2] macro expansion\n     @ /tmp/tmpac9j6nqw.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpac9j6nqw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1cjbd64i.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1cjbd64i.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1cjbd64i.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1cjbd64i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1cjbd64i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1cjbd64i.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1cjbd64i.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1cjbd64i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1cjbd64i.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1cjbd64i.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1cjbd64i.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1cjbd64i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1cjbd64i.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1cjbd64i.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1cjbd64i.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1cjbd"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1cjbd64i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix that is a palindrome.\n    # We can do it in O(n)\
    \ time using Manacher's algorithm.\n    # We can do it in O(n^2) time using KMP.\n\
    \    # We can do it in O(n^3) time by brute force.\n    # We can do it in O(n^2)\
    \ time by dynamic programming.\n    # We can do it in O(n^2) time by using suffix\
    \ trees.\n    # We can do it in O(n^2) time by using suffix arrays.\n    # We\
    \ can do it in O(n^2) time by using suffix automata.\n    # We can do it in O(n^2)\
    \ time by using suffix tries.\n    # We can do it in O(n^2) time by using suffix\
    \ tries.\n    # We can do it in O(n^2) time by using suffix tries.\n    # We can\
    \ do it in O(n^2) time by using suffix tries.\n    # We can do it in O(n^2) time\
    \ by using suffix tries.\n    # We can do it in O(n^2) time by using suffix tries.\n\
    \    # We can do it in O(n^2) time by using suffix tries.\n    # We can do it\
    \ in O(n^2) time by using suffix tries.\n    # We can do it in O(n^2) time by\
    \ using suffix tries.\n    # We can do it in O(n^2) time by using suffix tries.\n\
    \    # We can do it in O(n^2) time by using suffix tries.\n    # We can do it\
    \ in O(n^2) time by using suffix tries.\n    # We can do it in O(n^2) time by\
    \ using suffix tries.\n    # We can do it in O(n^2) time by using suffix tries.\n\
    \    # We can do it in O(n^2) time by using suffix tries.\n    # We can do it\
    \ in O(n^2) time by using suffix tries.\n    # We can do it in O(n^2) time by\
    \ using suffix tries.\n    # We can do it in O(n^2) time by using suffix tries.\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpetf1wn1y.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpetf1wn1y.jl:1\n\
    in expression starting at /tmp/tmpetf1wn1y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpojvfoowf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpojvfoowf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpojvfoowf.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojvfoowf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpojvfoowf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpojvfoowf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpojvfoowf.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojvfoowf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpojvfoowf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpojvfoowf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpojvfoowf.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojvfoowf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpojvfoowf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpojvfoowf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpojvfoowf.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojvfo"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpojvfoowf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # This is the same as finding the longest palindromic\
    \ prefix of the string reversed.\n    longest_palindromic_suffix = longest_palindromic_prefix(reverse(string))\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string * reverse(string[1:end-length(longest_palindromic_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsmn122x_.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpsmn122x_.jl:18\n   [2] macro expansion\n     @ /tmp/tmpsmn122x_.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsmn122x_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpsmn122x_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpsmn122x_.jl:18\n   [2] macro expansion\n     @ /tmp/tmpsmn122x_.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsmn122x_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpsmn122x_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_prefix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpsmn122x_.jl:18\n   [2] macro expansion\n     @ /tmp/tmpsmn122x_.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsmn122x_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpsmn122x_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpsmn122x_.jl:18\n   [2] macro expansion\n     @ /tmp/tmpsmn122x_.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsmn122x_.jl:26\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsmn122x_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix that is a palindrome\n    postfix_length = longest_palindrome_length(string)\n\
    \    # Reverse the prefix and append it to the end of the string\n    return string\
    \ * string[1:end-postfix_length]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi53d8udv.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpi53d8udv.jl:14\n   [2] macro expansion\n     @ /tmp/tmpi53d8udv.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpi53d8udv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpi53d8udv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpi53d8udv.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpi53d8udv.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpi53d8udv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpi53d8udv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpi53d8udv.jl:14\n   [2] macro expansion\n     @ /tmp/tmpi53d8udv.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpi53d8udv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpi53d8udv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_length not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpi53d8udv.jl:14\n   [2] macro expansion\n     @ /tmp/tmpi53d8udv.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpi53d8udv.jl:22\ntest set:\
    \ Error During T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi53d8udv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph0fnrqby.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph0fnrqby.jl:16\n   [2] macro expansion\n     @ /tmp/tmph0fnrqby.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph0fnrqby.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph0fnrqby.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph0fnrqby.jl:16\n   [2] macro expansion\n     @ /tmp/tmph0fnrqby.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph0fnrqby.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph0fnrqby.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph0fnrqby.jl:16\n   [2] macro expansion\n     @ /tmp/tmph0fnrqby.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph0fnrqby.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph0fnrqby.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph0fnrqby.jl:16\n   [2] macro expansion\n     @ /tmp/tmph0fnrqby.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph0fnr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0fnrqby.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfjh945r0.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfjh945r0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpfjh945r0.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfjh945r0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpfjh945r0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfjh945r0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpfjh945r0.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfjh945r0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpfjh945r0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfjh945r0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpfjh945r0.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfjh945r0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpfjh945r0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpfjh945r0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpfjh945r0.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpfjh94"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjh945r0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix.\n    palindrome_suffix = find_longest_palindrome_suffix(string)\n  \
    \  # Reverse the prefix that comes before the palindromic suffix.\n    prefix\
    \ = reverse(string[1:end-length(palindrome_suffix)])\n    # Append the reversed\
    \ prefix to the end of the string.\n    return string * prefix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpex7cunqt.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpex7cunqt.jl:17\n   [2] macro expansion\n     @ /tmp/tmpex7cunqt.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpex7cunqt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpex7cunqt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpex7cunqt.jl:17\n   [2] macro expansion\n     @ /tmp/tmpex7cunqt.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpex7cunqt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpex7cunqt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpex7cunqt.jl:17\n   [2] macro expansion\n     @ /tmp/tmpex7cunqt.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpex7cunqt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpex7cunqt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpex7cunqt.jl:17\n   [2] macro expansion\n     @ /tmp/tmpex7cunqt.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpex7cu"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpex7cunqt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkaw0b2k2.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkaw0b2k2.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkaw0b2k2.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkaw0b2k2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkaw0b2k2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkaw0b2k2.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkaw0b2k2.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkaw0b2k2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkaw0b2k2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkaw0b2k2.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkaw0b2k2.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkaw0b2k2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkaw0b2k2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkaw0b2k2.jl:16\n   [2] macro expansion\n     @ /tmp/tmpkaw0b2k2.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkaw0b"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkaw0b2k2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix\n    suffix = longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix that comes before the palindromic suffix\n    prefix\
    \ = reverse(string[1:end-length(suffix)])\n    # Append the prefix to the end\
    \ of the string\n    return string * prefix\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpul_q6ho7.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpul_q6ho7.jl:14\n   [2] macro expansion\n     @ /tmp/tmpul_q6ho7.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpul_q6ho7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpul_q6ho7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpul_q6ho7.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpul_q6ho7.jl:26 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpul_q6ho7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpul_q6ho7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpul_q6ho7.jl:14\n   [2] macro expansion\n     @ /tmp/tmpul_q6ho7.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpul_q6ho7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpul_q6ho7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpul_q6ho7.jl:14\n   [2] macro expansion\n     @ /tmp/tmpul_q6ho7.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpul_q6ho7.jl:24\ntest set:\
    \ Error Duri"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpul_q6ho7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxqrs344n.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxqrs344n.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxqrs344n.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxqrs344n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxqrs344n.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxqrs344n.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxqrs344n.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxqrs344n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxqrs344n.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxqrs344n.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxqrs344n.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxqrs344n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxqrs344n.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxqrs344n.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxqrs344n.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxqrs3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqrs344n.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphuaszosr.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphuaszosr.jl:16\n   [2] macro expansion\n     @ /tmp/tmphuaszosr.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphuaszosr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphuaszosr.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphuaszosr.jl:16\n   [2] macro expansion\n     @ /tmp/tmphuaszosr.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphuaszosr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphuaszosr.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphuaszosr.jl:16\n   [2] macro expansion\n     @ /tmp/tmphuaszosr.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphuaszosr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphuaszosr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphuaszosr.jl:16\n   [2] macro expansion\n     @ /tmp/tmphuaszosr.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphuaszosr.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphuaszosr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptat5vlsx.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptat5vlsx.jl:16\n   [2] macro expansion\n     @ /tmp/tmptat5vlsx.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptat5vlsx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptat5vlsx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptat5vlsx.jl:16\n   [2] macro expansion\n     @ /tmp/tmptat5vlsx.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptat5vlsx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptat5vlsx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptat5vlsx.jl:16\n   [2] macro expansion\n     @ /tmp/tmptat5vlsx.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptat5vlsx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptat5vlsx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptat5vlsx.jl:16\n   [2] macro expansion\n     @ /tmp/tmptat5vlsx.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptat5vlsx.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptat5vlsx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string\n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix of the string that comes before the palindromic suffix\n\
    \    prefix = reverse(string[1:end-length(longest_palindromic_suffix)])\n    #\
    \ Append the prefix to the end of the string\n    return string * prefix\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprad7jf4r.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprad7jf4r.jl:17\n   [2] macro expansion\n     @ /tmp/tmprad7jf4r.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprad7jf4r.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprad7jf4r.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprad7jf4r.jl:17\n   [2] macro expansion\n     @ /tmp/tmprad7jf4r.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprad7jf4r.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprad7jf4r.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprad7jf4r.jl:17\n   [2] macro expansion\n     @ /tmp/tmprad7jf4r.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprad7jf4r.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprad7jf4r.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmprad7jf4r.jl:17\n   [2] macro expansion\n     @ /tmp/tmprad7jf4r.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprad7jf4r.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix.\n    suffix_length = longest_palindromic_suffix(string)\n    # Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    return string * string[1:end-suffix_length]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpebg3szuo.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpebg3szuo.jl:17\n   [2] macro expansion\n     @ /tmp/tmpebg3szuo.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpebg3szuo.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpebg3szuo.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpebg3szuo.jl:17\n   [2] macro expansion\n     @ /tmp/tmpebg3szuo.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpebg3szuo.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpebg3szuo.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpebg3szuo.jl:17\n   [2] macro expansion\n     @ /tmp/tmpebg3szuo.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpebg3szuo.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpebg3szuo.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpebg3szuo.jl:17\n   [2] macro expansion\n     @ /tmp/tmpebg3szuo.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpebg3szuo.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpebg3szuo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix of the string.\n    suffix = longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix of the string that comes before the palindromic suffix.\n\
    \    prefix = reverse(string[1:end-length(suffix)])\n    # Append the reversed\
    \ prefix to the end of the string.\n    return string * prefix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzcjr9jqq.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzcjr9jqq.jl:14\n   [2] macro expansion\n     @ /tmp/tmpzcjr9jqq.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzcjr9jqq.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzcjr9jqq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzcjr9jqq.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpzcjr9jqq.jl:26 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzcjr9jqq.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzcjr9jqq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzcjr9jqq.jl:14\n   [2] macro expansion\n     @ /tmp/tmpzcjr9jqq.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzcjr9jqq.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzcjr9jqq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzcjr9jqq.jl:14\n   [2] macro expansion\n     @ /tmp/tmpzcjr9jqq.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzcjr9jqq.jl:24\ntest set:\
    \ Error Duri"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzcjr9jqq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp204v9bwm.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp204v9bwm.jl:16\n   [2] macro expansion\n     @ /tmp/tmp204v9bwm.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp204v9bwm.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp204v9bwm.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp204v9bwm.jl:16\n   [2] macro expansion\n     @ /tmp/tmp204v9bwm.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp204v9bwm.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp204v9bwm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp204v9bwm.jl:16\n   [2] macro expansion\n     @ /tmp/tmp204v9bwm.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp204v9bwm.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp204v9bwm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp204v9bwm.jl:16\n   [2] macro expansion\n     @ /tmp/tmp204v9bwm.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp204v9"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp204v9bwm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuadxrn0h.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpuadxrn0h.jl:16\n   [2] macro expansion\n     @ /tmp/tmpuadxrn0h.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuadxrn0h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpuadxrn0h.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpuadxrn0h.jl:16\n   [2] macro expansion\n     @ /tmp/tmpuadxrn0h.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuadxrn0h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpuadxrn0h.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpuadxrn0h.jl:16\n   [2] macro expansion\n     @ /tmp/tmpuadxrn0h.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuadxrn0h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpuadxrn0h.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpuadxrn0h.jl:16\n   [2] macro expansion\n     @ /tmp/tmpuadxrn0h.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuadxr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuadxrn0h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpflt851jx.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpflt851jx.jl:16\n   [2] macro expansion\n     @ /tmp/tmpflt851jx.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpflt851jx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpflt851jx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpflt851jx.jl:16\n   [2] macro expansion\n     @ /tmp/tmpflt851jx.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpflt851jx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpflt851jx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpflt851jx.jl:16\n   [2] macro expansion\n     @ /tmp/tmpflt851jx.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpflt851jx.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpflt851jx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpflt851jx.jl:16\n   [2] macro expansion\n     @ /tmp/tmpflt851jx.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpflt851jx.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpflt851jx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    # The longest postfix that is a palindrome is the\
    \ same as the longest prefix that is a palindrome.\n    # This is because the\
    \ string is reversed.\n    longest_palindrome_prefix = longest_palindrome_prefix(string)\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string * string[1:end-length(longest_palindrome_prefix)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvbfzq1yy.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvbfzq1yy.jl:19\n   [2] macro expansion\n     @ /tmp/tmpvbfzq1yy.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvbfzq1yy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvbfzq1yy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvbfzq1yy.jl:19\n   [2] macro expansion\n     @ /tmp/tmpvbfzq1yy.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvbfzq1yy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvbfzq1yy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_prefix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvbfzq1yy.jl:19\n   [2] macro expansion\n     @ /tmp/tmpvbfzq1yy.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvbfzq1yy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvbfzq1yy.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpvbfzq1yy.jl:19\n   [2] macro expansion\n     @ /tmp/tmpvbfzq1yy.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvbfzq1yy.jl:27\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbfzq1yy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Reverse the prefix\
    \ and append it to the end of the string\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm4s6divx.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm4s6divx.jl:17\n   [2] macro expansion\n     @ /tmp/tmpm4s6divx.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm4s6divx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpm4s6divx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm4s6divx.jl:17\n   [2] macro expansion\n     @ /tmp/tmpm4s6divx.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm4s6divx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpm4s6divx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm4s6divx.jl:17\n   [2] macro expansion\n     @ /tmp/tmpm4s6divx.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm4s6divx.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpm4s6divx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpm4s6divx.jl:17\n   [2] macro expansion\n     @ /tmp/tmpm4s6divx.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm4s6divx.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm4s6divx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix of supplied string that is a palindrome.\n   \
    \ # This is done by finding the longest common prefix and suffix of the string\
    \ and its reverse.\n    # This is done in O(n) time using the KMP algorithm.\n\
    \    # The longest common prefix and suffix of a string and its reverse are the\
    \ same.\n    # The longest common prefix and suffix of a string and its reverse\
    \ are the same.\n    # The longest common prefix and suffix of a string and its\
    \ reverse are the same.\n    # The longest common prefix and suffix of a string\
    \ and its reverse are the same.\n    # The longest common prefix and suffix of\
    \ a string and its reverse are the same.\n    # The longest common prefix and\
    \ suffix of a string and its reverse are the same.\n    # The longest common prefix\
    \ and suffix of a string and its reverse are the same.\n    # The longest common\
    \ prefix and suffix of a string and its reverse are the same.\n    # The longest\
    \ common prefix and suffix of a string and its reverse are the same.\n    # The\
    \ longest common prefix and suffix of a string and its reverse are the same.\n\
    \    # The longest common prefix and suffix of a string and its reverse are the\
    \ same.\n    # The longest common prefix and suffix of a string and its reverse\
    \ are the same.\n    # The longest common prefix and suffix of a string and its\
    \ reverse are the same.\n    # The longest common prefix and suffix of a string\
    \ and its reverse are the same.\n    # The longest common prefix and suffix of\
    \ a string and its reverse are the same.\n    # The longest common prefix and\
    \ suffix of a string and its reverse are the same.\n    # The longest common prefix\
    \ and suffix of a string and its reverse are the same.\n    # The longest common\
    \ prefix and suffix of a string and its reverse are the same.\n    # The longest\
    \ common prefix and suffix of a string and its reverse are the same.\n    # The\
    \ longest common prefix and suffix of a string and its reverse are the same.\n\
    \    # The longest common prefix and suffix of a string and its reverse are the\
    \ same.\n    # The longest common prefix and suffix of a string and its reverse\
    \ are the same.\n    # The longest common prefix and suffix of a string and its\
    \ reverse are the same.\n    # The longest common prefix and suffix of a string\
    \ and its reverse are the same\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp29r2hidp.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp29r2hidp.jl:1\n\
    in expression starting at /tmp/tmp29r2hidp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmponffn75a.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmponffn75a.jl:16\n   [2] macro expansion\n     @ /tmp/tmponffn75a.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmponffn75a.jl:23\ntest set:\
    \ Error During Test at /tmp/tmponffn75a.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmponffn75a.jl:16\n   [2] macro expansion\n     @ /tmp/tmponffn75a.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmponffn75a.jl:23\ntest set:\
    \ Error During Test at /tmp/tmponffn75a.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmponffn75a.jl:16\n   [2] macro expansion\n     @ /tmp/tmponffn75a.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmponffn75a.jl:23\ntest set:\
    \ Error During Test at /tmp/tmponffn75a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmponffn75a.jl:16\n   [2] macro expansion\n     @ /tmp/tmponffn75a.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmponffn"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponffn75a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyj3c77q_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyj3c77q_.jl:16\n   [2] macro expansion\n     @ /tmp/tmpyj3c77q_.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyj3c77q_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyj3c77q_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyj3c77q_.jl:16\n   [2] macro expansion\n     @ /tmp/tmpyj3c77q_.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyj3c77q_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyj3c77q_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyj3c77q_.jl:16\n   [2] macro expansion\n     @ /tmp/tmpyj3c77q_.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyj3c77q_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyj3c77q_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyj3c77q_.jl:16\n   [2] macro expansion\n     @ /tmp/tmpyj3c77q_.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyj3c77q_.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyj3c77q_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    longest_palindromic_suffix = longest_palindromic_suffix(string)\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string * reverse(string[1:end-length(longest_palindromic_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplw37d4w0.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplw37d4w0.jl:17\n   [2] macro expansion\n     @ /tmp/tmplw37d4w0.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplw37d4w0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplw37d4w0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplw37d4w0.jl:17\n   [2] macro expansion\n     @ /tmp/tmplw37d4w0.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplw37d4w0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplw37d4w0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplw37d4w0.jl:17\n   [2] macro expansion\n     @ /tmp/tmplw37d4w0.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplw37d4w0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplw37d4w0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplw37d4w0.jl:17\n   [2] macro expansion\n     @ /tmp/tmplw37d4w0.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplw37d4w0.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplw37d4w0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    return string * reverse(string[1:end-length(suffix)])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmfp1h4g9.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmfp1h4g9.jl:17\n   [2] macro expansion\n     @ /tmp/tmpmfp1h4g9.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmfp1h4g9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmfp1h4g9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmfp1h4g9.jl:17\n   [2] macro expansion\n     @ /tmp/tmpmfp1h4g9.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmfp1h4g9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmfp1h4g9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmfp1h4g9.jl:17\n   [2] macro expansion\n     @ /tmp/tmpmfp1h4g9.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmfp1h4g9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmfp1h4g9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmfp1h4g9.jl:17\n   [2] macro expansion\n     @ /tmp/tmpmfp1h4g9.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmfp1h4g9.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmfp1h4g9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnbyp24ds.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnbyp24ds.jl:16\n   [2] macro expansion\n     @ /tmp/tmpnbyp24ds.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnbyp24ds.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnbyp24ds.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnbyp24ds.jl:16\n   [2] macro expansion\n     @ /tmp/tmpnbyp24ds.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnbyp24ds.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnbyp24ds.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnbyp24ds.jl:16\n   [2] macro expansion\n     @ /tmp/tmpnbyp24ds.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnbyp24ds.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnbyp24ds.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnbyp24ds.jl:16\n   [2] macro expansion\n     @ /tmp/tmpnbyp24ds.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnbyp24ds.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnbyp24ds.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp53v7ym1d.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53v7ym1d.jl:16\n   [2] macro expansion\n     @ /tmp/tmp53v7ym1d.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp53v7ym1d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp53v7ym1d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53v7ym1d.jl:16\n   [2] macro expansion\n     @ /tmp/tmp53v7ym1d.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp53v7ym1d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp53v7ym1d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53v7ym1d.jl:16\n   [2] macro expansion\n     @ /tmp/tmp53v7ym1d.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp53v7ym1d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp53v7ym1d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53v7ym1d.jl:16\n   [2] macro expansion\n     @ /tmp/tmp53v7ym1d.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp53v7y"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53v7ym1d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5d9x73lb.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp5d9x73lb.jl:16\n   [2] macro expansion\n     @ /tmp/tmp5d9x73lb.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5d9x73lb.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5d9x73lb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp5d9x73lb.jl:16\n   [2] macro expansion\n     @ /tmp/tmp5d9x73lb.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5d9x73lb.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5d9x73lb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp5d9x73lb.jl:16\n   [2] macro expansion\n     @ /tmp/tmp5d9x73lb.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5d9x73lb.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5d9x73lb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp5d9x73lb.jl:16\n   [2] macro expansion\n     @ /tmp/tmp5d9x73lb.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5d9x7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5d9x73lb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix_length\
    \ = longest_palindrome_suffix_length(string)\n    return string * string[1:end-longest_palindrome_suffix_length]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpabuth4wf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpabuth4wf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpabuth4wf.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpabuth4wf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpabuth4wf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpabuth4wf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpabuth4wf.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpabuth4wf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpabuth4wf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpabuth4wf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpabuth4wf.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpabuth4wf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpabuth4wf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpabuth4wf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpabuth4wf.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabuth4wf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8lmfu1wf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8lmfu1wf.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8lmfu1wf.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8lmfu1wf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8lmfu1wf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8lmfu1wf.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8lmfu1wf.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8lmfu1wf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8lmfu1wf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8lmfu1wf.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8lmfu1wf.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8lmfu1wf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8lmfu1wf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8lmfu1wf.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8lmfu1wf.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8lmfu"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8lmfu1wf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix.\n    # If the string is already a\
    \ palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest palindromic suffix.\n    # If the string is already\
    \ a palindrome, return it.\n    if is_palindrome(string)\n        return string\n\
    \    end\n    # Find the longest\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4wr82v5r.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4wr82v5r.jl:1\n\
    in expression starting at /tmp/tmp4wr82v5r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    if length(string)\
    \ == 1\n        return string * 2\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix_length = 0\n    for i in 1:length(string)\n        if is_palindrome(string[end-i+1:end])\n\
    \            suffix_length = i\n            break\n        end\n    end\n    #\
    \ Append the reverse of the prefix\n    return string * 2[1:end-suffix_length]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    # This is the same as finding the longest prefix\
    \ that is a palindrome.\n    # We can do this by reversing the string and finding\
    \ the longest prefix that is a palindrome.\n    # This is the same as finding\
    \ the longest postfix that is a palindrome.\n    longest_palindromic_postfix =\
    \ longest_palindromic_postfix(string)\n    # Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    return string\
    \ * string[1:end-length(longest_palindromic_postfix)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt9hrgl0b.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt9hrgl0b.jl:20\n   [2] macro expansion\n     @ /tmp/tmpt9hrgl0b.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt9hrgl0b.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpt9hrgl0b.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt9hrgl0b.jl:20\n   [2] macro expansion\n     @ /tmp/tmpt9hrgl0b.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt9hrgl0b.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpt9hrgl0b.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt9hrgl0b.jl:20\n   [2] macro expansion\n     @ /tmp/tmpt9hrgl0b.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt9hrgl0b.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpt9hrgl0b.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt9hrgl0b.jl:20\n   [2] macro expansion\n     @ /tmp/tmpt9hrgl0b.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt9hrgl0b.jl:28\nTe"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt9hrgl0b.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmparp5n1zp.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmparp5n1zp.jl:16\n   [2] macro expansion\n     @ /tmp/tmparp5n1zp.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmparp5n1zp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmparp5n1zp.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmparp5n1zp.jl:16\n   [2] macro expansion\n     @ /tmp/tmparp5n1zp.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmparp5n1zp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmparp5n1zp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmparp5n1zp.jl:16\n   [2] macro expansion\n     @ /tmp/tmparp5n1zp.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmparp5n1zp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmparp5n1zp.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmparp5n1zp.jl:16\n   [2] macro expansion\n     @ /tmp/tmparp5n1zp.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmparp5n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmparp5n1zp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    prefix = string[1:end-length(longest_palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc_y7q4jy.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpc_y7q4jy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpc_y7q4jy.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpc_y7q4jy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc_y7q4jy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpc_y7q4jy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpc_y7q4jy.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpc_y7q4jy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc_y7q4jy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpc_y7q4jy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpc_y7q4jy.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpc_y7q4jy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc_y7q4jy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpc_y7q4jy.jl:16\n   [2] macro expansion\n     @ /tmp/tmpc_y7q4jy.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpc_y7q"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_y7q4jy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    for i in 1:length(string)\n        if is_palindrome(string[end-i+1:end])\n\
    \            return string * reverse(string[1:end-i])\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_ibed54i.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_ibed54i.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp_ibed54i.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_ibed54i.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_ibed54i.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_ibed54i.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp_ibed54i.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_ibed54i.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_ibed54i.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_ibed54i.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp_ibed54i.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_ibed54i.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_ibed54i.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_ibed54i.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp_ibed54i.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_ibed54i.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ibed54i.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzukwcky4.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzukwcky4.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzukwcky4.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzukwcky4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzukwcky4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzukwcky4.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzukwcky4.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzukwcky4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzukwcky4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzukwcky4.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzukwcky4.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzukwcky4.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzukwcky4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzukwcky4.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzukwcky4.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzukwc"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzukwcky4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = find_longest_palindromic_suffix(string)\n    # Reverse\
    \ the string prefix that comes before the palindromic suffix\n    prefix = reverse(string[1:end-length(suffix)])\n\
    \    # Append the reversed prefix to the end of the string\n    return string\
    \ * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph2o8hg8j.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph2o8hg8j.jl:17\n   [2] macro expansion\n     @ /tmp/tmph2o8hg8j.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph2o8hg8j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph2o8hg8j.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph2o8hg8j.jl:17\n   [2] macro expansion\n     @ /tmp/tmph2o8hg8j.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph2o8hg8j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph2o8hg8j.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph2o8hg8j.jl:17\n   [2] macro expansion\n     @ /tmp/tmph2o8hg8j.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph2o8hg8j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph2o8hg8j.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph2o8hg8j.jl:17\n   [2] macro expansion\n     @ /tmp/tmph2o8hg8j.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2o8hg8j.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    if is_palindrome(string)\n\
    \        return string\n    end\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc9714y8y.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc9714y8y.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpc9714y8y.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpc9714y8y.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpc9714y8y.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc9714y8y.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpc9714y8y.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpc9714y8y.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpc9714y8y.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc9714y8y.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpc9714y8y.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpc9714y8y.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpc9714y8y.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpc9714y8y.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpc9714y8y.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpc9714y8y.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc9714y8y.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj6rle88f.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj6rle88f.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj6rle88f.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj6rle88f.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj6rle88f.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj6rle88f.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj6rle88f.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj6rle88f.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj6rle88f.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj6rle88f.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj6rle88f.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj6rle88f.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj6rle88f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj6rle88f.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj6rle88f.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj6rle"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj6rle88f.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\n  \
    \  # If no palindromic suffix found, then the whole string is a palindrome.\n\
    \    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9_gr1oaw.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp9_gr1oaw.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp9_gr1oaw.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9_gr1oaw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9_gr1oaw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp9_gr1oaw.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp9_gr1oaw.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9_gr1oaw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9_gr1oaw.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp9_gr1oaw.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp9_gr1oaw.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9_gr1oaw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9_gr1oaw.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp9_gr1oaw.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp9_gr1oaw.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9_gr1oaw.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_gr1oaw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphoujx6x8.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphoujx6x8.jl:16\n   [2] macro expansion\n     @ /tmp/tmphoujx6x8.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphoujx6x8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphoujx6x8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphoujx6x8.jl:16\n   [2] macro expansion\n     @ /tmp/tmphoujx6x8.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphoujx6x8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphoujx6x8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphoujx6x8.jl:16\n   [2] macro expansion\n     @ /tmp/tmphoujx6x8.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphoujx6x8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphoujx6x8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphoujx6x8.jl:16\n   [2] macro expansion\n     @ /tmp/tmphoujx6x8.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphoujx"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphoujx6x8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    palindrome_suffix = \"\"\n    for i in 1:length(string)\n      \
    \  if is_palindrome(string[end-i+1:end])\n            palindrome_suffix = string[end-i+1:end]\n\
    \            break\n        end\n    end\n    # Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    return\
    \ string * reverse(string[1:end-length(palindrome_suffix)])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpylai5yx6.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpylai5yx6.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpylai5yx6.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpylai5yx6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpylai5yx6.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpylai5yx6.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpylai5yx6.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpylai5yx6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpylai5yx6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpylai5yx6.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpylai5yx6.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpylai5yx6.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpylai5yx6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpylai5yx6.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpylai5yx6.jl:36 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpylai5yx6.jl:31\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpylai5yx6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n    return\
    \ string * string[1:end-longest_palindrome_suffix]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn2c6px2y.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn2c6px2y.jl:13\n   [2] macro expansion\n     @ /tmp/tmpn2c6px2y.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn2c6px2y.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpn2c6px2y.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn2c6px2y.jl:13\n   [2] macro expansion\n     @ /tmp/tmpn2c6px2y.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn2c6px2y.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpn2c6px2y.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn2c6px2y.jl:13\n   [2] macro expansion\n     @ /tmp/tmpn2c6px2y.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn2c6px2y.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpn2c6px2y.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpn2c6px2y.jl:13\n   [2] macro expansion\n     @ /tmp/tmpn2c6px2y.jl:24\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn2c6px2y.jl:20\ntest"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2c6px2y.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    for i in 1:length(string)\n\
    \        if is_palindrome(string[i:end])\n            return string * reverse(string[1:i-1])\n\
    \        end\n    end\n    return string * reverse(string[1:end])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzmv8jn6h.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzmv8jn6h.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpzmv8jn6h.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzmv8jn6h.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzmv8jn6h.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzmv8jn6h.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpzmv8jn6h.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzmv8jn6h.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzmv8jn6h.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzmv8jn6h.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpzmv8jn6h.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzmv8jn6h.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzmv8jn6h.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpzmv8jn6h.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpzmv8jn6h.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzmv8jn6h.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmv8jn6h.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Reverse the prefix\
    \ and append it to the end of the string\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpagbwm5c6.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpagbwm5c6.jl:17\n   [2] macro expansion\n     @ /tmp/tmpagbwm5c6.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpagbwm5c6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpagbwm5c6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpagbwm5c6.jl:17\n   [2] macro expansion\n     @ /tmp/tmpagbwm5c6.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpagbwm5c6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpagbwm5c6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpagbwm5c6.jl:17\n   [2] macro expansion\n     @ /tmp/tmpagbwm5c6.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpagbwm5c6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpagbwm5c6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpagbwm5c6.jl:17\n   [2] macro expansion\n     @ /tmp/tmpagbwm5c6.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpagbwm5c6.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpagbwm5c6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps2huy3g5.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps2huy3g5.jl:16\n   [2] macro expansion\n     @ /tmp/tmps2huy3g5.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps2huy3g5.jl:23\ntest set:\
    \ Error During Test at /tmp/tmps2huy3g5.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps2huy3g5.jl:16\n   [2] macro expansion\n     @ /tmp/tmps2huy3g5.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps2huy3g5.jl:23\ntest set:\
    \ Error During Test at /tmp/tmps2huy3g5.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps2huy3g5.jl:16\n   [2] macro expansion\n     @ /tmp/tmps2huy3g5.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps2huy3g5.jl:23\ntest set:\
    \ Error During Test at /tmp/tmps2huy3g5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps2huy3g5.jl:16\n   [2] macro expansion\n     @ /tmp/tmps2huy3g5.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps2huy"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps2huy3g5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    suffix = longest_palindromic_suffix(string)\n   \
    \ # Reverse the prefix of the string that comes before the palindromic suffix.\n\
    \    prefix = reverse(string[1:end-length(suffix)])\n    # Append the reversed\
    \ prefix to the end of the string.\n    return string * prefix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3eaaqgtl.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3eaaqgtl.jl:17\n   [2] macro expansion\n     @ /tmp/tmp3eaaqgtl.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3eaaqgtl.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3eaaqgtl.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3eaaqgtl.jl:17\n   [2] macro expansion\n     @ /tmp/tmp3eaaqgtl.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3eaaqgtl.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3eaaqgtl.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3eaaqgtl.jl:17\n   [2] macro expansion\n     @ /tmp/tmp3eaaqgtl.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3eaaqgtl.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3eaaqgtl.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3eaaqgtl.jl:17\n   [2] macro expansion\n     @ /tmp/tmp3eaaqgtl.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3eaaqgtl.jl:27\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3eaaqgtl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    for i in 1:length(string)\n\
    \        if is_palindrome(string[1:end-i+1])\n            return string * reverse(string[1:end-i+1])\n\
    \        end\n    end\n    return string * reverse(string[1:end])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm8pre1im.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm8pre1im.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpm8pre1im.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm8pre1im.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpm8pre1im.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm8pre1im.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpm8pre1im.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm8pre1im.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpm8pre1im.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm8pre1im.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpm8pre1im.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm8pre1im.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpm8pre1im.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpm8pre1im.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpm8pre1im.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpm8pre1im.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8pre1im.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzlxafvkl.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzlxafvkl.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzlxafvkl.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzlxafvkl.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzlxafvkl.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzlxafvkl.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzlxafvkl.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzlxafvkl.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzlxafvkl.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzlxafvkl.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzlxafvkl.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzlxafvkl.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzlxafvkl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzlxafvkl.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzlxafvkl.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzlxaf"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzlxafvkl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp23h9ptk0.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp23h9ptk0.jl:16\n   [2] macro expansion\n     @ /tmp/tmp23h9ptk0.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp23h9ptk0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp23h9ptk0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp23h9ptk0.jl:16\n   [2] macro expansion\n     @ /tmp/tmp23h9ptk0.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp23h9ptk0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp23h9ptk0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp23h9ptk0.jl:16\n   [2] macro expansion\n     @ /tmp/tmp23h9ptk0.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp23h9ptk0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp23h9ptk0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp23h9ptk0.jl:16\n   [2] macro expansion\n     @ /tmp/tmp23h9ptk0.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp23h9p"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp23h9ptk0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome.\n    # This is the same as finding the longest prefix\
    \ that is a palindrome.\n    # We can do this by reversing the string and finding\
    \ the longest prefix that is a palindrome.\n    # This is the same as finding\
    \ the longest postfix that is a palindrome.\n    # We can do this by reversing\
    \ the string and finding the longest prefix that is a palindrome.\n    # We can\
    \ do this by reversing the string and finding the longest prefix that is a palindrome.\n\
    \    # We can do this by reversing the string and finding the longest prefix that\
    \ is a palindrome.\n    # We can do this by reversing the string and finding the\
    \ longest prefix that is a palindrome.\n    # We can do this by reversing the\
    \ string and finding the longest prefix that is a palindrome.\n    # We can do\
    \ this by reversing the string and finding the longest prefix that is a palindrome.\n\
    \    # We can do this by reversing the string and finding the longest prefix that\
    \ is a palindrome.\n    # We can do this by reversing the string and finding the\
    \ longest prefix that is a palindrome.\n    # We can do this by reversing the\
    \ string and finding the longest prefix that is a palindrome.\n    # We can do\
    \ this by reversing the string and finding the longest prefix that is a palindrome.\n\
    \    # We can do this by reversing the string and finding the longest prefix that\
    \ is a palindrome.\n    # We can do this by reversing the string and finding the\
    \ longest prefix that is a palindrome.\n    # We can do this by reversing the\
    \ string and finding the longest prefix that is a palindrome.\n    # We can do\
    \ this by reversing the string and finding the longest prefix that is a palindrome.\n\
    \    # We can do this by reversing the string and finding the longest prefix that\
    \ is a palindrome.\n    # We can do this by reversing the string and finding the\
    \ longest prefix that is a palindrome.\n    # We can do this by reversing the\
    \ string and finding the longest prefix that is a palindrome.\n    # We can do\
    \ this by reversing the string and finding the longest prefix that is a palindrome.\n\
    \    # We can do this by\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa3x8uf6h.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa3x8uf6h.jl:1\n\
    in expression starting at /tmp/tmpa3x8uf6h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdtqkmow0.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdtqkmow0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpdtqkmow0.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdtqkmow0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdtqkmow0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdtqkmow0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpdtqkmow0.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdtqkmow0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdtqkmow0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdtqkmow0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpdtqkmow0.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdtqkmow0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdtqkmow0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdtqkmow0.jl:16\n   [2] macro expansion\n     @ /tmp/tmpdtqkmow0.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdtqkm"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdtqkmow0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    # Reverse the prefix that comes before the palindromic suffix\n    prefix\
    \ = reverse(string[1:end-length(longest_palindrome_suffix)])\n    return string\
    \ * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvv1s2fpx.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"x\") == \"x\"\\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmpvv1s2fpx.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpvv1s2fpx.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvv1s2fpx.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpvv1s2fpx.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmpvv1s2fpx.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpvv1s2fpx.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvv1s2fpx.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpvv1s2fpx.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmpvv1s2fpx.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpvv1s2fpx.jl:30\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvv1s2fpx.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpvv1s2fpx.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmpvv1s2fpx.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpvv1s2fpx.jl:31\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [i"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr378nhil.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"x\") == \"x\"\\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmpr378nhil.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpr378nhil.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr378nhil.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpr378nhil.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmpr378nhil.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpr378nhil.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr378nhil.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpr378nhil.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmpr378nhil.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpr378nhil.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr378nhil.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpr378nhil.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmpr378nhil.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpr378nhil.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [i"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix\n    suffix = longest_palindromic_suffix(string)\n    # Append the reverse\
    \ of the prefix to the end of the string\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplwl0yqug.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplwl0yqug.jl:17\n   [2] macro expansion\n     @ /tmp/tmplwl0yqug.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplwl0yqug.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplwl0yqug.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplwl0yqug.jl:17\n   [2] macro expansion\n     @ /tmp/tmplwl0yqug.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplwl0yqug.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplwl0yqug.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplwl0yqug.jl:17\n   [2] macro expansion\n     @ /tmp/tmplwl0yqug.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplwl0yqug.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplwl0yqug.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplwl0yqug.jl:17\n   [2] macro expansion\n     @ /tmp/tmplwl0yqug.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplwl0yqug.jl:25\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwl0yqug.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix.\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\n  \
    \  # If no palindromic suffix found, the whole string is a palindrome.\n    return\
    \ string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ya56bag.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ya56bag.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp1ya56bag.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ya56bag.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1ya56bag.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ya56bag.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp1ya56bag.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ya56bag.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1ya56bag.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ya56bag.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp1ya56bag.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ya56bag.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1ya56bag.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1ya56bag.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp1ya56bag.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1ya56bag.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ya56bag.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpufx4fw2c.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpufx4fw2c.jl:16\n   [2] macro expansion\n     @ /tmp/tmpufx4fw2c.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpufx4fw2c.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpufx4fw2c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpufx4fw2c.jl:16\n   [2] macro expansion\n     @ /tmp/tmpufx4fw2c.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpufx4fw2c.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpufx4fw2c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpufx4fw2c.jl:16\n   [2] macro expansion\n     @ /tmp/tmpufx4fw2c.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpufx4fw2c.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpufx4fw2c.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpufx4fw2c.jl:16\n   [2] macro expansion\n     @ /tmp/tmpufx4fw2c.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpufx4f"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpufx4fw2c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3caa9fvf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3caa9fvf.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3caa9fvf.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3caa9fvf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3caa9fvf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3caa9fvf.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3caa9fvf.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3caa9fvf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3caa9fvf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3caa9fvf.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3caa9fvf.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3caa9fvf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3caa9fvf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3caa9fvf.jl:16\n   [2] macro expansion\n     @ /tmp/tmp3caa9fvf.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3caa9"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3caa9fvf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpivrj_kxv.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpivrj_kxv.jl:16\n   [2] macro expansion\n     @ /tmp/tmpivrj_kxv.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpivrj_kxv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpivrj_kxv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpivrj_kxv.jl:16\n   [2] macro expansion\n     @ /tmp/tmpivrj_kxv.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpivrj_kxv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpivrj_kxv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpivrj_kxv.jl:16\n   [2] macro expansion\n     @ /tmp/tmpivrj_kxv.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpivrj_kxv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpivrj_kxv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpivrj_kxv.jl:16\n   [2] macro expansion\n     @ /tmp/tmpivrj_kxv.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpivrj_"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivrj_kxv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    longest_palindromic_suffix = longest_palindromic_suffix(string)\n\
    \    # Reverse the string prefix that comes before the palindromic suffix.\n \
    \   reversed_prefix = reverse(string[1:end-length(longest_palindromic_suffix)])\n\
    \    # Append the reversed prefix to the end of the string.\n    return string\
    \ * reversed_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7htkshia.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"x\") == \"x\"\\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmp7htkshia.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmp7htkshia.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7htkshia.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp7htkshia.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmp7htkshia.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmp7htkshia.jl:30\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7htkshia.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp7htkshia.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmp7htkshia.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmp7htkshia.jl:31\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7htkshia.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp7htkshia.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n    \
    \ @ Main /tmp/tmp7htkshia.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmp7htkshia.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix.\n    # This is the longest palindrome that ends at the end of the string.\n\
    \    # We can do this by finding the longest palindrome that starts at the beginning\
    \ of the string.\n    # This is the same as finding the longest palindrome that\
    \ starts at the end of the string.\n    # We can do this by reversing the string\
    \ and finding the longest palindrome that starts at the beginning of the string.\n\
    \    # This is the same as finding the longest palindrome that starts at the end\
    \ of the string.\n    # We can do this by reversing the string and finding the\
    \ longest palindrome that starts at the beginning of the string.\n    # This is\
    \ the same as finding the longest palindrome that starts at the end of the string.\n\
    \    # We can do this by reversing the string and finding the longest palindrome\
    \ that starts at the beginning of the string.\n    # This is the same as finding\
    \ the longest palindrome that starts at the end of the string.\n    # We can do\
    \ this by reversing the string and finding the longest palindrome that starts\
    \ at the beginning of the string.\n    # This is the same as finding the longest\
    \ palindrome that starts at the end of the string.\n    # We can do this by reversing\
    \ the string and finding the longest palindrome that starts at the beginning of\
    \ the string.\n    # This is the same as finding the longest palindrome that starts\
    \ at the end of the string.\n    # We can do this by reversing the string and\
    \ finding the longest palindrome that starts at the beginning of the string.\n\
    \    # This is the same as finding the longest palindrome that starts at the end\
    \ of the string.\n    # We can do this by reversing the string and finding the\
    \ longest palindrome that starts at the beginning of the string.\n    # This is\
    \ the same as finding the longest palindrome that starts at the end of the string.\n\
    \    # We can do this by reversing the string and finding the longest palindrome\
    \ that starts at the beginning of the string.\n    # This is the same as finding\
    \ the longest palindrome that starts at the end of the string.\n    # We can do\
    \ this by reversing the string and finding the longest palindrome that starts\
    \ at the\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqm4v1o0y.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqm4v1o0y.jl:1\n\
    in expression starting at /tmp/tmpqm4v1o0y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix\n    suffix_length = longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix that comes before the palindromic suffix\n    prefix\
    \ = reverse(string[1:end-suffix_length])\n    # Append the reversed prefix to\
    \ the end of the string\n    return string * prefix\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp4fpgir9.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp4fpgir9.jl:14\n   [2] macro expansion\n     @ /tmp/tmpp4fpgir9.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp4fpgir9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpp4fpgir9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpp4fpgir9.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpp4fpgir9.jl:26 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp4fpgir9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpp4fpgir9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp4fpgir9.jl:14\n   [2] macro expansion\n     @ /tmp/tmpp4fpgir9.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp4fpgir9.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpp4fpgir9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp4fpgir9.jl:14\n   [2] macro expansion\n     @ /tmp/tmpp4fpgir9.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp4fpgir9.jl:24\ntest set:\
    \ Error Duri"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp4fpgir9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix.\n    suffix = find_longest_palindromic_suffix(string)\n\
    \    # Reverse the prefix that comes before the palindromic suffix.\n    prefix\
    \ = reverse(string[1:end-length(suffix)])\n    # Append the reversed prefix to\
    \ the end of the string.\n    return string * prefix\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxeb6dtcl.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxeb6dtcl.jl:14\n   [2] macro expansion\n     @ /tmp/tmpxeb6dtcl.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxeb6dtcl.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxeb6dtcl.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxeb6dtcl.jl:14\n   [2] macro expansion\n     @ /tmp/tmpxeb6dtcl.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxeb6dtcl.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxeb6dtcl.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxeb6dtcl.jl:14\n   [2] macro expansion\n     @ /tmp/tmpxeb6dtcl.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxeb6dtcl.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxeb6dtcl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxeb6dtcl.jl:14\n   [2] macro expansion\n     @ /tmp/tmpxeb6dtcl.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxeb6dtcl.jl:24\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxeb6dtcl.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpibo9bu40.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpibo9bu40.jl:16\n   [2] macro expansion\n     @ /tmp/tmpibo9bu40.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpibo9bu40.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpibo9bu40.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpibo9bu40.jl:16\n   [2] macro expansion\n     @ /tmp/tmpibo9bu40.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpibo9bu40.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpibo9bu40.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpibo9bu40.jl:16\n   [2] macro expansion\n     @ /tmp/tmpibo9bu40.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpibo9bu40.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpibo9bu40.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpibo9bu40.jl:16\n   [2] macro expansion\n     @ /tmp/tmpibo9bu40.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpibo9bu40.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibo9bu40.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-longest_palindrome_suffix])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzvmqeui1.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzvmqeui1.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzvmqeui1.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzvmqeui1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzvmqeui1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzvmqeui1.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzvmqeui1.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzvmqeui1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzvmqeui1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzvmqeui1.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzvmqeui1.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzvmqeui1.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzvmqeui1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzvmqeui1.jl:16\n   [2] macro expansion\n     @ /tmp/tmpzvmqeui1.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzvmqe"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvmqeui1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpopu98z1d.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpopu98z1d.jl:16\n   [2] macro expansion\n     @ /tmp/tmpopu98z1d.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpopu98z1d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpopu98z1d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpopu98z1d.jl:16\n   [2] macro expansion\n     @ /tmp/tmpopu98z1d.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpopu98z1d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpopu98z1d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpopu98z1d.jl:16\n   [2] macro expansion\n     @ /tmp/tmpopu98z1d.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpopu98z1d.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpopu98z1d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpopu98z1d.jl:16\n   [2] macro expansion\n     @ /tmp/tmpopu98z1d.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpopu98"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpopu98z1d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    if string == reverse(string)\n\
    \        return string\n    end\n    # find the longest palindromic suffix\n \
    \   suffix = \"\"\n    for i in 1:length(string)\n        if string[end-i+1:end]\
    \ == reverse(string[1:i])\n            suffix = string[end-i+1:end]\n        end\n\
    \    end\n    # append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5tr07to4.jl:36\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5tr07to4.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tr07to4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5tr07to4.jl:38\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5tr07to4.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tr07to4.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tr07to4.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8ovk30on.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8ovk30on.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8ovk30on.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8ovk30on.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8ovk30on.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8ovk30on.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8ovk30on.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8ovk30on.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8ovk30on.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8ovk30on.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8ovk30on.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8ovk30on.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8ovk30on.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp8ovk30on.jl:16\n   [2] macro expansion\n     @ /tmp/tmp8ovk30on.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8ovk3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ovk30on.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpejzc5ke3.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpejzc5ke3.jl:16\n   [2] macro expansion\n     @ /tmp/tmpejzc5ke3.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpejzc5ke3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpejzc5ke3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpejzc5ke3.jl:16\n   [2] macro expansion\n     @ /tmp/tmpejzc5ke3.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpejzc5ke3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpejzc5ke3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpejzc5ke3.jl:16\n   [2] macro expansion\n     @ /tmp/tmpejzc5ke3.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpejzc5ke3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpejzc5ke3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpejzc5ke3.jl:16\n   [2] macro expansion\n     @ /tmp/tmpejzc5ke3.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpejzc5ke3.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejzc5ke3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:length(string)\
    \ - length(longest_palindrome_suffix) + 1])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxzz7mne8.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxzz7mne8.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxzz7mne8.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxzz7mne8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxzz7mne8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxzz7mne8.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxzz7mne8.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxzz7mne8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxzz7mne8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxzz7mne8.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxzz7mne8.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxzz7mne8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxzz7mne8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxzz7mne8.jl:16\n   [2] macro expansion\n     @ /tmp/tmpxzz7mne8.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxzz7m"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzz7mne8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest postfix\
    \ that is a palindrome\n    palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    # Append the reverse of the prefix that comes before the palindrome suffix\n\
    \    return string * reverse(string[1:end-length(palindrome_suffix)])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2zv7go7m.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2zv7go7m.jl:17\n   [2] macro expansion\n     @ /tmp/tmp2zv7go7m.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2zv7go7m.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2zv7go7m.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2zv7go7m.jl:17\n   [2] macro expansion\n     @ /tmp/tmp2zv7go7m.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2zv7go7m.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2zv7go7m.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2zv7go7m.jl:17\n   [2] macro expansion\n     @ /tmp/tmp2zv7go7m.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2zv7go7m.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2zv7go7m.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2zv7go7m.jl:17\n   [2] macro expansion\n     @ /tmp/tmp2zv7go7m.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2zv7go7m.jl:25\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zv7go7m.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnsxvmgvf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnsxvmgvf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpnsxvmgvf.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnsxvmgvf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnsxvmgvf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnsxvmgvf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpnsxvmgvf.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnsxvmgvf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnsxvmgvf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnsxvmgvf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpnsxvmgvf.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnsxvmgvf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnsxvmgvf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnsxvmgvf.jl:16\n   [2] macro expansion\n     @ /tmp/tmpnsxvmgvf.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnsxvm"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsxvmgvf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # Note that the string itself is a palindrome.\n\
    \    palindrome_suffix = string\n    while !is_palindrome(palindrome_suffix)\n\
    \        palindrome_suffix = palindrome_suffix[2:end]\n    end\n    # Reverse\
    \ the prefix that comes before the palindromic suffix.\n    prefix = reverse(string[1:end-length(palindrome_suffix)])\n\
    \    return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp73k4w43a.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp73k4w43a.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp73k4w43a.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp73k4w43a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp73k4w43a.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp73k4w43a.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp73k4w43a.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp73k4w43a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp73k4w43a.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp73k4w43a.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp73k4w43a.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp73k4w43a.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp73k4w43a.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp73k4w43a.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp73k4w43a.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp73k4w43a.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73k4w43a.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    # If the string is already a palindrome, return it.\n\
    \    palindrome_suffix = find_longest_palindrome_suffix(string)\n    if palindrome_suffix\
    \ == string\n        return string\n    end\n    # Find the prefix of the string\
    \ that comes before the palindromic suffix.\n    prefix = string[1:end-length(palindrome_suffix)]\n\
    \    # Reverse the prefix and append it to the end of the string.\n    return\
    \ string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppwwqgnkx.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmppwwqgnkx.jl:18\n   [2] macro expansion\n     @ /tmp/tmppwwqgnkx.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppwwqgnkx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppwwqgnkx.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmppwwqgnkx.jl:18\n   [2] macro expansion\n     @ /tmp/tmppwwqgnkx.jl:34\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppwwqgnkx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppwwqgnkx.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmppwwqgnkx.jl:18\n   [2] macro expansion\n     @ /tmp/tmppwwqgnkx.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppwwqgnkx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppwwqgnkx.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmppwwqgnkx.jl:18\n   [2] macro expansion\n     @ /tmp/tmppwwqgnkx.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppwwqg"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppwwqgnkx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    if is_palindrome(string)\n\
    \        return string\n    end\n    # Find the longest palindromic suffix of\
    \ the string.\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            return string * reverse(string[1:i-1])\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwem7d9c5.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwem7d9c5.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpwem7d9c5.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwem7d9c5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpwem7d9c5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwem7d9c5.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpwem7d9c5.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwem7d9c5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpwem7d9c5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwem7d9c5.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpwem7d9c5.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwem7d9c5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpwem7d9c5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwem7d9c5.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpwem7d9c5.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwem7d9c5.jl:30\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwem7d9c5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Find the longest palindromic\
    \ suffix of the string.\n    suffix = longest_palindromic_suffix(string)\n   \
    \ # Reverse the prefix of the string that comes before the palindromic suffix.\n\
    \    prefix = reverse(string[1:end-length(suffix)])\n    # Append the reversed\
    \ prefix to the end of the string.\n    return string * prefix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxqkh7kp5.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxqkh7kp5.jl:17\n   [2] macro expansion\n     @ /tmp/tmpxqkh7kp5.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxqkh7kp5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxqkh7kp5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxqkh7kp5.jl:17\n   [2] macro expansion\n     @ /tmp/tmpxqkh7kp5.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxqkh7kp5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxqkh7kp5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxqkh7kp5.jl:17\n   [2] macro expansion\n     @ /tmp/tmpxqkh7kp5.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxqkh7kp5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxqkh7kp5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxqkh7kp5.jl:17\n   [2] macro expansion\n     @ /tmp/tmpxqkh7kp5.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxqkh7kp5.jl:27\nTest S"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqkh7kp5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj2snpmeq.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj2snpmeq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj2snpmeq.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj2snpmeq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj2snpmeq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj2snpmeq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj2snpmeq.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj2snpmeq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj2snpmeq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj2snpmeq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj2snpmeq.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj2snpmeq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpj2snpmeq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj2snpmeq.jl:16\n   [2] macro expansion\n     @ /tmp/tmpj2snpmeq.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpj2snpmeq.jl:23\nTest Summa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj2snpmeq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    palindrome_suffix =\
    \ find_longest_palindrome_suffix(string)\n    return string * palindrome_suffix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1xk3rwvv.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1xk3rwvv.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1xk3rwvv.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1xk3rwvv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1xk3rwvv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1xk3rwvv.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1xk3rwvv.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1xk3rwvv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1xk3rwvv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1xk3rwvv.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1xk3rwvv.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1xk3rwvv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp1xk3rwvv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp1xk3rwvv.jl:16\n   [2] macro expansion\n     @ /tmp/tmp1xk3rwvv.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1xk3r"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xk3rwvv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qov87pv.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp5qov87pv.jl:16\n   [2] macro expansion\n     @ /tmp/tmp5qov87pv.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5qov87pv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5qov87pv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp5qov87pv.jl:16\n   [2] macro expansion\n     @ /tmp/tmp5qov87pv.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5qov87pv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5qov87pv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp5qov87pv.jl:16\n   [2] macro expansion\n     @ /tmp/tmp5qov87pv.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5qov87pv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5qov87pv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp5qov87pv.jl:16\n   [2] macro expansion\n     @ /tmp/tmp5qov87pv.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5qov8"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qov87pv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome_suffix = find_longest_palindrome_suffix(string)\n    return string\
    \ * reverse(string[1:end-palindrome_suffix])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkz8aopcc.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkz8aopcc.jl:13\n   [2] macro expansion\n     @ /tmp/tmpkz8aopcc.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkz8aopcc.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkz8aopcc.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkz8aopcc.jl:13\n   [2] macro expansion\n     @ /tmp/tmpkz8aopcc.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkz8aopcc.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkz8aopcc.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkz8aopcc.jl:13\n   [2] macro expansion\n     @ /tmp/tmpkz8aopcc.jl:23\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkz8aopcc.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkz8aopcc.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkz8aopcc.jl:13\n   [2] macro expansion\n     @ /tmp/tmpkz8aopcc.jl:24\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkz8aopcc.jl:20\ntest"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkz8aopcc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix of supplied string that is a palindrome.\n   \
    \ # This is done by iterating over the string and checking if a substring is a\
    \ palindrome.\n    # The longest palindromic substring is found by iterating over\
    \ the string in reverse.\n    # This is done because the palindrome is likely\
    \ to be found at the end of the string.\n    # This is not guaranteed, but it\
    \ is likely.\n    # The algorithm is O(n^2) because we iterate over the string\
    \ and then over the substring.\n    # This can be improved by using a suffix tree,\
    \ but that is not implemented here.\n    # The suffix tree would be O(n) and would\
    \ be more efficient.\n    longest_palindrome_length = 0\n    longest_palindrome_index\
    \ = 0\n    for i in length(string)::Int:-1:1\n        if is_palindrome(string[i:end])\n\
    \            longest_palindrome_length = length(string[i:end])\n            longest_palindrome_index\
    \ = i\n            break\n    end\n    # Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    # This is\
    \ done by taking the string prefix that comes before the palindromic suffix and\
    \ reversing it.\n    # The reversed prefix is then appended to the end of the\
    \ string.\n    # This is O(n) because we iterate over the string once.\n    return\
    \ string * reverse(string[1:longest_palindrome_index])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaz9qdtev.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaz9qdtev.jl:1\n\
    in expression starting at /tmp/tmpaz9qdtev.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * string[1:end-longest_palindrome_suffix]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmcm8ywje.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmcm8ywje.jl:16\n   [2] macro expansion\n     @ /tmp/tmpmcm8ywje.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmcm8ywje.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmcm8ywje.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmcm8ywje.jl:16\n   [2] macro expansion\n     @ /tmp/tmpmcm8ywje.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmcm8ywje.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmcm8ywje.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmcm8ywje.jl:16\n   [2] macro expansion\n     @ /tmp/tmpmcm8ywje.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmcm8ywje.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmcm8ywje.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmcm8ywje.jl:16\n   [2] macro expansion\n     @ /tmp/tmpmcm8ywje.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmcm8y"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmcm8ywje.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpac8ks7l7.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpac8ks7l7.jl:16\n   [2] macro expansion\n     @ /tmp/tmpac8ks7l7.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpac8ks7l7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpac8ks7l7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpac8ks7l7.jl:16\n   [2] macro expansion\n     @ /tmp/tmpac8ks7l7.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpac8ks7l7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpac8ks7l7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpac8ks7l7.jl:16\n   [2] macro expansion\n     @ /tmp/tmpac8ks7l7.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpac8ks7l7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpac8ks7l7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpac8ks7l7.jl:16\n   [2] macro expansion\n     @ /tmp/tmpac8ks7l7.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpac8ks"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpac8ks7l7.jl:21\n"
  exit_code: 1
  status: SyntaxError
