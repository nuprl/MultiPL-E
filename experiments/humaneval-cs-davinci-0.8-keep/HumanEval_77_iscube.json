{
  "name": "HumanEval_77_iscube",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes an integer a and returns True \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==> True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64) ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public static bool Iscube(long a) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Iscube((1L)) == (true));\n    Debug.Assert(Iscube((2L)) == (false));\n    Debug.Assert(Iscube((-1L)) == (true));\n    Debug.Assert(Iscube((64L)) == (true));\n    Debug.Assert(Iscube((180L)) == (false));\n    Debug.Assert(Iscube((1000L)) == (true));\n    Debug.Assert(Iscube((0L)) == (true));\n    Debug.Assert(Iscube((1729L)) == (false));\n    }\n\n}\n",
  "completions": [
    "        long b = (long)Math.Pow(a, 1.0 / 3);\n        return b * b * b == a;",
    "        if (a < 0) a = -a;\n        if (a < 2) return true;\n        long p = 1;\n        for (int i = 0; i < 64; i++) {\n            if (p == a) return true;\n            p = (p << 2) + p + 1;\n        }\n        return false;",
    "        return Math.Pow(a, 1.0 / 3) % 1 == 0;",
    "        if (a == 0)\n            return true;\n        if (a < 0)\n            a = -a;\n        double b = Math.Pow(a, 1.0 / 3);\n        long c = (long)b;\n        if (b == c)\n            return true;\n        return false;",
    "        // Your code here\n        return a == 0 ? true : Math.Pow(Math.Abs(a), 1.0 / 3) % 1 == 0;",
    "        // your code here",
    "        if (a < 0) a = -a;\n        if (a == 0) return true;\n        long h = (long)Math.Ceiling(Math.Pow(a, 1.0 / 3.0));\n        return a == h * h * h;",
    "        // int i = 0;\n        long i = 0;\n        while(i*i*i < a) {\n            i++;\n        }\n        return i*i*i == a;",
    "        int i = 0;\n        if (a < 0) { a = -a; }\n        for (i = 0; i <= a; i++) {\n            if (i * i * i == a) {\n                return true;\n            }\n        }\n        return false;",
    "        // \u8003\u8651\u8d1f\u6570\n        // \u6700\u7b80\u5355\u7c97\u66b4\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u66b4\u529b\u641c\u7d22\u3002\n        // \u4f46\u662f\u6709\u4e00\u70b9\u6bd4\u8f83\u86cb\u75bc\uff0c\u5c31\u662f\u641c\u7d22\u8303\u56f4\u3002\n        // \u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u7edd\u5bf9\u4e0d\u53ef\u80fd\u8d85\u8fc7 2 ** 10 \u8fd9\u4e48\u5927\u3002\n        // \u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528 long \u6765\u8ba1\u7b97\uff0c\u514d\u5f97\u51fa\u73b0\u6ea2\u51fa\u3002\n        // \u56e0\u4e3a\u641c\u7d22\u8303\u56f4\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 for \u5faa\u73af\uff0c\u800c\u4e0d\u662f\u7528 foreach\u3002\n        for (int i = 0; i < 1000; i++) {\n            long c = i * i * i;\n            if (c == a) {\n                return true;\n            }\n        }\n        return false;",
    "        // your code here\n        return false;",
    "        throw new NotImplementedException();",
    "    //insert your code here\n        bool result = false;\n        try {\n            double cubeRoot = Math.Pow(a, 1.0 / 3.0);\n            if (cubeRoot - Math.Truncate(cubeRoot) == 0)\n                result = true;\n        }\n        catch (Exception ex) {\n            throw ex;\n        }\n        return result;",
    "        // write your code here\n        // hint: try to find the largest integer x such that x*x*x <= a.\n        if (a < 0) a = -a;\n        long i = (long)Math.Pow(a, 1.0 / 3.0);\n        return i * i * i == a;",
    "        var cube = Math.Pow(a, 1.0 / 3);\n        return (Math.Round(cube) == cube);",
    "        return false;",
    "        return a > 0 ? Math.Pow(Math.Ceiling(Math.Pow(a, 1.0 / 3)), 3) == a : a < 0 ? Math.Pow(Math.Floor(Math.Pow(a, 1.0 / 3)), 3) == a : true;",
    "        return a > 0 && Math.Pow(Math.Round(Math.Pow(a, 1.0 / 3.0)), 3) == a;",
    "        throw new NotImplementedException();",
    "        // TODO write your code here\n        return false;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}