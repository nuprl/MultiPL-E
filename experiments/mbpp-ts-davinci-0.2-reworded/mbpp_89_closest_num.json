{
  "name": "mbpp_89_closest_num",
  "language": "ts",
  "prompt": "//Write a function to find the closest smaller number than n.\nfunction closest_num(N: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_num;\n  assert.deepEqual(candidate(11),10);\n  assert.deepEqual(candidate(7),6);\n  assert.deepEqual(candidate(12),11);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = Math.floor(num / 2);\n        count++;\n    }\n    return Math.pow(2, count - 1);\n}\nconsole.log(closest_num(12));\nconsole.log(closest_num(13));\nconsole.log(closest_num(14));\nconsole.log(closest_num(15));\nconsole.log(closest_num(16));\nconsole.log(closest_num(17));\nconsole.log(closest_num(18));\nconsole.log(closest_num(19));\nconsole.log(closest_num(20));\nconsole.log(closest_num(21));\nconsole.log(closest_num(22));\nconsole.log(closest_num(23));\nconsole.log(closest_num(24));\nconsole.log(closest_num(25));\nconsole.log(closest_num(26));\nconsole.log(closest_num(27));\nconsole.log(closest_num(28));\nconsole.log(closest_num(29));\nconsole.log(closest_num(30));\nconsole.log(closest_num(31));\nconsole.log(closest_num(32));\nconsole.log(closest_num(33));\nconsole.log(closest_num(34));\nconsole.log(closest_num(35));\nconsole.log(closest_num(36));\nconsole.log(closest_num(37));\nconsole.log(closest_num(38));\nconsole.log(closest_num(39));\nconsole.log(closest_num(40));\nconsole.log(closest_num(41));\nconsole.log(closest_num(42));\nconsole.log(closest_num(43));\nconsole.log(closest_num(44));\nconsole.log(closest_num(45));\nconsole.log(closest_num(46",
    "    let num = N;\n    while (num > 0) {\n        if (is_prime(num)) {\n            return num;\n        }\n        num--;\n    }\n    return num;\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) === 1) {\n            break;\n        }\n        count++;\n        num >>= 1;\n    }\n    return N & ~(1 << count);\n}\n",
    "    let n = N;\n    let binary = [];\n    while (n > 0) {\n        binary.push(n % 2);\n        n = Math.floor(n / 2);\n    }\n    let i = 0;\n    while (binary[i] === 1) {\n        binary[i] = 0;\n        i++;\n    }\n    binary[i] = 1;\n    let result = 0;\n    for (let j = binary.length - 1; j >= 0; j--) {\n        result += binary[j] * Math.pow(2, j);\n    }\n    return result;\n}\n",
    "    let i = 1;\n    while (i < N) {\n        if (N % i === 0) {\n            return i;\n        }\n        i++;\n    }\n}\nconsole.log(closest_num(12));\n",
    "    let n = N;\n    let count = 0;\n    while (n > 0) {\n        n = Math.floor(n / 2);\n        count++;\n    }\n    return Math.pow(2, count - 1);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = Math.floor(num / 2);\n        count++;\n    }\n    return Math.pow(2, count - 1);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = num >> 1;\n        count++;\n    }\n    return N - Math.pow(2, count - 1);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = Math.floor(num / 2);\n        count++;\n    }\n    return Math.pow(2, count - 1);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = Math.floor(num / 2);\n        count++;\n    }\n    return Math.pow(2, count - 1);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        num = Math.floor(num / 2);\n        count++;\n    }\n    return Math.pow(2, count - 1);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) == 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - (1 << count);\n}\n\nconsole.log(closest_num(5));\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) == 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - (1 << count);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) === 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - Math.pow(2, count);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) === 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - (1 << count);\n}\n",
    "    let i: number = 1;\n    while (i < N) {\n        if (N % i == 0) {\n            return i;\n        }\n        i++;\n    }\n}\nconsole.log(closest_num(12));\n",
    "    let num = N;\n    while (num > 0) {\n        num--;\n        if (num % 3 == 0 && num % 7 == 0) {\n            return num;\n        }\n    }\n    return -1;\n}\nconsole.log(closest_num(100));\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) === 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - (1 << count);\n}\n",
    "    let num = N;\n    let count = 0;\n    while (num > 0) {\n        if ((num & 1) === 0) {\n            count++;\n        }\n        num = num >> 1;\n    }\n    return N - Math.pow(2, count);\n}\n",
    "    let n = N;\n    let count = 0;\n    while (n > 0) {\n        if ((n & 1) == 0) {\n            count++;\n        }\n        n = n >> 1;\n    }\n    return N - (1 << count);\n}\n"
  ]
}