{
  "name": "mbpp_623_nth_nums",
  "language": "ts",
  "prompt": "//Write a function to compute the n-th power of each number in an array.\nfunction nth_nums(nums: number[], n: number): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = nth_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(x => Math.pow(x, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(function(num) {\n        return Math.pow(num, n);\n    });\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n\nconsole.log(nth_nums([1, 2, 3, 4], 2));\nconsole.log(nth_nums([1, 2, 3, 4], 3));\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n\nconsole.log(nth_nums([1, 2, 3, 4, 5], 2));\nconsole.log(nth_nums([1, 2, 3, 4, 5], 3));\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => num ** n);\n}\n\nconsole.log(nth_nums([1, 2, 3, 4, 5], 2));\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(x => Math.pow(x, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(x => Math.pow(x, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(x => Math.pow(x, n));\n}\n",
    "    return nums.map(x => Math.pow(x, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n\nconsole.log(nth_nums([1, 2, 3, 4, 5], 2));\nconsole.log(nth_nums([1, 2, 3, 4, 5], 3));\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "  return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(x => Math.pow(x, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(x => Math.pow(x, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    return nums.map(num => Math.pow(num, n));\n}\n",
    "    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(Math.pow(nums[i], n));\n    }\n    return result;\n}\n"
  ]
}