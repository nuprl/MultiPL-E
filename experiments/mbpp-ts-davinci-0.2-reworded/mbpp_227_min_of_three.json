{
  "name": "mbpp_227_min_of_three",
  "language": "ts",
  "prompt": "//Write a function to find minimum of three numbers.\nfunction min_of_three(a: number, b: number, c: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = min_of_three;\n  assert.deepEqual(candidate(10, 20, 0),0);\n  assert.deepEqual(candidate(19, 15, 18),15);\n  assert.deepEqual(candidate(-10, -20, -30),-30);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 1, 1));\nconsole.log(min_of_three(1, 2, 2));\nconsole.log(min_of_three(2, 1, 2));\nconsole.log(min_of_three(2, 2, 1));\n",
    "    return Math.min(a, b, c);\n}\n\nconsole.log(min_of_three(2, 3, 4));\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(1, 3, 2));\nconsole.log(min_of_three(2, 3, 1));\nconsole.log(min_of_three(3, 1, 2));\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 2, 2));\n",
    "    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nconsole.log(min_of_three(4, 5, 6));\n",
    "    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n",
    "    return Math.min(a, b, c);\n}\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\nconsole.log(min_of_three(2, 4, 3));\nconsole.log(min_of_three(4, 2, 3));\nconsole.log(min_of_three(4, 3, 2));\nconsole.log(min_of_three(3, 4, 2));\nconsole.log(min_of_three(3, 2, 4));\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(1, 3, 2));\n",
    "  return Math.min(a, b, c);\n}\n",
    "    let min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\n",
    "    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(2, 3, 4));\nconsole.log(min_of_three(4, 3, 2));\nconsole.log(min_of_three(2, 4, 3));\nconsole.log(min_of_three(3, 2, 4));\nconsole.log(min_of_three(3, 4, 2));\nconsole.log(min_of_three(4, 2, 3));\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n",
    "    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(3, 2, 1));\nconsole.log(min_of_three(2, 1, 3));\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(3, 5, 7));\n",
    "    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(min_of_three(1, 2, 3));\nconsole.log(min_of_three(2, 1, 3));\nconsole.log(min_of_three(3, 2, 1));\n",
    "    let min_of_two = (a < b) ? a : b;\n    return (min_of_two < c) ? min_of_two : c;\n}\n"
  ]
}