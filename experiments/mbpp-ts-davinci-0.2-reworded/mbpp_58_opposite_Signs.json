{
  "name": "mbpp_58_opposite_Signs",
  "language": "ts",
  "prompt": "//Write a tsthon function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs(x: number, y: number): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = opposite_Signs;\n  assert.deepEqual(candidate(1, -2),true);\n  assert.deepEqual(candidate(3, 2),false);\n  assert.deepEqual(candidate(-10, -10),false);\n  assert.deepEqual(candidate(-2, 2),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return ((x ^ y) < 0);\n}\nconsole.log(\"opposite_Signs(10, -20) = \" + opposite_Signs(10, -20));\nconsole.log(\"opposite_Signs(10, 20) = \" + opposite_Signs(10, 20));\n",
    "    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\n",
    "    return ((x ^ y) < 0);\n}\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\n",
    "    return ((x ^ y) < 0);\n}\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(10, -20));\nconsole.log(opposite_Signs(10, 20));\n",
    "    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -2));\nconsole.log(opposite_Signs(2, 2));\n",
    "    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(-2, -3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(-2, 3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\n",
    "    return ((x ^ y) < 0);\n}\n",
    "    return ((x ^ y) < 0);\n}\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n",
    "    return ((x ^ y) < 0);\n}\n\nconsole.log(opposite_Signs(2, -3));\nconsole.log(opposite_Signs(2, 3));\n"
  ]
}