{
  "name": "mbpp_447_cube_nums",
  "language": "ts",
  "prompt": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    var cubes: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num * num * num);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num * num * num);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num * num * num;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num * num * num;\n    });\n}\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function(num) {\n        return num * num * num;\n    });\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] ** 3);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] ** 3);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num * num * num;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] ** 3);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n  return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(Math.pow(nums[i], 3));\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cube_nums: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cube_nums.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cube_nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num * num * num);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num * num * num;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n  return nums.map(function(num) {\n    return num ** 3;\n  });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num * num * num;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    var cubes: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] ** 3);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] ** 3);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    var cubes: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num * num * num);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => Math.pow(num, 3));\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n * n * n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num * num * num;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num * num * num);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num * num * num;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    var cubes: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num * num * num);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    let cubes: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] ** 3);\n    }\n    return cubes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123279,
      "stdout": "[ 1, 8, 27, 64, 125 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(num => num ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x * x * x);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(n => n ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1665510278,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n    return nums.map(x => x ** 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
      "timestamp": 1666123277,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}