{
  "name": "mbpp_562_Find_Max_Length",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            } else if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nlet lst = [[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n        }\n        if (sum == 0) {\n            max_length = Math.max(max_length, lst[i].length);\n        }\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum === 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length += 1;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            temp_length += 1;\n        } else {\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map<number, number>();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (!map.has(sum)) {\n            map.set(sum, i);\n        } else {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let len: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                len = 1;\n                for (k = j + 1; k < lst[i].length; k++) {\n                    if (lst[i][k] == 1) {\n                        len++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (len > max_len) {\n                    max_len = len;\n                }\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map[sum] != undefined) {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            } else {\n                hash_map[sum] = j;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += (lst[i][0] == 0) ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length++;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n        temp_length = 0;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1], [0, 0, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    map.set(0, -1);\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        }\n        else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let len = lst.length;\n    for (let i = 0; i < len; i++) {\n        let sum = 0;\n        for (let j = i; j < len; j++) {\n            sum += lst[j][0] - lst[j][1];\n            if (sum === 0) {\n                max_length = Math.max(max_length, j - i + 1);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map<number, number>();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let curr_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        if (lst[i][j] == 1) {\n            curr_length += 1;\n        } else {\n            curr_length = 0;\n        }\n        if (curr_length > max_length) {\n            max_length = curr_length;\n        }\n        if (j == lst[i].length - 1) {\n            i += 1;\n            j = 0;\n        } else {\n            j += 1;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let start: number = 0;\n    let end: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                if (max_len < j + 1) {\n                    max_len = j + 1;\n                    start = i;\n                    end = j;\n                }\n            }\n            if (map.has(sum)) {\n                if (max_len < j - map.get(sum)) {\n                    max_len = j - map.get(sum);\n                    start = i;\n                    end = j;\n                }\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    console.log(start, end);\n    return max_len;\n}\n\nlet lst: number[][] = [[0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            }\n            else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        j = 0;\n        while (j < lst[i].length) {\n            if (lst[i][j] == 0) {\n                let length = 0;\n                let k = i;\n                let l = j;\n                while (k < lst.length) {\n                    l = 0;\n                    while (l < lst[k].length) {\n                        if (lst[k][l] == 0) {\n                            length++;\n                        } else {\n                            break;\n                        }\n                        l++;\n                    }\n                    k++;\n                }\n                if (length > max_length) {\n                    max_length = length;\n                }\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1]]));",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len = 0;\n    let map = new Map<number, number>();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\nlet lst = [[0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        len = 0;\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                len++;\n            }\n            else {\n                len = 0;\n            }\n            if (len > max_len) {\n                max_len = len;\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n        count = 0;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        if (lst[i][j] == 0) {\n            count += 1;\n        }\n        else {\n            count = 0;\n        }\n        if (count > max_length) {\n            max_length = count;\n        }\n        if (j == lst[i].length - 1) {\n            i += 1;\n            j = 0;\n        }\n        else {\n            j += 1;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    console.log(lst.slice(start, end + 1));\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nlet lst = [0, 0, 1, 0, 0, 0, 1, 1];\nconsole.log(Find_Max_Length(lst));\n",
    "    let max_length = 0;\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] == 0) {\n                count = count + 1;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        }\n        else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length: number = 0;\n    let current_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        current_length = 0;\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                current_length++;\n            }\n            else {\n                if (current_length > max_length) {\n                    max_length = current_length;\n                }\n                current_length = 0;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (map.has(sum)) {\n                if (max_len < j - map.get(sum)) {\n                    max_len = j - map.get(sum);\n                }\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                count++;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n    }\n    return max_length;\n}\nconsole.log(Find_Max_Length([[1, 1, 1, 1], [1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1]]));\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]]));",
    "    let max_length = 0;\n    let n = lst.length;\n    let m = lst[0].length;\n    let dp = new Array(n).fill(0).map(() => new Array(m).fill(0));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = lst[i][j];\n            } else if (lst[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;\n            }\n            max_length = Math.max(max_length, dp[i][j]);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length++;\n            }\n            else {\n                if (max_length < temp_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (max_length < temp_length) {\n            max_length = temp_length;\n        }\n        temp_length = 0;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let lst_length = lst.length;\n    let lst_length_2 = lst[0].length;\n    let sum_lst = [];\n    let sum = 0;\n    for (let i = 0; i < lst_length; i++) {\n        sum_lst.push([]);\n        for (let j = 0; j < lst_length_2; j++) {\n            sum += lst[i][j];\n            if (sum === 0) {\n                max_length = Math.max(max_length, i + 1);\n            }\n            if (sum_lst[i].indexOf(sum) !== -1) {\n                max_length = Math.max(max_length, i - sum_lst[i].indexOf(sum));\n            } else {\n                sum_lst[i].push(sum);\n            }\n        }\n        sum = 0;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                count++;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1], [0, 1], [1, 0], [1, 1], [1, 1], [0, 1]]));",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "  let max_length = 0;\n  let hash_map = new Map();\n\n  // Initialize sum of elements\n  let sum = 0;\n\n  // Traverse through the given array\n  for (let i = 0; i < lst.length; i++) {\n    // Initialize sum of elements\n    sum = 0;\n\n    // Traverse through the given array\n    for (let j = 0; j < lst[i].length; j++) {\n      // Add current element to sum\n      sum += lst[i][j];\n\n      // To handle sum=0 at last index\n      if (sum == 0) max_length = i + 1;\n\n      // If this sum is seen before, then update max_length\n      // if required\n      if (hash_map.has(sum + lst.length))\n        max_length = Math.max(\n          max_length,\n          i - hash_map.get(sum + lst.length)\n        );\n      else // Else put this sum in hash table\n        hash_map.set(sum + lst.length, i);\n    }\n  }\n\n  return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (map.has(sum)) {\n                if (max_len < j - map.get(sum)) {\n                    max_len = j - map.get(sum);\n                }\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        count += (lst[i][0] == 0) ? -1 : 1;\n        if (map.has(count)) {\n            max = Math.max(max, i - map.get(count));\n        } else {\n            map.set(count, i);\n        }\n    }\n    return max;\n}\n",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length++;\n            }\n            else {\n                temp_length = 0;\n            }\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1]]));",
    "    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_length) {\n                max_length = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let hash = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash[sum + lst.length] != undefined) {\n                max_len = Math.max(max_len, j - hash[sum + lst.length]);\n            } else {\n                hash[sum + lst.length] = j;\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    map.set(0, -1);\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let maxLength = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            maxLength = Math.max(maxLength, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return maxLength;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map<number, number>();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, i - map.get(sum));\n            } else {\n                map.set(sum, i);\n            }\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0]]));",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        temp_length = lst[i].length;\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let len = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        if (lst[i][j] == 1) {\n            len += 1;\n            j += 1;\n        } else {\n            if (len > max_len) {\n                max_len = len;\n            }\n            len = 0;\n            i += 1;\n            j = 0;\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n        }\n        if (sum === 0) {\n            max_length = Math.max(max_length, lst[i].length);\n        }\n        else {\n            if (hash_map[sum] === undefined) {\n                hash_map[sum] = i;\n            }\n            else {\n                max_length = Math.max(max_length, i - hash_map[sum]);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        count += (lst[i][0] == 0) ? -1 : 1;\n        if (map.has(count)) {\n            max_len = Math.max(max_len, i - map.get(count));\n        } else {\n            map.set(count, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map[sum] == undefined) {\n                hash_map[sum] = j;\n            } else {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                len = 0;\n            }\n            else {\n                len += 1;\n                max_len = Math.max(max_len, len);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    console.log(lst.slice(start, end + 1));\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    map.set(0, -1);\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length += 1;\n            } else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n        temp_length = 0;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length: number = 0;\n    let current_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (sum === 0) {\n            max_length = i + 1;\n        }\n        if (hash_map.has(sum + lst.length)) {\n            if (max_length < i - hash_map.get(sum + lst.length)) {\n                max_length = i - hash_map.get(sum + lst.length);\n            }\n        } else {\n            hash_map.set(sum + lst.length, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                max_length = Math.max(max_length, temp_length);\n                temp_length = 0;\n            }\n        }\n        max_length = Math.max(max_length, temp_length);\n        temp_length = 0;\n    }\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]]));",
    "    let max_len = 0;\n    let hash_map = new Map();\n\n    // Initialize sum of elements\n    let sum = 0;\n\n    // Traverse through the given array\n    for (let i = 0; i < lst.length; i++) {\n        // Initialize sum of elements\n        sum = 0;\n\n        // Traverse through the given array\n        for (let j = 0; j < lst[i].length; j++) {\n            // Add current element to sum\n            sum += lst[i][j];\n\n            // To handle sum=0 at last index\n            if (sum == 0)\n                max_len = Math.max(max_len, j + 1);\n\n            // If this sum is seen before, then update max_len\n            // if required\n            if (hash_map.has(sum + lst.length))\n                max_len = Math.max(max_len, j - hash_map.get(sum + lst.length));\n            else // Else put this sum in hash table\n                hash_map.set(sum + lst.length, j);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let map: any = { 0: -1 };\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map[sum] != null) {\n            max_len = Math.max(max_len, i - map[sum]);\n        } else {\n            map[sum] = i;\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map[sum] == undefined) {\n                hash_map[sum] = j;\n            } else {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let count = 0;\n    let hash = {};\n    for (let i = 0; i < lst.length; i++) {\n        count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash[count] == undefined) {\n                hash[count] = j;\n            } else {\n                max_len = Math.max(max_len, j - hash[count]);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            }\n            else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        j = 0;\n        while (j < lst[i].length) {\n            if (lst[i][j] == 1) {\n                let length = Find_Length(lst, i, j);\n                if (length > max_length) {\n                    max_length = length;\n                }\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        }\n        else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let curr_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] == 0) {\n                curr_length = 0;\n            } else {\n                curr_length += 1;\n                max_length = Math.max(max_length, curr_length);\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let len = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] == 0) {\n                len = 0;\n            }\n            else {\n                len++;\n                max_len = Math.max(max_len, len);\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0, 0, 1]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len: number = 0;\n    let hash_map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    hash_map.set(0, -1);\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]]));",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n        }\n        if (sum == 0) {\n            max_len = Math.max(max_len, lst[i].length);\n        }\n        else {\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, i - map.get(sum));\n            }\n            else {\n                map.set(sum, i);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        }\n        else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            }\n            else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                count++;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n    }\n    return max_length;\n}\nlet lst = [[0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum === 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0]]));",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1], [1, 1], [0, 1], [1, 1], [1, 1], [1, 1], [0, 1]]));\n",
    "    let max_len = 0;\n    let n = lst.length;\n    let m = lst[0].length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = lst[i][j];\n            } else if (lst[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1;\n            } else {\n                dp[i][j] = 0;\n            }\n            max_len = Math.max(max_len, dp[i][j]);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "  let max_length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    max_length = Math.max(max_length, lst[i].length);\n  }\n  return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let curr_len = 0;\n    let hash_map = new Map();\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                curr_len += -1;\n            } else {\n                curr_len += 1;\n            }\n            if (hash_map.has(curr_len)) {\n                max_len = Math.max(max_len, i - hash_map.get(curr_len));\n            } else {\n                hash_map.set(curr_len, i);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "  let max_length = 0;\n  let hash_map = new Map();\n  let sum = 0;\n  hash_map.set(0, -1);\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i][0] == 0 ? -1 : 1;\n    if (hash_map.has(sum)) {\n      if (max_length < i - hash_map.get(sum)) {\n        max_length = i - hash_map.get(sum);\n      }\n    } else {\n      hash_map.set(sum, i);\n    }\n  }\n  return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1], [0, 1], [1, 0], [1, 1], [1, 1]]));\nconsole.log(Find_Max_Length([[0, 1], [1, 0], [0, 0], [1, 1], [1, 1]]));\nconsole.log(Find_Max_Length([[0, 1], [1, 0], [1, 1], [0, 0], [1, 1], [1, 1]]));\nconsole.log(Find_Max_Length([[0, 0], [1, 1], [0, 0], [1, 1], [1, 1], [0, 0]]));",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                temp_length = 0;\n            }\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            } else if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let curr_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        if (lst[i][j] == 1) {\n            curr_length++;\n            j++;\n        } else {\n            if (curr_length > max_length) {\n                max_length = curr_length;\n            }\n            curr_length = 0;\n            j = 0;\n            i++;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            }\n            else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let length = lst[i].length;\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n    }\n    return max;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        }\n        else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let len = 0;\n    let i = 0;\n    let j = 0;\n    let n = lst.length;\n    let m = lst[0].length;\n    while (i < n) {\n        while (j < m) {\n            if (lst[i][j] == 1) {\n                len++;\n            } else {\n                len = 0;\n            }\n            if (len > max_len) {\n                max_len = len;\n            }\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum === 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "  let max_length = 0;\n  let hash_map = new Map();\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] == 0) {\n        sum += -1;\n      } else {\n        sum += 1;\n      }\n      if (sum == 0) {\n        max_length = Math.max(max_length, j + 1);\n      }\n      if (hash_map.has(sum)) {\n        max_length = Math.max(max_length, j - hash_map.get(sum));\n      } else {\n        hash_map.set(sum, j);\n      }\n    }\n  }\n  return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1]]));",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]));",
    "    let max_length = 0;\n    let lst_length = lst.length;\n    let lst_length_2 = lst[0].length;\n    let lst_length_3 = lst[0][0].length;\n    for (let i = 0; i < lst_length; i++) {\n        for (let j = 0; j < lst_length_2; j++) {\n            for (let k = 0; k < lst_length_3; k++) {\n                if (lst[i][j][k] == 1) {\n                    let length = Find_Max_Length_Helper(lst, i, j, k, 0);\n                    max_length = Math.max(length, max_length);\n                }\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1]]));\n",
    "    let max_len = 0;\n    let hash = new Map();\n    let sum = 0;\n    hash.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += (lst[i] == 0) ? -1 : 1;\n        if (hash.has(sum)) {\n            max_len = Math.max(max_len, i - hash.get(sum));\n        }\n        else {\n            hash.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]));",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let n = lst.length;\n    let m = lst[0].length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp.push([]);\n        for (let j = 0; j < m; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = lst[i][j];\n            } else if (lst[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;\n            }\n            max_len = Math.max(max_len, dp[i][j]);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                len++;\n            } else {\n                max_len = Math.max(max_len, len);\n                len = 0;\n            }\n        }\n        max_len = Math.max(max_len, len);\n        len = 0;\n    }\n    return max_len;\n}\n\nlet lst: number[][] = [[0, 1, 1, 0, 1, 1, 1, 0],\n[1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1],\n[0, 0, 0, 0, 0, 0, 0, 0]];\n\nconsole.log(Find_Max_Length(lst));",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length += 1;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            } else if (hash_map[sum] != undefined) {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            } else {\n                hash_map[sum] = j;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            }\n            else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] === 1) {\n                count++;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length += 1;\n            } else {\n                temp_length = 0;\n            }\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            }\n            else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let map: any = {};\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map[sum] != undefined) {\n                max_len = Math.max(max_len, j - map[sum]);\n            } else {\n                map[sum] = j;\n            }\n        }\n    }\n    return max_len;\n}\n\nlet lst: number[][] = [[0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));",
    "    let max = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max = Math.max(max, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max;\n}\n\nconsole.log(Find_Max_Length([0, 1, 0, 0, 1, 1, 0]));\nconsole.log(Find_Max_Length([0, 0, 1, 0, 0, 0, 1, 1]));",
    "    let max_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        j = 0;\n        while (j < lst[i].length) {\n            if (lst[i][j] == 1) {\n                let count = 1;\n                let k = j + 1;\n                while (k < lst[i].length && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                length++;\n            } else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_length = 0;\n    let current_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        current_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                current_length++;\n            }\n            else {\n                if (current_length > max_length) {\n                    max_length = current_length;\n                }\n                current_length = 0;\n            }\n        }\n        if (current_length > max_length) {\n            max_length = current_length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n        }\n    }\n    return max_length;\n}\n"
  ]
}