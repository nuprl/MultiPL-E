{
  "name": "mbpp_562_Find_Max_Length",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            } else if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nlet lst = [[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n        }\n        if (sum == 0) {\n            max_length = Math.max(max_length, lst[i].length);\n        }\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum === 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length += 1;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));",
    "    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            temp_length += 1;\n        } else {\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map<number, number>();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (!map.has(sum)) {\n            map.set(sum, i);\n        } else {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let len: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                len = 1;\n                for (k = j + 1; k < lst[i].length; k++) {\n                    if (lst[i][k] == 1) {\n                        len++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (len > max_len) {\n                    max_len = len;\n                }\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map[sum] != undefined) {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            } else {\n                hash_map[sum] = j;\n            }\n        }\n    }\n    return max_length;\n}\n",
    "    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += (lst[i][0] == 0) ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n",
    "    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n",
    "    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length++;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n        temp_length = 0;\n    }\n    return max_length;\n}\n",
    "    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n"
  ]
}