{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "ts",
  "prompt": "//Write a tsthon function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos(a: number, b: number): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = differ_At_One_Bit_Pos;\n  assert.deepEqual(candidate(13, 9),true);\n  assert.deepEqual(candidate(15, 8),false);\n  assert.deepEqual(candidate(2, 4),false);\n  assert.deepEqual(candidate(2, 3),true);\n  assert.deepEqual(candidate(5, 1),true);\n  assert.deepEqual(candidate(1, 5),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_Pos(10, 32));\nconsole.log(differ_At_One_Bit_Pos(10, 33));\nconsole.log(differ_At_One_Bit_Pos(10, 34));\nconsole.log(differ",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n\nconsole.log(differ_At_One_Bit_Pos(20, 25));\nconsole.log(differ_At_One_Bit_Pos(20, 30));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return ((c & (c - 1)) == 0);\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1)\n            count++;\n        c = c >> 1;\n    }\n    if (count == 1)\n        return true;\n    else\n        return false;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if ((c & 1) == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_Pos(10, 32));\nconsole.log(differ_At_One_Bit_Pos(10, 33));",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return ((c & (c - 1)) == 0);\n}\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return ((c & (c - 1)) == 0);\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_Pos(10, 32));\nconsole.log(differ_At_One_Bit_Pos(10, 33));",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_Pos(10, 32));\nconsole.log(differ_At_One_Bit_Pos(10, 33));\nconsole.log(differ_At_One_Bit_Pos(10, 34));\nconsole.log(diff",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_Pos(10, 32));\nconsole.log(differ_At_One_Bit_Pos(10, 33));\nconsole.log(differ_At_One_Bit_Pos(10, 34));\nconsole.log(differ",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\n",
    "    let c = a ^ b;\n    return ((c & (c - 1)) == 0);\n}\n",
    "    if (a == b) {\n        return false;\n    }\n    let c = a ^ b;\n    if (c & (c - 1) == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1)\n        return true;\n    else\n        return false;\n}\n",
    "    let c: number = a ^ b;\n    return ((c & (c - 1)) == 0);\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return c && !(c & (c - 1));\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        if ((c & 1) == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        if (c & 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return (count == 1);\n}\n\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(20, 25));\nconsole.log(differ_At_One_Bit_Pos(20, 30));\nconsole.log(differ_At_One_Bit_Pos(20, 22));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c: number = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_Pos(10, 32));\nconsole.log(differ_At_One_Bit_Pos(10, 33));\nconsole.log(differ_At_One_Bit_Pos(10, 34));\nconsole.log(diff",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_Pos(10, 32));\nconsole.log(differ_At_One_Bit_Pos(10, 33));\nconsole.log(differ_At_One_Bit_Pos(10, 34));\nconsole.log(diff",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c != 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    return count == 1;\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_Pos(10, 32));\nconsole.log(differ_At_One_Bit_Pos(10, 33));",
    "    let c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\n",
    "    let c = a ^ b;\n    if (c && !(c & (c - 1))) {\n        return true;\n    }\n    return false;\n}\nconsole.log(differ_At_One_Bit_Pos(11, 9));\nconsole.log(differ_At_One_Bit_Pos(52, 4));\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c > 0) {\n        count++;\n        c = c & (c - 1);\n    }\n    if (count == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(differ_At_One_Bit_Pos(10, 11));\nconsole.log(differ_At_One_Bit_Pos(10, 12));\nconsole.log(differ_At_One_Bit_Pos(10, 13));\nconsole.log(differ_At_One_Bit_Pos(10, 14));\nconsole.log(differ_At_One_Bit_Pos(10, 15));\nconsole.log(differ_At_One_Bit_Pos(10, 16));\nconsole.log(differ_At_One_Bit_Pos(10, 17));\nconsole.log(differ_At_One_Bit_Pos(10, 18));\nconsole.log(differ_At_One_Bit_Pos(10, 19));\nconsole.log(differ_At_One_Bit_Pos(10, 20));\nconsole.log(differ_At_One_Bit_Pos(10, 21));\nconsole.log(differ_At_One_Bit_Pos(10, 22));\nconsole.log(differ_At_One_Bit_Pos(10, 23));\nconsole.log(differ_At_One_Bit_Pos(10, 24));\nconsole.log(differ_At_One_Bit_Pos(10, 25));\nconsole.log(differ_At_One_Bit_Pos(10, 26));\nconsole.log(differ_At_One_Bit_Pos(10, 27));\nconsole.log(differ_At_One_Bit_Pos(10, 28));\nconsole.log(differ_At_One_Bit_Pos(10, 29));\nconsole.log(differ_At_One_Bit_Pos(10, 30));\nconsole.log(differ_At_One_Bit_Pos(10, 31));\nconsole.log(differ_At_One_Bit_",
    "    let c: number = a ^ b;\n    if (c & (c - 1)) {\n        return false;\n    }\n    return true;\n}\n",
    "    let c: number = a ^ b;\n    let count: number = 0;\n    while (c != 0) {\n        if (c & 1 == 1) {\n            count++;\n        }\n        c = c >> 1;\n    }\n    if (count == 1) {\n        return true;\n    }\n    return false;\n}\n",
    "    let c = a ^ b;\n    let count = 0;\n    while (c > 0) {\n        count += c & 1;\n        c = c >> 1;\n    }\n    return count === 1;\n}\n"
  ]
}