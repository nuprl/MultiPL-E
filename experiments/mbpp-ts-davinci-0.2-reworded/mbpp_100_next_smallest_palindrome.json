{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "ts",
  "prompt": "//Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome(num: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest_palindrome;\n  assert.deepEqual(candidate(99),101);\n  assert.deepEqual(candidate(1221),1331);\n  assert.deepEqual(candidate(120),121);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let num_str = num.toString();\n    let len = num_str.length;\n    let mid = Math.floor(len / 2);\n    let left_smaller = false;\n    let i = mid - 1;\n    let j = len % 2 === 0 ? mid : mid + 1;\n\n    while (i >= 0 && num_str[i] === num_str[j]) {\n        i--;\n        j++;\n    }\n\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n\n    while (i >= 0) {\n        num_str = replaceAt(num_str, j, num_str[i]);\n        num_str = replaceAt(num_str, i, num_str[j]);\n        i--;\n        j++;\n    }\n\n    if (left_smaller) {\n        let carry = 1;\n        i = mid - 1;\n\n        if (len % 2 === 1) {\n            num_str = replaceAt(num_str, mid, (parseInt(num_str[mid]) + carry).toString());\n            carry = parseInt(num_str[mid]) / 10;\n            num_str = replaceAt(num_str, mid, (parseInt(num_str[mid]) % 10).toString());\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n\n        while (i >= 0) {\n            num_str = replaceAt(num_str, i, (parseInt(num_str[i]) + carry).toString());\n            carry = parseInt(num_str[i]) / 10;\n            num_str = replaceAt(num_str, i, (parseInt(num_str[i]) % 10).toString());\n            num_str = replaceAt(num_str, j, num_str[i]);\n            i--;\n            j++;\n        }\n    }\n\n    return parseInt(num_str);\n}\n",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let left_half = num_str.substring(0, Math.floor(num_len / 2));\n  let middle = num_len % 2 === 1 ? num_str.charAt(Math.floor(num_len / 2)) : \"\";\n  let right_half = left_half.split(\"\").reverse().join(\"\");\n  let palindrome = left_half + middle + right_half;\n  if (palindrome > num) {\n    return parseInt(palindrome);\n  }\n  if (middle) {\n    middle = (parseInt(middle) + 1).toString();\n  }\n  let left_half_int = parseInt(left_half);\n  left_half = (left_half_int + 1).toString();\n  if (left_half.length > left_half_int.toString().length) {\n    let padding = \"\";\n    for (let i = 0; i < num_len - left_half.length - middle.length; i++) {\n      padding += \"0\";\n    }\n    return parseInt(left_half + middle + padding + padding.split(\"\").reverse().join(\"\"));\n  }\n  right_half = left_half.split(\"\").reverse().join(\"\");\n  return parseInt(left_half + middle + right_half);\n}\n",
    "  let num_str = num.toString();\n  let num_str_len = num_str.length;\n  let mid_index = Math.floor(num_str_len / 2);\n  let left_half = num_str.substring(0, mid_index);\n  let right_half = num_str.substring(mid_index + 1, num_str_len);\n  let left_half_rev = left_half.split(\"\").reverse().join(\"\");\n  let right_half_rev = right_half.split(\"\").reverse().join(\"\");\n  let left_half_rev_num = parseInt(left_half_rev);\n  let right_half_rev_num = parseInt(right_half_rev);\n  let left_half_num = parseInt(left_half);\n  let right_half_num = parseInt(right_half);\n  let num_str_num = parseInt(num_str);\n  let num_str_rev_num = parseInt(num_str.split(\"\").reverse().join(\"\"));\n  let mid_num = parseInt(num_str[mid_index]);\n  let mid_num_rev = parseInt(num_str[num_str_len - mid_index - 1]);\n  let next_palindrome = 0;\n\n  if (num_str_num === num_str_rev_num) {\n    return num_str_num;\n  } else if (num_str_len % 2 === 0) {\n    if (left_half_num === left_half_rev_num) {\n      if (right_half_num === right_half_rev_num) {\n        if (right_half_num < right_half_rev_num) {\n          next_palindrome =\n            parseInt(left_half + right_half_rev) + Math.pow(10, mid_index);\n        } else {\n          next_palindrome =\n            parseInt(left_half_rev + right_half) + Math.pow(10, mid_index);\n        }\n      } else {\n        next_palindrome =\n          parseInt(left_half + right_half_",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let num_half = Math.floor(num_len / 2);\n  let num_left = num_str.substr(0, num_half);\n  let num_right = num_str.substr(num_len - num_half, num_half);\n  let num_left_int = parseInt(num_left);\n  let num_right_int = parseInt(num_right);\n  let num_left_int_next = num_left_int + 1;\n  let num_left_int_next_str = num_left_int_next.toString();\n  let num_left_int_next_str_len = num_left_int_next_str.length;\n  let num_left_int_next_str_len_diff = num_half - num_left_int_next_str_len;\n  let num_left_int_next_str_len_diff_str = \"\";\n  for (let i = 0; i < num_left_int_next_str_len_diff; i++) {\n    num_left_int_next_str_len_diff_str += \"0\";\n  }\n  let num_left_int_next_str_len_diff_str_rev = num_left_int_next_str_len_diff_str.split(\"\").reverse().join(\"\");\n  let num_left_int_next_str_len_diff_str_rev_int = parseInt(num_left_int_next_str_len_diff_str_rev);\n  let num_left_int_next_str_len_diff_str_rev_int_next = num_left_int_next_str_len_diff_str_rev_int + 1;\n  let num_left_int_next_str_len_diff_str_rev_int_next_str = num_left_int_next_str_len_diff_str_rev_int_next.toString();\n  let num_left_int_next_str_len_diff_str_rev_int_next_str_len",
    "    let num_str = num.toString();\n    let len = num_str.length;\n    let left = Math.floor(len / 2);\n    let right = len % 2 === 0 ? left : left + 1;\n    let increment = 1;\n    let increment_left = true;\n    let increment_right = true;\n    while (increment_left || increment_right) {\n        let left_num = parseInt(num_str.substring(0, left));\n        let right_num = parseInt(num_str.substring(right));\n        if (left_num < right_num) {\n            increment_left = false;\n            increment_right = false;\n        } else if (left_num > right_num) {\n            increment_left = false;\n            increment_right = true;\n        } else {\n            increment_left = true;\n            increment_right = true;\n        }\n        if (increment_left) {\n            left_num += increment;\n            num_str = left_num.toString() + num_str.substring(left);\n        }\n        if (increment_right) {\n            right_num += increment;\n            num_str = num_str.substring(0, right) + right_num.toString();\n        }\n    }\n    return parseInt(num_str);\n}\n",
    "  let palindrome = num;\n  let isPalindrome = false;\n  while (!isPalindrome) {\n    palindrome++;\n    isPalindrome = is_palindrome(palindrome);\n  }\n  return palindrome;\n}\n",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let left_half = num_str.substring(0, Math.floor(num_len / 2));\n  let middle = num_len % 2 === 1 ? num_str.charAt(Math.floor(num_len / 2)) : \"\";\n  let right_half = left_half.split(\"\").reverse().join(\"\");\n  let palindrome = left_half + middle + right_half;\n  if (palindrome > num_str) {\n    return parseInt(palindrome);\n  }\n  let left_half_int = parseInt(left_half);\n  let new_left_half_int = left_half_int + 1;\n  let new_left_half = new_left_half_int.toString();\n  if (new_left_half.length > left_half.length) {\n    middle = \"\";\n  }\n  return parseInt(new_left_half + middle + new_left_half.split(\"\").reverse().join(\"\"));\n}\n",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let left_half = num_str.substr(0, Math.floor(num_len / 2));\n  let middle = num_len % 2 ? num_str[Math.floor(num_len / 2)] : \"\";\n  let right_half = left_half.split(\"\").reverse().join(\"\");\n  let palindrome = left_half + middle + right_half;\n  if (palindrome > num_str) {\n    return parseInt(palindrome);\n  }\n  let left_half_int = parseInt(left_half);\n  let middle_int = parseInt(middle);\n  let increment = 1;\n  if (middle_int < 9) {\n    middle = (middle_int + 1).toString();\n  } else {\n    middle = \"0\";\n    increment = 10;\n  }\n  let left_half_int_incremented = left_half_int + increment;\n  left_half = left_half_int_incremented.toString();\n  if (left_half.length > left_half.length) {\n    left_half = \"1\" + \"0\".repeat(num_len - 1);\n    middle = \"\";\n  }\n  right_half = left_half.split(\"\").reverse().join(\"\");\n  palindrome = left_half + middle + right_half;\n  return parseInt(palindrome);\n}\n",
    "  let num_str = num.toString();\n  let num_str_len = num_str.length;\n  let left_half = num_str.substring(0, num_str_len / 2);\n  let middle = num_str_len % 2 === 1 ? num_str[Math.floor(num_str_len / 2)] : \"\";\n  let right_half = left_half.split(\"\").reverse().join(\"\");\n  let palindrome = left_half + middle + right_half;\n  if (palindrome > num) {\n    return parseInt(palindrome);\n  } else {\n    let left_half_int = parseInt(left_half);\n    let middle_int = parseInt(middle);\n    let right_half_int = parseInt(right_half);\n    let left_half_int_next = left_half_int + 1;\n    let left_half_int_next_str = left_half_int_next.toString();\n    let left_half_int_next_str_len = left_half_int_next_str.length;\n    let left_half_int_next_str_len_diff =\n      left_half_int_next_str_len - left_half.length;\n    let left_half_int_next_str_len_diff_half =\n      left_half_int_next_str_len_diff / 2;\n    let left_half_int_next_str_len_diff_half_floor = Math.floor(\n      left_half_int_next_str_len_diff_half\n    );\n    let left_half_int_next_str_len_diff_half_ceil = Math.ceil(\n      left_half_int_next_str_len_diff_half\n    );\n    let left_half_int_next_str_len_diff_half_floor_str = left_half_int_next_str.substring(\n      0,\n      left_half_int_next_str_len_diff_half_floor\n    );\n    let left_half_int_next_str_len_diff_half_ceil_str",
    "  let str = num.toString();\n  let len = str.length;\n  let mid = Math.floor(len / 2);\n  let left = str.substr(0, mid);\n  let right = str.substr(mid + len % 2, mid);\n  let left_rev = left.split('').reverse().join('');\n  let right_rev = right.split('').reverse().join('');\n  let left_num = parseInt(left);\n  let right_num = parseInt(right);\n  let left_rev_num = parseInt(left_rev);\n  let right_rev_num = parseInt(right_rev);\n  if (left_num < right_rev_num) {\n    return parseInt(left + right_rev);\n  } else if (left_num > right_rev_num) {\n    return parseInt(left_rev + right);\n  } else {\n    if (left_num === 9) {\n      return parseInt('1' + '0'.repeat(len - 1) + '1');\n    } else {\n      return parseInt((left_num + 1).toString() + (right_num + 1).toString());\n    }\n  }\n}\n\nconsole.log(next_smallest_palindrome(123));\nconsole.log(next_smallest_palindrome(1234));\nconsole.log(next_smallest_palindrome(12345));\nconsole.log(next_smallest_palindrome(1234567));\nconsole.log(next_smallest_palindrome(12345678));\nconsole.log(next_smallest_palindrome(123456789));\nconsole.log(next_smallest_palindrome(1234567890));\nconsole.log(next_smallest_palindrome(12345678901));\nconsole.log(next_smallest_palindrome(123456789012));\nconsole.log(next_smallest_palindrome(1234567890123));\nconsole.log(next_smallest_palindrome(12345678901234));\nconsole.log(next_smallest_palindrome(",
    "    let str = num.toString();\n    let len = str.length;\n    let mid = Math.floor(len / 2);\n    let left = str.substr(0, mid);\n    let right = str.substr(mid + (len % 2), len - 1);\n    let left_rev = left.split(\"\").reverse().join(\"\");\n    if (left_rev > right) {\n        return parseInt(left + str[mid] + left_rev);\n    }\n    let left_num = parseInt(left);\n    let left_num_plus_1 = left_num + 1;\n    let left_num_plus_1_str = left_num_plus_1.toString();\n    let left_num_plus_1_str_rev = left_num_plus_1_str.split(\"\").reverse().join(\"\");\n    return parseInt(left_num_plus_1_str + str[mid] + left_num_plus_1_str_rev);\n}\n",
    "  let str = num.toString();\n  let len = str.length;\n  let mid = Math.floor(len / 2);\n  let left = str.substr(0, mid);\n  let right = str.substr(mid + len % 2, mid);\n  let right_rev = right.split(\"\").reverse().join(\"\");\n  if (left < right_rev) {\n    return parseInt(left + (len % 2 ? str[mid] : \"\") + right_rev);\n  }\n  let carry = 1;\n  let left_arr = left.split(\"\");\n  for (let i = mid - 1; i >= 0; i--) {\n    let sum = parseInt(left_arr[i]) + carry;\n    if (sum > 9) {\n      carry = 1;\n      left_arr[i] = \"0\";\n    } else {\n      left_arr[i] = sum.toString();\n      carry = 0;\n      break;\n    }\n  }\n  left = left_arr.join(\"\");\n  if (carry) {\n    left = \"1\" + left;\n  }\n  return parseInt(left + (len % 2 ? str[mid] : \"\") + left.split(\"\").reverse().join(\"\"));\n}\n",
    "    if (num < 0) {\n        return -1;\n    }\n    let num_str = num.toString();\n    let num_len = num_str.length;\n    let num_half_len = Math.floor(num_len / 2);\n    let num_left = num_str.substring(0, num_half_len);\n    let num_right = num_str.substring(num_len - num_half_len);\n    let num_left_int = parseInt(num_left);\n    let num_right_int = parseInt(num_right);\n    let num_left_int_next = num_left_int + 1;\n    let num_left_next = num_left_int_next.toString();\n    let num_right_next = num_left_next.split('').reverse().join('');\n    let num_next = num_left_next + num_right_next;\n    if (num_len % 2 === 1) {\n        num_next = num_left_next + num_str[num_half_len] + num_right_next;\n    }\n    return parseInt(num_next);\n}\n",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let left_half = num_str.substring(0, Math.floor(num_len / 2));\n  let middle = num_len % 2 === 1 ? num_str.substring(Math.floor(num_len / 2), Math.floor(num_len / 2) + 1) : \"\";\n  let right_half = num_str.substring(Math.ceil(num_len / 2));\n  let left_half_int = parseInt(left_half);\n  let right_half_int = parseInt(right_half);\n  let middle_int = parseInt(middle);\n  let left_half_int_rev = parseInt(left_half.split(\"\").reverse().join(\"\"));\n  let right_half_int_rev = parseInt(right_half.split(\"\").reverse().join(\"\"));\n  let middle_int_rev = parseInt(middle.split(\"\").reverse().join(\"\"));\n  let left_half_int_rev_str = left_half_int_rev.toString();\n  let right_half_int_rev_str = right_half_int_rev.toString();\n  let middle_int_rev_str = middle_int_rev.toString();\n  let left_half_int_rev_str_len = left_half_int_rev_str.length;\n  let right_half_int_rev_str_len = right_half_int_rev_str.length;\n  let middle_int_rev_str_len = middle_int_rev_str.length;\n  let left_half_int_rev_str_len_diff = left_half_int_rev_str_len - left_half.length;\n  let right_half_int_rev_str_len_diff = right_half_int_rev_str_len - right_half.length;\n  let middle_int_rev_str_len_diff = middle_int_rev_str_len - middle.length;\n  let left_half_int_rev_str_len_diff_str = left_half_int_",
    "    let num_str = num.toString();\n    let num_len = num_str.length;\n    let left_half = num_str.substring(0, (num_len + 1) / 2);\n    let middle = num_len % 2 === 1 ? num_str.charAt(Math.floor(num_len / 2)) : '';\n    let right_half = left_half.split('').reverse().join('');\n    let palindrome = left_half + middle + right_half;\n    if (palindrome > num) {\n        return parseInt(palindrome);\n    }\n    if (middle === '') {\n        left_half = (parseInt(left_half) + 1).toString();\n    } else {\n        middle = (parseInt(middle) + 1).toString();\n    }\n    right_half = left_half.split('').reverse().join('');\n    palindrome = left_half + middle + right_half;\n    return parseInt(palindrome);\n}\n",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let left_half = num_str.substring(0, (num_len + 1) / 2);\n  let middle = num_len % 2 === 1 ? num_str.charAt(Math.floor(num_len / 2)) : '';\n  let right_half = left_half.split('').reverse().join('');\n  let next_palindrome = parseInt(left_half + middle + right_half);\n  if (next_palindrome > num) {\n    return next_palindrome;\n  }\n  if (middle === '') {\n    left_half = (parseInt(left_half) + 1).toString();\n    right_half = left_half.split('').reverse().join('');\n    return parseInt(left_half + right_half);\n  }\n  if (middle < '9') {\n    middle = (parseInt(middle) + 1).toString();\n    return parseInt(left_half + middle + right_half);\n  }\n  middle = '0';\n  left_half = (parseInt(left_half) + 1).toString();\n  right_half = left_half.split('').reverse().join('');\n  return parseInt(left_half + middle + right_half);\n}\n",
    "    let str = num.toString();\n    let len = str.length;\n    let mid = Math.floor(len / 2);\n    let left = str.substr(0, mid);\n    let right = str.substr(mid + len % 2, mid);\n    let left_rev = left.split('').reverse().join('');\n    if (left < right) {\n        return parseInt(left + (len % 2 ? str[mid] : '') + left_rev);\n    }\n    let left_num = parseInt(left);\n    left_num++;\n    left = left_num.toString();\n    left_rev = left.split('').reverse().join('');\n    return parseInt(left + (len % 2 ? str[mid] : '') + left_rev);\n}\n\nconsole.log(next_smallest_palindrome(123));\nconsole.log(next_smallest_palindrome(121));\nconsole.log(next_smallest_palindrome(1234));\nconsole.log(next_smallest_palindrome(12345));\nconsole.log(next_smallest_palindrome(123454321));\nconsole.log(next_smallest_palindrome(123456789));\nconsole.log(next_smallest_palindrome(1234567899));\nconsole.log(next_smallest_palindrome(12345678999));",
    "  let num_str = num.toString();\n  let num_length = num_str.length;\n  let mid_index = Math.floor(num_length / 2);\n  let left_index = mid_index - 1;\n  let right_index = num_length % 2 === 0 ? mid_index : mid_index + 1;\n\n  while (left_index >= 0 && num_str[left_index] === num_str[right_index]) {\n    left_index--;\n    right_index++;\n  }\n\n  if (left_index < 0 || num_str[left_index] < num_str[right_index]) {\n    let carry = 1;\n    left_index = mid_index - 1;\n\n    if (num_length % 2 === 1) {\n      num_str = num_str.substring(0, mid_index) + (parseInt(num_str[mid_index]) + carry).toString() + num_str.substring(mid_index + 1);\n      carry = parseInt(num_str[mid_index]) / 10;\n      num_str = num_str.substring(0, mid_index) + (parseInt(num_str[mid_index]) % 10).toString() + num_str.substring(mid_index + 1);\n    }\n\n    right_index = num_length % 2 === 0 ? mid_index : mid_index + 1;\n\n    while (left_index >= 0) {\n      num_str = num_str.substring(0, left_index) + (parseInt(num_str[left_index]) + carry).toString() + num_str.substring(left_index + 1);\n      carry = parseInt(num_str[left_index]) / 10;\n      num_str = num_str.substring(0, left_index) + (parseInt(num_str[left_index]) % 10).toString() + num_str.substring(left_index + 1);\n      num_str = num_str.substring(0, right_index) + num_str[left_index] + num_str.substring(right_index + 1);\n      left_",
    "  let num_str = num.toString();\n  let num_len = num_str.length;\n  let num_half = Math.floor(num_len / 2);\n  let num_left = num_str.substring(0, num_half);\n  let num_right = num_str.substring(num_len - num_half);\n  let num_left_rev = num_right.split(\"\").reverse().join(\"\");\n  let num_left_int = parseInt(num_left);\n  let num_left_rev_int = parseInt(num_left_rev);\n  if (num_left_int < num_left_rev_int) {\n    num_left = (num_left_int + 1).toString();\n    num_left_rev = num_left.split(\"\").reverse().join(\"\");\n  }\n  let num_new = num_left + num_left_rev;\n  return parseInt(num_new);\n}\n",
    "  let num_str = num.toString();\n  let len = num_str.length;\n  let left = Math.floor(len / 2);\n  let right = len % 2 === 0 ? left : left + 1;\n  let increment = Math.pow(10, left);\n  let divisor = Math.pow(10, right);\n  let next_palindrome = num;\n  while (!is_palindrome(next_palindrome)) {\n    next_palindrome += increment;\n    if (next_palindrome % divisor === 0) {\n      increment *= 10;\n      divisor *= 10;\n    }\n  }\n  return next_palindrome;\n}\n"
  ]
}