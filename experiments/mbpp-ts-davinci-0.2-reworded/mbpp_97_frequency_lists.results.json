{
  "name": "mbpp_97_frequency_lists",
  "language": "ts",
  "prompt": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    const result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(list => {\n        list.forEach(item => {\n            if (result[item]) {\n                result[item] += 1;\n            } else {\n                result[item] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if(obj[element2] === undefined){\n                obj[element2] = 1;\n            }else{\n                obj[element2]++;\n            }\n        });\n    });\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            if(result[element] === undefined){\n                result[element] = 1;\n            } else {\n                result[element] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(list => {\n        list.forEach(element => {\n            if (result[element] === undefined) {\n                result[element] = 1;\n            } else {\n                result[element]++;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    let flat_list: number[] = list1.reduce((a, b) => a.concat(b));\n    flat_list.forEach((element) => {\n        if (result[element]) {\n            result[element] += 1;\n        } else {\n            result[element] = 1;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if(result[element2]){\n                result[element2]++;\n            }else{\n                result[element2] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    const result = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]] === undefined) {\n                freq[list1[i][j]] = 1;\n            } else {\n                freq[list1[i][j]]++;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    list1.forEach(function(sublist) {\n        sublist.forEach(function(item) {\n            freq[item] = (freq[item] || 0) + 1;\n        });\n    });\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (obj[list1[i][j]]) {\n                obj[list1[i][j]] += 1;\n            } else {\n                obj[list1[i][j]] = 1;\n            }\n        }\n    }\n    return obj;\n}\n\nconsole.log(frequency_lists([[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "{\n  '1': 3,\n  '2': 3,\n  '3': 3,\n  '4': 3,\n  '5': 3,\n  '6': 3,\n  '7': 3,\n  '8': 3,\n  '9': 3,\n  '10': 3\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(element: number[]) {\n        element.forEach(function(element: number) {\n            if (result[element] === undefined) {\n                result[element] = 1;\n            } else {\n                result[element] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    let flattened_list: number[] = list1.reduce((a, b) => a.concat(b), []);\n    flattened_list.forEach(function(i) { result[i] = (result[i]||0) + 1;});\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(list) {\n        list.forEach(function(item) {\n            if (result[item] === undefined) {\n                result[item] = 1;\n            } else {\n                result[item] += 1;\n            }\n        })\n    })\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency_list: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (frequency_list[list1[i][j]] === undefined) {\n                frequency_list[list1[i][j]] = 1;\n            } else {\n                frequency_list[list1[i][j]]++;\n            }\n        }\n    }\n    return frequency_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]] += 1;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj = {};\n    let flat = list1.reduce((a, b) => a.concat(b), []);\n    for (let i = 0; i < flat.length; i++) {\n        if (obj[flat[i]]) {\n            obj[flat[i]] += 1;\n        } else {\n            obj[flat[i]] = 1;\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    let flat_list: number[] = list1.reduce((a, b) => a.concat(b));\n    for (let i = 0; i < flat_list.length; i++) {\n        if (freq[flat_list[i]] === undefined) {\n            freq[flat_list[i]] = 1;\n        } else {\n            freq[flat_list[i]] += 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(list => {\n        list.forEach(element => {\n            if(result[element] === undefined) {\n                result[element] = 1;\n            } else {\n                result[element]++;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            if (freq[element] === undefined) {\n                freq[element] = 1;\n            } else {\n                freq[element] += 1;\n            }\n        });\n    });\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]] += 1;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]] += 1;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(list) {\n        list.forEach(function(element) {\n            if (result[element]) {\n                result[element]++;\n            } else {\n                result[element] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]]++;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            if (result[element] === undefined) {\n                result[element] = 1;\n            } else {\n                result[element] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]]++;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (obj[list1[i][j]]) {\n                obj[list1[i][j]] += 1;\n            } else {\n                obj[list1[i][j]] = 1;\n            }\n        }\n    }\n    return obj;\n}\n\nconsole.log(frequency_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "{\n  '1': 3,\n  '2': 3,\n  '3': 3,\n  '4': 3,\n  '5': 3,\n  '6': 3,\n  '7': 3,\n  '8': 3,\n  '9': 3,\n  '10': 3\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(sublist) {\n        sublist.forEach(function(element) {\n            if (result[element]) {\n                result[element] += 1;\n            } else {\n                result[element] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(e => {\n            if (result[e]) {\n                result[e]++;\n            } else {\n                result[e] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            if (result[element]) {\n                result[element]++;\n            } else {\n                result[element] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]]++;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\nconsole.log(frequency_lists([[1,2,3],[1,2,3],[1,2,3]]));\nconsole.log(frequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]));\nconsole.log(frequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]));\nconsole.log(frequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]));\nconsole.log(frequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]));\nconsole.log(frequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]));\nconsole.log(frequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]));\nconsole.log(frequency_lists([[1,2,3],[1,2,3],[1,2,3],[1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "../../../../tmp/tmpptel3i8x.ts(23,1): error TS1005: ',' expected.\n../../../../tmp/tmpptel3i8x.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result = {};\n    list1.forEach(function(sublist) {\n        sublist.forEach(function(element) {\n            if (result[element] === undefined) {\n                result[element] = 1;\n            } else {\n                result[element] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            result[element] = (result[element] || 0) + 1;\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq_list: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq_list[list1[i][j]] === undefined) {\n                freq_list[list1[i][j]] = 1;\n            } else {\n                freq_list[list1[i][j]] += 1;\n            }\n        }\n    }\n    return freq_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if(result[element2] == undefined){\n                result[element2] = 1;\n            }else{\n                result[element2]++;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    list1.forEach(function(list) {\n        list.forEach(function(num) {\n            if (freq[num]) {\n                freq[num]++;\n            } else {\n                freq[num] = 1;\n            }\n        });\n    });\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    const result: {[key: number]: number} = {};\n    list1.forEach(list => {\n        list.forEach(element => {\n            if(result[element]) {\n                result[element]++;\n            } else {\n                result[element] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency: {[key: number]: number} = {};\n    list1.forEach(function(element) {\n        element.forEach(function(element) {\n            if (frequency[element]) {\n                frequency[element]++;\n            } else {\n                frequency[element] = 1;\n            }\n        });\n    });\n    return frequency;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(list) {\n        list.forEach(function(element) {\n            if (result[element]) {\n                result[element]++;\n            } else {\n                result[element] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]]++;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\nconsole.log(frequency_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "{\n  '1': 2,\n  '2': 2,\n  '3': 2,\n  '4': 2,\n  '5': 2,\n  '6': 2,\n  '7': 2,\n  '8': 2,\n  '9': 2,\n  '10': 2\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    const result: {[key: number]: number} = {};\n    list1.forEach(list => {\n        list.forEach(num => {\n            if(result[num]) {\n                result[num]++;\n            } else {\n                result[num] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq_dict[list1[i][j]]) {\n                freq_dict[list1[i][j]] += 1;\n            } else {\n                freq_dict[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]]++;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(frequency_lists([[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "{\n  '1': 3,\n  '2': 3,\n  '3': 3,\n  '4': 3,\n  '5': 3,\n  '6': 3,\n  '7': 3,\n  '8': 3,\n  '9': 3,\n  '10': 3\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]]++;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency: {[key: number]: number} = {};\n    list1.forEach(function(sublist: number[]) {\n        sublist.forEach(function(item: number) {\n            if (frequency[item]) {\n                frequency[item] += 1;\n            } else {\n                frequency[item] = 1;\n            }\n        });\n    });\n    return frequency;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    const freq: {[key: number]: number} = {};\n    list1.forEach(list => {\n        list.forEach(num => {\n            if (freq[num]) {\n                freq[num] += 1;\n            } else {\n                freq[num] = 1;\n            }\n        });\n    });\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq_list = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq_list[list1[i][j]]) {\n                freq_list[list1[i][j]] += 1;\n            } else {\n                freq_list[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]] === undefined) {\n                freq[list1[i][j]] = 1;\n            } else {\n                freq[list1[i][j]]++;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]]++;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n  let result: {[key: number]: number} = {};\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (result[list1[i][j]]) {\n        result[list1[i][j]] += 1;\n      } else {\n        result[list1[i][j]] = 1;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    let flattened: number[] = list1.reduce((a, b) => a.concat(b));\n    flattened.forEach((element) => {\n        result[element] = (result[element] || 0) + 1;\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(item) {\n        item.forEach(function(item2) {\n            if (result[item2] === undefined) {\n                result[item2] = 1;\n            } else {\n                result[item2] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if(result[element2] === undefined) {\n                result[element2] = 1;\n            } else {\n                result[element2]++;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (frequency[list1[i][j]]) {\n                frequency[list1[i][j]]++;\n            } else {\n                frequency[list1[i][j]] = 1;\n            }\n        }\n    }\n    return frequency;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj: {[key: number]: number} = {};\n    list1.forEach(function(element) {\n        element.forEach(function(element2) {\n            if (obj[element2] === undefined) {\n                obj[element2] = 1;\n            } else {\n                obj[element2] += 1;\n            }\n        });\n    });\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(element) {\n        element.forEach(function(element2) {\n            if (result[element2] === undefined) {\n                result[element2] = 1;\n            } else {\n                result[element2] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i: number = 0; i < list1.length; i++) {\n        for (let j: number = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (obj[list1[i][j]]) {\n                obj[list1[i][j]]++;\n            } else {\n                obj[list1[i][j]] = 1;\n            }\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (obj[list1[i][j]]) {\n                obj[list1[i][j]]++;\n            } else {\n                obj[list1[i][j]] = 1;\n            }\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            if (frequency[element]) {\n                frequency[element] += 1;\n            } else {\n                frequency[element] = 1;\n            }\n        });\n    });\n    return frequency;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            if (result[element]) {\n                result[element]++;\n            } else {\n                result[element] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (frequency[list1[i][j]]) {\n                frequency[list1[i][j]]++;\n            } else {\n                frequency[list1[i][j]] = 1;\n            }\n        }\n    }\n    return frequency;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (obj[list1[i][j]]) {\n                obj[list1[i][j]]++;\n            } else {\n                obj[list1[i][j]] = 1;\n            }\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (obj[list1[i][j]]) {\n                obj[list1[i][j]]++;\n            } else {\n                obj[list1[i][j]] = 1;\n            }\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]]++;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (frequency[list1[i][j]]) {\n                frequency[list1[i][j]] += 1;\n            } else {\n                frequency[list1[i][j]] = 1;\n            }\n        }\n    }\n    return frequency;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (obj[list1[i][j]]) {\n                obj[list1[i][j]]++;\n            } else {\n                obj[list1[i][j]] = 1;\n            }\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result = {};\n    list1.forEach(function(item) {\n        item.forEach(function(item2) {\n            if (result[item2]) {\n                result[item2] += 1;\n            } else {\n                result[item2] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]] += 1;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency_list: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (frequency_list[list1[i][j]] === undefined) {\n                frequency_list[list1[i][j]] = 1;\n            } else {\n                frequency_list[list1[i][j]] += 1;\n            }\n        }\n    }\n    return frequency_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(frequency_lists([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "{\n  '1': 3,\n  '2': 3,\n  '3': 3,\n  '4': 3,\n  '5': 3,\n  '6': 3,\n  '7': 3,\n  '8': 3,\n  '9': 3,\n  '10': 3\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    list1.forEach(function(item) {\n        item.forEach(function(item2) {\n            if (freq[item2] == undefined) {\n                freq[item2] = 1;\n            } else {\n                freq[item2] += 1;\n            }\n        });\n    });\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]]++;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let frequency: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (frequency[list1[i][j]]) {\n                frequency[list1[i][j]]++;\n            } else {\n                frequency[list1[i][j]] = 1;\n            }\n        }\n    }\n    return frequency;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (obj[list1[i][j]]) {\n                obj[list1[i][j]] += 1;\n            } else {\n                obj[list1[i][j]] = 1;\n            }\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if(result[element2] === undefined){\n                result[element2] = 1;\n            }\n            else{\n                result[element2] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj: {[key: number]: number} = {};\n    let flat_list: number[] = list1.reduce((a, b) => a.concat(b), []);\n    for (let i = 0; i < flat_list.length; i++) {\n        if (obj[flat_list[i]]) {\n            obj[flat_list[i]] += 1;\n        } else {\n            obj[flat_list[i]] = 1;\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let obj = {};\n    list1.forEach(function(item) {\n        item.forEach(function(item2) {\n            if (obj[item2]) {\n                obj[item2]++;\n            } else {\n                obj[item2] = 1;\n            }\n        });\n    });\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        flat_list = flat_list.concat(list1[i]);\n    }\n    for (let i = 0; i < flat_list.length; i++) {\n        if (result[flat_list[i]]) {\n            result[flat_list[i]] += 1;\n        } else {\n            result[flat_list[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]]++;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for(let i = 0; i < list1.length; i++) {\n        for(let j = 0; j < list1[i].length; j++) {\n            if(freq[list1[i][j]]) {\n                freq[list1[i][j]]++;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if (result[element2]) {\n                result[element2] += 1;\n            } else {\n                result[element2] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]] === undefined) {\n                freq[list1[i][j]] = 1;\n            }\n            else {\n                freq[list1[i][j]] += 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(element) {\n        element.forEach(function(e) {\n            if (result[e] === undefined) {\n                result[e] = 1;\n            } else {\n                result[e] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    const result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(num => {\n            if (result[num]) {\n                result[num] += 1;\n            } else {\n                result[num] = 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if(result[element2] == undefined) {\n                result[element2] = 1;\n            } else {\n                result[element2]++;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]]++;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(frequency_lists([[1,2,3],[2,3,4],[3,4,5]]));\nconsole.log(frequency_lists([[1,2,3],[2,3,4],[3,4,5],[1,2,3]]));\nconsole.log(frequency_lists([[1,2,3],[2,3,4],[3,4,5],[1,2,3],[1,2,3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "{ '1': 1, '2': 2, '3': 3, '4': 2, '5': 1 }\n{ '1': 2, '2': 3, '3': 4, '4': 2, '5': 1 }\n{ '1': 3, '2': 4, '3': 5, '4': 2, '5': 1 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]]) {\n                freq[list1[i][j]]++;\n            } else {\n                freq[list1[i][j]] = 1;\n            }\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    return list1.reduce((acc, curr) => {\n        curr.forEach(num => {\n            acc[num] = acc[num] ? acc[num] + 1 : 1;\n        });\n        return acc;\n    }, {});\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(function(element) {\n        element.forEach(function(element) {\n            if (result[element] === undefined) {\n                result[element] = 1;\n            } else {\n                result[element] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            if (result[element] == undefined) {\n                result[element] = 1;\n            } else {\n                result[element] += 1;\n            }\n        });\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123655,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\nconsole.log(frequency_lists([[1,2,3],[2,3,4],[3,4,5]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123656,
      "stdout": "{ '1': 1, '2': 2, '3': 3, '4': 2, '5': 1 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1665510610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    list1.forEach(x => x.forEach(y => freq[y] = (freq[y] || 0) + 1));\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
      "timestamp": 1666123656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}