{
  "name": "mbpp_787_text_match_three",
  "language": "ts",
  "prompt": "//Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three(text: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_three;\n  assert.deepEqual(candidate(\"ac\"),false);\n  assert.deepEqual(candidate(\"dc\"),false);\n  assert.deepEqual(candidate(\"abbbba\"),true);\n  assert.deepEqual(candidate(\"caacabbbba\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex: RegExp = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let pattern = /ab{3}/;\n    return pattern.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n"
  ]
}