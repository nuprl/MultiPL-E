{
  "name": "mbpp_787_text_match_three",
  "language": "ts",
  "prompt": "//Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three(text: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_three;\n  assert.deepEqual(candidate(\"ac\"),false);\n  assert.deepEqual(candidate(\"dc\"),false);\n  assert.deepEqual(candidate(\"abbbba\"),true);\n  assert.deepEqual(candidate(\"caacabbbba\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex: RegExp = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let pattern = /ab{3}/;\n    return pattern.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let a = /ab{3}/;\n    return a.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"abb\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let pattern = /ab{3}/;\n    return pattern.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "  return /ab{3}/.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "  let regex = /ab{3}/;\n  return regex.test(text);\n}\n",
    "  let regex = /ab{3}/;\n  return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "  let regex = /ab{3}/;\n  return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"ab\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"ab\"));\n",
    "  let regex = /ab{3}/;\n  return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"aaabbb\"));\nconsole.log(text_match_three(\"abb\"));\nconsole.log(text_match_three(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regexp = /ab{3}/;\n    return regexp.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"aaabbb\"));\nconsole.log(text_match_three(\"abb\"));\nconsole.log(text_match_three(\"aabb\"));\nconsole.log(text_match_three(\"aaabb\"));\nconsole.log(text_match_three(\"ab\"));\nconsole.log(text_match_three(\"aab\"));\nconsole.log(text_match_three(\"aaaab\"));\nconsole.log(text_match_three(\"aaaaab\"));\nconsole.log(text_match_three(\"aaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaaaaaaaaab\"));\nconsole.log(text_match_three(\"aaaaaaaaaaaaaaaaaaaaaaaab\")",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"aaabbb\"));\nconsole.log(text_match_three(\"abb\"));\nconsole.log(text_match_three(\"ababab\"));\nconsole.log(text_match_three(\"abaa\"));\nconsole.log(text_match_three(\"ab\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "  let regex = /ab{3}/;\n  return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "  return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"abb\"));\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "  let regex = /ab{3}/;\n  return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let reg = /ab{3}/;\n    return reg.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"abb\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regexp = /ab{3}/;\n    return regexp.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex: RegExp = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"abb\"));\nconsole.log(text_match_three(\"ababab\"));\nconsole.log(text_match_three(\"abaa\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"abb\"));\nconsole.log(text_match_three(\"ab\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "  return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"aaabbb\"));\nconsole.log(text_match_three(\"abb\"));\nconsole.log(text_match_three(\"ababab\"));\nconsole.log(text_match_three(\"abaa\"));\nconsole.log(text_match_three(\"ab\"));\nconsole.log(text_match_three(\"aba\"));\nconsole.log(text_match_three(\"aaaa\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"abb\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"abb\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"abb\"));\nconsole.log(text_match_three(\"abbbbb\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"aabbb\"));\nconsole.log(text_match_three(\"abb\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\nconsole.log(text_match_three(\"abbb\"));\nconsole.log(text_match_three(\"abb\"));\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    return /ab{3}/.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/g;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{3}/;\n    return regex.test(text);\n}\n"
  ]
}