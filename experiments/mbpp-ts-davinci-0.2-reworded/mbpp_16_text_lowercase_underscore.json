{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "ts",
  "prompt": "//Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore(text: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_lowercase_underscore;\n  assert.deepEqual(candidate(\"aab_cbbbc\"),true);\n  assert.deepEqual(candidate(\"aab_Abbbc\"),false);\n  assert.deepEqual(candidate(\"Aaab_abbbc\"),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return text.match(/^[a-z_]+$/) ? true : false;\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let lowercase_underscore: boolean = false;\n    let lowercase_underscore_regex: RegExp = /^[a-z]+_[a-z]+$/;\n    if (lowercase_underscore_regex.test(text)) {\n        lowercase_underscore = true;\n    }\n    return lowercase_underscore;\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /[a-z]+_[a-z]+/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    return text.match(/^[a-z]+(_[a-z]+)*$/) !== null;\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "  return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex: RegExp = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "  return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "  let regex = /^[a-z]+(_[a-z]+)*$/;\n  return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\nconsole.log(text_lowercase_underscore(\"this_is_a_text\"));\nconsole.log(text_lowercase_underscore(\"thisIsAText\"));\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    if (text.match(/^[a-z_]+$/)) {\n        return true;\n    }\n    return false;\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regexp = /^[a-z_]+$/;\n    return regexp.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    return /^[a-z]+_[a-z]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    return /^[a-z_]+$/.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let result: boolean = false;\n    let regex: RegExp = /^[a-z_]+$/;\n    if (regex.test(text)) {\n        result = true;\n    }\n    return result;\n}\n",
    "    let regex = /^[a-z]+_[a-z]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z]+(_[a-z]+)*$/;\n    return regex.test(text);\n}\n",
    "    return /^[a-z]+(_[a-z]+)*$/.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n",
    "    let regex = /^[a-z_]+$/;\n    return regex.test(text);\n}\n"
  ]
}