{
  "name": "mbpp_12_sort_matrix",
  "language": "ts",
  "prompt": "//Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix(M: number[][]): number[][] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_matrix;\n  assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);\n  assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);\n  assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sums.length; i++) {\n        let index: number = sums.indexOf(sorted_sums[i]);\n        sorted_matrix.push(M[index]);\n        sums[index] = -1;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = 0; j < sums.length - 1; j++) {\n            if (sums[j] > sums[j + 1]) {\n                let temp = sums[j];\n                sums[j] = sums[j + 1];\n                sums[j + 1] = temp;\n                let temp2 = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sums[i] = M[i].reduce((a, b) => a + b);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index = sums.indexOf(Math.min(...sums));\n        sorted_matrix.push(M[min_index]);\n        sums[min_index] = Infinity;\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_rows = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    let sorted_matrix = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sum_rows);\n        let index = sum_rows.indexOf(min);\n        sorted_matrix.push(M[index]);\n        sum_rows[index] = Number.MAX_VALUE;\n    }\n    return sorted_matrix;\n}\n",
    "    let sums: number[] = [];\n    for (let i: number = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j: number = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted_sums: number[] = sums.sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i: number = 0; i < sorted_sums.length; i++) {\n        for (let j: number = 0; j < sums.length; j++) {\n            if (sorted_sums[i] == sums[j]) {\n                sorted_M.push(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_M;\n}\n",
    "    let sum = 0;\n    let sum_arr: number[] = [];\n    let result: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_arr.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < sum_arr.length; i++) {\n        for (let j = 0; j < sum_arr.length - 1; j++) {\n            if (sum_arr[j] > sum_arr[j + 1]) {\n                let temp = sum_arr[j];\n                sum_arr[j] = sum_arr[j + 1];\n                sum_arr[j + 1] = temp;\n                let temp_arr = M[j];\n                M[j] = M[j + 1];\n                M[j + 1] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    let sorted: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min = Math.min(...sums);\n        let index = sums.indexOf(min);\n        sorted.push(M[index]);\n        sums.splice(index, 1);\n        M.splice(index, 1);\n    }\n    return sorted;\n}\n",
    "    let sum_of_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    let sorted_sum_of_rows = sum_of_rows.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_sum_of_rows.length; i++) {\n        for (let j = 0; j < sum_of_rows.length; j++) {\n            if (sorted_sum_of_rows[i] == sum_of_rows[j]) {\n                sorted_matrix.push(M[j]);\n                sum_of_rows[j] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;\n}\n",
    "    let sum_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_rows.push(sum);\n    }\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < M.length; i++) {\n        let min_index: number = sum_rows.indexOf(Math.min(...sum_rows));\n        sorted_matrix.push(M[min_index]);\n        sum_rows[min_index] = Number.MAX_VALUE;\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n",
    "    let sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sums.push(sum);\n    }\n    for (let i = 0; i < sums.length; i++) {\n        for (let j = i + 1; j < sums.length; j++) {\n            if (sums[i] > sums[j]) {\n                let temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                let temp2 = M[i];\n                M[i] = M[j];\n                M[j] = temp2;\n            }\n        }\n    }\n    return M;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        sum[i] = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum[i] += M[i][j];\n        }\n    }\n    for (let i = 0; i < M.length; i++) {\n        for (let j = i + 1; j < M.length; j++) {\n            if (sum[i] > sum[j]) {\n                let temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n                let temp_arr = M[i];\n                M[i] = M[j];\n                M[j] = temp_arr;\n            }\n        }\n    }\n    return M;\n}\n",
    "    let result = M.map(row => row.reduce((a, b) => a + b));\n    return M.sort((a, b) => result[M.indexOf(a)] - result[M.indexOf(b)]);\n}\n",
    "    let result = M.slice();\n    result.sort((a, b) => {\n        let sum_a = 0;\n        let sum_b = 0;\n        for (let i = 0; i < a.length; i++) {\n            sum_a += a[i];\n            sum_b += b[i];\n        }\n        return sum_a - sum_b;\n    });\n    return result;\n}\n",
    "    let row_sums: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        row_sums.push(sum);\n    }\n    let sorted_row_sums = row_sums.slice().sort((a, b) => a - b);\n    let sorted_matrix: number[][] = [];\n    for (let i = 0; i < sorted_row_sums.length; i++) {\n        let index = row_sums.indexOf(sorted_row_sums[i]);\n        sorted_matrix.push(M[index]);\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a + b));\n}\n",
    "    let sum_row: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_row.push(sum);\n    }\n    let sorted_sum_row = sum_row.slice().sort((a, b) => a - b);\n    let sorted_M: number[][] = [];\n    for (let i = 0; i < sorted_sum_row.length; i++) {\n        let index = sum_row.indexOf(sorted_sum_row[i]);\n        sorted_M.push(M[index]);\n    }\n    return sorted_M;\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sorted_matrix: number[][] = [];\n    let sorted_rows: number[] = [];\n    for (let i = 0; i < M.length; i++) {\n        let sum: number = 0;\n        for (let j = 0; j < M[i].length; j++) {\n            sum += M[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        let min: number = sum_of_rows[i];\n        let min_index: number = i;\n        for (let j = i + 1; j < sum_of_rows.length; j++) {\n            if (sum_of_rows[j] < min) {\n                min = sum_of_rows[j];\n                min_index = j;\n            }\n        }\n        let temp: number = sum_of_rows[i];\n        sum_of_rows[i] = sum_of_rows[min_index];\n        sum_of_rows[min_index] = temp;\n        sorted_rows.push(min_index);\n    }\n    for (let i = 0; i < sorted_rows.length; i++) {\n        sorted_matrix.push(M[sorted_rows[i]]);\n    }\n    return sorted_matrix;\n}\n",
    "    return M.sort((a, b) => a.reduce((x, y) => x + y) - b.reduce((x, y) => x + y));\n}\n"
  ]
}