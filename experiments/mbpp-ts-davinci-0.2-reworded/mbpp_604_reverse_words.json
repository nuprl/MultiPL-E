{
  "name": "mbpp_604_reverse_words",
  "language": "ts",
  "prompt": "//Write a function to reverse words seperated by spaces in a given string.\nfunction reverse_words(s: string): string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_words;\n  assert.deepEqual(candidate(\"python program\"),\"program python\");\n  assert.deepEqual(candidate(\"java language\"),\"language java\");\n  assert.deepEqual(candidate(\"indian man\"),\"man indian\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let words = s.split(' ');\n    let reversed_words = words.map(word => word.split('').reverse().join(''));\n    return reversed_words.join(' ');\n}\n",
    "  let words: string[] = s.split(\" \");\n  let reversed_words: string[] = [];\n  for (let i = words.length - 1; i >= 0; i--) {\n    reversed_words.push(words[i]);\n  }\n  return reversed_words.join(\" \");\n}\n",
    "    let words: string[] = s.split(\" \");\n    let reversed: string = \"\";\n    for (let i: number = words.length - 1; i >= 0; i--) {\n        reversed += words[i] + \" \";\n    }\n    return reversed;\n}\n",
    "  let words = s.split(\" \");\n  let reversed = words.map(word => {\n    return word.split(\"\").reverse().join(\"\");\n  });\n  return reversed.join(\" \");\n}\n\nconsole.log(reverse_words(\"hello world\"));\n",
    "    let words = s.split(\" \");\n    let reversed = words.map(word => word.split(\"\").reverse().join(\"\"));\n    return reversed.join(\" \");\n}\n\nconsole.log(reverse_words(\"Hello World\"));\nconsole.log(reverse_words(\"Hello World!\"));\nconsole.log(reverse_words(\"Hello\"));\nconsole.log(reverse_words(\"\"));\n",
    "    let words = s.split(' ');\n    let reversed = words.map(word => {\n        return word.split('').reverse().join('');\n    });\n    return reversed.join(' ');\n}\n",
    "    let words: string[] = s.split(\" \");\n    let reversed_words: string[] = [];\n    for (let i: number = words.length - 1; i >= 0; i--) {\n        reversed_words.push(words[i]);\n    }\n    return reversed_words.join(\" \");\n}\n",
    "    let words = s.split(\" \");\n    let reversed_words = words.map(word => word.split(\"\").reverse().join(\"\"));\n    return reversed_words.join(\" \");\n}\n",
    "    let words = s.split(\" \");\n    let reversed_words = words.map(word => word.split(\"\").reverse().join(\"\"));\n    return reversed_words.join(\" \");\n}\n",
    "    let words = s.split(' ');\n    let reversed = words.map(word => word.split('').reverse().join(''));\n    return reversed.join(' ');\n}\n",
    "    let words = s.split(\" \");\n    let result = \"\";\n    for (let i = words.length - 1; i >= 0; i--) {\n        result += words[i] + \" \";\n    }\n    return result;\n}\n",
    "    let words = s.split(\" \");\n    let reversed_words = [];\n    for (let i = 0; i < words.length; i++) {\n        reversed_words.push(reverse_string(words[i]));\n    }\n    return reversed_words.join(\" \");\n}\n",
    "    let words = s.split(\" \");\n    let reversed = words.map(word => word.split(\"\").reverse().join(\"\"));\n    return reversed.join(\" \");\n}\n",
    "    let words = s.split(\" \");\n    let reversed_words = words.map(word => word.split(\"\").reverse().join(\"\"));\n    return reversed_words.join(\" \");\n}\n",
    "    let words: string[] = s.split(\" \");\n    let reversed_words: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        reversed_words.push(reverse_string(words[i]));\n    }\n    return reversed_words.join(\" \");\n}\n",
    "    let words = s.split(' ');\n    let reversed_words = [];\n    for (let i = 0; i < words.length; i++) {\n        reversed_words.push(reverse_string(words[i]));\n    }\n    return reversed_words.join(' ');\n}\n",
    "    let words = s.split(\" \");\n    let reversed_words = words.map(word => word.split(\"\").reverse().join(\"\"));\n    return reversed_words.join(\" \");\n}\n",
    "    let words: string[] = s.split(' ');\n    let reversed: string[] = [];\n    for (let word of words) {\n        reversed.push(reverse_string(word));\n    }\n    return reversed.join(' ');\n}\n",
    "    let words: string[] = s.split(\" \");\n    let reversed: string = \"\";\n    for (let i = words.length - 1; i >= 0; i--) {\n        reversed += words[i] + \" \";\n    }\n    return reversed;\n}\n",
    "    let words = s.split(' ');\n    let reversed = words.map(word => word.split('').reverse().join(''));\n    return reversed.join(' ');\n}\n"
  ]
}