{
  "name": "mbpp_97_frequency_lists",
  "language": "ts",
  "prompt": "//Write a function to find frequency of each element in a flattened array of arrays, returned in an object.\nfunction frequency_lists(list1: number[][]): {[key: number]: number} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = frequency_lists;\n  assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});\n  assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    const result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    list1.forEach(list => {\n        list.forEach(item => {\n            if (result[item]) {\n                result[item] += 1;\n            } else {\n                result[item] = 1;\n            }\n        });\n    });\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let obj = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if(obj[element2] === undefined){\n                obj[element2] = 1;\n            }else{\n                obj[element2]++;\n            }\n        });\n    });\n    return obj;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element => {\n            if(result[element] === undefined){\n                result[element] = 1;\n            } else {\n                result[element] += 1;\n            }\n        });\n    });\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    list1.forEach(list => {\n        list.forEach(element => {\n            if (result[element] === undefined) {\n                result[element] = 1;\n            } else {\n                result[element]++;\n            }\n        });\n    });\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    let flat_list: number[] = list1.reduce((a, b) => a.concat(b));\n    flat_list.forEach((element) => {\n        if (result[element]) {\n            result[element] += 1;\n        } else {\n            result[element] = 1;\n        }\n    });\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    list1.forEach(element => {\n        element.forEach(element2 => {\n            if(result[element2]){\n                result[element2]++;\n            }else{\n                result[element2] = 1;\n            }\n        });\n    });\n    return result;\n}\n",
    "    const result = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]] === undefined) {\n                result[list1[i][j]] = 1;\n            } else {\n                result[list1[i][j]] += 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]] += 1;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (freq[list1[i][j]] === undefined) {\n                freq[list1[i][j]] = 1;\n            } else {\n                freq[list1[i][j]]++;\n            }\n        }\n    }\n    return freq;\n}\n",
    "    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (result[list1[i][j]]) {\n                result[list1[i][j]]++;\n            } else {\n                result[list1[i][j]] = 1;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let freq: {[key: number]: number} = {};\n    list1.forEach(function(sublist) {\n        sublist.forEach(function(item) {\n            freq[item] = (freq[item] || 0) + 1;\n        });\n    });\n    return freq;\n}\n"
  ]
}