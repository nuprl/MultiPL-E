{
  "name": "mbpp_279_is_num_decagonal",
  "language": "ts",
  "prompt": "//Write a function to find the nth decagonal number.\nfunction is_num_decagonal(n: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_num_decagonal;\n  assert.deepEqual(candidate(3),27);\n  assert.deepEqual(candidate(7),175);\n  assert.deepEqual(candidate(10),370);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;\n}\nconsole.log(is_num_decagonal(4));\n",
    "    let i: number = 0;\n    let num: number = 0;\n    while (i < n) {\n        num = num + 10;\n        i++;\n    }\n    return num;\n}\n",
    "    return (Math.sqrt(4 * n + 1) + 1) / 2;\n}\n",
    "    return (Math.sqrt(4 * n + 1) + 1) / 2;\n}\n\nconsole.log(is_num_decagonal(10));\n",
    "    return (Math.sqrt(4 * n + 1) + 1) / 2 % 1 === 0;\n}\n",
    "    let num = 0;\n    let i = 1;\n    while (num < n) {\n        num = i * (3 * i - 1) / 2;\n        i++;\n    }\n    return num;\n}\n",
    "    let result = 0;\n    let i = 1;\n    while (result < n) {\n        result = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if (result == n) {\n        return result;\n    } else {\n        return 0;\n    }\n}\n",
    "    let result: number = 0;\n    let i: number = 1;\n    while (result < n) {\n        result = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if (result === n) {\n        return i - 1;\n    } else {\n        return 0;\n    }\n}\nconsole.log(is_num_decagonal(10));\nconsole.log(is_num_decagonal(9));\nconsole.log(is_num_decagonal(8));\nconsole.log(is_num_decagonal(7));\nconsole.log(is_num_decagonal(6));\nconsole.log(is_num_decagonal(5));\nconsole.log(is_num_decagonal(4));\nconsole.log(is_num_decagonal(3));\nconsole.log(is_num_decagonal(2));\nconsole.log(is_num_decagonal(1));\nconsole.log(is_num_decagonal(0));\nconsole.log(is_num_decagonal(-1));\nconsole.log(is_num_decagonal(-2));\nconsole.log(is_num_decagonal(-3));\nconsole.log(is_num_decagonal(-4));\nconsole.log(is_num_decagonal(-5));\nconsole.log(is_num_decagonal(-6));\nconsole.log(is_num_decagonal(-7));\nconsole.log(is_num_decagonal(-8));\nconsole.log(is_num_decagonal(-9));\nconsole.log(is_num_decagonal(-10));\n",
    "    return n * (3 * n - 2);\n}\n",
    "  return n * (3 * n - 2);\n}\n",
    "    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;\n}\n",
    "    return n * (3 * n - 2);\n}\n",
    "    return n * (3 * n - 2);\n}\n",
    "    let i = 1;\n    let num = 0;\n    while (i <= n) {\n        num = i * (3 * i - 1) / 2;\n        i++;\n    }\n    return num;\n}\n",
    "    return (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n}\n",
    "    return n * (3 * n - 2);\n}\n",
    "    return (Math.sqrt(4 * n + 1) + 1) / 2;\n}\n",
    "    return n * (3 * n - 2);\n}\n",
    "    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        result += (i * 10) - 9;\n    }\n    return result;\n}\nconsole.log(is_num_decagonal(4));\n",
    "    let num: number = 0;\n    for (let i = 1; i <= n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;\n}\n"
  ]
}