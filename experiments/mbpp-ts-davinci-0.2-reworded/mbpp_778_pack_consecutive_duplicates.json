{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "ts",
  "prompt": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10]));\n",
    "    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach(function (item: any) {\n        if (item !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(item);\n        previous = item;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9]));\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i === 0) {\n            temp.push(list1[i]);\n        } else {\n            if (list1[i] === list1[i - 1]) {\n                temp.push(list1[i]);\n            } else {\n                result.push(temp);\n                temp = [];\n                temp.push(list1[i]);\n            }\n        }\n    }\n    result.push(temp);\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 2, 2, 3, 4, 4]));\n",
    "    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9]));\n",
    "    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5]));\n",
    "    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== list1[i + 1]) {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        } else {\n            temp.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,",
    "    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            list2.push(list1[i]);\n        } else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for (let i = 0; i < list3.length; i++) {\n        if (list3[i].length > 1) {\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\n",
    "    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6",
    "    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach(function (current: any) {\n        if (current !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(current);\n        previous = current;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
    "    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let current: any = null;\n    let count: number = 0;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                result.push(count);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(count);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 1, 1]));\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n",
    "    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7]));\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]));\n",
    "    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6]));\n",
    "    let list2 = [];\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            count++;\n        } else {\n            list2.push(list1.slice(i - count, i + 1));\n            count = 0;\n        }\n    }\n    return list2;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
    "    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5]));\n"
  ]
}