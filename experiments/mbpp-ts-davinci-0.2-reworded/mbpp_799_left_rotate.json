{
  "name": "mbpp_799_left_rotate",
  "language": "ts",
  "prompt": "//Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate(n: number, d: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_rotate;\n  assert.deepEqual(candidate(16, 2),64);\n  assert.deepEqual(candidate(10, 2),40);\n  assert.deepEqual(candidate(99, 3),792);\n  assert.deepEqual(candidate(99, 3),792);\n  assert.deepEqual(candidate(1, 3),8);\n  assert.deepEqual(candidate(5, 3),40);\n  assert.deepEqual(candidate(29, 3),232);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n\nconsole.log(left_rotate(5, 2));\n",
    "    let mask = 0;\n    for (let i = 0; i < d; i++) {\n        mask = mask | (1 << i);\n    }\n    let left = n << d;\n    let right = n >> (32 - d);\n    return (left | right) & ~mask;\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n"
  ]
}