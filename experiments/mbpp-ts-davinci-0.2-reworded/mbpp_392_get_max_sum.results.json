{
  "name": "mbpp_392_get_max_sum",
  "language": "ts",
  "prompt": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let max_sum_n_2 = get_max_sum(Math.floor(n / 2));\n    let max_sum_n_3 = get_max_sum(Math.floor(n / 3));\n    let max_sum_n_4 = get_max_sum(Math.floor(n / 4));\n    let max_sum_n_5 = get_max_sum(Math.floor(n / 5));\n    let max_sum_n_2_3_4_5 = max_sum_n_2 + max_sum_n_3 + max_sum_n_4 + max_sum_n_5;\n    if (max_sum_n_2_3_4_5 > max_sum) {\n        max_sum = max_sum_n_2_3_4_5;\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (max_sum < sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmprsjltv2t.js:19:12)\n    at Object.<anonymous> (/tmp/tmprsjltv2t.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n    return 3;\n  }\n  if (n == 4) {\n    return 4;\n  }\n  if (n == 5) {\n    return 5;\n  }\n  return Math.max(\n    get_max_sum(n / 2) +\n      get_max_sum(n / 3) +\n      get_max_sum(n / 4) +\n      get_max_sum(n / 5),\n    n\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n\n    return max_sum + n;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "21\n45\n67.5\n93\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpo26nfkw6.js:22:12)\n    at Object.<anonymous> (/tmp/tmpo26nfkw6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = n;\n    let sum2 = get_max_sum(Math.floor(n / 2));\n    let sum3 = get_max_sum(Math.floor(n / 3));\n    let sum4 = get_max_sum(Math.floor(n / 4));\n    let sum5 = get_max_sum(Math.floor(n / 5));\n    let max = Math.max(sum2 + sum3 + sum4 + sum5, n);\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n\n    if (n == 0) {\n        return 0;\n    }\n\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\nconsole.log(get_max_sum(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    return Math.max(n, get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = n;\n    let temp = get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5));\n    if (temp > sum) {\n        sum = temp;\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = n;\n    let half = n / 2;\n    let third = n / 3;\n    let fourth = n / 4;\n    let fifth = n / 5;\n    if (half > 0) {\n        sum += get_max_sum(half);\n    }\n    if (third > 0) {\n        sum += get_max_sum(third);\n    }\n    if (fourth > 0) {\n        sum += get_max_sum(fourth);\n    }\n    if (fifth > 0) {\n        sum += get_max_sum(fifth);\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n <= 0) {\n    return 0;\n  }\n\n  return Math.max(\n    n,\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5))\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 2) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n153.93601851851855\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmppopwp_rl.js:14:12)\n    at Object.<anonymous> (/tmp/tmppopwp_rl.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 153.93601851851855,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let max_sum_n_2 = get_max_sum(Math.floor(n / 2));\n    let max_sum_n_3 = get_max_sum(Math.floor(n / 3));\n    let max_sum_n_4 = get_max_sum(Math.floor(n / 4));\n    let max_sum_n_5 = get_max_sum(Math.floor(n / 5));\n    let max_sum_n_2_3_4_5 = max_sum_n_2 + max_sum_n_3 + max_sum_n_4 + max_sum_n_5;\n    max_sum = Math.max(max_sum, max_sum_n_2_3_4_5);\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 1; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n - i));\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = 0;\n    if (n > 5) {\n        sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    }\n    return Math.max(n, sum);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp95mk1w2y.js:15:12)\n    at Object.<anonymous> (/tmp/tmp95mk1w2y.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5));\n    return Math.max(sum, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(\n        get_max_sum(Math.floor(n / 2)) +\n            get_max_sum(Math.floor(n / 3)) +\n            get_max_sum(Math.floor(n / 4)) +\n            get_max_sum(Math.floor(n / 5)),\n        n\n    );\n}\nconsole.log(get_max_sum(6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 12) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n103.06666666666668\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpitsqyawc.js:14:12)\n    at Object.<anonymous> (/tmp/tmpitsqyawc.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 103.06666666666668,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 1; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n - i));\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 4) {\n    return 4;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  return Math.max(\n    get_max_sum(n / 2) +\n      get_max_sum(n / 3) +\n      get_max_sum(n / 4) +\n      get_max_sum(n / 5),\n    n\n  );\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(13));\nconsole.log(get_max_sum(14));\nconsole.log(get_max_sum(15));\nconsole.log(get_max_sum(16));\nconsole.log(get_max_sum(17));\nconsole.log(get_max_sum(18));\nconsole.log(get_max_sum(19));\nconsole.log(get_max_sum(20));\nconsole.log(get_max_sum(21));\nconsole.log(get_max_sum(22));\nconsole.log(get_max_sum(23));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(25));\nconsole.log(get_max_sum(26));\nconsole.log(get_max_sum(27));\nconsole.log(get_max_sum(28));\nconsole.log(get_max_sum(29));\nconsole.log(get_max_sum(30));\nconsole.log(get_max_sum(31));\nconsole.log(get_max_sum(32));\nconsole.log(get_max_sum(33));\nconsole.log(get_max_sum(34));\nconsole.log(get_max_sum(35));\nconsole.log(get_max_sum(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n <= 0) {\n    return 0;\n  }\n  let max_sum = n;\n  for (let i = 2; i <= 5; i++) {\n    max_sum = Math.max(max_sum, get_max_sum(n / i));\n  }\n  return max_sum;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(60));\nconsole.log(get_max_sum(100));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n\n  if (n === 0) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  return Math.max(\n    n,\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5))\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n <= 5) {\n    return n;\n  }\n  return Math.max(\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5)),\n    n\n  );\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(123));\nconsole.log(get_max_sum(1234));\nconsole.log(get_max_sum(12345));\nconsole.log(get_max_sum(123456));\nconsole.log(get_max_sum(1234567));\nconsole.log(get_max_sum(12345678));\nconsole.log(get_max_sum(123456789));\nconsole.log(get_max_sum(1234567890));\nconsole.log(get_max_sum(12345678901));\nconsole.log(get_max_sum(123456789012));\nconsole.log(get_max_sum(1234567890123));\nconsole.log(get_max_sum(12345678901234));\nconsole.log(get_max_sum(123456789012345));\nconsole.log(get_max_sum(1234567890123456));\nconsole.log(get_max_sum(12345678901234567));\nconsole.log(get_max_sum(123456789012345678));\nconsole.log(get_max_sum(1234567890123456789));\nconsole.log(get_max_sum(12345678901234567890));\nconsole.log(get_max_sum(123456789012345678901));\nconsole.log(get_max_sum(1234567890123456789012));\nconsole.log(get_max_sum(12345678901234567890123));\nconsole.log(get_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "../../../../tmp/tmpsh876i0k.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpsh876i0k.ts(41,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum += get_max_sum(n / i);\n    }\n    return Math.max(sum, n);\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\nconsole.log(get_max_sum(72));\nconsole.log(get_max_sum(84));\nconsole.log(get_max_sum(96));\nconsole.log(get_max_sum(108));\nconsole.log(get_max_sum(120));\nconsole.log(get_max_sum(132));\nconsole.log(get_max_sum(144));\nconsole.log(get_max_sum(156));\nconsole.log(get_max_sum(168));\nconsole.log(get_max_sum(180));\nconsole.log(get_max_sum(192));\nconsole.log(get_max_sum(204));\nconsole.log(get_max_sum(216));\nconsole.log(get_max_sum(228));\nconsole.log(get_max_sum(240));\nconsole.log(get_max_sum(252));\nconsole.log(get_max_sum(264));\nconsole.log(get_max_sum(276));\nconsole.log(get_max_sum(288));\nconsole.log(get_max_sum(300));\nconsole.log(get_max_sum(312));\nconsole.log(get_max_sum(324));\nconsole.log(get_max_sum(336));\nconsole.log(get_max_sum(348));\nconsole.log(get_max_sum(360));\nconsole.log(get_max_sum(372));\nconsole.log(get_max_sum(384));\nconsole.log(get_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "../../../../tmp/tmp39t_1brq.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmp39t_1brq.ts(49,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n\n    if (n < 5) {\n        return n;\n    }\n\n    let max_sum = 0;\n\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp70zl_yiq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp70zl_yiq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        let sum = get_max_sum(n / i);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum += get_max_sum(n / i);\n    }\n    return Math.max(sum, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n153.93601851851855\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpx4rh_rqs.js:15:12)\n    at Object.<anonymous> (/tmp/tmpx4rh_rqs.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 153.93601851851855,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(Math.floor(n / i)));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n115\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp65vas25l.js:18:12)\n    at Object.<anonymous> (/tmp/tmp65vas25l.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 115,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        let sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpth83tb0t.js:18:12)\n    at Object.<anonymous> (/tmp/tmpth83tb0t.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "12\n24\n36\n48\n60\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp9xt791ia.js:24:12)\n    at Object.<anonymous> (/tmp/tmp9xt791ia.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "12\n24\n36\n48\n60\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp9xt791ia.js:24:12)\n    at Object.<anonymous> (/tmp/tmp9xt791ia.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(\n        get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        let sum = get_max_sum(n / i);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpqka5gcg0.js:18:12)\n    at Object.<anonymous> (/tmp/tmpqka5gcg0.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = n;\n    let sum2 = get_max_sum(n / 2);\n    let sum3 = get_max_sum(n / 3);\n    let sum4 = get_max_sum(n / 4);\n    let sum5 = get_max_sum(n / 5);\n    sum = Math.max(sum, sum2 + sum3 + sum4 + sum5);\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    let max_sum = Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)), n);\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n\n    let a = get_max_sum(Math.floor(n / 2));\n    let b = get_max_sum(Math.floor(n / 3));\n    let c = get_max_sum(Math.floor(n / 4));\n    let d = get_max_sum(Math.floor(n / 5));\n\n    return Math.max(n, a + b + c + d);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum += get_max_sum(Math.floor(n / i));\n    }\n    return Math.max(sum, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let result = n;\n    let temp = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    if (temp > result) {\n        result = temp;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n  if (n <= 6) {\n    return n;\n  }\n  return Math.max(\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5)),\n    n\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n103\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmppyvvq4ur.js:17:12)\n    at Object.<anonymous> (/tmp/tmppyvvq4ur.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 103,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 2) {\n        return n;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n153.93601851851855\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7u8p709_.js:14:12)\n    at Object.<anonymous> (/tmp/tmp7u8p709_.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 153.93601851851855,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n <= 6) {\n        return n;\n    }\n    return Math.max(\n        get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.99722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpdzjy4c2u.js:14:12)\n    at Object.<anonymous> (/tmp/tmpdzjy4c2u.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.99722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  return Math.max(\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5)),\n    n\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    let max_sum = 0;\n    max_sum = Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n    return max_sum;\n}\n\nconsole.log(\"Maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) is: \" + get_max_sum(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 12) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n103.06666666666668\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpitsqyawc.js:14:12)\n    at Object.<anonymous> (/tmp/tmpitsqyawc.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 103.06666666666668,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    if (max_sum < n) {\n        return n;\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp0kcoj8h_.js:18:12)\n    at Object.<anonymous> (/tmp/tmp0kcoj8h_.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    return sum > n ? sum : n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp0w87tar6.js:15:12)\n    at Object.<anonymous> (/tmp/tmp0w87tar6.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    return Math.max(n, get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(\n        get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 6) {\n        return n;\n    }\n    let max = 0;\n    for (let i = 1; i <= 5; i++) {\n        max = Math.max(max, get_max_sum(n - i));\n    }\n    return max;\n}\n\nconsole.log(get_max_sum(10));\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(16));\nconsole.log(get_max_sum(20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "5\n5\n5\n5\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = 0;\n    let max = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max) {\n            max = sum;\n        }\n    }\n    return max + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpxni0cukk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpxni0cukk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    return Math.max(n, get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n68\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpg4b8no_9.js:11:12)\n    at Object.<anonymous> (/tmp/tmpg4b8no_9.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 68,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 12) {\n        return n;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n103.06666666666668\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp1ftijq62.js:14:12)\n    at Object.<anonymous> (/tmp/tmp1ftijq62.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 103.06666666666668,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 1; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n - i));\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    let sum = 0;\n    sum = Math.max(sum, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n    sum = Math.max(sum, n);\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123052,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n <= 5) {\n    return n;\n  }\n  let max_sum = 0;\n  for (let i = 2; i <= 5; i++) {\n    max_sum = Math.max(max_sum, get_max_sum(n / i));\n  }\n  return max_sum + n;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123037,
      "stdout": "21\n45\n67.5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpge5ueul2.js:21:12)\n    at Object.<anonymous> (/tmp/tmpge5ueul2.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        if (n % i === 0) {\n            max_sum = Math.max(max_sum, get_max_sum(n / i));\n        }\n    }\n    return max_sum;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\nconsole.log(get_max_sum(72));\nconsole.log(get_max_sum(84));\nconsole.log(get_max_sum(96));\nconsole.log(get_max_sum(108));\nconsole.log(get_max_sum(120));\nconsole.log(get_max_sum(132));\nconsole.log(get_max_sum(144));\nconsole.log(get_max_sum(156));\nconsole.log(get_max_sum(168));\nconsole.log(get_max_sum(180));\nconsole.log(get_max_sum(192));\nconsole.log(get_max_sum(204));\nconsole.log(get_max_sum(216));\nconsole.log(get_max_sum(228));\nconsole.log(get_max_sum(240));\nconsole.log(get_max_sum(252));\nconsole.log(get_max_sum(264));\nconsole.log(get_max_sum(276));\nconsole.log(get_max_sum(288));\nconsole.log(get_max_sum(300));\nconsole.log(get_max_sum(312));\nconsole.log(get_max_sum(324));\nconsole.log(get_max_sum(336));\nconsole.log(get_max_sum(348));\nconsole.log(get_max_sum(360));\nconsole.log(get_max_sum(372));\nconsole.log(get_max_sum(384));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123037,
      "stdout": "../../../../tmp/tmpr8dop213.ts(47,9): error TS1003: Identifier expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = sum + get_max_sum(Math.floor(n / i));\n    }\n    return Math.max(sum, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n  if (n < 2) {\n    return n;\n  }\n  let a = get_max_sum(n / 2);\n  let b = get_max_sum(n / 3);\n  let c = get_max_sum(n / 4);\n  let d = get_max_sum(n / 5);\n  let max = Math.max(a, b, c, d);\n  return max + n;\n}\n\nconsole.log(get_max_sum(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123038,
      "stdout": "22.5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n118.125\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpavo7bu4x.js:20:12)\n    at Object.<anonymous> (/tmp/tmpavo7bu4x.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 118.125,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n  if (n <= 5) {\n    return n;\n  }\n  return Math.max(\n    get_max_sum(n / 2) +\n      get_max_sum(n / 3) +\n      get_max_sum(n / 4) +\n      get_max_sum(n / 5),\n    n\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpnomjksu7.js:17:12)\n    at Object.<anonymous> (/tmp/tmpnomjksu7.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n <= 5) {\n    return n;\n  }\n  let max_sum = 0;\n  for (let i = 2; i <= 5; i++) {\n    max_sum = Math.max(max_sum, get_max_sum(n / i));\n  }\n  return max_sum + n;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123037,
      "stdout": "21\n45\n67.5\n93\n116.25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmplbccqh_y.js:23:12)\n    at Object.<anonymous> (/tmp/tmplbccqh_y.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    let sum = 0;\n    sum = Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)), n);\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpq2a3hn78.js:14:12)\n    at Object.<anonymous> (/tmp/tmpq2a3hn78.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    if (n == 6) {\n        return 6;\n    }\n    if (n == 7) {\n        return 7;\n    }\n    if (n == 8) {\n        return 8;\n    }\n    if (n == 9) {\n        return 9;\n    }\n    if (n == 10) {\n        return 10;\n    }\n    if (n == 11) {\n        return 11;\n    }\n    if (n == 12) {\n        return 12;\n    }\n    if (n == 13) {\n        return 13;\n    }\n    if (n == 14) {\n        return 14;\n    }\n    if (n == 15) {\n        return 15;\n    }\n    if (n == 16) {\n        return 16;\n    }\n    if (n == 17) {\n        return 17;\n    }\n    if (n == 18) {\n        return 18;\n    }\n    if (n == 19) {\n        return 19;\n    }\n    if (n == 20) {\n        return 20;\n    }\n    if (n == 21) {\n        return 21;\n    }\n    if (n == 22) {\n        return 22;\n    }\n    if (n == 23) {\n        return 23;\n    }\n    if (n == 24) {\n        return 24;\n    }\n    if (n == 25) {\n        return 25;\n    }\n    if (n == 26) {\n        return 26;\n    }\n    if (n == 27) {\n        return 27;\n    }\n    if (n == 28) {\n        return 28;\n    }\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123041,
      "stdout": "../../../../tmp/tmpuru3ax0r.ts(105,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpopzocxoi.js:14:12)\n    at Object.<anonymous> (/tmp/tmpopzocxoi.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 5) {\n    return n;\n  }\n  return Math.max(\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5)),\n    n\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    let sum = 0;\n    sum = Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n\n    let max_sum = n;\n    let sum = 0;\n\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n\n    return max_sum;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123041,
      "stdout": "12\n24\n36\n48\n60\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpt7_chd2s.js:24:12)\n    at Object.<anonymous> (/tmp/tmpt7_chd2s.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        let sum = get_max_sum(n / i);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    return sum > n ? sum : n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp0w87tar6.js:15:12)\n    at Object.<anonymous> (/tmp/tmp0w87tar6.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        if (n % i === 0) {\n            max_sum = Math.max(max_sum, get_max_sum(n / i));\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123044,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp1br9ywq3.js:17:12)\n    at Object.<anonymous> (/tmp/tmp1br9ywq3.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 12) {\n        return n;\n    }\n    return Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123045,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n68\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpphetumgi.js:11:12)\n    at Object.<anonymous> (/tmp/tmpphetumgi.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 68,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (max_sum < sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmprsjltv2t.js:19:12)\n    at Object.<anonymous> (/tmp/tmprsjltv2t.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(\n        get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5),\n        n\n    );\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\nconsole.log(get_max_sum(72));\nconsole.log(get_max_sum(84));\nconsole.log(get_max_sum(96));\nconsole.log(get_max_sum(108));\nconsole.log(get_max_sum(120));\nconsole.log(get_max_sum(132));\nconsole.log(get_max_sum(144));\nconsole.log(get_max_sum(156));\nconsole.log(get_max_sum(168));\nconsole.log(get_max_sum(180));\nconsole.log(get_max_sum(192));\nconsole.log(get_max_sum(204));\nconsole.log(get_max_sum(216));\nconsole.log(get_max_sum(228));\nconsole.log(get_max_sum(240));\nconsole.log(get_max_sum(252));\nconsole.log(get_max_sum(264));\nconsole.log(get_max_sum(276));\nconsole.log(get_max_sum(288));\nconsole.log(get_max_sum(300));\nconsole.log(get_max_sum(312));\nconsole.log(get_max_sum(324));\nconsole.log(get_max_sum(336));\nconsole.log(get_max_sum(348));\nconsole.log(get_max_sum(360));\nconsole.log(get_max_sum(372));\nconsole.log(get_max_sum(384));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123045,
      "stdout": "17.099999999999998\n39.86666666666666\n65.24\n93.59777777777776\n120.39722222222223\n152.97666666666666\n189.0836111111111\n220.62888888888887\n255.8575\n284.2861111111111\n329.7940555555556\n361.28644444444444\n400.2336481481481\n442.92085185185186\n474.5580555555556\n519.7952592592592\n566.7324629629629\n600.0696666666666\n637.7135370370371\n671.2774074074074\n738.8752777777779\n774.0598148148149\n815.0369444444445\n850.4733333333334\n885.9097222222222\n947.866111111111\n1002.969375\n1040.1163888888889\n1077.2634027777776\n1114.4104166666668\n1183.762986111111\n1226.3008888888887\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp4pe3zq8n.js:46:12)\n    at Object.<anonymous> (/tmp/tmp4pe3zq8n.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(n / i);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n\n    if (n == 0) {\n        return 0;\n    }\n\n    if (n == 1) {\n        return 1;\n    }\n\n    let sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    return Math.max(sum, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 1) {\n        return 0;\n    }\n    if (n < 2) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n128.14722222222224\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpnbeld77h.js:14:12)\n    at Object.<anonymous> (/tmp/tmpnbeld77h.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 128.14722222222224,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 2) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n153.93601851851855\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmppopwp_rl.js:14:12)\n    at Object.<anonymous> (/tmp/tmppopwp_rl.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 153.93601851851855,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\nconsole.log(get_max_sum(10));\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(16));\nconsole.log(get_max_sum(25));\nconsole.log(get_max_sum(30));\nconsole.log(get_max_sum(50));\nconsole.log(get_max_sum(100));\nconsole.log(get_max_sum(1000));\nconsole.log(get_max_sum(10000));\nconsole.log(get_max_sum(100000));\nconsole.log(get_max_sum(1000000));\nconsole.log(get_max_sum(10000000));\nconsole.log(get_max_sum(100000000));\nconsole.log(get_max_sum(1000000000));\nconsole.log(get_max_sum(10000000000));\nconsole.log(get_max_sum(100000000000));\nconsole.log(get_max_sum(1000000000000));\nconsole.log(get_max_sum(10000000000000));\nconsole.log(get_max_sum(100000000000000));\nconsole.log(get_max_sum(1000000000000000));\nconsole.log(get_max_sum(10000000000000000));\nconsole.log(get_max_sum(100000000000000000));\nconsole.log(get_max_sum(1000000000000000000));\nconsole.log(get_max_sum(10000000000000000000));\nconsole.log(get_max_sum(100000000000000000000));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "/tmp/tmpntonubqj.js:3\n    if (n < 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at get_max_sum (/tmp/tmpntonubqj.js:3:5)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n    at get_max_sum (/tmp/tmpntonubqj.js:21:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n  if (n < 5) {\n    return n;\n  }\n  return Math.max(\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5)),\n    n\n  );\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(123));\nconsole.log(get_max_sum(1234));\nconsole.log(get_max_sum(12345));\nconsole.log(get_max_sum(123456));\nconsole.log(get_max_sum(1234567));\nconsole.log(get_max_sum(12345678));\nconsole.log(get_max_sum(123456789));\nconsole.log(get_max_sum(1234567890));\nconsole.log(get_max_sum(12345678901));\nconsole.log(get_max_sum(123456789012));\nconsole.log(get_max_sum(1234567890123));\nconsole.log(get_max_sum(12345678901234));\nconsole.log(get_max_sum(123456789012345));\nconsole.log(get_max_sum(1234567890123456));\nconsole.log(get_max_sum(12345678901234567));\nconsole.log(get_max_sum(123456789012345678));\nconsole.log(get_max_sum(1234567890123456789));\nconsole.log(get_max_sum(12345678901234567890));\nconsole.log(get_max_sum(123456789012345678901));\nconsole.log(get_max_sum(1234567890123456789012));\nconsole.log(get_max_sum(12345678901234567890123));\nconsole.log(get_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123047,
      "stdout": "../../../../tmp/tmpuicnec1_.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpuicnec1_.ts(41,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) return 0;\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  if (n == 2) return 2;\n  if (n == 3) return 3;\n  if (n == 4) return 4;\n  if (n == 5) return 5;\n  return Math.max(\n    get_max_sum(n / 2) +\n      get_max_sum(n / 3) +\n      get_max_sum(n / 4) +\n      get_max_sum(n / 5),\n    n\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    let max_sum = 0;\n    let sum = 0;\n    sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    if (sum > n) {\n        max_sum = sum;\n    } else {\n        max_sum = n;\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(\n        get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf5poqu_s.js:14:12)\n    at Object.<anonymous> (/tmp/tmpf5poqu_s.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(\n        get_max_sum(Math.floor(n / 2)) +\n            get_max_sum(Math.floor(n / 3)) +\n            get_max_sum(Math.floor(n / 4)) +\n            get_max_sum(Math.floor(n / 5)),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(10));\nconsole.log(get_max_sum(6));\nconsole.log(get_max_sum(2));\nconsole.log(get_max_sum(1));\nconsole.log(get_max_sum(0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "12\n10\n6\n2\n1\n0\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp88zmqtfc.js:28:12)\n    at Object.<anonymous> (/tmp/tmp88zmqtfc.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let a = get_max_sum(Math.floor(n / 2));\n    let b = get_max_sum(Math.floor(n / 3));\n    let c = get_max_sum(Math.floor(n / 4));\n    let d = get_max_sum(Math.floor(n / 5));\n    let e = n;\n    return Math.max(a + b + c + d, e);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 2) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n153.93601851851855\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmppopwp_rl.js:14:12)\n    at Object.<anonymous> (/tmp/tmppopwp_rl.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 153.93601851851855,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    let sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    if (sum > n) {\n        return sum;\n    }\n    return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n < 0) {\n    return 0;\n  }\n  if (n <= 5) {\n    return n;\n  }\n  return Math.max(\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5)),\n    n\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 1; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n - i));\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n <= 5) {\n    return n;\n  }\n  return Math.max(\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5)),\n    n\n  );\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(123));\nconsole.log(get_max_sum(1234));\nconsole.log(get_max_sum(12345));\nconsole.log(get_max_sum(123456));\nconsole.log(get_max_sum(1234567));\nconsole.log(get_max_sum(12345678));\nconsole.log(get_max_sum(123456789));\nconsole.log(get_max_sum(1234567890));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123064,
      "stdout": "16\n251\n4247\n72639\n1230555\n20802448\n355772737\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 12) {\n        return n;\n    }\n    return Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)), n);\n}\n\nconsole.log(get_max_sum(10));\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(13));\nconsole.log(get_max_sum(15));\nconsole.log(get_max_sum(20));\nconsole.log(get_max_sum(25));\nconsole.log(get_max_sum(30));\nconsole.log(get_max_sum(35));\nconsole.log(get_max_sum(40));\nconsole.log(get_max_sum(45));\nconsole.log(get_max_sum(50));\nconsole.log(get_max_sum(55));\nconsole.log(get_max_sum(60));\nconsole.log(get_max_sum(65));\nconsole.log(get_max_sum(70));\nconsole.log(get_max_sum(75));\nconsole.log(get_max_sum(80));\nconsole.log(get_max_sum(85));\nconsole.log(get_max_sum(90));\nconsole.log(get_max_sum(95));\nconsole.log(get_max_sum(100));\nconsole.log(get_max_sum(105));\nconsole.log(get_max_sum(110));\nconsole.log(get_max_sum(115));\nconsole.log(get_max_sum(120));\nconsole.log(get_max_sum(125));\nconsole.log(get_max_sum(130));\nconsole.log(get_max_sum(135));\nconsole.log(get_max_sum(140));\nconsole.log(get_max_sum(145));\nconsole.log(get_max_sum(150));\nconsole.log(get_max_sum(155));\nconsole.log(get_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123050,
      "stdout": "../../../../tmp/tmpq_jpepf9.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpq_jpepf9.ts(42,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let sum = n;\n    let sum1 = get_max_sum(Math.floor(n / 2));\n    let sum2 = get_max_sum(Math.floor(n / 3));\n    let sum3 = get_max_sum(Math.floor(n / 4));\n    let sum4 = get_max_sum(Math.floor(n / 5));\n    if (sum1 + sum2 + sum3 + sum4 > sum) {\n        sum = sum1 + sum2 + sum3 + sum4;\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 2) {\n        return n;\n    }\n    let sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    return Math.max(sum, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n153.93601851851855\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpli3fv7hp.js:15:12)\n    at Object.<anonymous> (/tmp/tmpli3fv7hp.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 153.93601851851855,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    let sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    if (sum > n) {\n        return sum;\n    }\n    return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 1; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / (i + 1)));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp8nxh4qmr.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8nxh4qmr.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(\n        get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum += get_max_sum(n / i);\n    }\n    return Math.max(sum, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp8n7a8lj4.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8n7a8lj4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    let sum = 0;\n    let sum1 = get_max_sum(n / 2);\n    let sum2 = get_max_sum(n / 3);\n    let sum3 = get_max_sum(n / 4);\n    let sum4 = get_max_sum(n / 5);\n    sum = Math.max(sum1 + sum2 + sum3 + sum4, n);\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n\n    if (n == 0) {\n        return 0;\n    }\n\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    return max_sum > n ? max_sum : n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123053,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpleob8dm3.js:15:12)\n    at Object.<anonymous> (/tmp/tmpleob8dm3.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 1; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n - i));\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123052,
      "stdout": "",
      "stderr": "/tmp/tmpdfmrf1bj.js:3\n    if (n < 0) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:3:5)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n    at get_max_sum (/tmp/tmpdfmrf1bj.js:9:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = Math.max(sum, get_max_sum(n / i));\n    }\n    return sum;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\nconsole.log(get_max_sum(72));\nconsole.log(get_max_sum(84));\nconsole.log(get_max_sum(96));\nconsole.log(get_max_sum(108));\nconsole.log(get_max_sum(120));\nconsole.log(get_max_sum(132));\nconsole.log(get_max_sum(144));\nconsole.log(get_max_sum(156));\nconsole.log(get_max_sum(168));\nconsole.log(get_max_sum(180));\nconsole.log(get_max_sum(192));\nconsole.log(get_max_sum(204));\nconsole.log(get_max_sum(216));\nconsole.log(get_max_sum(228));\nconsole.log(get_max_sum(240));\nconsole.log(get_max_sum(252));\nconsole.log(get_max_sum(264));\nconsole.log(get_max_sum(276));\nconsole.log(get_max_sum(288));\nconsole.log(get_max_sum(300));\nconsole.log(get_max_sum(312));\nconsole.log(get_max_sum(324));\nconsole.log(get_max_sum(336));\nconsole.log(get_max_sum(348));\nconsole.log(get_max_sum(360));\nconsole.log(get_max_sum(372));\nconsole.log(get_max_sum(384));\nconsole.log(get_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123052,
      "stdout": "../../../../tmp/tmph8kqoduw.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmph8kqoduw.ts(49,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n <= 0) return 0;\n  if (n <= 5) return n;\n  let max = 0;\n  for (let i = 2; i <= 5; i++) {\n    max = Math.max(max, get_max_sum(n / i));\n  }\n  return max + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123053,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpehe0wupx.js:16:12)\n    at Object.<anonymous> (/tmp/tmpehe0wupx.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123053,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n127.48055555555557\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpwcemz97k.js:11:12)\n    at Object.<anonymous> (/tmp/tmpwcemz97k.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 127.48055555555557,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(\n        get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123048,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(123));\nconsole.log(get_max_sum(1234));\nconsole.log(get_max_sum(12345));\nconsole.log(get_max_sum(123456));\nconsole.log(get_max_sum(1234567));\nconsole.log(get_max_sum(12345678));\nconsole.log(get_max_sum(123456789));\nconsole.log(get_max_sum(1234567890));\nconsole.log(get_max_sum(12345678901));\nconsole.log(get_max_sum(123456789012));\nconsole.log(get_max_sum(1234567890123));\nconsole.log(get_max_sum(12345678901234));\nconsole.log(get_max_sum(123456789012345));\nconsole.log(get_max_sum(1234567890123456));\nconsole.log(get_max_sum(12345678901234567));\nconsole.log(get_max_sum(123456789012345678));\nconsole.log(get_max_sum(1234567890123456789));\nconsole.log(get_max_sum(12345678901234567890));\nconsole.log(get_max_sum(123456789012345678901));\nconsole.log(get_max_sum(1234567890123456789012));\nconsole.log(get_max_sum(12345678901234567890123));\nconsole.log(get_max_sum(123456789012345678901234));\nconsole.log(get_max_sum(12345\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123052,
      "stdout": "../../../../tmp/tmprv93ehfa.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmprv93ehfa.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    let max_sum = n;\n    for (let i = 2; i <= 5; i++) {\n        if (n % i === 0) {\n            max_sum = Math.max(max_sum, get_max_sum(n / i));\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123044,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp1br9ywq3.js:17:12)\n    at Object.<anonymous> (/tmp/tmp1br9ywq3.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123043,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n === 3) {\n        return 3;\n    }\n    if (n === 4) {\n        return 4;\n    }\n    if (n === 5) {\n        return 5;\n    }\n    return Math.max(\n        get_max_sum(Math.floor(n / 2)) +\n            get_max_sum(Math.floor(n / 3)) +\n            get_max_sum(Math.floor(n / 4)) +\n            get_max_sum(Math.floor(n / 5)),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let result = n;\n    let temp = 0;\n    if (n > 5) {\n        temp = get_max_sum(n / 5);\n        if (temp > result) {\n            result = temp;\n        }\n    }\n    if (n > 4) {\n        temp = get_max_sum(n / 4);\n        if (temp > result) {\n            result = temp;\n        }\n    }\n    if (n > 3) {\n        temp = get_max_sum(n / 3);\n        if (temp > result) {\n            result = temp;\n        }\n    }\n    if (n > 2) {\n        temp = get_max_sum(n / 2);\n        if (temp > result) {\n            result = temp;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpukk601oa.js:37:12)\n    at Object.<anonymous> (/tmp/tmpukk601oa.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n <= 6) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp44jf0c2c.js:18:12)\n    at Object.<anonymous> (/tmp/tmp44jf0c2c.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(Math.floor(n / i)));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n115\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp65vas25l.js:18:12)\n    at Object.<anonymous> (/tmp/tmp65vas25l.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 115,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(\n        get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return Math.max(n, get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let temp_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        temp_sum = get_max_sum(Math.floor(n / i));\n        if (temp_sum > max_sum) {\n            max_sum = temp_sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpqnqnhuf6.js:19:12)\n    at Object.<anonymous> (/tmp/tmpqnqnhuf6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let result = n;\n    let temp = get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5));\n    if (temp > result) {\n        result = temp;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(n, get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 12) {\n        return n;\n    }\n    return Math.max(get_max_sum(Math.floor(n / 2)) + get_max_sum(Math.floor(n / 3)) + get_max_sum(Math.floor(n / 4)) + get_max_sum(Math.floor(n / 5)), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n99\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpwo4wjrln.js:11:12)\n    at Object.<anonymous> (/tmp/tmpwo4wjrln.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 99,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 3;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    if (n == 5) {\n        return 5;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517394,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 2) {\n        return n;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(n / i);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\nconsole.log(get_max_sum(12));\nconsole.log(get_max_sum(24));\nconsole.log(get_max_sum(36));\nconsole.log(get_max_sum(48));\nconsole.log(get_max_sum(60));\nconsole.log(get_max_sum(72));\nconsole.log(get_max_sum(84));\nconsole.log(get_max_sum(96));\nconsole.log(get_max_sum(108));\nconsole.log(get_max_sum(120));\nconsole.log(get_max_sum(132));\nconsole.log(get_max_sum(144));\nconsole.log(get_max_sum(156));\nconsole.log(get_max_sum(168));\nconsole.log(get_max_sum(180));\nconsole.log(get_max_sum(192));\nconsole.log(get_max_sum(204));\nconsole.log(get_max_sum(216));\nconsole.log(get_max_sum(228));\nconsole.log(get_max_sum(240));\nconsole.log(get_max_sum(252));\nconsole.log(get_max_sum(264));\nconsole.log(get_max_sum(276));\nconsole.log(get_max_sum(288));\nconsole.log(get_max_sum(300));\nconsole.log(get_max_sum(312));\nconsole.log(get_max_sum(324));\nconsole.log(get_max_sum(336));\nconsole.log(get_max_sum(348));\nconsole.log(get_max_sum(360));\nconsole.log(get_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "../../../../tmp/tmppb9oj2y0.ts(51,1): error TS1005: ',' expected.\n../../../../tmp/tmppb9oj2y0.ts(51,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    let sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    return Math.max(sum, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123071,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n <= 5) {\n    return n;\n  }\n  return Math.max(\n    get_max_sum(Math.floor(n / 2)) +\n      get_max_sum(Math.floor(n / 3)) +\n      get_max_sum(Math.floor(n / 4)) +\n      get_max_sum(Math.floor(n / 5)),\n    n\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let max_sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        max_sum = Math.max(max_sum, get_max_sum(n / i));\n    }\n    return max_sum + n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n116.25\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpf33lvo_d.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf33lvo_d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 116.25,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 2; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / i));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1665517379,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp7obto9q1.js:19:12)\n    at Object.<anonymous> (/tmp/tmp7obto9q1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    let sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5);\n    return sum > n ? sum : n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp0w87tar6.js:15:12)\n    at Object.<anonymous> (/tmp/tmp0w87tar6.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    let max_sum = n;\n    let sum = 0;\n    for (let i = 1; i <= 5; i++) {\n        sum = get_max_sum(Math.floor(n / (i + 1)));\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123052,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n60\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp8nxh4qmr.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8nxh4qmr.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 60,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 12) {\n        return n;\n    }\n    return Math.max(\n        get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5),\n        n\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n103.06666666666668\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpgbb39uat.js:14:12)\n    at Object.<anonymous> (/tmp/tmpgbb39uat.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 103.06666666666668,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 5) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n120.39722222222223\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmp3erlba56.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3erlba56.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 120.39722222222223,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum(n: number): number {\n    if (n < 0) {\n        return 0;\n    }\n    if (n < 12) {\n        return n;\n    }\n    return Math.max(get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_sum;\n  assert.deepEqual(candidate(60),106);\n  assert.deepEqual(candidate(10),12);\n  assert.deepEqual(candidate(2),2);\n}\n\ntest();",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n103.06666666666668\n\nshould loosely deep-equal\n\n106\n    at test (/tmp/tmpitsqyawc.js:14:12)\n    at Object.<anonymous> (/tmp/tmpitsqyawc.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 103.06666666666668,\n  expected: 106,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}