{
  "name": "mbpp_245_max_sum",
  "language": "ts",
  "prompt": "//Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum(arr: number[]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sum;\n  assert.deepEqual(candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]),194);\n  assert.deepEqual(candidate([80, 60, 30, 40, 20, 10]),210);\n  assert.deepEqual(candidate([2, 3, 14, 16, 21, 23, 29, 30]),138);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let max_sum = 0;\n    let max_sum_left = [];\n    let max_sum_right = [];\n    let max_sum_left_temp = 0;\n    let max_sum_right_temp = 0;\n    for (let i = 0; i < arr.length; i++) {\n        max_sum_left_temp = Math.max(max_sum_left_temp + arr[i], arr[i]);\n        max_sum_left[i] = max_sum_left_temp;\n    }\n    for (let i = arr.length - 1; i >= 0; i--) {\n        max_sum_right_temp = Math.max(max_sum_right_temp + arr[i], arr[i]);\n        max_sum_right[i] = max_sum_right_temp;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max_sum = Math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_sum_left = [];\n    let max_sum_right = [];\n    let max_sum_left_temp = 0;\n    let max_sum_right_temp = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n        max_sum_left_temp = Math.max(max_sum_left_temp + arr[i], arr[i]);\n        max_sum_left[i] = max_sum_left_temp;\n    }\n\n    for (let i = arr.length - 1; i >= 0; i--) {\n        max_sum_right_temp = Math.max(max_sum_right_temp + arr[i], arr[i]);\n        max_sum_right[i] = max_sum_right_temp;\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        max_sum = Math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n\n    return max_sum;\n}\n\nconsole.log(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]));\nconsole.log(max_sum([80, 60, 30, 40, 20, 10]));\n",
    "    let max_sum = 0;\n    let max_sum_left = [];\n    let max_sum_right = [];\n\n    // max sum from left to right\n    for (let i = 0; i < arr.length; i++) {\n        max_sum_left[i] = arr[i];\n        for (let j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                max_sum_left[i] = Math.max(max_sum_left[i], max_sum_left[j] + arr[i]);\n            }\n        }\n    }\n\n    // max sum from right to left\n    for (let i = arr.length - 1; i >= 0; i--) {\n        max_sum_right[i] = arr[i];\n        for (let j = arr.length - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                max_sum_right[i] = Math.max(max_sum_right[i], max_sum_right[j] + arr[i]);\n            }\n        }\n    }\n\n    // max sum of bitonic subsequence\n    for (let i = 0; i < arr.length; i++) {\n        max_sum = Math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n\n    return max_sum;\n}\n",
    "  let max_sum_arr: number[] = [];\n  let max_sum: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max_sum_arr[i] = arr[i];\n    for (let j = 0; j < i; j++) {\n      if (arr[j] < arr[i]) {\n        max_sum_arr[i] = Math.max(max_sum_arr[i], max_sum_arr[j] + arr[i]);\n      }\n    }\n    max_sum = Math.max(max_sum, max_sum_arr[i]);\n  }\n  return max_sum;\n}\n",
    "    let max_sum_so_far = 0;\n    let max_sum_ending_here = 0;\n    for (let i = 0; i < arr.length; i++) {\n        max_sum_ending_here = Math.max(max_sum_ending_here + arr[i], 0);\n        max_sum_so_far = Math.max(max_sum_so_far, max_sum_ending_here);\n    }\n    return max_sum_so_far;\n}\n",
    "    let max_sum = 0;\n    let max_sum_left = new Array(arr.length);\n    let max_sum_right = new Array(arr.length);\n    max_sum_left[0] = arr[0];\n    max_sum_right[arr.length - 1] = arr[arr.length - 1];\n    for (let i = 1; i < arr.length; i++) {\n        max_sum_left[i] = Math.max(max_sum_left[i - 1] + arr[i], arr[i]);\n    }\n    for (let i = arr.length - 2; i >= 0; i--) {\n        max_sum_right[i] = Math.max(max_sum_right[i + 1] + arr[i], arr[i]);\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max_sum = Math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_sum_left = new Array(arr.length).fill(0);\n    let max_sum_right = new Array(arr.length).fill(0);\n\n    max_sum_left[0] = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        max_sum_left[i] = Math.max(max_sum_left[i - 1] + arr[i], arr[i]);\n    }\n\n    max_sum_right[arr.length - 1] = arr[arr.length - 1];\n    for (let i = arr.length - 2; i >= 0; i--) {\n        max_sum_right[i] = Math.max(max_sum_right[i + 1] + arr[i], arr[i]);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        max_sum = Math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n\n    return max_sum;\n}\n",
    "    let max_sum_arr: number[] = new Array(arr.length);\n    let max_sum_rev_arr: number[] = new Array(arr.length);\n    let max_sum: number = 0;\n    max_sum_arr[0] = arr[0];\n    max_sum_rev_arr[arr.length - 1] = arr[arr.length - 1];\n    for (let i = 1; i < arr.length; i++) {\n        max_sum_arr[i] = Math.max(max_sum_arr[i - 1] + arr[i], arr[i]);\n    }\n    for (let i = arr.length - 2; i >= 0; i--) {\n        max_sum_rev_arr[i] = Math.max(max_sum_rev_arr[i + 1] + arr[i], arr[i]);\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max_sum = Math.max(max_sum, max_sum_arr[i] + max_sum_rev_arr[i] - arr[i]);\n    }\n    return max_sum;\n}\n",
    "    let n = arr.length;\n    let inc = new Array(n);\n    let dec = new Array(n);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (let i = 1; i < n; i++) {\n        inc[i] = Math.max(inc[i - 1], arr[i]);\n    }\n    for (let i = n - 2; i >= 0; i--) {\n        dec[i] = Math.max(dec[i + 1], arr[i]);\n    }\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        max = Math.max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\n",
    "    let max_sum = 0;\n    let max_sum_so_far = 0;\n    let max_sum_ending_here = 0;\n    let max_sum_ending_here_so_far = 0;\n    let max_sum_ending_here_so_far_index = 0;\n    let max_sum_ending_here_index = 0;\n    let max_sum_ending_here_index_so_far = 0;\n    let max_sum_ending_here_index_so_far_index = 0;\n    let max_sum_ending_here_index_so_far_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_sum_ending_here_index_so_far_index_index_index_",
    "  let max_ending_here = 0;\n  let max_so_far = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max_ending_here = Math.max(arr[i], max_ending_here + arr[i]);\n    max_so_far = Math.max(max_so_far, max_ending_here);\n  }\n  return max_so_far;\n}\n",
    "    let max_sum = 0;\n    let max_sum_left = new Array(arr.length);\n    let max_sum_right = new Array(arr.length);\n    let max_sum_left_right = new Array(arr.length);\n\n    max_sum_left[0] = arr[0];\n    max_sum_right[arr.length - 1] = arr[arr.length - 1];\n    max_sum_left_right[0] = arr[0];\n    max_sum_left_right[arr.length - 1] = arr[arr.length - 1];\n\n    for (let i = 1; i < arr.length; i++) {\n        max_sum_left[i] = Math.max(arr[i], max_sum_left[i - 1] + arr[i]);\n    }\n\n    for (let i = arr.length - 2; i >= 0; i--) {\n        max_sum_right[i] = Math.max(arr[i], max_sum_right[i + 1] + arr[i]);\n    }\n\n    for (let i = 1; i < arr.length - 1; i++) {\n        max_sum_left_right[i] = Math.max(max_sum_left[i - 1] + max_sum_right[i + 1], max_sum_left_right[i - 1]);\n    }\n\n    return max_sum_left_right[arr.length - 2];\n}\n",
    "    let max = 0;\n    let max_sum = 0;\n    let max_sum_arr = [];\n    let max_sum_arr_rev = [];\n    let max_sum_arr_rev_rev = [];\n    let max_sum_arr_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [];\n    let max_sum_arr_rev",
    "    let max_sum = 0;\n    let max_sum_left = [];\n    let max_sum_right = [];\n    let max_sum_left_temp = 0;\n    let max_sum_right_temp = 0;\n    for (let i = 0; i < arr.length; i++) {\n        max_sum_left_temp = Math.max(max_sum_left_temp + arr[i], arr[i]);\n        max_sum_left[i] = max_sum_left_temp;\n    }\n    for (let i = arr.length - 1; i >= 0; i--) {\n        max_sum_right_temp = Math.max(max_sum_right_temp + arr[i], arr[i]);\n        max_sum_right[i] = max_sum_right_temp;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max_sum = Math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n    return max_sum;\n}\n",
    "  let max_sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = i; j < arr.length; j++) {\n      sum += arr[j];\n      if (sum > max_sum) {\n        max_sum = sum;\n      }\n    }\n  }\n  return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_sum_start = 0;\n    let max_sum_end = 0;\n    let sum = 0;\n    let sum_start = 0;\n    let sum_end = 0;\n    let increasing = true;\n    for (let i = 0; i < arr.length; i++) {\n        if (increasing) {\n            if (arr[i] > arr[i + 1]) {\n                increasing = false;\n                sum_end = i;\n            }\n        } else {\n            if (arr[i] < arr[i + 1]) {\n                increasing = true;\n                sum = sum + arr[i];\n                if (sum > max_sum) {\n                    max_sum = sum;\n                    max_sum_start = sum_start;\n                    max_sum_end = sum_end;\n                }\n                sum_start = i;\n                sum_end = i;\n                sum = 0;\n            }\n        }\n        sum = sum + arr[i];\n    }\n    return max_sum;\n}\n",
    "    let n = arr.length;\n    let max_sum = 0;\n    let max_sum_left = [];\n    let max_sum_right = [];\n    max_sum_left[0] = arr[0];\n    max_sum_right[n - 1] = arr[n - 1];\n    for (let i = 1; i < n; i++) {\n        max_sum_left[i] = Math.max(arr[i], max_sum_left[i - 1] + arr[i]);\n    }\n    for (let i = n - 2; i >= 0; i--) {\n        max_sum_right[i] = Math.max(arr[i], max_sum_right[i + 1] + arr[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        max_sum = Math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i]);\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_sum_arr = [];\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0;\n        let sum_arr = [];\n        for (let j = i; j < arr.length; j++) {\n            if (arr[j] > arr[j - 1]) {\n                sum += arr[j];\n                sum_arr.push(arr[j]);\n            } else {\n                break;\n            }\n        }\n        for (let j = i - 1; j >= 0; j--) {\n            if (arr[j] > arr[j + 1]) {\n                sum += arr[j];\n                sum_arr.push(arr[j]);\n            } else {\n                break;\n            }\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n            max_sum_arr = sum_arr;\n        }\n    }\n    console.log(max_sum_arr);\n    return max_sum;\n}\n\nconsole.log(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]));\n",
    "    let n = arr.length;\n    let inc = new Array(n).fill(0);\n    let dec = new Array(n).fill(0);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (let i = 1; i < n; i++) {\n        inc[i] = Math.max(inc[i - 1] + arr[i], arr[i]);\n    }\n    for (let i = n - 2; i >= 0; i--) {\n        dec[i] = Math.max(dec[i + 1] + arr[i], arr[i]);\n    }\n    let max = -Infinity;\n    for (let i = 0; i < n; i++) {\n        max = Math.max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\n",
    "    let n = arr.length;\n    let inc = new Array(n).fill(0);\n    let dec = new Array(n).fill(0);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (let i = 1; i < n; i++) {\n        inc[i] = Math.max(inc[i - 1] + arr[i], arr[i]);\n    }\n    for (let i = n - 2; i >= 0; i--) {\n        dec[i] = Math.max(dec[i + 1] + arr[i], arr[i]);\n    }\n    let max = inc[0] + dec[0] - arr[0];\n    for (let i = 1; i < n; i++) {\n        max = Math.max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\n"
  ]
}