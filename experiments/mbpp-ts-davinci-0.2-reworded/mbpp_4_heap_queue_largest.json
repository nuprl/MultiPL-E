{
  "name": "mbpp_4_heap_queue_largest",
  "language": "ts",
  "prompt": "//Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunction heap_queue_largest(nums: number[], n: number): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_queue_largest;\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "  let heap = new Heap<number>();\n  for (let num of nums) {\n    heap.push(num);\n    if (heap.size() > n) {\n      heap.pop();\n    }\n  }\n  return heap.toArray();\n}\n",
    "  let heap = new Heap(nums, (a, b) => b - a);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n",
    "    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    const heap = new Heap([], null, ((a, b) => b - a));\n    for (let i = 0; i < nums.length; i++) {\n        heap.push(nums[i]);\n    }\n    const topNums = [];\n    for (let i = 0; i < n; i++) {\n        topNums.push(heap.pop());\n    }\n    return topNums;\n}\n",
    "    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n",
    "    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n",
    "    let heap = new Heap(nums, (a, b) => a < b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap<number>((a, b) => b - a);\n    for (let num of nums) {\n        heap.push(num);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "  let heap = new Heap(nums, true);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n",
    "    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n",
    "    let heap = new Heap(nums, (a, b) => b - a);\n    let res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(heap.pop());\n    }\n    return res;\n}\n",
    "    let heap = new Heap<number>((a, b) => a - b);\n    for (let num of nums) {\n        heap.push(num);\n        if (heap.size() > n) {\n            heap.pop();\n        }\n    }\n    let result = [];\n    while (!heap.empty()) {\n        result.push(heap.pop());\n    }\n    return result.reverse();\n}\n",
    "    let heap = new Heap();\n    for (let i = 0; i < nums.length; i++) {\n        heap.insert(nums[i]);\n    }\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(nums, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(nums);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap<number>();\n    for (let i = 0; i < n; i++) {\n        heap.push(nums[i]);\n    }\n    for (let i = n; i < nums.length; i++) {\n        if (heap.peek() < nums[i]) {\n            heap.pop();\n            heap.push(nums[i]);\n        }\n    }\n    let result = [];\n    while (!heap.isEmpty()) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap<number>(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(nums, (a, b) => b - a);\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n"
  ]
}