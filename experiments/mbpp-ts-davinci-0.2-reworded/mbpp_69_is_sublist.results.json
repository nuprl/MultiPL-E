{
  "name": "mbpp_69_is_sublist",
  "language": "ts",
  "prompt": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[j]) {\n            j++;\n            if (j === s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "../../../../tmp/tmp0s57lng6.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5],\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "../../../../tmp/tmp9ejxiyjp.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "../../../../tmp/tmp8iu0pmuk.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp8iu0pmuk.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length === 0 && s.length > 0) {\n        sublist = false;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\nlet l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet s = [2, 3, 4, 5];\nconsole.log(is_sublist(l, s));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "../../../../tmp/tmpq7oqklys.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpq7oqklys.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            let j = 0;\n            let k = i;\n            while (j < s.length && k < l.length) {\n                if (l[k] === s[j]) {\n                    sublist = true;\n                    j++;\n                    k++;\n                } else {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "../../../../tmp/tmpgcbzu0qc.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpgcbzu0qc.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    var j = 0;\n    var i = 0;\n    if (slen > llen) {\n        return false;\n    }\n    while (i < llen && j < slen) {\n        if (l[i] === s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j === slen;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "../../../../tmp/tmp8mu9ztq0.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[j]) {\n            j++;\n            if (j === s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "../../../../tmp/tmp8yzm_l26.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp8yzm_l26.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n  let sublist = false;\n  let i = 0;\n  let j = 0;\n  while (i < l.length && j < s.length) {\n    if (l[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (j === s.length) {\n    sublist = true;\n  }\n  return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmpjrg7tfss.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                let k = i;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[k] == s[j]) {\n                        sublist = true;\n                        k++;\n                    }\n                    else {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "../../../../tmp/tmppc_hr2wf.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmpiffq_vcz.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                let j = 0;\n                while (j < s.length && l[i + j] === s[j]) {\n                    j++;\n                }\n                if (j === s.length) {\n                    sublist = true;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "true\ntrue\nfalse\ntrue\nfalse\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmpnki2zw0c.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpnki2zw0c.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmpvoxjuf4l.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmpd19bn270.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpd19bn270.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 4, 3]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "false\ntrue\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublistStartIndex = 0;\n    let isSublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublistStartIndex = i;\n            isSublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[sublistStartIndex] !== s[j]) {\n                    isSublist = false;\n                    break;\n                }\n                sublistStartIndex++;\n            }\n        }\n        if (isSublist) {\n            break;\n        }\n    }\n    return isSublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 3]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sub\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmprl74t801.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmprl74t801.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "../../../../tmp/tmp7x_nk7dn.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp7x_nk7dn.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    } else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmpflov1i58.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmphmb9n2zk.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmphmb9n2zk.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmpcx653s2j.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmpv2jmb3ex.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpv2jmb3ex.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let is_sublist: boolean = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            is_sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n        }\n        if (is_sublist) {\n            break;\n        }\n    }\n    return is_sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmp9xangf13.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp9xangf13.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "../../../../tmp/tmpfual5i3e.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                    }\n                }\n                if (sublist) {\n                    return sublist;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [2, 3, 1]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [1, 2, 3, 2, 3, 1]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3, 2, 3, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = true;\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "../../../../tmp/tmpdjc3o3zm.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let is_sublist: boolean = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            let j = 0;\n            while (j < s.length && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.length) {\n                is_sublist = true;\n            }\n        }\n    }\n    return is_sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "../../../../tmp/tmpjfsdrur_.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpjfsdrur_.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "../../../../tmp/tmpbstshwq3.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpbstshwq3.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "../../../../tmp/tmp1wggj36g.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmplqgki6qm.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    if (slen > llen) {\n        return false;\n    }\n    for (var i = 0; i < llen - slen + 1; i++) {\n        if (l[i] == s[0]) {\n            var j = 1;\n            while (j < slen && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == slen) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 1; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "true\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        if (j == s.length) {\n            sublist = true;\n            break;\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5],\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "../../../../tmp/tmpfg9sy_xy.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sub\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmp15chptwi.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp15chptwi.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = true;\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 4, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7, 8,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmp9vztn_hu.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "../../../../tmp/tmp4z_ohqxd.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp4z_ohqxd.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length <= l.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123245,
      "stdout": "../../../../tmp/tmp2rq6atux.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmpxiipblhm.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n  let sublist = false;\n  let j = 0;\n  if (s.length === 0) {\n    sublist = true;\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === s[j]) {\n      j++;\n      if (j === s.length) {\n        sublist = true;\n        break;\n      }\n    } else {\n      j = 0;\n    }\n  }\n  return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmpi9mc5j76.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpi9mc5j76.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    if (slen > llen) {\n        return false;\n    }\n    for (var i = 0; i < llen - slen + 1; i++) {\n        var j = 0;\n        while (j < slen && l[i + j] === s[j]) {\n            j++;\n        }\n        if (j === slen) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmpol11p_rz.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpol11p_rz.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmp5xipjxp6.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmp_h5g9xa2.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n                if (sublist) {\n                    break;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123246,
      "stdout": "../../../../tmp/tmpgjgg30qt.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpgjgg30qt.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[j]) {\n            j++;\n            if (j === s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpo94uslm3.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpo94uslm3.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpq2sluan1.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    if (slen > llen) {\n        return false;\n    }\n    for (var i = 0; i < llen; i++) {\n        if (l[i] === s[0]) {\n            var j = 1;\n            while (j < slen && l[i + j] === s[j]) {\n                j++;\n            }\n            if (j === slen) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [5, 4, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpluu9cfvv.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let is_sublist: boolean = false;\n    for (let i: number = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            for (let j: number = 0; j < s.length; j++) {\n                if (l[i + j] == s[j]) {\n                    is_sublist = true;\n                }\n                else {\n                    is_sublist = false;\n                    break;\n                }\n            }\n        }\n    }\n    return is_sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpiwfudzbw.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let is_sublist: boolean = false;\n    let j: number = 0;\n    if (s.length > l.length) {\n        return is_sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == s.length) {\n            is_sublist = true;\n            break;\n        }\n    }\n    return is_sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpx8jl62tb.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpcm8brp_5.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2, 3, 1]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 3, 1]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 1]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 1]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], []));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [4, 5]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7, 8]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9, 10, 11, 12,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpuy3xdzxp.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpkel2j29z.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpkel2j29z.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] == s[j]) {\n                    sublist = true;\n                } else {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length < 1) {\n        sublist = false;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmpcm8brp_5.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "../../../../tmp/tmp5wawj1e9.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == s.length) {\n            sublist = true;\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "../../../../tmp/tmpdg0kxe9l.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n  var i: number, j: number;\n  for (i = 0; i < l.length; i++) {\n    for (j = 0; j < s.length; j++) {\n      if (l[i + j] !== s[j]) {\n        break;\n      }\n    }\n    if (j === s.length) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "../../../../tmp/tmperpyzpxr.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmperpyzpxr.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123249,
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123250,
      "stdout": "../../../../tmp/tmpbco3bcj3.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpbco3bcj3.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123250,
      "stdout": "../../../../tmp/tmp57ryqtmw.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    } else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123250,
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length === 0) {\n        sublist = false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    break;\n                }\n                if (j === s.length - 1) {\n                    sublist = true;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2, 3, 1]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 4, 3]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 1, 2, 3, 5, 7]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 1, 2, 3, 5, 7, 2, 4, 3, 5, 7]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 1, 2, 4, 2, 3, 5, 7]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [2, 4, 3]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [7]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [7, 5]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [5, 7, 2]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], []));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123250,
      "stdout": "../../../../tmp/tmpnmaw778g.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpnmaw778g.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n        return sublist;\n    }\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmp7wa33edz.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp7wa33edz.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmpnl7aebjl.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpnl7aebjl.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmphs7vft8t.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                let j = 0;\n                while (j < s.length && l[i + j] === s[j]) {\n                    j++;\n                }\n                if (j === s.length) {\n                    sublist = true;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                    }\n                }\n                if (sublist) {\n                    return sublist;\n                }\n            }\n        }\n        return sublist;\n    }\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmpsonduw47.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                    }\n                }\n                if (sublist) {\n                    return sublist;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmpxd7zmtnq.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmpv69qjdwx.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        if (j == s.length) {\n            sublist = true;\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 5]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 6]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmp27egv22l.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmp5x46bkyk.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123252,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    var i = 0;\n    var j = 0;\n    while (i < llen && j < slen) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == slen) {\n        return true;\n    }\n    return false;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(is_sublist([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmpd57j0oqt.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpd57j0oqt.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmp1bqlij_e.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp1bqlij_e.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublistStartIndex = 0;\n    let sublistEndIndex = s.length - 1;\n    let listStartIndex = 0;\n    let listEndIndex = l.length - 1;\n    let sublistIndex = 0;\n    let listIndex = 0;\n\n    if (s.length > l.length) {\n        return false;\n    }\n\n    while (sublistStartIndex <= sublistEndIndex && listStartIndex <= listEndIndex) {\n        if (l[listIndex] == s[sublistIndex]) {\n            sublistIndex++;\n            listIndex++;\n        } else {\n            sublistIndex = 0;\n            listIndex = ++listStartIndex;\n        }\n    }\n\n    if (sublistIndex > sublistEndIndex) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [4, 5]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [5, 6, 7]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [3, 4, 5]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [4, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123266,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmphm3adqy7.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmphm3adqy7.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = true;\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 3]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 3, 1]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2, 3, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123252,
      "stdout": "false\nfalse\nfalse\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp71t34q0h.js:29:12)\n    at Object.<anonymous> (/tmp/tmp71t34q0h.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2, 3, 1]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 4, 3]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 1, 2, 3, 5, 7]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 1, 2, 3, 5, 7, 8]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 1, 2, 3, 5, 7, 8, 9]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], []));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123252,
      "stdout": "false\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length > s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123253,
      "stdout": "../../../../tmp/tmpa3fqiuru.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpa3fqiuru.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "../../../../tmp/tmphm3adqy7.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmphm3adqy7.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123253,
      "stdout": "../../../../tmp/tmpg9ta0p22.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpg9ta0p22.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sub\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123253,
      "stdout": "../../../../tmp/tmpvoyrchn0.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpvoyrchn0.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123253,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123253,
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [7, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [5, 6]));\nconsole.log(is_sublist([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123253,
      "stdout": "../../../../tmp/tmp6g5fhbg6.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "../../../../tmp/tmphaz1w_nn.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "../../../../tmp/tmphq4jhslt.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmphq4jhslt.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "../../../../tmp/tmpnzfku2et.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpnzfku2et.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                let k = i;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[k] == s[j]) {\n                        k++;\n                        sublist = true;\n                    }\n                    else {\n                        sublist = false;\n                        break;\n                    }\n                }\n                if (sublist == true) {\n                    break;\n                }\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "../../../../tmp/tmpa9g0fn63.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpa9g0fn63.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        if (j == s.length) {\n            sublist = true;\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "true\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "../../../../tmp/tmprq8p4p5k.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length > s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] == s[j]) {\n                        sublist = true;\n                    } else {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        }\n        else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "true\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "../../../../tmp/tmp43xmm9vm.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp43xmm9vm.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length === 0) {\n        sublist = false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    for (var i = 0; i < llen - slen + 1; i++) {\n        var j = 0;\n        while (j < slen && l[i + j] == s[j]) {\n            j++;\n        }\n        if (j == slen) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 4, 6]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5], [1, 2, 3, 5]));\nconsole.log(is_sublist([1, 1, 2, 3, 4, 5],\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "../../../../tmp/tmpvwld1x88.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "true\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [2, 3, 1]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [2, 3, 1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [4, 1, 2, 3, 1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [4, 1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2, 3], [1, 2, 3, 4, 1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "../../../../tmp/tmp5db8rx_n.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp5db8rx_n.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "../../../../tmp/tmpj7l7h4i7.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6, 7]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6, 7, 8]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([2, 3, 4, 5, 6], [4, 3, 2, 5, 6, 7, 8, 9, 10, 11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "../../../../tmp/tmp8eol5m1n.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp8eol5m1n.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[j]) {\n            j++;\n            if (j === s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "../../../../tmp/tmpv3jkvthg.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpv3jkvthg.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[j]) {\n            j++;\n            if (j === s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "../../../../tmp/tmp3amcbd7w.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp3amcbd7w.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "../../../../tmp/tmp64y7_kc6.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp64y7_kc6.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2, 3, 1]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 4, 3]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 1, 2, 3, 5, 7]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 1, 2, 3, 4, 5, 7]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 2, 3, 4, 5, 7]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [2, 3, 4]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [2, 4]));\nconsole.log(is_sublist([1, 1, 2, 4, 3, 5, 7], [1, 2, 3, 4, 3, 5, 7]));\nconsole.log(is_sublist([1, 1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "../../../../tmp/tmpoqn7vs_8.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (l.length < s.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123256,
      "stdout": "../../../../tmp/tmpvelkny53.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "../../../../tmp/tmplbp8wxrn.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmplbp8wxrn.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(is_sublist([1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "../../../../tmp/tmpenfnug5s.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpenfnug5s.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n            if (j == s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "../../../../tmp/tmpsevok_n2.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpsevok_n2.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    } else {\n        for (var i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                sublist = true;\n                for (var j = 0; j < s.length; j++) {\n                    if (l[i + j] != s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[j]) {\n            j++;\n            if (j === s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sub\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "../../../../tmp/tmp3szywjyd.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp3szywjyd.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123257,
      "stdout": "../../../../tmp/tmpbhowdl_i.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpbhowdl_i.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "true\ntrue\nfalse\nfalse\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 2, 4]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 3]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 2, 3, 1]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], [1, 1, 1, 2, 3, 1]));\nconsole.log(is_sublist([1, 1, 2, 3, 1], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "false\nfalse\nfalse\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    for (var i = 0; i < llen; i++) {\n        if (l[i] == s[0]) {\n            var j = 1;\n            while (j < slen && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == slen) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "true\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[j]) {\n            j++;\n            if (j === s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_sublist([1, 2, 3, 4, 5, 6, 7], [3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123258,
      "stdout": "../../../../tmp/tmps4c66q25.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[j]) {\n                j++;\n                if (j === s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let is_sublist: boolean = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            is_sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n        }\n    }\n    return is_sublist;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet sublist: number[] = [2, 3, 4];\nlet sublist2: number[] = [2, 4];\nconsole.log(is_sublist(list, sublist));\nconsole.log(is_sublist(list, sublist2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    for (var i = 0; i < llen; i++) {\n        if (l[i] === s[0]) {\n            var j = 1;\n            while (j < slen && l[i + j] === s[j]) {\n                j++;\n            }\n            if (j === slen) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            }\n            else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "../../../../tmp/tmp_isf2xks.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                let j = 0;\n                for (j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        break;\n                    }\n                }\n                if (j === s.length) {\n                    sublist = true;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "../../../../tmp/tmpa0x_r_yd.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpa0x_r_yd.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == s.length) {\n            sublist = true;\n            break;\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                        break;\n                    }\n                }\n            }\n            if (sublist) {\n                break;\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "../../../../tmp/tmp8gf8vj1g.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp8gf8vj1g.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                let j = 0;\n                while (j < s.length && l[i + j] === s[j]) {\n                    j++;\n                }\n                if (j === s.length) {\n                    sublist = true;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n  let sublist = false;\n  if (l.length < s.length) {\n    return sublist;\n  } else {\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] === s[0]) {\n        sublist = true;\n        for (let j = 0; j < s.length; j++) {\n          if (l[i + j] !== s[j]) {\n            sublist = false;\n          }\n        }\n      }\n    }\n  }\n  return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "../../../../tmp/tmpkalf8jef.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sub\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123243,
      "stdout": "../../../../tmp/tmprl74t801.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmprl74t801.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[0]) {\n                let k = i;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[k] != s[j]) {\n                        break;\n                    }\n                    k++;\n                    if (j == s.length - 1) {\n                        sublist = true;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var slen = s.length;\n    var llen = l.length;\n    if (slen > llen) {\n        return false;\n    }\n    for (var i = 0; i < llen; i++) {\n        if (l[i] === s[0]) {\n            var j = 1;\n            while (j < slen && l[i + j] === s[j]) {\n                j++;\n            }\n            if (j === slen) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "../../../../tmp/tmpy81i3kx8.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length > l.length) {\n        return sublist;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123259,
      "stdout": "../../../../tmp/tmpuvkh_1za.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4, 5, 6, 7, 8, 9, 10, 11, 12,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "../../../../tmp/tmppvajo3cm.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length < s.length) {\n        sublist = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let is_sublist = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[0]) {\n            is_sublist = true;\n            for (let j = 0; j < s.length; j++) {\n                if (l[i + j] !== s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) {\n                break;\n            }\n        }\n    }\n    return is_sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                let j = 0;\n                while (j < s.length && l[i + j] === s[j]) {\n                    j++;\n                }\n                if (j === s.length) {\n                    sublist = true;\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === s[j]) {\n            j++;\n            if (j === s.length) {\n                sublist = true;\n                break;\n            }\n        } else {\n            j = 0;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    if (s.length === 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                sublist = true;\n                for (let j = 0; j < s.length; j++) {\n                    if (l[i + j] !== s[j]) {\n                        sublist = false;\n                    }\n                }\n            }\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "../../../../tmp/tmp7abwndof.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp7abwndof.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    var sublist = false;\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] == s[0]) {\n            sublist = true;\n            for (var j = 0; j < s.length; j++) {\n                if (l[i + j] != s[j]) {\n                    sublist = false;\n                    break;\n                }\n            }\n        }\n        if (sublist) {\n            break;\n        }\n    }\n    return sublist;\n}\n\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [4, 5]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [4, 6]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [1, 2, 3]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [7]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [2, 4, 3, 5, 6, 7]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "../../../../tmp/tmpyj109hy7.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check whether an array contains the given subarray or not.\nfunction is_sublist(l: number[], s: number[]): boolean {\n    let sublist = false;\n    let j = 0;\n    if (s.length == 0) {\n        sublist = true;\n    }\n    if (l.length >= s.length) {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] == s[j]) {\n                j++;\n                if (j == s.length) {\n                    sublist = true;\n                    break;\n                }\n            } else {\n                j = 0;\n            }\n        }\n    }\n    return sublist;\n}\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], []));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sublist;\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);\n  assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);\n}\n\ntest();",
      "timestamp": 1666123261,
      "stdout": "../../../../tmp/tmpjf1vpvp8.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}