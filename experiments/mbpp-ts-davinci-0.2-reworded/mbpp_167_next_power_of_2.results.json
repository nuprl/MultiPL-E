{
  "name": "mbpp_167_next_power_of_2",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(262144));\nconsole.log(next_power_of_2(524288));\nconsole.log(next_power_of_2(1048576));\nconsole.log(next_power_of_2(2097152));\nconsole.log(next_power_of_2(4194304));\nconsole.log(next_power_of_2(8388608));\nconsole.log(next_power_of_2(16777216));\nconsole.log(next_power_of_2(33554432));\nconsole.log(next_power_of_2(67108864));\nconsole.log(next_power_of_2(134217728));\nconsole.log(next_power_of_2(268435456));\nconsole.log(next_power_of_2(536870912));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "../../../../tmp/tmpsypq3lsb.ts(42,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(256));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n256\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(262144));\nconsole.log(next_power_of_2(524288));\nconsole.log(next_power_of_2(1048576));\nconsole.log(next_power_of_2(2097152));\nconsole.log(next_power_of_2(4194304));\nconsole.log(next_power_of_2(8388608));\nconsole.log(next_power_of_2(16777216));\nconsole.log(next_power_of_2(33554432));\nconsole.log(next_power_of_2(67108864));\nconsole.log(next_power_of_2(134217728));\nconsole.log(next_power_of_2(268435456));\nconsole.log(next_power_of_2(536870912));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "../../../../tmp/tmpsypq3lsb.ts(42,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n\n    // First n in the below condition\n    // is for the case where n is 0\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(218));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n256\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n\n    // First n in the below condition\n    // is for the case where n is 0\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(262144));\nconsole.log(next_power_of_2(524288));\nconsole.log(next_power_of_2(1048576));\nconsole.log(next_power_of_2(2097152));\nconsole.log(next_power_of_2(4194304));\nconsole.log(next_power_of_2(8388608));\nconsole.log(next_power_of_2(16777216));\nconsole.log(next_power_of_2(33554432));\nconsole.log(next_power_of_2(67108864));\nconsole.log(next_power_of_2(134217728));\nconsole.log(next_power_of_2(268435456));\nconsole.log(next_power_of_2(536870912));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "../../../../tmp/tmpsypq3lsb.ts(42,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(24));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let p = 1;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    var count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(5));\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(64));\nconsole.log(next_power_of_2(128));\nconsole.log(next_power_of_2(256));\nconsole.log(next_power_of_2(512));\nconsole.log(next_power_of_2(1024));\nconsole.log(next_power_of_2(2048));\nconsole.log(next_power_of_2(4096));\nconsole.log(next_power_of_2(8192));\nconsole.log(next_power_of_2(16384));\nconsole.log(next_power_of_2(32768));\nconsole.log(next_power_of_2(65536));\nconsole.log(next_power_of_2(131072));\nconsole.log(next_power_of_2(262144));\nconsole.log(next_power_of_2(524288));\nconsole.log(next_power_of_2(1048576));\nconsole.log(next_power_of_2(2097152));\nconsole.log(next_power_of_2(4194304));\nconsole.log(next_power_of_2(8388608));\nconsole.log(next_power_of_2(16777216));\nconsole.log(next_power_of_2(33554432));\nconsole.log(next_power_of_2(67108864));\nconsole.log(next_power_of_2(134217728));\nconsole.log(next_power_of_2(268435456));\nconsole.log(next_power_of_2(536870912));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "../../../../tmp/tmpsypq3lsb.ts(42,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n\n    // First n in the below condition \n    // is for the case where n is 0 \n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n  let count = 0;\n\n  // First n in the below condition\n  // is for the case where n is 0\n  if (n && !(n & (n - 1)))\n    return n;\n\n  while (n != 0) {\n    n >>= 1;\n    count += 1;\n  }\n\n  return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(17));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(19));\nconsole.log(next_power_of_2(20));\nconsole.log(next_power_of_2(21));\nconsole.log(next_power_of_2(22));\nconsole.log(next_power_of_2(23));\nconsole.log(next_power_of_2(24));\nconsole.log(next_power_of_2(25));\nconsole.log(next_power_of_2(26));\nconsole.log(next_power_of_2(27));\nconsole.log(next_power_of_2(28));\nconsole.log(next_power_of_2(29));\nconsole.log(next_power_of_2(30));\nconsole.log(next_power_of_2(31));\nconsole.log(next_power_of_2(32));\nconsole.log(next_power_of_2(33));\nconsole.log(next_power_of_2(34));\nconsole.log(next_power_of_2(35));\nconsole.log(next_power_of_2(36));\nconsole.log(next_power_of_2(37));\nconsole.log(next_power_of_2(38));\nconsole.log(next_power_of_2(39));\nconsole.log(next_power_of_2(40));\nconsole.log(next_power_of_2(41));\nconsole.log(next_power_of_2(42));\nconsole.log(next_power_of_2(43));\nconsole.log(next_power_of_2(44));\nconsole.log(next_power_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "../../../../tmp/tmp7ya0oo14.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmp7ya0oo14.ts(44,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(20));\nconsole.log(next_power_of_2(22));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(32));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n32\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(256));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "16\n32\n256\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\nconsole.log(next_power_of_2(16));\nconsole.log(next_power_of_2(18));\nconsole.log(next_power_of_2(256));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "16\n32\n256\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2(n: number): number {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_power_of_2;\n  assert.deepEqual(candidate(0),1);\n  assert.deepEqual(candidate(5),8);\n  assert.deepEqual(candidate(17),32);\n}\n\ntest();",
      "timestamp": 1665517477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}