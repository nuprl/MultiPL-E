{
  "name": "mbpp_129_magic_square_test",
  "language": "ts",
  "prompt": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            return false;\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row) {\n            return false;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n",
    "    let sum_diagonal_1 = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row !== sum_diagonal_1 || sum_column !== sum_diagonal_1) {\n            return false;\n        }\n    }\n    if (sum_diagonal_1 !== sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n",
    "    let sum_of_first_row: number = 0;\n    let sum_of_first_col: number = 0;\n    let sum_of_second_row: number = 0;\n    let sum_of_second_col: number = 0;\n    let sum_of_third_row: number = 0;\n    let sum_of_third_col: number = 0;\n    let sum_of_diagonal1: number = 0;\n    let sum_of_diagonal2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i == 0) {\n                sum_of_first_row += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_of_second_row += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum_of_third_row += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_of_first_col += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_of_second_col += my_matrix[i][j];\n            }\n            if (j == 2) {\n                sum_of_third_col += my_matrix[i][j];\n            }\n            if (i == j) {\n                sum_of_diagonal1 += my_matrix[i][j];\n            }\n            if (i + j == 2) {\n                sum_of_diagonal2 += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum_of_first_row == sum_of_second_row && sum_of_second_row == sum_of_third_row && sum_of_first_col == sum_of_second_col && sum_of_second_col == sum_of_third_col && sum_of_diagonal1 == sum_of_diagonal2) {\n        return",
    "    let sum_of_row: number[] = [];\n    let sum_of_col: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number = 0;\n    let ddd: number = 0;\n    let eee: number = 0;",
    "    let sum_of_first_row: number = 0;\n    let sum_of_first_column: number = 0;\n    let sum_of_second_column: number = 0;\n    let sum_of_second_row: number = 0;\n    let sum_of_third_column: number = 0;\n    let sum_of_third_row: number = 0;\n    let sum_of_fourth_column: number = 0;\n    let sum_of_fourth_row: number = 0;\n    let sum_of_fifth_column: number = 0;\n    let sum_of_fifth_row: number = 0;\n    let sum_of_sixth_column: number = 0;\n    let sum_of_sixth_row: number = 0;\n    let sum_of_seventh_column: number = 0;\n    let sum_of_seventh_row: number = 0;\n    let sum_of_eighth_column: number = 0;\n    let sum_of_eighth_row: number = 0;\n    let sum_of_ninth_column: number = 0;\n    let sum_of_ninth_row: number = 0;\n    let sum_of_first_diagonal: number = 0;\n    let sum_of_second_diagonal: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let magic_square: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_of_first_row",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n            sum_of_all_elements_in_row += my_matrix[i][j];\n            sum_of_all_elements_in_column += my_matrix[j][i];\n            if (i == j) {\n                sum_of_all_elements_in_diagonal += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_all_elements_in_diagonal_2 += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_all_elements_in_row);\n        sum_of_columns.push(sum_of_all_elements_in_column);\n        sum_of_all_elements_in_row = 0;\n        sum_of_all_elements_in_column = 0;\n    }\n    sum_of_diagonals.push(sum_of_all_elements_in_diagonal);\n    sum_of_diagonals.push(sum_of_all_elements_in_diagonal_2);\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[",
    "    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            return false;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diagonal || sum !== sum_reverse_diagonal) {\n        return false;\n    }\n    return true;\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = false;\n\n    //Calculate the sum of each row\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    //Calculate the sum of each column\n    for (let i: number = 0; i < my_matrix[0].length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    //Calculate the sum of each diagonal\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    //Check if the sum of each row, column and diagonal are equal\n    if (sum_of_rows.every(x => x === sum_of_rows[0]) && sum_of_columns.every(x => x === sum_of_columns[0]) && sum_of_diagonals.every(x => x === sum_of_diagonals[0])) {\n        is_magic_square = true;\n    }\n\n    return is_magic_square;\n}\n",
    "    let sum: number = 0;\n    let diag1: number = 0;\n    let diag2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let row: number = 0;\n        let col: number = 0;\n        diag1 += my_matrix[i][i];\n        diag2 += my_matrix[i][my_matrix.length - i - 1];\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            row += my_matrix[i][j];\n            col += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = row;\n        }\n        if (sum !== row || sum !== col) {\n            return false;\n        }\n    }\n    if (sum !== diag1 || sum !== diag2) {\n        return false;\n    }\n    return true;\n}\n",
    "    let sum_of_rows = 0;\n    let sum_of_cols = 0;\n    let sum_of_diagonals = 0;\n    let sum_of_diagonals2 = 0;\n    let sum_of_all = 0;\n    let sum_of_all2 = 0;\n    let sum_of_all3 = 0;\n    let sum_of_all4 = 0;\n    let sum_of_all5 = 0;\n    let sum_of_all6 = 0;\n    let sum_of_all7 = 0;\n    let sum_of_all8 = 0;\n    let sum_of_all9 = 0;\n    let sum_of_all10 = 0;\n    let sum_of_all11 = 0;\n    let sum_of_all12 = 0;\n    let sum_of_all13 = 0;\n    let sum_of_all14 = 0;\n    let sum_of_all15 = 0;\n    let sum_of_all16 = 0;\n    let sum_of_all17 = 0;\n    let sum_of_all18 = 0;\n    let sum_of_all19 = 0;\n    let sum_of_all20 = 0;\n    let sum_of_all21 = 0;\n    let sum_of_all22 = 0;\n    let sum_of_all23 = 0;\n    let sum_of_all24 = 0;\n    let sum_of_all25 = 0;\n    let sum_of_all26 = 0;\n    let sum_of_all27 = 0;\n    let sum_of_all28 = 0;\n    let sum_of_all29 = 0;\n    let sum_of_all30 = 0;\n    let sum_of_all31 = 0;\n    let sum_of_all32 = 0;\n    let sum_of_all33 = 0;\n    let sum_of_all34 = 0;\n    let sum_of_all35 = 0;\n    let sum_of_all36 = 0;\n    let sum_of_all37 = 0;\n    let sum_of_all38 = 0;\n    let sum_of_",
    "    let sum: number = 0;\n    let sum_diagonal1: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n    //calculate sum of first row\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row += my_matrix[0][i];\n    }\n    //calculate sum of first column\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_column += my_matrix[i][0];\n    }\n    //calculate sum of diagonal1\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal1 += my_matrix[i][i];\n    }\n    //calculate sum of diagonal2\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    //check if all sums are equal\n    if (sum_row != sum_column || sum_row != sum_diagonal1 || sum_row != sum_diagonal2) {\n        is_magic_square = false;\n    }\n    //check if all rows are equal\n    for (let i: number = 1; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n        }\n        if (sum != sum_row) {\n            is_magic_square = false;\n        }\n    }\n    //check if all columns are equal\n    for (let i: number = 1; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] != sum_of_rows[i + 1]) {\n            is_magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length - 1; i++) {\n        if (sum_of_columns[i] != sum_of_columns[i + 1]) {\n            is_magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < sum_",
    "    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_diag = sum_row;\n            sum_diag2 = sum_col;\n        }\n        if (sum_row != sum_diag || sum_col != sum_diag2) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_first_diagonal: number = 0;\n    let sum_of_second_diagonal: number = 0;\n    let sum_of_first_row: number = 0;\n    let sum_of_second_row: number = 0;\n    let sum_of_third_row: number = 0;\n    let sum_of_first_column: number = 0;\n    let sum_of_second_column: number = 0;\n    let sum_of_third_column: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_first_diagonal += my_matrix[i][i];\n            sum_of_second_diagonal += my_matrix[i][my_matrix.length - i - 1];\n            sum_of_first_row += my_matrix[0][j];\n            sum_of_second_row += my_matrix[1][j];\n            sum_of_third_row += my_matrix[2][j];\n            sum_of_first_column += my_matrix[j][0];\n            sum_of_second_column += my_matrix[j][1];\n            sum_of_third_column += my_matrix[j][2];\n        }\n    }\n    sum_of_rows.push(sum_of_first_row, sum_of_second_row, sum_of_third_row);\n    sum_of_columns.push(sum_of_first_column, sum_of_second_column, sum_of_third_column);\n    sum_of_diagonals.push(sum_of_first_diagonal, sum_of_second_diagonal);\n\n    for (let i: number = 0; i < sum_of_rows.length; i++)",
    "    let sum_of_first_row = 0;\n    let sum_of_first_column = 0;\n    let sum_of_second_row = 0;\n    let sum_of_second_column = 0;\n    let sum_of_third_row = 0;\n    let sum_of_third_column = 0;\n    let sum_of_first_diagonal = 0;\n    let sum_of_second_diagonal = 0;\n    let sum_of_all_rows = 0;\n    let sum_of_all_columns = 0;\n    let sum_of_all_diagonals = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_first_row += my_matrix[0][i];\n        sum_of_first_column += my_matrix[i][0];\n        sum_of_second_row += my_matrix[1][i];\n        sum_of_second_column += my_matrix[i][1];\n        sum_of_third_row += my_matrix[2][i];\n        sum_of_third_column += my_matrix[i][2];\n        sum_of_first_diagonal += my_matrix[i][i];\n        sum_of_second_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_all_rows = sum_of_first_row + sum_of_second_row + sum_of_third_row;\n    sum_of_all_columns = sum_of_first_column + sum_of_second_column + sum_of_third_column;\n    sum_of_all_diagonals = sum_of_first_diagonal + sum_of_second_diagonal;\n\n    if (sum_of_all_rows === sum_of_all_columns && sum_of_all_rows === sum_of_all_diagonals) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            is_magic_square = false;\n            break;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diagonal_1 || sum !== sum_diagonal_2) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n",
    "    let sum: number = 0;\n    let sum2: number = 0;\n    let sum3: number = 0;\n    let sum4: number = 0;\n    let sum5: number = 0;\n    let sum6: number = 0;\n    let sum7: number = 0;\n    let sum8: number = 0;\n    let sum9: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            sum2 += my_matrix[j][i];\n            if (i == j) {\n                sum3 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum4 += my_matrix[i][j];\n            }\n            if (i == 0) {\n                sum5 += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum6 += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum7 += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum8 += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum9 += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum == sum2 && sum == sum3 && sum == sum4 && sum == sum5 && sum == sum6 && sum == sum7 && sum == sum8 && sum == sum9) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            magic_square = false;\n            break;\n        }\n        sum_all += sum_row;\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        magic_square = false;\n    }\n    if (sum_all != sum_diagonal_1 * my_matrix.length) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n",
    "    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_rev_diag: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_cols: number = 0;\n    let sum_of_all_diag: number = 0;\n    let sum_of_all_rev_diag: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_cols[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[i] += my_matrix[j][i];\n        }\n        sum_of_all_rows += sum_of_rows[i];\n        sum_of_all_cols += sum_of_cols[i];\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diag[i] = 0;\n        sum_of_rev_diag[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i === j) {\n                sum_of_diag[i] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_rev_diag[i] += my_matrix[i][j];\n            }\n        }\n        sum_of_all_diag += sum_of_diag[i];\n        sum_of_all_rev_diag += sum_of_rev_diag[i];\n    }\n\n    if (sum_of_all_rows === sum_of_all_cols && sum_of_",
    "    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_diagonals_reverse: number[] = [];\n    let sum_of_all: number;\n    let sum_of_all_reverse: number;\n    let sum_of_all_diagonals: number;\n    let sum_of_all_diagonals_reverse: number;\n    let sum_of_all_rows: number;\n    let sum_of_all_columns: number;\n    let sum_of_all_columns_reverse: number;\n    let sum_of_all_rows_reverse: number;\n    let sum_of_all_columns_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_column"
  ]
}