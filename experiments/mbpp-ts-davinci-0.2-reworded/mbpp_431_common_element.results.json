{
  "name": "mbpp_431_common_element",
  "language": "ts",
  "prompt": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n        return common;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n                break;\n            }\n        }\n    }\n    return common;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3], [1, 2, 4]));\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    if (list1.length === 0 || list2.length === 0) {\n        return undefined;\n    }\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpvxi4jstr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpvxi4jstr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common_element: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common_element = true;\n            }\n        }\n    }\n    return common_element;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [4, 5, 3]));\nconsole.log(common_element([1, 2, 3], [4, 5, 6, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let found: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                found = true;\n                break;\n            }\n        }\n    }\n    return found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp_jkdmlpg.js:18:12)\n    at Object.<anonymous> (/tmp/tmp_jkdmlpg.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n                return common;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    if (list1.length > 0 && list2.length > 0) {\n        for (let i = 0; i < list1.length; i++) {\n            for (let j = 0; j < list2.length; j++) {\n                if (list1[i] === list2[j]) {\n                    return true;\n                }\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp6pry2v0m.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6pry2v0m.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [2, 3, 4]));\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "undefined\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp6h3h5455.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6h3h5455.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] == list2[j]) {\n        result = true;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3], [2, 3, 4]));\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] == list2[j]) {\n        return true;\n      }\n    }\n  }\n}\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpkkph54x3.js:20:12)\n    at Object.<anonymous> (/tmp/tmpkkph54x3.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123763,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp6h3h5455.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6h3h5455.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510572,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two arrays and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510571,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}